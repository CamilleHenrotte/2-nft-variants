{"id":"4cd827e2564d113f156a9a1398cd53a2","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"},"@openzeppelin/contracts/token/common/ERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/BitMaps.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"},"contracts/NFT1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.27;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {ERC2981} from \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title NFT1\n * @dev An ERC721 contract with added functionality for minting, discounts using Merkle proofs, and royalties (ERC2981).\n *      Includes features like time-limited discounts, withdrawal of funds, and token transfers with royalty payments.\n *      Based on OpenZeppelin's ERC721, Ownable2Step, and ERC2981 standards.\n */\ncontract NFT1 is ERC721, Ownable2Step, ERC2981 {\n    uint256 public constant MAX_SUPPLY = 1000;\n    uint96 public constant ROYALTY_FEE_NUMERATOR = 250; // 2.5% royalty fee\n    uint256 public constant MINTING_PRICE = 0.1 ether;\n    uint256 public constant DISCOUNTED_MINTING_PRICE = 0.05 ether;\n\n    uint256 public tokenIdCounter;\n    bytes32 public immutable merkleRoot; // Root of Merkle tree used for airdrop verification\n\n    string private baseTokenURI;\n    BitMaps.BitMap private airdropList;\n\n    // Events\n    event FundsWithdrawn(address indexed owner, uint256 amount);\n    event Minted(address indexed nftOwner);\n\n    /**\n     * @notice Constructor that initializes the NFT1 contract.\n     * @param baseURI The base URI for token metadata.\n     * @param merkleRoot_ The Merkle root used for airdrop/discount verification.\n     */\n    constructor(string memory baseURI, bytes32 merkleRoot_) ERC721(\"NFT1\", \"NFT1\") {\n        baseTokenURI = baseURI;\n        merkleRoot = merkleRoot_;\n        tokenIdCounter = 0;\n        _setDefaultRoyalty(msg.sender, ROYALTY_FEE_NUMERATOR); // Setting the default royalty fee to the deployer\n    }\n\n    /**\n     * @notice Withdraw all the funds from the contract to the owner's address.\n     * @dev Only callable by the owner of the contract. Emits a FundsWithdrawn event.\n     */\n    function withdrawFunds() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > 0, \"no funds to withdraw\");\n        (bool success, ) = payable(msg.sender).call{value: contractBalance}(\"\");\n        require(success, \"fund transfer failed\");\n        emit FundsWithdrawn(msg.sender, contractBalance);\n    }\n\n    /**\n     * @notice Transfer an NFT along with royalty payment to the rightful receiver.\n     * @param from The address sending the NFT.\n     * @param to The address receiving the NFT.\n     * @param tokenId The ID of the token being transferred.\n     * @param salesPrice The sale price of the NFT.\n     * @dev Ensures that the royalty payment is made before the transfer.\n     */\n    function transferFromWithRoyalties(address from, address to, uint256 tokenId, uint256 salesPrice) external payable {\n        (, uint256 royaltyAmount) = royaltyInfo(tokenId, salesPrice);\n        require(msg.value >= royaltyAmount, \"Insufficient royalty amount\");\n        transferFrom(from, to, tokenId); // Perform the actual token transfer\n\n        uint256 excess = msg.value - royaltyAmount;\n        if (excess > 0) {\n            (bool refundSuccess, ) = msg.sender.call{value: excess}(\"\"); // Refund excess ETH to sender\n            require(refundSuccess, \"Refund failed\");\n        }\n    }\n\n    /**\n     * @notice Set a custom royalty for a specific token.\n     * @param tokenId The ID of the token.\n     * @param receiver The address that should receive the royalty.\n     * @param feeNumerator The royalty percentage, represented as a numerator out of 10,000.\n     */\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    /**\n     * @notice Mint a new NFT.\n     * @dev Requires sending 0.1 ETH. Only mints if the supply limit hasn't been reached.\n     */\n    function mint() public payable {\n        require(msg.value == MINTING_PRICE, \"wrong amount, send 0.1 ETH\");\n        _mint();\n    }\n\n    /**\n     * @notice Mint an NFT with a discount using a valid Merkle proof.\n     * @param proof The Merkle proof of eligibility for the discount.\n     * @param index The index in the Merkle tree.\n     * @param amount The number of tokens to mint.\n     * @dev Requires sending 0.05 ETH for the discounted mint price.\n     */\n    function mintWithDiscount(bytes32[] calldata proof, uint256 index, uint256 amount) public payable {\n        require(msg.value == DISCOUNTED_MINTING_PRICE, \"wrong amount, send 0.05 ETH\");\n        require(!BitMaps.get(airdropList, index), \"Discount already claimed\");\n        _verifyProof(proof, index, amount, msg.sender);\n        BitMaps.setTo(airdropList, index, true);\n        for (uint256 i = 0; i < amount; i++) {\n            _mint();\n        }\n    }\n\n    /**\n     * @notice Set a new base URI for the token metadata.\n     * @param baseURI The new base URI.\n     */\n    function setBaseURI(string memory baseURI) public onlyOwner {\n        baseTokenURI = baseURI;\n    }\n\n    /**\n     * @dev Returns the base URI for token metadata.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseTokenURI;\n    }\n\n    /**\n     * @notice Get the total number of minted tokens.\n     * @return The total supply of tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        return tokenIdCounter;\n    }\n\n    /**\n     * @notice Override to include support for ERC2981 interface.\n     * @param interfaceId The interface identifier.\n     * @return Whether the contract supports the specified interface.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Internal function to update ownership and royalty receiver when transferring ownership.\n     * @param newOwner The new owner of the contract.\n     */\n    function _transferOwnership(address newOwner) internal override {\n        super._transferOwnership(newOwner);\n        _setDefaultRoyalty(newOwner, ROYALTY_FEE_NUMERATOR); // Update default royalty receiver to new owner\n    }\n\n    /**\n     * @dev Verify the Merkle proof for an address, index, and amount.\n     * @param proof The Merkle proof.\n     * @param index The index of the leaf in the Merkle tree.\n     * @param amount The amount of tokens associated with the proof.\n     * @param addr The address being verified.\n     */\n    function _verifyProof(bytes32[] memory proof, uint256 index, uint256 amount, address addr) private view {\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(addr, index, amount))));\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \"Invalid proof\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Emits a Minted event when successful.\n     */\n    function _mint() internal {\n        require(tokenIdCounter < MAX_SUPPLY, \"the supply limit of 1000 is reached\");\n        uint256 tokenId = tokenIdCounter;\n        tokenIdCounter += 1;\n        _safeMint(msg.sender, tokenId);\n        emit Minted(msg.sender);\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1852],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1853,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1852],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1875:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[],"usedEvents":[13]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/access/Ownable2Step.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable2Step.sol","exportedSymbols":{"Context":[1852],"Ownable":[112],"Ownable2Step":[195]},"id":196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"./Ownable.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":196,"sourceUnit":113,"src":"132:23:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":117,"name":"Ownable","nameLocations":["633:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"633:7:1"},"id":118,"nodeType":"InheritanceSpecifier","src":"633:7:1"}],"canonicalName":"Ownable2Step","contractDependencies":[],"contractKind":"contract","documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"157:441:1","text":" @dev Contract module which provides access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership} and {acceptOwnership}.\n This module is used through inheritance. It will make available all functions\n from parent (Ownable)."},"fullyImplemented":true,"id":195,"linearizedBaseContracts":[195,112,1852],"name":"Ownable2Step","nameLocation":"617:12:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":120,"mutability":"mutable","name":"_pendingOwner","nameLocation":"663:13:1","nodeType":"VariableDeclaration","scope":195,"src":"647:29:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"647:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700","id":126,"name":"OwnershipTransferStarted","nameLocation":"689:24:1","nodeType":"EventDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"730:13:1","nodeType":"VariableDeclaration","scope":126,"src":"714:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"761:8:1","nodeType":"VariableDeclaration","scope":126,"src":"745:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"745:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"713:57:1"},"src":"683:88:1"},{"body":{"id":134,"nodeType":"Block","src":"909:37:1","statements":[{"expression":{"id":132,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"926:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":131,"id":133,"nodeType":"Return","src":"919:20:1"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"777:65:1","text":" @dev Returns the address of the pending owner."},"functionSelector":"e30c3978","id":135,"implemented":true,"kind":"function","modifiers":[],"name":"pendingOwner","nameLocation":"856:12:1","nodeType":"FunctionDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"868:2:1"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":135,"src":"900:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"900:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"899:9:1"},"scope":195,"src":"847:99:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[91],"body":{"id":154,"nodeType":"Block","src":"1218:99:1","statements":[{"expression":{"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":144,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"1228:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":145,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1244:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1228:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":147,"nodeType":"ExpressionStatement","src":"1228:24:1"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":149,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1292:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1292:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":151,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1301:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":148,"name":"OwnershipTransferStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1267:24:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1267:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":153,"nodeType":"EmitStatement","src":"1262:48:1"}]},"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"952:182:1","text":" @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":155,"implemented":true,"kind":"function","modifiers":[{"id":142,"kind":"modifierInvocation","modifierName":{"id":141,"name":"onlyOwner","nameLocations":["1208:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1208:9:1"},"nodeType":"ModifierInvocation","src":"1208:9:1"}],"name":"transferOwnership","nameLocation":"1148:17:1","nodeType":"FunctionDefinition","overrides":{"id":140,"nodeType":"OverrideSpecifier","overrides":[],"src":"1199:8:1"},"parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"newOwner","nameLocation":"1174:8:1","nodeType":"VariableDeclaration","scope":155,"src":"1166:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"1166:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1165:18:1"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"1218:0:1"},"scope":195,"src":"1139:178:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[111],"body":{"id":171,"nodeType":"Block","src":"1573:81:1","statements":[{"expression":{"id":163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1583:20:1","subExpression":{"id":162,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"1590:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":164,"nodeType":"ExpressionStatement","src":"1583:20:1"},{"expression":{"arguments":[{"id":168,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"1638:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":165,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1613:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Ownable2Step_$195_$","typeString":"type(contract super Ownable2Step)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1619:18:1","memberName":"_transferOwnership","nodeType":"MemberAccess","referencedDeclaration":111,"src":"1613:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1613:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":170,"nodeType":"ExpressionStatement","src":"1613:34:1"}]},"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"1323:173:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n Internal function without access restriction."},"id":172,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1510:18:1","nodeType":"FunctionDefinition","overrides":{"id":160,"nodeType":"OverrideSpecifier","overrides":[],"src":"1564:8:1"},"parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"newOwner","nameLocation":"1537:8:1","nodeType":"VariableDeclaration","scope":172,"src":"1529:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":157,"name":"address","nodeType":"ElementaryTypeName","src":"1529:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1528:18:1"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"1573:0:1"},"scope":195,"src":"1501:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":193,"nodeType":"Block","src":"1770:170:1","statements":[{"assignments":[177],"declarations":[{"constant":false,"id":177,"mutability":"mutable","name":"sender","nameLocation":"1788:6:1","nodeType":"VariableDeclaration","scope":193,"src":"1780:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"1780:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":180,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":178,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1797:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1797:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1780:29:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":182,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":135,"src":"1827:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":184,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"1845:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1827:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206e6577206f776e6572","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1853:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""},"value":"Ownable2Step: caller is not the new owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""}],"id":181,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1819:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1819:78:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"ExpressionStatement","src":"1819:78:1"},{"expression":{"arguments":[{"id":190,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"1926:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":189,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[172],"referencedDeclaration":172,"src":"1907:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":192,"nodeType":"ExpressionStatement","src":"1907:26:1"}]},"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"1660:69:1","text":" @dev The new owner accepts the ownership transfer."},"functionSelector":"79ba5097","id":194,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1743:15:1","nodeType":"FunctionDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"1758:2:1"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"1770:0:1"},"scope":195,"src":"1734:206:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":196,"src":"599:1343:1","usedErrors":[],"usedEvents":[13,126]}],"src":"107:1836:1"},"id":1},"@openzeppelin/contracts/interfaces/IERC2981.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC2981.sol","exportedSymbols":{"IERC165":[2565],"IERC2981":[214]},"id":215,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":197,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":215,"sourceUnit":2566,"src":"132:44:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":200,"name":"IERC165","nameLocations":["490:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"490:7:2"},"id":201,"nodeType":"InheritanceSpecifier","src":"490:7:2"}],"canonicalName":"IERC2981","contractDependencies":[],"contractKind":"interface","documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"178:289:2","text":" @dev Interface for the NFT Royalty Standard.\n A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n support for royalty payments across all NFT marketplaces and ecosystem participants.\n _Available since v4.5._"},"fullyImplemented":false,"id":214,"linearizedBaseContracts":[214,2565],"name":"IERC2981","nameLocation":"478:8:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"504:231:2","text":" @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"functionSelector":"2a55205a","id":213,"implemented":false,"kind":"function","modifiers":[],"name":"royaltyInfo","nameLocation":"749:11:2","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"tokenId","nameLocation":"769:7:2","nodeType":"VariableDeclaration","scope":213,"src":"761:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"761:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"salePrice","nameLocation":"786:9:2","nodeType":"VariableDeclaration","scope":213,"src":"778:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":205,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"760:36:2"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"receiver","nameLocation":"852:8:2","nodeType":"VariableDeclaration","scope":213,"src":"844:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"royaltyAmount","nameLocation":"870:13:2","nodeType":"VariableDeclaration","scope":213,"src":"862:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"862:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"843:41:2"},"scope":214,"src":"740:145:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":215,"src":"468:419:2","usedErrors":[],"usedEvents":[]}],"src":"107:781:2"},"id":2},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1830],"Context":[1852],"ERC165":[2553],"ERC721":[1141],"IERC165":[2565],"IERC721":[1257],"IERC721Metadata":[1302],"IERC721Receiver":[1275],"Math":[3430],"Strings":[2027]},"id":1142,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":216,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":217,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":1258,"src":"132:23:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":218,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":1276,"src":"156:31:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":219,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":1303,"src":"188:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":220,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":1831,"src":"231:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":221,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":1853,"src":"265:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":222,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":2028,"src":"299:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":223,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1142,"sourceUnit":2554,"src":"333:46:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":225,"name":"Context","nameLocations":["647:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"647:7:3"},"id":226,"nodeType":"InheritanceSpecifier","src":"647:7:3"},{"baseName":{"id":227,"name":"ERC165","nameLocations":["656:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2553,"src":"656:6:3"},"id":228,"nodeType":"InheritanceSpecifier","src":"656:6:3"},{"baseName":{"id":229,"name":"IERC721","nameLocations":["664:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1257,"src":"664:7:3"},"id":230,"nodeType":"InheritanceSpecifier","src":"664:7:3"},{"baseName":{"id":231,"name":"IERC721Metadata","nameLocations":["673:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":1302,"src":"673:15:3"},"id":232,"nodeType":"InheritanceSpecifier","src":"673:15:3"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"381:246:3","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1141,"linearizedBaseContracts":[1141,1302,1257,2553,2565,1852],"name":"ERC721","nameLocation":"637:6:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":235,"libraryName":{"id":233,"name":"Address","nameLocations":["701:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1830,"src":"701:7:3"},"nodeType":"UsingForDirective","src":"695:26:3","typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":238,"libraryName":{"id":236,"name":"Strings","nameLocations":["732:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2027,"src":"732:7:3"},"nodeType":"UsingForDirective","src":"726:26:3","typeName":{"id":237,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":240,"mutability":"mutable","name":"_name","nameLocation":"791:5:3","nodeType":"VariableDeclaration","scope":1141,"src":"776:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":239,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":242,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:3","nodeType":"VariableDeclaration","scope":1141,"src":"823:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":241,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":246,"mutability":"mutable","name":"_owners","nameLocation":"934:7:3","nodeType":"VariableDeclaration","scope":1141,"src":"898:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":245,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":250,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:3","nodeType":"VariableDeclaration","scope":1141,"src":"992:45:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":249,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":254,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:3","nodeType":"VariableDeclaration","scope":1141,"src":"1093:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":253,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":260,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:3","nodeType":"VariableDeclaration","scope":1141,"src":"1199:71:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":259,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":258,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":257,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":276,"nodeType":"Block","src":"1446:57:3","statements":[{"expression":{"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":268,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"1456:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":269,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"1464:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":271,"nodeType":"ExpressionStatement","src":"1456:13:3"},{"expression":{"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":272,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"1479:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":273,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"1489:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":275,"nodeType":"ExpressionStatement","src":"1479:17:3"}]},"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"1277:108:3","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":277,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"name_","nameLocation":"1416:5:3","nodeType":"VariableDeclaration","scope":277,"src":"1402:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":262,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:3","nodeType":"VariableDeclaration","scope":277,"src":"1423:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":264,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:3"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"1446:0:3"},"scope":1141,"src":"1390:113:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2552,2564],"body":{"id":307,"nodeType":"Block","src":"1678:192:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":288,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"1707:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":290,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"1727:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1257_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1257_$","typeString":"type(contract IERC721)"}],"id":289,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1257","typeString":"type(contract IERC721)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":294,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"1763:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":296,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1783:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1302_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1302_$","typeString":"type(contract IERC721Metadata)"}],"id":295,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1302","typeString":"type(contract IERC721Metadata)"}},"id":298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":303,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"1851:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":301,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1141_$","typeString":"type(contract super ERC721)"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2552,"src":"1827:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":287,"id":306,"nodeType":"Return","src":"1688:175:3"}]},"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"1509:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":308,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:3","nodeType":"FunctionDefinition","overrides":{"id":284,"nodeType":"OverrideSpecifier","overrides":[{"id":282,"name":"ERC165","nameLocations":["1646:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2553,"src":"1646:6:3"},{"id":283,"name":"IERC165","nameLocations":["1654:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"1654:7:3"}],"src":"1637:25:3"},"parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:3","nodeType":"VariableDeclaration","scope":308,"src":"1597:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":279,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:3"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":308,"src":"1672:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":285,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:3"},"scope":1141,"src":"1570:300:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1182],"body":{"id":331,"nodeType":"Block","src":"2010:123:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"2028:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":319,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:3","typeDescriptions":{}}},"id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":317,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2020:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":326,"nodeType":"ExpressionStatement","src":"2020:73:3"},{"expression":{"baseExpression":{"id":327,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2110:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":329,"indexExpression":{"id":328,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"2120:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":316,"id":330,"nodeType":"Return","src":"2103:23:3"}]},"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"1876:48:3","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":332,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:3","nodeType":"FunctionDefinition","overrides":{"id":313,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:3"},"parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"owner","nameLocation":"1956:5:3","nodeType":"VariableDeclaration","scope":332,"src":"1948:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:3"},"returnParameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":332,"src":"2001:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:3"},"scope":1141,"src":"1929:204:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1190],"body":{"id":359,"nodeType":"Block","src":"2271:138:3","statements":[{"assignments":[342],"declarations":[{"constant":false,"id":342,"mutability":"mutable","name":"owner","nameLocation":"2289:5:3","nodeType":"VariableDeclaration","scope":359,"src":"2281:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":341,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":346,"initialValue":{"arguments":[{"id":344,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":343,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"2297:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"2332:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:3","typeDescriptions":{}}},"id":352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2324:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":356,"nodeType":"ExpressionStatement","src":"2324:56:3"},{"expression":{"id":357,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"2397:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":340,"id":358,"nodeType":"Return","src":"2390:12:3"}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"2139:46:3","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":360,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:3","nodeType":"FunctionDefinition","overrides":{"id":337,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:3"},"parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:3","nodeType":"VariableDeclaration","scope":360,"src":"2207:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:3"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":360,"src":"2262:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":338,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:3"},"scope":1141,"src":"2190:219:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1287],"body":{"id":369,"nodeType":"Block","src":"2540:29:3","statements":[{"expression":{"id":367,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2557:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":366,"id":368,"nodeType":"Return","src":"2550:12:3"}]},"documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"2415:51:3","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":370,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:3","nodeType":"FunctionDefinition","overrides":{"id":363,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:3"},"parameters":{"id":362,"nodeType":"ParameterList","parameters":[],"src":"2484:2:3"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":370,"src":"2525:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":364,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:3"},"scope":1141,"src":"2471:98:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1293],"body":{"id":379,"nodeType":"Block","src":"2704:31:3","statements":[{"expression":{"id":377,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"2721:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":376,"id":378,"nodeType":"Return","src":"2714:14:3"}]},"documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"2575:53:3","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":380,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:3","nodeType":"FunctionDefinition","overrides":{"id":373,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:3"},"parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"2648:2:3"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":380,"src":"2689:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":374,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:3"},"scope":1141,"src":"2633:102:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1301],"body":{"id":418,"nodeType":"Block","src":"2889:188:3","statements":[{"expression":{"arguments":[{"id":390,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2914:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":389,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"2899:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"ExpressionStatement","src":"2899:23:3"},{"assignments":[394],"declarations":[{"constant":false,"id":394,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:3","nodeType":"VariableDeclaration","scope":418,"src":"2933:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":393,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":397,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":395,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"2957:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:3"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":400,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2990:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":398,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:3","typeDescriptions":{}}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:3","memberName":"length","nodeType":"MemberAccess","src":"2984:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:3","trueExpression":{"arguments":[{"arguments":[{"id":409,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"3036:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":410,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1910,"src":"3045:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":407,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":405,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:3","typeDescriptions":{}}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":388,"id":417,"nodeType":"Return","src":"2977:93:3"}]},"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"2741:55:3","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":419,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:3","nodeType":"FunctionDefinition","overrides":{"id":385,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:3"},"parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:3","nodeType":"VariableDeclaration","scope":419,"src":"2819:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":382,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:3"},"returnParameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":419,"src":"2874:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":386,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:3"},"scope":1141,"src":"2801:276:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":427,"nodeType":"Block","src":"3385:26:3","statements":[{"expression":{"hexValue":"","id":425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":424,"id":426,"nodeType":"Return","src":"3395:9:3"}]},"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"3083:231:3","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":428,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:3","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[],"src":"3336:2:3"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":428,"src":"3370:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":422,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:3"},"scope":1141,"src":"3319:92:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1230],"body":{"id":470,"nodeType":"Block","src":"3538:336:3","statements":[{"assignments":[438],"declarations":[{"constant":false,"id":438,"mutability":"mutable","name":"owner","nameLocation":"3556:5:3","nodeType":"VariableDeclaration","scope":470,"src":"3548:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":437,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":443,"initialValue":{"arguments":[{"id":441,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"3579:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":439,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3564:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"3564:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":445,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"3605:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":446,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"3611:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3597:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":450,"nodeType":"ExpressionStatement","src":"3597:57:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":452,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"3686:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":454,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"3702:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":457,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"3728:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":458,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"3735:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":456,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"3711:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":451,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3665:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":464,"nodeType":"ExpressionStatement","src":"3665:170:3"},{"expression":{"arguments":[{"id":466,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"3855:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":467,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"3859:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":465,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"3846:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":469,"nodeType":"ExpressionStatement","src":"3846:21:3"}]},"documentation":{"id":429,"nodeType":"StructuredDocumentation","src":"3417:46:3","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":471,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:3","nodeType":"FunctionDefinition","overrides":{"id":435,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:3"},"parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"to","nameLocation":"3493:2:3","nodeType":"VariableDeclaration","scope":471,"src":"3485:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:3","nodeType":"VariableDeclaration","scope":471,"src":"3497:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:3"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[],"src":"3538:0:3"},"scope":1141,"src":"3468:406:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1246],"body":{"id":488,"nodeType":"Block","src":"4020:82:3","statements":[{"expression":{"arguments":[{"id":481,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"4045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":480,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4030:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":483,"nodeType":"ExpressionStatement","src":"4030:23:3"},{"expression":{"baseExpression":{"id":484,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"4071:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":486,"indexExpression":{"id":485,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"4087:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":479,"id":487,"nodeType":"Return","src":"4064:31:3"}]},"documentation":{"id":472,"nodeType":"StructuredDocumentation","src":"3880:50:3","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":489,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:3","nodeType":"FunctionDefinition","overrides":{"id":476,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:3"},"parameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:3","nodeType":"VariableDeclaration","scope":489,"src":"3956:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:3"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":489,"src":"4011:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":477,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:3"},"scope":1141,"src":"3935:167:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1238],"body":{"id":505,"nodeType":"Block","src":"4253:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":499,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"4282:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":501,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4296:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":502,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"4306:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":498,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"4263:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":504,"nodeType":"ExpressionStatement","src":"4263:52:3"}]},"documentation":{"id":490,"nodeType":"StructuredDocumentation","src":"4108:56:3","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":506,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:3","nodeType":"FunctionDefinition","overrides":{"id":496,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:3"},"parameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"operator","nameLocation":"4204:8:3","nodeType":"VariableDeclaration","scope":506,"src":"4196:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":494,"mutability":"mutable","name":"approved","nameLocation":"4219:8:3","nodeType":"VariableDeclaration","scope":506,"src":"4214:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:3"},"returnParameters":{"id":497,"nodeType":"ParameterList","parameters":[],"src":"4253:0:3"},"scope":1141,"src":"4169:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1256],"body":{"id":523,"nodeType":"Block","src":"4491:59:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":517,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"4508:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":519,"indexExpression":{"id":518,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"4527:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":521,"indexExpression":{"id":520,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"4534:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":516,"id":522,"nodeType":"Return","src":"4501:42:3"}]},"documentation":{"id":507,"nodeType":"StructuredDocumentation","src":"4328:55:3","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":524,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:3","nodeType":"FunctionDefinition","overrides":{"id":513,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:3"},"parameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":509,"mutability":"mutable","name":"owner","nameLocation":"4422:5:3","nodeType":"VariableDeclaration","scope":524,"src":"4414:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":508,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"operator","nameLocation":"4437:8:3","nodeType":"VariableDeclaration","scope":524,"src":"4429:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:3"},"returnParameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":524,"src":"4485:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":514,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:3"},"scope":1141,"src":"4388:162:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1222],"body":{"id":550,"nodeType":"Block","src":"4731:207:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":537,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"4820:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":539,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"4834:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":536,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"4801:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":535,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4793:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":543,"nodeType":"ExpressionStatement","src":"4793:99:3"},{"expression":{"arguments":[{"id":545,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"4913:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":546,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"4919:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":547,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"4923:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":544,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4903:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":549,"nodeType":"ExpressionStatement","src":"4903:28:3"}]},"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"4556:51:3","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":551,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:3","nodeType":"FunctionDefinition","overrides":{"id":533,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:3"},"parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"from","nameLocation":"4651:4:3","nodeType":"VariableDeclaration","scope":551,"src":"4643:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"to","nameLocation":"4673:2:3","nodeType":"VariableDeclaration","scope":551,"src":"4665:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:3","nodeType":"VariableDeclaration","scope":551,"src":"4685:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":530,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:3"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"4731:0:3"},"scope":1141,"src":"4612:326:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1212],"body":{"id":569,"nodeType":"Block","src":"5127:56:3","statements":[{"expression":{"arguments":[{"id":563,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"5154:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":564,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"5160:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"5164:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":562,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[570,600],"referencedDeclaration":600,"src":"5137:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":568,"nodeType":"ExpressionStatement","src":"5137:39:3"}]},"documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"4944:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":570,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:3","nodeType":"FunctionDefinition","overrides":{"id":560,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:3"},"parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"from","nameLocation":"5047:4:3","nodeType":"VariableDeclaration","scope":570,"src":"5039:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"to","nameLocation":"5069:2:3","nodeType":"VariableDeclaration","scope":570,"src":"5061:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:3","nodeType":"VariableDeclaration","scope":570,"src":"5081:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:3"},"returnParameters":{"id":561,"nodeType":"ParameterList","parameters":[],"src":"5127:0:3"},"scope":1141,"src":"5004:179:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1202],"body":{"id":599,"nodeType":"Block","src":"5399:164:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":585,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"5436:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5436:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":587,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"5450:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":584,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"5417:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5409:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":591,"nodeType":"ExpressionStatement","src":"5409:99:3"},{"expression":{"arguments":[{"id":593,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"5532:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":594,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"5538:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":595,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"5542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":596,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"5551:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":592,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"5518:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":598,"nodeType":"ExpressionStatement","src":"5518:38:3"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"5189:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":600,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:3","nodeType":"FunctionDefinition","overrides":{"id":581,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:3"},"parameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"from","nameLocation":"5292:4:3","nodeType":"VariableDeclaration","scope":600,"src":"5284:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":572,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"to","nameLocation":"5314:2:3","nodeType":"VariableDeclaration","scope":600,"src":"5306:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":574,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":577,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:3","nodeType":"VariableDeclaration","scope":600,"src":"5326:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":576,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":579,"mutability":"mutable","name":"data","nameLocation":"5364:4:3","nodeType":"VariableDeclaration","scope":600,"src":"5351:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":578,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:3"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"5399:0:3"},"scope":1141,"src":"5249:314:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":628,"nodeType":"Block","src":"6564:165:3","statements":[{"expression":{"arguments":[{"id":613,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"6584:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":614,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"6590:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":615,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"6594:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":612,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"6574:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6574:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":617,"nodeType":"ExpressionStatement","src":"6574:28:3"},{"expression":{"arguments":[{"arguments":[{"id":620,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"6643:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":621,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"6649:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":622,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"6653:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":623,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"6662:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":619,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"6620:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6612:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:110:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":627,"nodeType":"ExpressionStatement","src":"6612:110:3"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"5569:850:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":629,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:3","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"from","nameLocation":"6464:4:3","nodeType":"VariableDeclaration","scope":629,"src":"6456:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"to","nameLocation":"6486:2:3","nodeType":"VariableDeclaration","scope":629,"src":"6478:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":604,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:3","nodeType":"VariableDeclaration","scope":629,"src":"6498:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":606,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"data","nameLocation":"6536:4:3","nodeType":"VariableDeclaration","scope":629,"src":"6523:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":608,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:3"},"returnParameters":{"id":611,"nodeType":"ParameterList","parameters":[],"src":"6564:0:3"},"scope":1141,"src":"6424:305:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":641,"nodeType":"Block","src":"6913:40:3","statements":[{"expression":{"baseExpression":{"id":637,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"6930:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":639,"indexExpression":{"id":638,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6938:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":636,"id":640,"nodeType":"Return","src":"6923:23:3"}]},"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"6735:98:3","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":642,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:3","nodeType":"FunctionDefinition","parameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":632,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:3","nodeType":"VariableDeclaration","scope":642,"src":"6856:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":631,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:3"},"returnParameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":642,"src":"6904:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":634,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:3"},"scope":1141,"src":"6838:115:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":659,"nodeType":"Block","src":"7327:55:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":651,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"7353:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":650,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"7344:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:3","typeDescriptions":{}}},"id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":649,"id":658,"nodeType":"Return","src":"7337:38:3"}]},"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"6959:292:3","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":660,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:3","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:3","nodeType":"VariableDeclaration","scope":660,"src":"7273:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:3"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":660,"src":"7321:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":647,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:3"},"scope":1141,"src":"7256:126:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"7639:162:3","statements":[{"assignments":[671],"declarations":[{"constant":false,"id":671,"mutability":"mutable","name":"owner","nameLocation":"7657:5:3","nodeType":"VariableDeclaration","scope":693,"src":"7649:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":670,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":676,"initialValue":{"arguments":[{"id":674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"7680:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":672,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"7665:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7672:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"7665:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:3"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":677,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"7706:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":678,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"7717:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":681,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"7743:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":682,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"7750:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":680,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7726:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":686,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"7774:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":685,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7762:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7762:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":688,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"7786:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":691,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":669,"id":692,"nodeType":"Return","src":"7698:96:3"}]},"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"7388:147:3","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:3","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"spender","nameLocation":"7576:7:3","nodeType":"VariableDeclaration","scope":694,"src":"7568:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:3","nodeType":"VariableDeclaration","scope":694,"src":"7585:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:3"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":694,"src":"7633:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":667,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:3"},"scope":1141,"src":"7540:261:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":708,"nodeType":"Block","src":"8196:43:3","statements":[{"expression":{"arguments":[{"id":703,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"8216:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":704,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"8220:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":702,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[709,738],"referencedDeclaration":738,"src":"8206:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8206:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":707,"nodeType":"ExpressionStatement","src":"8206:26:3"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"7807:319:3","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":709,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:3","nodeType":"FunctionDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"to","nameLocation":"8158:2:3","nodeType":"VariableDeclaration","scope":709,"src":"8150:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":696,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":699,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:3","nodeType":"VariableDeclaration","scope":709,"src":"8162:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":698,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:3"},"returnParameters":{"id":701,"nodeType":"ParameterList","parameters":[],"src":"8196:0:3"},"scope":1141,"src":"8131:108:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":737,"nodeType":"Block","src":"8574:195:3","statements":[{"expression":{"arguments":[{"id":720,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"8590:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":721,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"8594:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":719,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"8584:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":723,"nodeType":"ExpressionStatement","src":"8584:18:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":726,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:3","typeDescriptions":{}}},"id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8656:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":730,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"8668:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":731,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"8672:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":732,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"8681:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":725,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"8633:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8633:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":724,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8612:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8612:150:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":736,"nodeType":"ExpressionStatement","src":"8612:150:3"}]},"documentation":{"id":710,"nodeType":"StructuredDocumentation","src":"8245:210:3","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:3","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"to","nameLocation":"8496:2:3","nodeType":"VariableDeclaration","scope":738,"src":"8488:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":711,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:3","nodeType":"VariableDeclaration","scope":738,"src":"8508:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":716,"mutability":"mutable","name":"data","nameLocation":"8546:4:3","nodeType":"VariableDeclaration","scope":738,"src":"8533:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":715,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:3"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"8574:0:3"},"scope":1141,"src":"8460:309:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":814,"nodeType":"Block","src":"9152:859:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":747,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9170:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:3","typeDescriptions":{}}},"id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":746,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9162:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9162:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"ExpressionStatement","src":"9162:61:3"},{"expression":{"arguments":[{"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:3","subExpression":{"arguments":[{"id":758,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"9250:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":757,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"9242:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":756,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9233:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9233:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":763,"nodeType":"ExpressionStatement","src":"9233:58:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:3","typeDescriptions":{}}},"id":768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9323:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":769,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9335:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":770,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"9339:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":764,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"9302:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":773,"nodeType":"ExpressionStatement","src":"9302:48:3"},{"expression":{"arguments":[{"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:3","subExpression":{"arguments":[{"id":776,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"9454:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":775,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"9446:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9446:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9437:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":781,"nodeType":"ExpressionStatement","src":"9437:58:3"},{"id":788,"nodeType":"UncheckedBlock","src":"9506:360:3","statements":[{"expression":{"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":782,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"9837:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":784,"indexExpression":{"id":783,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9847:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":787,"nodeType":"ExpressionStatement","src":"9837:18:3"}]},{"expression":{"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":789,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"9876:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":791,"indexExpression":{"id":790,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"9884:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":792,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9895:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":794,"nodeType":"ExpressionStatement","src":"9876:21:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":796,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:3","typeDescriptions":{}}},"id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9922:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":800,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9934:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":801,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"9938:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":795,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"9913:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9913:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":803,"nodeType":"EmitStatement","src":"9908:38:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:3","typeDescriptions":{}}},"id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9977:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":809,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9989:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":810,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"9993:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":804,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"9957:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9957:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"9957:47:3"}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"8775:311:3","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":815,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:3","nodeType":"FunctionDefinition","parameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"to","nameLocation":"9114:2:3","nodeType":"VariableDeclaration","scope":815,"src":"9106:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:3","nodeType":"VariableDeclaration","scope":815,"src":"9118:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:3"},"returnParameters":{"id":745,"nodeType":"ParameterList","parameters":[],"src":"9152:0:3"},"scope":1141,"src":"9091:920:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":881,"nodeType":"Block","src":"10386:713:3","statements":[{"assignments":[822],"declarations":[{"constant":false,"id":822,"mutability":"mutable","name":"owner","nameLocation":"10404:5:3","nodeType":"VariableDeclaration","scope":881,"src":"10396:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":827,"initialValue":{"arguments":[{"id":825,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"10427:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":823,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10412:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"10412:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10412:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:3"},{"expression":{"arguments":[{"id":829,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"10467:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":830,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:3","typeDescriptions":{}}},"id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":834,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"10486:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":828,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"10446:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10446:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":837,"nodeType":"ExpressionStatement","src":"10446:51:3"},{"expression":{"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":838,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"10599:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":841,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"10622:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":839,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10607:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"10607:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10607:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":844,"nodeType":"ExpressionStatement","src":"10599:31:3"},{"expression":{"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:3","subExpression":{"baseExpression":{"id":845,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"10675:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":847,"indexExpression":{"id":846,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"10691:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":849,"nodeType":"ExpressionStatement","src":"10668:31:3"},{"id":856,"nodeType":"UncheckedBlock","src":"10710:237:3","statements":[{"expression":{"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":850,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"10915:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":852,"indexExpression":{"id":851,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"10925:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":855,"nodeType":"ExpressionStatement","src":"10915:21:3"}]},{"expression":{"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:3","subExpression":{"baseExpression":{"id":857,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"10963:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":859,"indexExpression":{"id":858,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"10971:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"10956:23:3"},{"eventCall":{"arguments":[{"id":863,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"11004:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:3","typeDescriptions":{}}},"id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":868,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11023:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":862,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"10995:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10995:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":870,"nodeType":"EmitStatement","src":"10990:41:3"},{"expression":{"arguments":[{"id":872,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"11062:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:3","typeDescriptions":{}}},"id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11069:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11081:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":871,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"11042:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"ExpressionStatement","src":"11042:50:3"}]},"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"10017:315:3","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":882,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:3","nodeType":"FunctionDefinition","parameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:3","nodeType":"VariableDeclaration","scope":882,"src":"10352:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:3"},"returnParameters":{"id":820,"nodeType":"ParameterList","parameters":[],"src":"10386:0:3"},"scope":1141,"src":"10337:762:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":966,"nodeType":"Block","src":"11532:1124:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":895,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"11565:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":893,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"11550:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11557:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"11550:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11550:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":897,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"11577:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":892,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11542:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"11542:81:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":903,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"11641:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:3","typeDescriptions":{}}},"id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":902,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11633:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"ExpressionStatement","src":"11633:65:3"},{"expression":{"arguments":[{"id":913,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"11730:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"11736:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":915,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"11740:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":912,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"11709:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11709:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":918,"nodeType":"ExpressionStatement","src":"11709:42:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":922,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"11866:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":920,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"11851:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11858:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"11851:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":924,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"11878:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":919,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11843:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11843:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":928,"nodeType":"ExpressionStatement","src":"11843:81:3"},{"expression":{"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:3","subExpression":{"baseExpression":{"id":929,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"11993:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":931,"indexExpression":{"id":930,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"12009:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"11986:31:3"},{"id":946,"nodeType":"UncheckedBlock","src":"12028:496:3","statements":[{"expression":{"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":934,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"12461:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":936,"indexExpression":{"id":935,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"12471:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":939,"nodeType":"ExpressionStatement","src":"12461:20:3"},{"expression":{"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":940,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"12495:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":942,"indexExpression":{"id":941,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"12505:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":945,"nodeType":"ExpressionStatement","src":"12495:18:3"}]},{"expression":{"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":947,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"12533:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":949,"indexExpression":{"id":948,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"12541:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":950,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"12552:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":952,"nodeType":"ExpressionStatement","src":"12533:21:3"},{"eventCall":{"arguments":[{"id":954,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"12579:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":955,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"12585:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":956,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"12589:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":953,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"12570:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12570:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":958,"nodeType":"EmitStatement","src":"12565:32:3"},{"expression":{"arguments":[{"id":960,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"12628:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":961,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"12634:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":962,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"12638:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":959,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"12608:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12608:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":965,"nodeType":"ExpressionStatement","src":"12608:41:3"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"11105:313:3","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":967,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:3","nodeType":"FunctionDefinition","parameters":{"id":890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"from","nameLocation":"11459:4:3","nodeType":"VariableDeclaration","scope":967,"src":"11451:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"to","nameLocation":"11481:2:3","nodeType":"VariableDeclaration","scope":967,"src":"11473:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":886,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":889,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:3","nodeType":"VariableDeclaration","scope":967,"src":"11493:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:3"},"returnParameters":{"id":891,"nodeType":"ParameterList","parameters":[],"src":"11532:0:3"},"scope":1141,"src":"11423:1233:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":990,"nodeType":"Block","src":"12832:107:3","statements":[{"expression":{"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":975,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"12842:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":977,"indexExpression":{"id":976,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"12858:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":978,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"12869:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":980,"nodeType":"ExpressionStatement","src":"12842:29:3"},{"eventCall":{"arguments":[{"arguments":[{"id":984,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"12910:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":982,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"12895:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1141_$","typeString":"type(contract ERC721)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12902:7:3","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":360,"src":"12895:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":986,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"12920:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":987,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"12924:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":981,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"12886:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":989,"nodeType":"EmitStatement","src":"12881:51:3"}]},"documentation":{"id":968,"nodeType":"StructuredDocumentation","src":"12662:101:3","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":991,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:3","nodeType":"FunctionDefinition","parameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":970,"mutability":"mutable","name":"to","nameLocation":"12794:2:3","nodeType":"VariableDeclaration","scope":991,"src":"12786:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:3","nodeType":"VariableDeclaration","scope":991,"src":"12798:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":971,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:3"},"returnParameters":{"id":974,"nodeType":"ParameterList","parameters":[],"src":"12832:0:3"},"scope":1141,"src":"12768:171:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1022,"nodeType":"Block","src":"13198:184:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1002,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"13216:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1003,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"13225:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":1001,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13208:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13208:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"13208:55:3"},{"expression":{"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1008,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"13273:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1011,"indexExpression":{"id":1009,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"13292:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1012,"indexExpression":{"id":1010,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"13299:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1013,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"13311:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1015,"nodeType":"ExpressionStatement","src":"13273:46:3"},{"eventCall":{"arguments":[{"id":1017,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"13349:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1018,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"13356:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1019,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"13366:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1016,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"13334:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1021,"nodeType":"EmitStatement","src":"13329:46:3"}]},"documentation":{"id":992,"nodeType":"StructuredDocumentation","src":"12945:125:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1023,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:3","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"owner","nameLocation":"13120:5:3","nodeType":"VariableDeclaration","scope":1023,"src":"13112:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":993,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"operator","nameLocation":"13143:8:3","nodeType":"VariableDeclaration","scope":1023,"src":"13135:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":995,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"approved","nameLocation":"13166:8:3","nodeType":"VariableDeclaration","scope":1023,"src":"13161:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":997,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:3"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[],"src":"13198:0:3"},"scope":1141,"src":"13075:307:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1036,"nodeType":"Block","src":"13529:70:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":1031,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"13555:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1030,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"13547:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13547:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1029,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13539:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13539:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"13539:53:3"}]},"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"13388:73:3","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":1037,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:3","nodeType":"FunctionDefinition","parameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:3","nodeType":"VariableDeclaration","scope":1037,"src":"13490:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:3"},"returnParameters":{"id":1028,"nodeType":"ParameterList","parameters":[],"src":"13529:0:3"},"scope":1141,"src":"13466:133:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1098,"nodeType":"Block","src":"14306:676:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1051,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"14320:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14323:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1518,"src":"14320:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14320:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1096,"nodeType":"Block","src":"14940:36:3","statements":[{"expression":{"hexValue":"74727565","id":1094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1050,"id":1095,"nodeType":"Return","src":"14954:11:3"}]},"id":1097,"nodeType":"IfStatement","src":"14316:660:3","trueBody":{"id":1093,"nodeType":"Block","src":"14337:597:3","statements":[{"clauses":[{"block":{"id":1073,"nodeType":"Block","src":"14451:91:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1067,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"14476:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1068,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"14486:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1275_$","typeString":"type(contract IERC721Receiver)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14502:16:3","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1274,"src":"14486:32:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14519:8:3","memberName":"selector","nodeType":"MemberAccess","src":"14486:41:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1050,"id":1072,"nodeType":"Return","src":"14469:58:3"}]},"errorName":"","id":1074,"nodeType":"TryCatchClause","parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1065,"mutability":"mutable","name":"retval","nameLocation":"14443:6:3","nodeType":"VariableDeclaration","scope":1074,"src":"14436:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1064,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:3"},"src":"14427:115:3"},{"block":{"id":1090,"nodeType":"Block","src":"14571:353:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1078,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"14593:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14600:6:3","memberName":"length","nodeType":"MemberAccess","src":"14593:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1088,"nodeType":"Block","src":"14720:190:3","statements":[{"AST":{"nativeSrc":"14806:86:3","nodeType":"YulBlock","src":"14806:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14843:2:3","nodeType":"YulLiteral","src":"14843:2:3","type":"","value":"32"},{"name":"reason","nativeSrc":"14847:6:3","nodeType":"YulIdentifier","src":"14847:6:3"}],"functionName":{"name":"add","nativeSrc":"14839:3:3","nodeType":"YulIdentifier","src":"14839:3:3"},"nativeSrc":"14839:15:3","nodeType":"YulFunctionCall","src":"14839:15:3"},{"arguments":[{"name":"reason","nativeSrc":"14862:6:3","nodeType":"YulIdentifier","src":"14862:6:3"}],"functionName":{"name":"mload","nativeSrc":"14856:5:3","nodeType":"YulIdentifier","src":"14856:5:3"},"nativeSrc":"14856:13:3","nodeType":"YulFunctionCall","src":"14856:13:3"}],"functionName":{"name":"revert","nativeSrc":"14832:6:3","nodeType":"YulIdentifier","src":"14832:6:3"},"nativeSrc":"14832:38:3","nodeType":"YulFunctionCall","src":"14832:38:3"},"nativeSrc":"14832:38:3","nodeType":"YulExpressionStatement","src":"14832:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1076,"isOffset":false,"isSlot":false,"src":"14847:6:3","valueSize":1},{"declaration":1076,"isOffset":false,"isSlot":false,"src":"14862:6:3","valueSize":1}],"id":1087,"nodeType":"InlineAssembly","src":"14797:95:3"}]},"id":1089,"nodeType":"IfStatement","src":"14589:321:3","trueBody":{"id":1086,"nodeType":"Block","src":"14613:101:3","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1082,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1085,"nodeType":"ExpressionStatement","src":"14635:60:3"}]}}]},"errorName":"","id":1091,"nodeType":"TryCatchClause","parameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1076,"mutability":"mutable","name":"reason","nameLocation":"14563:6:3","nodeType":"VariableDeclaration","scope":1091,"src":"14550:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1075,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:3"},"src":"14543:381:3"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1058,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"14392:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14392:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1060,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"14406:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1061,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"14412:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1062,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"14421:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1055,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"14371:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1054,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"14355:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1275_$","typeString":"type(contract IERC721Receiver)"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1275","typeString":"contract IERC721Receiver"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14375:16:3","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1274,"src":"14355:36:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:71:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1092,"nodeType":"TryStatement","src":"14351:573:3"}]}}]},"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"13605:541:3","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1099,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:3","nodeType":"FunctionDefinition","parameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"from","nameLocation":"14200:4:3","nodeType":"VariableDeclaration","scope":1099,"src":"14192:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"to","nameLocation":"14222:2:3","nodeType":"VariableDeclaration","scope":1099,"src":"14214:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1044,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:3","nodeType":"VariableDeclaration","scope":1099,"src":"14234:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1043,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1046,"mutability":"mutable","name":"data","nameLocation":"14272:4:3","nodeType":"VariableDeclaration","scope":1099,"src":"14259:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1045,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:3"},"returnParameters":{"id":1050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1099,"src":"14300:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1048,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:3"},"scope":1141,"src":"14151:831:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1111,"nodeType":"Block","src":"15850:2:3","statements":[]},"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"14988:705:3","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1112,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:3","nodeType":"FunctionDefinition","parameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"from","nameLocation":"15745:4:3","nodeType":"VariableDeclaration","scope":1112,"src":"15737:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1104,"mutability":"mutable","name":"to","nameLocation":"15767:2:3","nodeType":"VariableDeclaration","scope":1112,"src":"15759:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"firstTokenId","nameLocation":"15787:12:3","nodeType":"VariableDeclaration","scope":1112,"src":"15779:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"batchSize","nameLocation":"15817:9:3","nodeType":"VariableDeclaration","scope":1112,"src":"15809:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1107,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:105:3"},"returnParameters":{"id":1110,"nodeType":"ParameterList","parameters":[],"src":"15850:0:3"},"scope":1141,"src":"15698:154:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1124,"nodeType":"Block","src":"16709:2:3","statements":[]},"documentation":{"id":1113,"nodeType":"StructuredDocumentation","src":"15858:695:3","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1125,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16567:19:3","nodeType":"FunctionDefinition","parameters":{"id":1122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"from","nameLocation":"16604:4:3","nodeType":"VariableDeclaration","scope":1125,"src":"16596:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"16596:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"to","nameLocation":"16626:2:3","nodeType":"VariableDeclaration","scope":1125,"src":"16618:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"16618:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"firstTokenId","nameLocation":"16646:12:3","nodeType":"VariableDeclaration","scope":1125,"src":"16638:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"16638:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1121,"mutability":"mutable","name":"batchSize","nameLocation":"16676:9:3","nodeType":"VariableDeclaration","scope":1125,"src":"16668:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1120,"name":"uint256","nodeType":"ElementaryTypeName","src":"16668:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16586:105:3"},"returnParameters":{"id":1123,"nodeType":"ParameterList","parameters":[],"src":"16709:0:3"},"scope":1141,"src":"16558:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1139,"nodeType":"Block","src":"17260:45:3","statements":[{"expression":{"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1133,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"17270:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1135,"indexExpression":{"id":1134,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"17280:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17270:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1136,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"17292:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17270:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1138,"nodeType":"ExpressionStatement","src":"17270:28:3"}]},"documentation":{"id":1126,"nodeType":"StructuredDocumentation","src":"16717:409:3","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":1140,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"17193:24:3","nodeType":"FunctionDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"account","nameLocation":"17226:7:3","nodeType":"VariableDeclaration","scope":1140,"src":"17218:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"17218:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"amount","nameLocation":"17243:6:3","nodeType":"VariableDeclaration","scope":1140,"src":"17235:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"17235:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17217:33:3"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[],"src":"17260:0:3"},"scope":1141,"src":"17184:121:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1142,"src":"628:16679:3","usedErrors":[],"usedEvents":[1156,1165,1174]}],"src":"107:17201:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2565],"IERC721":[1257]},"id":1258,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1143,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1258,"sourceUnit":2566,"src":"133:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1146,"name":"IERC165","nameLocations":["271:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"271:7:4"},"id":1147,"nodeType":"InheritanceSpecifier","src":"271:7:4"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"182:67:4","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1257,"linearizedBaseContracts":[1257,2565],"name":"IERC721","nameLocation":"260:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"285:88:4","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1156,"name":"Transfer","nameLocation":"384:8:4","nodeType":"EventDefinition","parameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:4","nodeType":"VariableDeclaration","scope":1156,"src":"393:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1152,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:4","nodeType":"VariableDeclaration","scope":1156,"src":"415:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1151,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1154,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:4","nodeType":"VariableDeclaration","scope":1156,"src":"435:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:4"},"src":"378:82:4"},{"anonymous":false,"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"466:94:4","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1165,"name":"Approval","nameLocation":"571:8:4","nodeType":"EventDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:4","nodeType":"VariableDeclaration","scope":1165,"src":"580:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1161,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:4","nodeType":"VariableDeclaration","scope":1165,"src":"603:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1160,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1163,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:4","nodeType":"VariableDeclaration","scope":1165,"src":"629:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:4"},"src":"565:89:4"},{"anonymous":false,"documentation":{"id":1166,"nodeType":"StructuredDocumentation","src":"660:117:4","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1174,"name":"ApprovalForAll","nameLocation":"788:14:4","nodeType":"EventDefinition","parameters":{"id":1173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:4","nodeType":"VariableDeclaration","scope":1174,"src":"803:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1170,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:4","nodeType":"VariableDeclaration","scope":1174,"src":"826:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1172,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:4","nodeType":"VariableDeclaration","scope":1174,"src":"852:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1171,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:4"},"src":"782:85:4"},{"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"873:76:4","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1182,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:4","nodeType":"FunctionDefinition","parameters":{"id":1178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"owner","nameLocation":"981:5:4","nodeType":"VariableDeclaration","scope":1182,"src":"973:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:4"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"balance","nameLocation":"1019:7:4","nodeType":"VariableDeclaration","scope":1182,"src":"1011:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:4"},"scope":1257,"src":"954:74:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1183,"nodeType":"StructuredDocumentation","src":"1034:131:4","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1190,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:4","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:4","nodeType":"VariableDeclaration","scope":1190,"src":"1187:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:4"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"owner","nameLocation":"1235:5:4","nodeType":"VariableDeclaration","scope":1190,"src":"1227:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1187,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:4"},"scope":1257,"src":"1170:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1191,"nodeType":"StructuredDocumentation","src":"1248:556:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1202,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:4","nodeType":"FunctionDefinition","parameters":{"id":1200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1193,"mutability":"mutable","name":"from","nameLocation":"1852:4:4","nodeType":"VariableDeclaration","scope":1202,"src":"1844:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1192,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1195,"mutability":"mutable","name":"to","nameLocation":"1874:2:4","nodeType":"VariableDeclaration","scope":1202,"src":"1866:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:4","nodeType":"VariableDeclaration","scope":1202,"src":"1886:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1199,"mutability":"mutable","name":"data","nameLocation":"1926:4:4","nodeType":"VariableDeclaration","scope":1202,"src":"1911:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1198,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:4"},"returnParameters":{"id":1201,"nodeType":"ParameterList","parameters":[],"src":"1945:0:4"},"scope":1257,"src":"1809:137:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1203,"nodeType":"StructuredDocumentation","src":"1952:687:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1212,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:4","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1205,"mutability":"mutable","name":"from","nameLocation":"2687:4:4","nodeType":"VariableDeclaration","scope":1212,"src":"2679:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1204,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"to","nameLocation":"2709:2:4","nodeType":"VariableDeclaration","scope":1212,"src":"2701:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1206,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:4","nodeType":"VariableDeclaration","scope":1212,"src":"2721:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1208,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:4"},"returnParameters":{"id":1211,"nodeType":"ParameterList","parameters":[],"src":"2751:0:4"},"scope":1257,"src":"2644:108:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1213,"nodeType":"StructuredDocumentation","src":"2758:732:4","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1222,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:4","nodeType":"FunctionDefinition","parameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"from","nameLocation":"3534:4:4","nodeType":"VariableDeclaration","scope":1222,"src":"3526:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"to","nameLocation":"3556:2:4","nodeType":"VariableDeclaration","scope":1222,"src":"3548:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1216,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1219,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:4","nodeType":"VariableDeclaration","scope":1222,"src":"3568:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1218,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:4"},"returnParameters":{"id":1221,"nodeType":"ParameterList","parameters":[],"src":"3598:0:4"},"scope":1257,"src":"3495:104:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1223,"nodeType":"StructuredDocumentation","src":"3605:452:4","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1230,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:4","nodeType":"FunctionDefinition","parameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"to","nameLocation":"4087:2:4","nodeType":"VariableDeclaration","scope":1230,"src":"4079:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1224,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1227,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:4","nodeType":"VariableDeclaration","scope":1230,"src":"4091:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1226,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:4"},"returnParameters":{"id":1229,"nodeType":"ParameterList","parameters":[],"src":"4116:0:4"},"scope":1257,"src":"4062:55:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"4123:309:4","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1238,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:4","nodeType":"FunctionDefinition","parameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"operator","nameLocation":"4472:8:4","nodeType":"VariableDeclaration","scope":1238,"src":"4464:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1232,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1235,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:4","nodeType":"VariableDeclaration","scope":1238,"src":"4482:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1234,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:4"},"returnParameters":{"id":1237,"nodeType":"ParameterList","parameters":[],"src":"4506:0:4"},"scope":1257,"src":"4437:70:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1239,"nodeType":"StructuredDocumentation","src":"4513:139:4","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1246,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:4","nodeType":"FunctionDefinition","parameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:4","nodeType":"VariableDeclaration","scope":1246,"src":"4678:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:4"},"returnParameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"operator","nameLocation":"4726:8:4","nodeType":"VariableDeclaration","scope":1246,"src":"4718:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:4"},"scope":1257,"src":"4657:79:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"4742:138:4","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1256,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:4","nodeType":"FunctionDefinition","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"owner","nameLocation":"4919:5:4","nodeType":"VariableDeclaration","scope":1256,"src":"4911:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"operator","nameLocation":"4934:8:4","nodeType":"VariableDeclaration","scope":1256,"src":"4926:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:4"},"returnParameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1256,"src":"4967:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1253,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:4"},"scope":1257,"src":"4885:88:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1258,"src":"250:4725:4","usedErrors":[],"usedEvents":[1156,1165,1174]}],"src":"108:4868:4"},"id":4},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1275]},"id":1276,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1259,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"141:152:5","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1275,"linearizedBaseContracts":[1275],"name":"IERC721Receiver","nameLocation":"304:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"326:493:5","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1274,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:5","nodeType":"FunctionDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"operator","nameLocation":"867:8:5","nodeType":"VariableDeclaration","scope":1274,"src":"859:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"from","nameLocation":"893:4:5","nodeType":"VariableDeclaration","scope":1274,"src":"885:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1264,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:5","nodeType":"VariableDeclaration","scope":1274,"src":"907:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1266,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"data","nameLocation":"947:4:5","nodeType":"VariableDeclaration","scope":1274,"src":"932:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1268,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:5"},"returnParameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1274,"src":"976:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1271,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:5"},"scope":1275,"src":"824:160:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1276,"src":"294:692:5","usedErrors":[],"usedEvents":[]}],"src":"116:871:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[2565],"IERC721":[1257],"IERC721Metadata":[1302]},"id":1303,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1277,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1303,"sourceUnit":1258,"src":"137:24:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1280,"name":"IERC721","nameLocations":["326:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1257,"src":"326:7:6"},"id":1281,"nodeType":"InheritanceSpecifier","src":"326:7:6"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1279,"nodeType":"StructuredDocumentation","src":"163:133:6","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1302,"linearizedBaseContracts":[1302,1257,2565],"name":"IERC721Metadata","nameLocation":"307:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1282,"nodeType":"StructuredDocumentation","src":"340:58:6","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1287,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:6","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[],"src":"416:2:6"},"returnParameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1287,"src":"442:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1284,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:6"},"scope":1302,"src":"403:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1288,"nodeType":"StructuredDocumentation","src":"463:60:6","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1293,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:6","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[],"src":"543:2:6"},"returnParameters":{"id":1292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1293,"src":"569:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1290,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:6"},"scope":1302,"src":"528:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1294,"nodeType":"StructuredDocumentation","src":"590:90:6","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1301,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:6","nodeType":"FunctionDefinition","parameters":{"id":1297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1296,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:6","nodeType":"VariableDeclaration","scope":1301,"src":"703:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1295,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:6"},"returnParameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1301,"src":"743:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1298,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:6"},"scope":1302,"src":"685:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1303,"src":"297:463:6","usedErrors":[],"usedEvents":[1156,1165,1174]}],"src":"112:649:6"},"id":6},"@openzeppelin/contracts/token/common/ERC2981.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/common/ERC2981.sol","exportedSymbols":{"ERC165":[2553],"ERC2981":[1500],"IERC165":[2565],"IERC2981":[214]},"id":1501,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1304,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:7"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC2981.sol","file":"../../interfaces/IERC2981.sol","id":1305,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1501,"sourceUnit":215,"src":"133:39:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1306,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1501,"sourceUnit":2554,"src":"173:46:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1308,"name":"IERC2981","nameLocations":["1125:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":214,"src":"1125:8:7"},"id":1309,"nodeType":"InheritanceSpecifier","src":"1125:8:7"},{"baseName":{"id":1310,"name":"ERC165","nameLocations":["1135:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":2553,"src":"1135:6:7"},"id":1311,"nodeType":"InheritanceSpecifier","src":"1135:6:7"}],"canonicalName":"ERC2981","contractDependencies":[],"contractKind":"contract","documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"221:874:7","text":" @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n fee is specified in basis points by default.\n IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n _Available since v4.5._"},"fullyImplemented":true,"id":1500,"linearizedBaseContracts":[1500,2553,214,2565],"name":"ERC2981","nameLocation":"1114:7:7","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ERC2981.RoyaltyInfo","id":1316,"members":[{"constant":false,"id":1313,"mutability":"mutable","name":"receiver","nameLocation":"1185:8:7","nodeType":"VariableDeclaration","scope":1316,"src":"1177:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"1177:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"royaltyFraction","nameLocation":"1210:15:7","nodeType":"VariableDeclaration","scope":1316,"src":"1203:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1314,"name":"uint96","nodeType":"ElementaryTypeName","src":"1203:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"RoyaltyInfo","nameLocation":"1155:11:7","nodeType":"StructDefinition","scope":1500,"src":"1148:84:7","visibility":"public"},{"constant":false,"id":1319,"mutability":"mutable","name":"_defaultRoyaltyInfo","nameLocation":"1258:19:7","nodeType":"VariableDeclaration","scope":1500,"src":"1238:39:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo"},"typeName":{"id":1318,"nodeType":"UserDefinedTypeName","pathNode":{"id":1317,"name":"RoyaltyInfo","nameLocations":["1238:11:7"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"1238:11:7"},"referencedDeclaration":1316,"src":"1238:11:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage_ptr","typeString":"struct ERC2981.RoyaltyInfo"}},"visibility":"private"},{"constant":false,"id":1324,"mutability":"mutable","name":"_tokenRoyaltyInfo","nameLocation":"1323:17:7","nodeType":"VariableDeclaration","scope":1500,"src":"1283:57:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$1316_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo)"},"typeName":{"id":1323,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1320,"name":"uint256","nodeType":"ElementaryTypeName","src":"1291:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1283:31:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$1316_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1322,"nodeType":"UserDefinedTypeName","pathNode":{"id":1321,"name":"RoyaltyInfo","nameLocations":["1302:11:7"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"1302:11:7"},"referencedDeclaration":1316,"src":"1302:11:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage_ptr","typeString":"struct ERC2981.RoyaltyInfo"}}},"visibility":"private"},{"baseFunctions":[2552,2564],"body":{"id":1347,"nodeType":"Block","src":"1516:105:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1335,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"1533:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1337,"name":"IERC2981","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"1553:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC2981_$214_$","typeString":"type(contract IERC2981)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC2981_$214_$","typeString":"type(contract IERC2981)"}],"id":1336,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1548:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC2981_$214","typeString":"type(contract IERC2981)"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1548:26:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1533:41:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1343,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"1602:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1341,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1578:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC2981_$1500_$","typeString":"type(contract super ERC2981)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2552,"src":"1578:23:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1578:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1533:81:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1334,"id":1346,"nodeType":"Return","src":"1526:88:7"}]},"documentation":{"id":1325,"nodeType":"StructuredDocumentation","src":"1347:56:7","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1348,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1417:17:7","nodeType":"FunctionDefinition","overrides":{"id":1331,"nodeType":"OverrideSpecifier","overrides":[{"id":1329,"name":"IERC165","nameLocations":["1484:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"1484:7:7"},{"id":1330,"name":"ERC165","nameLocations":["1493:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":2553,"src":"1493:6:7"}],"src":"1475:25:7"},"parameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"interfaceId","nameLocation":"1442:11:7","nodeType":"VariableDeclaration","scope":1348,"src":"1435:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1326,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1435:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1434:20:7"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1348,"src":"1510:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1332,"name":"bool","nodeType":"ElementaryTypeName","src":"1510:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1509:6:7"},"scope":1500,"src":"1408:213:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[213],"body":{"id":1397,"nodeType":"Block","src":"1786:317:7","statements":[{"assignments":[1363],"declarations":[{"constant":false,"id":1363,"mutability":"mutable","name":"royalty","nameLocation":"1815:7:7","nodeType":"VariableDeclaration","scope":1397,"src":"1796:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo"},"typeName":{"id":1362,"nodeType":"UserDefinedTypeName","pathNode":{"id":1361,"name":"RoyaltyInfo","nameLocations":["1796:11:7"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"1796:11:7"},"referencedDeclaration":1316,"src":"1796:11:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage_ptr","typeString":"struct ERC2981.RoyaltyInfo"}},"visibility":"internal"}],"id":1367,"initialValue":{"baseExpression":{"id":1364,"name":"_tokenRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"1825:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$1316_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo storage ref)"}},"id":1366,"indexExpression":{"id":1365,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"1843:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1825:27:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1796:56:7"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1368,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"1867:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":1369,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1875:8:7","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":1313,"src":"1867:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1895:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1887:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1370,"name":"address","nodeType":"ElementaryTypeName","src":"1887:7:7","typeDescriptions":{}}},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1887:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1867:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1380,"nodeType":"IfStatement","src":"1863:90:7","trueBody":{"id":1379,"nodeType":"Block","src":"1899:54:7","statements":[{"expression":{"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1375,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"1913:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1376,"name":"_defaultRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"1923:19:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"src":"1913:29:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":1378,"nodeType":"ExpressionStatement","src":"1913:29:7"}]}},{"assignments":[1382],"declarations":[{"constant":false,"id":1382,"mutability":"mutable","name":"royaltyAmount","nameLocation":"1971:13:7","nodeType":"VariableDeclaration","scope":1397,"src":"1963:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1963:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1391,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1383,"name":"_salePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"1988:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":1384,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"2001:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":1385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2009:15:7","memberName":"royaltyFraction","nodeType":"MemberAccess","referencedDeclaration":1315,"src":"2001:23:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"1988:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1387,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1987:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1388,"name":"_feeDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2028:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint96_$","typeString":"function () pure returns (uint96)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2028:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"1987:58:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1963:82:7"},{"expression":{"components":[{"expression":{"id":1392,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"2064:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":1393,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2072:8:7","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":1313,"src":"2064:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1394,"name":"royaltyAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"2082:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1395,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2063:33:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"functionReturnParameters":1360,"id":1396,"nodeType":"Return","src":"2056:40:7"}]},"documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"1627:39:7","text":" @inheritdoc IERC2981"},"functionSelector":"2a55205a","id":1398,"implemented":true,"kind":"function","modifiers":[],"name":"royaltyInfo","nameLocation":"1680:11:7","nodeType":"FunctionDefinition","overrides":{"id":1355,"nodeType":"OverrideSpecifier","overrides":[],"src":"1750:8:7"},"parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"_tokenId","nameLocation":"1700:8:7","nodeType":"VariableDeclaration","scope":1398,"src":"1692:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"_salePrice","nameLocation":"1718:10:7","nodeType":"VariableDeclaration","scope":1398,"src":"1710:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"1710:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1691:38:7"},"returnParameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"1768:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1356,"name":"address","nodeType":"ElementaryTypeName","src":"1768:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"1777:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1358,"name":"uint256","nodeType":"ElementaryTypeName","src":"1777:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1767:18:7"},"scope":1500,"src":"1671:432:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1406,"nodeType":"Block","src":"2444:29:7","statements":[{"expression":{"hexValue":"3130303030","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2461:5:7","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"functionReturnParameters":1403,"id":1405,"nodeType":"Return","src":"2454:12:7"}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"2109:264:7","text":" @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n override."},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"_feeDenominator","nameLocation":"2387:15:7","nodeType":"FunctionDefinition","parameters":{"id":1400,"nodeType":"ParameterList","parameters":[],"src":"2402:2:7"},"returnParameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1407,"src":"2436:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1401,"name":"uint96","nodeType":"ElementaryTypeName","src":"2436:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"2435:8:7"},"scope":1500,"src":"2378:95:7","stateMutability":"pure","virtual":true,"visibility":"internal"},{"body":{"id":1440,"nodeType":"Block","src":"2818:243:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1416,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"2836:12:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1417,"name":"_feeDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2852:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint96_$","typeString":"function () pure returns (uint96)"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"2836:33:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243323938313a20726f79616c7479206665652077696c6c206578636565642073616c655072696365","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2871:44:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","typeString":"literal_string \"ERC2981: royalty fee will exceed salePrice\""},"value":"ERC2981: royalty fee will exceed salePrice"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","typeString":"literal_string \"ERC2981: royalty fee will exceed salePrice\""}],"id":1415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2828:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2828:88:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1422,"nodeType":"ExpressionStatement","src":"2828:88:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1424,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2934:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2954:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2946:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"2946:7:7","typeDescriptions":{}}},"id":1428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2946:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2934:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243323938313a20696e76616c6964207265636569766572","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2958:27:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff","typeString":"literal_string \"ERC2981: invalid receiver\""},"value":"ERC2981: invalid receiver"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff","typeString":"literal_string \"ERC2981: invalid receiver\""}],"id":1423,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2926:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2926:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1432,"nodeType":"ExpressionStatement","src":"2926:60:7"},{"expression":{"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1433,"name":"_defaultRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"2997:19:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1435,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"3031:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1436,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"3041:12:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":1434,"name":"RoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"3019:11:7","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RoyaltyInfo_$1316_storage_ptr_$","typeString":"type(struct ERC2981.RoyaltyInfo storage pointer)"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"src":"2997:57:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"id":1439,"nodeType":"ExpressionStatement","src":"2997:57:7"}]},"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"2479:250:7","text":" @dev Sets the royalty information that all ids in this contract will default to.\n Requirements:\n - `receiver` cannot be the zero address.\n - `feeNumerator` cannot be greater than the fee denominator."},"id":1441,"implemented":true,"kind":"function","modifiers":[],"name":"_setDefaultRoyalty","nameLocation":"2743:18:7","nodeType":"FunctionDefinition","parameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1410,"mutability":"mutable","name":"receiver","nameLocation":"2770:8:7","nodeType":"VariableDeclaration","scope":1441,"src":"2762:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1409,"name":"address","nodeType":"ElementaryTypeName","src":"2762:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"feeNumerator","nameLocation":"2787:12:7","nodeType":"VariableDeclaration","scope":1441,"src":"2780:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1411,"name":"uint96","nodeType":"ElementaryTypeName","src":"2780:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"2761:39:7"},"returnParameters":{"id":1414,"nodeType":"ParameterList","parameters":[],"src":"2818:0:7"},"scope":1500,"src":"2734:327:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1448,"nodeType":"Block","src":"3182:43:7","statements":[{"expression":{"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3192:26:7","subExpression":{"id":1445,"name":"_defaultRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"3199:19:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1447,"nodeType":"ExpressionStatement","src":"3192:26:7"}]},"documentation":{"id":1442,"nodeType":"StructuredDocumentation","src":"3067:60:7","text":" @dev Removes default royalty information."},"id":1449,"implemented":true,"kind":"function","modifiers":[],"name":"_deleteDefaultRoyalty","nameLocation":"3141:21:7","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[],"src":"3162:2:7"},"returnParameters":{"id":1444,"nodeType":"ParameterList","parameters":[],"src":"3182:0:7"},"scope":1500,"src":"3132:93:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1486,"nodeType":"Block","src":"3624:252:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1460,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"3642:12:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1461,"name":"_feeDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3658:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint96_$","typeString":"function () pure returns (uint96)"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3658:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"3642:33:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243323938313a20726f79616c7479206665652077696c6c206578636565642073616c655072696365","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3677:44:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","typeString":"literal_string \"ERC2981: royalty fee will exceed salePrice\""},"value":"ERC2981: royalty fee will exceed salePrice"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","typeString":"literal_string \"ERC2981: royalty fee will exceed salePrice\""}],"id":1459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3634:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:88:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1466,"nodeType":"ExpressionStatement","src":"3634:88:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1468,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"3740:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3760:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3752:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"3752:7:7","typeDescriptions":{}}},"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3752:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3740:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243323938313a20496e76616c696420706172616d6574657273","id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3764:29:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084","typeString":"literal_string \"ERC2981: Invalid parameters\""},"value":"ERC2981: Invalid parameters"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084","typeString":"literal_string \"ERC2981: Invalid parameters\""}],"id":1467,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3732:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1476,"nodeType":"ExpressionStatement","src":"3732:62:7"},{"expression":{"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1477,"name":"_tokenRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"3805:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$1316_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo storage ref)"}},"id":1479,"indexExpression":{"id":1478,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"3823:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3805:26:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1481,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"3846:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1482,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"3856:12:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":1480,"name":"RoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"3834:11:7","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RoyaltyInfo_$1316_storage_ptr_$","typeString":"type(struct ERC2981.RoyaltyInfo storage pointer)"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"src":"3805:64:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"id":1485,"nodeType":"ExpressionStatement","src":"3805:64:7"}]},"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"3231:259:7","text":" @dev Sets the royalty information for a specific token id, overriding the global default.\n Requirements:\n - `receiver` cannot be the zero address.\n - `feeNumerator` cannot be greater than the fee denominator."},"id":1487,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenRoyalty","nameLocation":"3504:16:7","nodeType":"FunctionDefinition","parameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"tokenId","nameLocation":"3538:7:7","nodeType":"VariableDeclaration","scope":1487,"src":"3530:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1451,"name":"uint256","nodeType":"ElementaryTypeName","src":"3530:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1454,"mutability":"mutable","name":"receiver","nameLocation":"3563:8:7","nodeType":"VariableDeclaration","scope":1487,"src":"3555:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1453,"name":"address","nodeType":"ElementaryTypeName","src":"3555:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1456,"mutability":"mutable","name":"feeNumerator","nameLocation":"3588:12:7","nodeType":"VariableDeclaration","scope":1487,"src":"3581:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1455,"name":"uint96","nodeType":"ElementaryTypeName","src":"3581:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3520:86:7"},"returnParameters":{"id":1458,"nodeType":"ParameterList","parameters":[],"src":"3624:0:7"},"scope":1500,"src":"3495:381:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1498,"nodeType":"Block","src":"4044:50:7","statements":[{"expression":{"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4054:33:7","subExpression":{"baseExpression":{"id":1493,"name":"_tokenRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"4061:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$1316_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo storage ref)"}},"id":1495,"indexExpression":{"id":1494,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"4079:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4061:26:7","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$1316_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1497,"nodeType":"ExpressionStatement","src":"4054:33:7"}]},"documentation":{"id":1488,"nodeType":"StructuredDocumentation","src":"3882:95:7","text":" @dev Resets royalty information for the token id back to the global default."},"id":1499,"implemented":true,"kind":"function","modifiers":[],"name":"_resetTokenRoyalty","nameLocation":"3991:18:7","nodeType":"FunctionDefinition","parameters":{"id":1491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1490,"mutability":"mutable","name":"tokenId","nameLocation":"4018:7:7","nodeType":"VariableDeclaration","scope":1499,"src":"4010:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"4010:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4009:17:7"},"returnParameters":{"id":1492,"nodeType":"ParameterList","parameters":[],"src":"4044:0:7"},"scope":1500,"src":"3982:112:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1501,"src":"1096:3000:7","usedErrors":[],"usedEvents":[]}],"src":"108:3989:7"},"id":7},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1830]},"id":1831,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1502,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1503,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1830,"linearizedBaseContracts":[1830],"name":"Address","nameLocation":"202:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1517,"nodeType":"Block","src":"1241:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1511,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"1465:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:8","memberName":"code","nodeType":"MemberAccess","src":"1465:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:8","memberName":"length","nodeType":"MemberAccess","src":"1465:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1510,"id":1516,"nodeType":"Return","src":"1458:30:8"}]},"documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"216:954:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1518,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:8","nodeType":"FunctionDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"account","nameLocation":"1203:7:8","nodeType":"VariableDeclaration","scope":1518,"src":"1195:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1505,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:8"},"returnParameters":{"id":1510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1509,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"1235:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1508,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:8"},"scope":1830,"src":"1175:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1551,"nodeType":"Block","src":"2483:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1529,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1830","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1830","typeString":"library Address"}],"id":1528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1527,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:8","typeDescriptions":{}}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:8","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1532,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"2526:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1526,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2493:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1536,"nodeType":"ExpressionStatement","src":"2493:73:8"},{"assignments":[1538,null],"declarations":[{"constant":false,"id":1538,"mutability":"mutable","name":"success","nameLocation":"2583:7:8","nodeType":"VariableDeclaration","scope":1551,"src":"2578:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1537,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1545,"initialValue":{"arguments":[{"hexValue":"","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1539,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"2596:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:8","memberName":"call","nodeType":"MemberAccess","src":"2596:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1541,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"2618:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:8"},{"expression":{"arguments":[{"id":1547,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"2647:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1546,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2639:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1550,"nodeType":"ExpressionStatement","src":"2639:78:8"}]},"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"1501:906:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1552,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:8","nodeType":"FunctionDefinition","parameters":{"id":1524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:8","nodeType":"VariableDeclaration","scope":1552,"src":"2431:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1520,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"amount","nameLocation":"2466:6:8","nodeType":"VariableDeclaration","scope":1552,"src":"2458:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1522,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:8"},"returnParameters":{"id":1525,"nodeType":"ParameterList","parameters":[],"src":"2483:0:8"},"scope":1830,"src":"2412:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1569,"nodeType":"Block","src":"3555:96:8","statements":[{"expression":{"arguments":[{"id":1563,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"3594:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1564,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"3602:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1562,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1610,1654],"referencedDeclaration":1654,"src":"3572:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1561,"id":1568,"nodeType":"Return","src":"3565:79:8"}]},"documentation":{"id":1553,"nodeType":"StructuredDocumentation","src":"2730:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1570,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:8","nodeType":"FunctionDefinition","parameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"target","nameLocation":"3496:6:8","nodeType":"VariableDeclaration","scope":1570,"src":"3488:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1554,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"data","nameLocation":"3517:4:8","nodeType":"VariableDeclaration","scope":1570,"src":"3504:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1556,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:8"},"returnParameters":{"id":1561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1570,"src":"3541:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1559,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:8"},"scope":1830,"src":"3466:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1589,"nodeType":"Block","src":"4020:76:8","statements":[{"expression":{"arguments":[{"id":1583,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"4059:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1584,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"4067:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1586,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"4076:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1582,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1610,1654],"referencedDeclaration":1654,"src":"4037:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1581,"id":1588,"nodeType":"Return","src":"4030:59:8"}]},"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"3657:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1590,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:8","nodeType":"FunctionDefinition","parameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"target","nameLocation":"3912:6:8","nodeType":"VariableDeclaration","scope":1590,"src":"3904:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"data","nameLocation":"3941:4:8","nodeType":"VariableDeclaration","scope":1590,"src":"3928:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1574,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1577,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:8","nodeType":"VariableDeclaration","scope":1590,"src":"3955:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1576,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:8"},"returnParameters":{"id":1581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1590,"src":"4006:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1579,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:8"},"scope":1830,"src":"3873:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1609,"nodeType":"Block","src":"4601:111:8","statements":[{"expression":{"arguments":[{"id":1603,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"4640:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1604,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"4648:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"4654:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1602,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1610,1654],"referencedDeclaration":1654,"src":"4618:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1601,"id":1608,"nodeType":"Return","src":"4611:94:8"}]},"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"4102:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:8","nodeType":"FunctionDefinition","parameters":{"id":1598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1593,"mutability":"mutable","name":"target","nameLocation":"4506:6:8","nodeType":"VariableDeclaration","scope":1610,"src":"4498:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1592,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1595,"mutability":"mutable","name":"data","nameLocation":"4535:4:8","nodeType":"VariableDeclaration","scope":1610,"src":"4522:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1594,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1597,"mutability":"mutable","name":"value","nameLocation":"4557:5:8","nodeType":"VariableDeclaration","scope":1610,"src":"4549:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1596,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:8"},"returnParameters":{"id":1601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1610,"src":"4587:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1599,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:8"},"scope":1830,"src":"4458:254:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1653,"nodeType":"Block","src":"5139:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1627,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1830","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1830","typeString":"library Address"}],"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1625,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:8","typeDescriptions":{}}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:8","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"5182:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5149:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1634,"nodeType":"ExpressionStatement","src":"5149:81:8"},{"assignments":[1636,1638],"declarations":[{"constant":false,"id":1636,"mutability":"mutable","name":"success","nameLocation":"5246:7:8","nodeType":"VariableDeclaration","scope":1653,"src":"5241:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1635,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:8","nodeType":"VariableDeclaration","scope":1653,"src":"5255:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1637,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1645,"initialValue":{"arguments":[{"id":1643,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"5308:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1639,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"5282:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:8","memberName":"call","nodeType":"MemberAccess","src":"5282:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"5301:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:8"},{"expression":{"arguments":[{"id":1647,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"5357:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1648,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1649,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"5374:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1650,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"5386:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1646,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"5330:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1623,"id":1652,"nodeType":"Return","src":"5323:76:8"}]},"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"4718:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1654,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:8","nodeType":"FunctionDefinition","parameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"target","nameLocation":"5008:6:8","nodeType":"VariableDeclaration","scope":1654,"src":"5000:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"data","nameLocation":"5037:4:8","nodeType":"VariableDeclaration","scope":1654,"src":"5024:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1614,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"value","nameLocation":"5059:5:8","nodeType":"VariableDeclaration","scope":1654,"src":"5051:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1616,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:8","nodeType":"VariableDeclaration","scope":1654,"src":"5074:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1618,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:8"},"returnParameters":{"id":1623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1654,"src":"5125:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1621,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:8"},"scope":1830,"src":"4960:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1670,"nodeType":"Block","src":"5683:97:8","statements":[{"expression":{"arguments":[{"id":1665,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"5719:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1666,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"5727:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1664,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1671,1700],"referencedDeclaration":1700,"src":"5700:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1663,"id":1669,"nodeType":"Return","src":"5693:80:8"}]},"documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"5412:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1671,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:8","nodeType":"FunctionDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"target","nameLocation":"5619:6:8","nodeType":"VariableDeclaration","scope":1671,"src":"5611:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1656,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1659,"mutability":"mutable","name":"data","nameLocation":"5640:4:8","nodeType":"VariableDeclaration","scope":1671,"src":"5627:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1658,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:8"},"returnParameters":{"id":1663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1671,"src":"5669:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1661,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:8"},"scope":1830,"src":"5583:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1699,"nodeType":"Block","src":"6122:168:8","statements":[{"assignments":[1684,1686],"declarations":[{"constant":false,"id":1684,"mutability":"mutable","name":"success","nameLocation":"6138:7:8","nodeType":"VariableDeclaration","scope":1699,"src":"6133:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1683,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:8","nodeType":"VariableDeclaration","scope":1699,"src":"6147:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1685,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1691,"initialValue":{"arguments":[{"id":1689,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"6192:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1687,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"6174:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:8","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:8"},{"expression":{"arguments":[{"id":1693,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"6241:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1694,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"6249:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1695,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"6258:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1696,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"6270:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1692,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"6214:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1682,"id":1698,"nodeType":"Return","src":"6207:76:8"}]},"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"5786:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1700,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:8","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"mutability":"mutable","name":"target","nameLocation":"6009:6:8","nodeType":"VariableDeclaration","scope":1700,"src":"6001:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"data","nameLocation":"6038:4:8","nodeType":"VariableDeclaration","scope":1700,"src":"6025:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1675,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1678,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:8","nodeType":"VariableDeclaration","scope":1700,"src":"6052:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1677,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:8"},"returnParameters":{"id":1682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1700,"src":"6108:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1680,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:8"},"scope":1830,"src":"5964:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1716,"nodeType":"Block","src":"6566:101:8","statements":[{"expression":{"arguments":[{"id":1711,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6604:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1712,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6612:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1710,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1717,1746],"referencedDeclaration":1746,"src":"6583:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1709,"id":1715,"nodeType":"Return","src":"6576:84:8"}]},"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"6296:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1717,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:8","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"target","nameLocation":"6507:6:8","nodeType":"VariableDeclaration","scope":1717,"src":"6499:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1705,"mutability":"mutable","name":"data","nameLocation":"6528:4:8","nodeType":"VariableDeclaration","scope":1717,"src":"6515:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1704,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:8"},"returnParameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1717,"src":"6552:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1707,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:8"},"scope":1830,"src":"6469:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1745,"nodeType":"Block","src":"7008:170:8","statements":[{"assignments":[1730,1732],"declarations":[{"constant":false,"id":1730,"mutability":"mutable","name":"success","nameLocation":"7024:7:8","nodeType":"VariableDeclaration","scope":1745,"src":"7019:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1729,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1732,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:8","nodeType":"VariableDeclaration","scope":1745,"src":"7033:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1731,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1737,"initialValue":{"arguments":[{"id":1735,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"7080:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1733,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7060:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:8","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:8"},{"expression":{"arguments":[{"id":1739,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7129:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1740,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"7137:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1741,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"7146:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1742,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"7158:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1738,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"7102:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1728,"id":1744,"nodeType":"Return","src":"7095:76:8"}]},"documentation":{"id":1718,"nodeType":"StructuredDocumentation","src":"6673:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1746,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:8","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"target","nameLocation":"6900:6:8","nodeType":"VariableDeclaration","scope":1746,"src":"6892:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1719,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"data","nameLocation":"6929:4:8","nodeType":"VariableDeclaration","scope":1746,"src":"6916:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1721,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:8","nodeType":"VariableDeclaration","scope":1746,"src":"6943:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1723,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:8"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1746,"src":"6994:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1726,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:8"},"scope":1830,"src":"6853:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1784,"nodeType":"Block","src":"7660:434:8","statements":[{"condition":{"id":1760,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"7674:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1782,"nodeType":"Block","src":"8030:58:8","statements":[{"expression":{"arguments":[{"id":1778,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"8052:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1779,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"8064:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1777,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"8044:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1781,"nodeType":"ExpressionStatement","src":"8044:33:8"}]},"id":1783,"nodeType":"IfStatement","src":"7670:418:8","trueBody":{"id":1776,"nodeType":"Block","src":"7683:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1761,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"7701:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:8","memberName":"length","nodeType":"MemberAccess","src":"7701:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1773,"nodeType":"IfStatement","src":"7697:286:8","trueBody":{"id":1772,"nodeType":"Block","src":"7725:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1767,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"7927:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1766,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"7916:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1765,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7908:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1771,"nodeType":"ExpressionStatement","src":"7908:60:8"}]}},{"expression":{"id":1774,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"8003:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1759,"id":1775,"nodeType":"Return","src":"7996:17:8"}]}}]},"documentation":{"id":1747,"nodeType":"StructuredDocumentation","src":"7184:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:8","nodeType":"FunctionDefinition","parameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"target","nameLocation":"7519:6:8","nodeType":"VariableDeclaration","scope":1785,"src":"7511:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1748,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1751,"mutability":"mutable","name":"success","nameLocation":"7540:7:8","nodeType":"VariableDeclaration","scope":1785,"src":"7535:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1750,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1753,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:8","nodeType":"VariableDeclaration","scope":1785,"src":"7557:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1752,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1755,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:8","nodeType":"VariableDeclaration","scope":1785,"src":"7590:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1754,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:8"},"returnParameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1785,"src":"7646:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1757,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:8"},"scope":1830,"src":"7466:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1808,"nodeType":"Block","src":"8475:135:8","statements":[{"condition":{"id":1797,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"8489:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1806,"nodeType":"Block","src":"8546:58:8","statements":[{"expression":{"arguments":[{"id":1802,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"8568:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1803,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"8580:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1801,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"8560:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1805,"nodeType":"ExpressionStatement","src":"8560:33:8"}]},"id":1807,"nodeType":"IfStatement","src":"8485:119:8","trueBody":{"id":1800,"nodeType":"Block","src":"8498:42:8","statements":[{"expression":{"id":1798,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"8519:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1796,"id":1799,"nodeType":"Return","src":"8512:17:8"}]}}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"8100:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:8","nodeType":"FunctionDefinition","parameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"success","nameLocation":"8355:7:8","nodeType":"VariableDeclaration","scope":1809,"src":"8350:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1787,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:8","nodeType":"VariableDeclaration","scope":1809,"src":"8372:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1789,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1792,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:8","nodeType":"VariableDeclaration","scope":1809,"src":"8405:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1791,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:8"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"8461:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1794,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:8"},"scope":1830,"src":"8315:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1828,"nodeType":"Block","src":"8699:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1816,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"8775:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:8","memberName":"length","nodeType":"MemberAccess","src":"8775:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1826,"nodeType":"Block","src":"9105:45:8","statements":[{"expression":{"arguments":[{"id":1823,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"9126:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1822,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1825,"nodeType":"ExpressionStatement","src":"9119:20:8"}]},"id":1827,"nodeType":"IfStatement","src":"8771:379:8","trueBody":{"id":1821,"nodeType":"Block","src":"8798:301:8","statements":[{"AST":{"nativeSrc":"8956:133:8","nodeType":"YulBlock","src":"8956:133:8","statements":[{"nativeSrc":"8974:40:8","nodeType":"YulVariableDeclaration","src":"8974:40:8","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:8","nodeType":"YulIdentifier","src":"9003:10:8"}],"functionName":{"name":"mload","nativeSrc":"8997:5:8","nodeType":"YulIdentifier","src":"8997:5:8"},"nativeSrc":"8997:17:8","nodeType":"YulFunctionCall","src":"8997:17:8"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:8","nodeType":"YulTypedName","src":"8978:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:8","nodeType":"YulLiteral","src":"9042:2:8","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:8","nodeType":"YulIdentifier","src":"9046:10:8"}],"functionName":{"name":"add","nativeSrc":"9038:3:8","nodeType":"YulIdentifier","src":"9038:3:8"},"nativeSrc":"9038:19:8","nodeType":"YulFunctionCall","src":"9038:19:8"},{"name":"returndata_size","nativeSrc":"9059:15:8","nodeType":"YulIdentifier","src":"9059:15:8"}],"functionName":{"name":"revert","nativeSrc":"9031:6:8","nodeType":"YulIdentifier","src":"9031:6:8"},"nativeSrc":"9031:44:8","nodeType":"YulFunctionCall","src":"9031:44:8"},"nativeSrc":"9031:44:8","nodeType":"YulExpressionStatement","src":"9031:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1811,"isOffset":false,"isSlot":false,"src":"9003:10:8","valueSize":1},{"declaration":1811,"isOffset":false,"isSlot":false,"src":"9046:10:8","valueSize":1}],"id":1820,"nodeType":"InlineAssembly","src":"8947:142:8"}]}}]},"id":1829,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:8","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:8","nodeType":"VariableDeclaration","scope":1829,"src":"8633:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1810,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:8","nodeType":"VariableDeclaration","scope":1829,"src":"8658:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1812,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:8"},"returnParameters":{"id":1815,"nodeType":"ParameterList","parameters":[],"src":"8699:0:8"},"scope":1830,"src":"8616:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1831,"src":"194:8964:8","usedErrors":[],"usedEvents":[]}],"src":"101:9058:8"},"id":8},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1852]},"id":1853,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1832,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:9"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"111:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1852,"linearizedBaseContracts":[1852],"name":"Context","nameLocation":"626:7:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1841,"nodeType":"Block","src":"702:34:9","statements":[{"expression":{"expression":{"id":1838,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:9","memberName":"sender","nodeType":"MemberAccess","src":"719:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1837,"id":1840,"nodeType":"Return","src":"712:17:9"}]},"id":1842,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:9","nodeType":"FunctionDefinition","parameters":{"id":1834,"nodeType":"ParameterList","parameters":[],"src":"659:2:9"},"returnParameters":{"id":1837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1842,"src":"693:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:9"},"scope":1852,"src":"640:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1850,"nodeType":"Block","src":"809:32:9","statements":[{"expression":{"expression":{"id":1847,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:9","memberName":"data","nodeType":"MemberAccess","src":"826:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1846,"id":1849,"nodeType":"Return","src":"819:15:9"}]},"id":1851,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:9","nodeType":"FunctionDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[],"src":"759:2:9"},"returnParameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"793:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1844,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:9"},"scope":1852,"src":"742:99:9","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1853,"src":"608:235:9","usedErrors":[],"usedEvents":[]}],"src":"86:758:9"},"id":9},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3430],"Strings":[2027]},"id":2028,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1854,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2028,"sourceUnit":3431,"src":"126:25:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"153:34:10","text":" @dev String operations."},"fullyImplemented":true,"id":2027,"linearizedBaseContracts":[2027],"name":"Strings","nameLocation":"196:7:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1859,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:10","nodeType":"VariableDeclaration","scope":2027,"src":"210:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1857,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1862,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:10","nodeType":"VariableDeclaration","scope":2027,"src":"270:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1860,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:10","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1909,"nodeType":"Block","src":"486:625:10","statements":[{"id":1908,"nodeType":"UncheckedBlock","src":"496:609:10","statements":[{"assignments":[1871],"declarations":[{"constant":false,"id":1871,"mutability":"mutable","name":"length","nameLocation":"528:6:10","nodeType":"VariableDeclaration","scope":1908,"src":"520:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1878,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"548:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1872,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"537:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3430_$","typeString":"type(library Math)"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:10","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3267,"src":"537:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:10"},{"assignments":[1880],"declarations":[{"constant":false,"id":1880,"mutability":"mutable","name":"buffer","nameLocation":"586:6:10","nodeType":"VariableDeclaration","scope":1908,"src":"572:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1879,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1885,"initialValue":{"arguments":[{"id":1883,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"606:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1881,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:10"},{"assignments":[1887],"declarations":[{"constant":false,"id":1887,"mutability":"mutable","name":"ptr","nameLocation":"635:3:10","nodeType":"VariableDeclaration","scope":1908,"src":"627:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1888,"nodeType":"VariableDeclarationStatement","src":"627:11:10"},{"AST":{"nativeSrc":"708:67:10","nodeType":"YulBlock","src":"708:67:10","statements":[{"nativeSrc":"726:35:10","nodeType":"YulAssignment","src":"726:35:10","value":{"arguments":[{"name":"buffer","nativeSrc":"737:6:10","nodeType":"YulIdentifier","src":"737:6:10"},{"arguments":[{"kind":"number","nativeSrc":"749:2:10","nodeType":"YulLiteral","src":"749:2:10","type":"","value":"32"},{"name":"length","nativeSrc":"753:6:10","nodeType":"YulIdentifier","src":"753:6:10"}],"functionName":{"name":"add","nativeSrc":"745:3:10","nodeType":"YulIdentifier","src":"745:3:10"},"nativeSrc":"745:15:10","nodeType":"YulFunctionCall","src":"745:15:10"}],"functionName":{"name":"add","nativeSrc":"733:3:10","nodeType":"YulIdentifier","src":"733:3:10"},"nativeSrc":"733:28:10","nodeType":"YulFunctionCall","src":"733:28:10"},"variableNames":[{"name":"ptr","nativeSrc":"726:3:10","nodeType":"YulIdentifier","src":"726:3:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1880,"isOffset":false,"isSlot":false,"src":"737:6:10","valueSize":1},{"declaration":1871,"isOffset":false,"isSlot":false,"src":"753:6:10","valueSize":1},{"declaration":1887,"isOffset":false,"isSlot":false,"src":"726:3:10","valueSize":1}],"id":1889,"nodeType":"InlineAssembly","src":"699:76:10"},{"body":{"id":1904,"nodeType":"Block","src":"801:267:10","statements":[{"expression":{"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:10","subExpression":{"id":1891,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"819:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1893,"nodeType":"ExpressionStatement","src":"819:5:10"},{"AST":{"nativeSrc":"902:84:10","nodeType":"YulBlock","src":"902:84:10","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"932:3:10","nodeType":"YulIdentifier","src":"932:3:10"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"946:5:10","nodeType":"YulIdentifier","src":"946:5:10"},{"kind":"number","nativeSrc":"953:2:10","nodeType":"YulLiteral","src":"953:2:10","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"942:3:10","nodeType":"YulIdentifier","src":"942:3:10"},"nativeSrc":"942:14:10","nodeType":"YulFunctionCall","src":"942:14:10"},{"name":"_SYMBOLS","nativeSrc":"958:8:10","nodeType":"YulIdentifier","src":"958:8:10"}],"functionName":{"name":"byte","nativeSrc":"937:4:10","nodeType":"YulIdentifier","src":"937:4:10"},"nativeSrc":"937:30:10","nodeType":"YulFunctionCall","src":"937:30:10"}],"functionName":{"name":"mstore8","nativeSrc":"924:7:10","nodeType":"YulIdentifier","src":"924:7:10"},"nativeSrc":"924:44:10","nodeType":"YulFunctionCall","src":"924:44:10"},"nativeSrc":"924:44:10","nodeType":"YulExpressionStatement","src":"924:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1859,"isOffset":false,"isSlot":false,"src":"958:8:10","valueSize":1},{"declaration":1887,"isOffset":false,"isSlot":false,"src":"932:3:10","valueSize":1},{"declaration":1865,"isOffset":false,"isSlot":false,"src":"946:5:10","valueSize":1}],"id":1894,"nodeType":"InlineAssembly","src":"893:93:10"},{"expression":{"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1898,"nodeType":"ExpressionStatement","src":"1003:11:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"1036:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1903,"nodeType":"IfStatement","src":"1032:21:10","trueBody":{"id":1902,"nodeType":"Break","src":"1048:5:10"}}]},"condition":{"hexValue":"74727565","id":1890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1905,"nodeType":"WhileStatement","src":"788:280:10"},{"expression":{"id":1906,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"1088:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1869,"id":1907,"nodeType":"Return","src":"1081:13:10"}]}]},"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"320:90:10","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:10","nodeType":"FunctionDefinition","parameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"value","nameLocation":"441:5:10","nodeType":"VariableDeclaration","scope":1910,"src":"433:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:10"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"471:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1867,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:10"},"scope":2027,"src":"415:696:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1929,"nodeType":"Block","src":"1290:100:10","statements":[{"id":1928,"nodeType":"UncheckedBlock","src":"1300:84:10","statements":[{"expression":{"arguments":[{"id":1919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"1343:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"1362:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1920,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"1350:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3430_$","typeString":"type(library Math)"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:10","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3390,"src":"1350:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1918,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1930,2006,2026],"referencedDeclaration":2006,"src":"1331:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1917,"id":1927,"nodeType":"Return","src":"1324:49:10"}]}]},"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"1117:94:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1930,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:10","nodeType":"FunctionDefinition","parameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"value","nameLocation":"1245:5:10","nodeType":"VariableDeclaration","scope":1930,"src":"1237:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:10"},"returnParameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1930,"src":"1275:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1915,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:10"},"scope":2027,"src":"1216:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2005,"nodeType":"Block","src":"1603:347:10","statements":[{"assignments":[1941],"declarations":[{"constant":false,"id":1941,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:10","nodeType":"VariableDeclaration","scope":2005,"src":"1613:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1940,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1950,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1945,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"1649:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1942,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:10"},{"expression":{"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1951,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"1670:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1953,"indexExpression":{"hexValue":"30","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1956,"nodeType":"ExpressionStatement","src":"1670:15:10"},{"expression":{"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1957,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"1695:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1959,"indexExpression":{"hexValue":"31","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1962,"nodeType":"ExpressionStatement","src":"1695:15:10"},{"body":{"id":1991,"nodeType":"Block","src":"1765:83:10","statements":[{"expression":{"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1977,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"1779:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1979,"indexExpression":{"id":1978,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"1786:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1980,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"1791:8:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1984,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"1800:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:10","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1986,"nodeType":"ExpressionStatement","src":"1779:33:10"},{"expression":{"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"1826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1990,"nodeType":"ExpressionStatement","src":"1826:11:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1971,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"1753:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1992,"initializationExpression":{"assignments":[1964],"declarations":[{"constant":false,"id":1964,"mutability":"mutable","name":"i","nameLocation":"1733:1:10","nodeType":"VariableDeclaration","scope":1992,"src":"1725:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1963,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1970,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1966,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"1741:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:10"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:10","subExpression":{"id":1974,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"1762:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1976,"nodeType":"ExpressionStatement","src":"1760:3:10"},"nodeType":"ForStatement","src":"1720:128:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"1865:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1993,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1857:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1999,"nodeType":"ExpressionStatement","src":"1857:55:10"},{"expression":{"arguments":[{"id":2002,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"1936:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2000,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:10","typeDescriptions":{}}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1939,"id":2004,"nodeType":"Return","src":"1922:21:10"}]},"documentation":{"id":1931,"nodeType":"StructuredDocumentation","src":"1396:112:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2006,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:10","nodeType":"FunctionDefinition","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1933,"mutability":"mutable","name":"value","nameLocation":"1542:5:10","nodeType":"VariableDeclaration","scope":2006,"src":"1534:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1932,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1935,"mutability":"mutable","name":"length","nameLocation":"1557:6:10","nodeType":"VariableDeclaration","scope":2006,"src":"1549:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:10"},"returnParameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2006,"src":"1588:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1937,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:10"},"scope":2027,"src":"1513:437:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2025,"nodeType":"Block","src":"2175:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2019,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"2220:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2017,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:10","typeDescriptions":{}}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2015,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:10","typeDescriptions":{}}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2022,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2228:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2014,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1930,2006,2026],"referencedDeclaration":2006,"src":"2192:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2013,"id":2024,"nodeType":"Return","src":"2185:59:10"}]},"documentation":{"id":2007,"nodeType":"StructuredDocumentation","src":"1956:141:10","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2026,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:10","nodeType":"FunctionDefinition","parameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"addr","nameLocation":"2131:4:10","nodeType":"VariableDeclaration","scope":2026,"src":"2123:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:10"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2026,"src":"2160:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2011,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:10"},"scope":2027,"src":"2102:149:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2028,"src":"188:2065:10","usedErrors":[],"usedEvents":[]}],"src":"101:2153:10"},"id":10},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[2529]},"id":2530,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2029,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":2030,"nodeType":"StructuredDocumentation","src":"143:658:11","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":2529,"linearizedBaseContracts":[2529],"name":"MerkleProof","nameLocation":"810:11:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2050,"nodeType":"Block","src":"1283:57:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2044,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"1313:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2045,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"1320:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2043,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"1300:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2047,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"1329:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2042,"id":2049,"nodeType":"Return","src":"1293:40:11"}]},"documentation":{"id":2031,"nodeType":"StructuredDocumentation","src":"828:323:11","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":2051,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:11","nodeType":"FunctionDefinition","parameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2034,"mutability":"mutable","name":"proof","nameLocation":"1198:5:11","nodeType":"VariableDeclaration","scope":2051,"src":"1181:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2033,"nodeType":"ArrayTypeName","src":"1181:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2036,"mutability":"mutable","name":"root","nameLocation":"1221:4:11","nodeType":"VariableDeclaration","scope":2051,"src":"1213:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2035,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:11","nodeType":"VariableDeclaration","scope":2051,"src":"1235:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2037,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:11"},"returnParameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2051,"src":"1277:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2040,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:11"},"scope":2529,"src":"1156:184:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2071,"nodeType":"Block","src":"1578:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2065,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1616:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2066,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"1623:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2064,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1595:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2068,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"1632:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2063,"id":2070,"nodeType":"Return","src":"1588:48:11"}]},"documentation":{"id":2052,"nodeType":"StructuredDocumentation","src":"1346:90:11","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":2072,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:11","nodeType":"FunctionDefinition","parameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"proof","nameLocation":"1493:5:11","nodeType":"VariableDeclaration","scope":2072,"src":"1474:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2053,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2054,"nodeType":"ArrayTypeName","src":"1474:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"root","nameLocation":"1516:4:11","nodeType":"VariableDeclaration","scope":2072,"src":"1508:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2059,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:11","nodeType":"VariableDeclaration","scope":2072,"src":"1530:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2058,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:11"},"returnParameters":{"id":2063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2072,"src":"1572:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2061,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:11"},"scope":2529,"src":"1441:202:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2111,"nodeType":"Block","src":"2086:198:11","statements":[{"assignments":[2084],"declarations":[{"constant":false,"id":2084,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:11","nodeType":"VariableDeclaration","scope":2111,"src":"2096:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2086,"initialValue":{"id":2085,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2119:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:11"},{"body":{"id":2107,"nodeType":"Block","src":"2176:73:11","statements":[{"expression":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2098,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2190:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2100,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2215:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2101,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2229:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2103,"indexExpression":{"id":2102,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"2235:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2099,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"2205:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2106,"nodeType":"ExpressionStatement","src":"2190:48:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2091,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"2153:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2092,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2157:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:11","memberName":"length","nodeType":"MemberAccess","src":"2157:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2108,"initializationExpression":{"assignments":[2088],"declarations":[{"constant":false,"id":2088,"mutability":"mutable","name":"i","nameLocation":"2146:1:11","nodeType":"VariableDeclaration","scope":2108,"src":"2138:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2090,"initialValue":{"hexValue":"30","id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:11"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:11","subExpression":{"id":2095,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"2171:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2097,"nodeType":"ExpressionStatement","src":"2171:3:11"},"nodeType":"ForStatement","src":"2133:116:11"},{"expression":{"id":2109,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2265:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2082,"id":2110,"nodeType":"Return","src":"2258:19:11"}]},"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"1649:340:11","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":2112,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:11","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"proof","nameLocation":"2033:5:11","nodeType":"VariableDeclaration","scope":2112,"src":"2016:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2075,"nodeType":"ArrayTypeName","src":"2016:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:11","nodeType":"VariableDeclaration","scope":2112,"src":"2040:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:11"},"returnParameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2112,"src":"2077:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:11"},"scope":2529,"src":"1994:290:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2151,"nodeType":"Block","src":"2493:198:11","statements":[{"assignments":[2124],"declarations":[{"constant":false,"id":2124,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:11","nodeType":"VariableDeclaration","scope":2151,"src":"2503:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2126,"initialValue":{"id":2125,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2526:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:11"},{"body":{"id":2147,"nodeType":"Block","src":"2583:73:11","statements":[{"expression":{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2138,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2597:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2140,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2622:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2141,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"2636:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2143,"indexExpression":{"id":2142,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"2642:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2139,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"2612:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2146,"nodeType":"ExpressionStatement","src":"2597:48:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"2560:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2132,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"2564:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:11","memberName":"length","nodeType":"MemberAccess","src":"2564:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2148,"initializationExpression":{"assignments":[2128],"declarations":[{"constant":false,"id":2128,"mutability":"mutable","name":"i","nameLocation":"2553:1:11","nodeType":"VariableDeclaration","scope":2148,"src":"2545:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2130,"initialValue":{"hexValue":"30","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:11"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:11","subExpression":{"id":2135,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"2578:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2137,"nodeType":"ExpressionStatement","src":"2578:3:11"},"nodeType":"ForStatement","src":"2540:116:11"},{"expression":{"id":2149,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2672:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2122,"id":2150,"nodeType":"Return","src":"2665:19:11"}]},"documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"2290:96:11","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":2152,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:11","nodeType":"FunctionDefinition","parameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"proof","nameLocation":"2440:5:11","nodeType":"VariableDeclaration","scope":2152,"src":"2421:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2115,"nodeType":"ArrayTypeName","src":"2421:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2118,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:11","nodeType":"VariableDeclaration","scope":2152,"src":"2447:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:11"},"returnParameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2152,"src":"2484:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:11"},"scope":2529,"src":"2391:300:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2177,"nodeType":"Block","src":"3234:76:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2170,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"3269:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2171,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"3276:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":2172,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"3288:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2169,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"3251:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2174,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"3299:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2168,"id":2176,"nodeType":"Return","src":"3244:59:11"}]},"documentation":{"id":2153,"nodeType":"StructuredDocumentation","src":"2697:350:11","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2178,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:11","nodeType":"FunctionDefinition","parameters":{"id":2165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"proof","nameLocation":"3104:5:11","nodeType":"VariableDeclaration","scope":2178,"src":"3087:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2154,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2155,"nodeType":"ArrayTypeName","src":"3087:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:11","nodeType":"VariableDeclaration","scope":2178,"src":"3119:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2157,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2158,"nodeType":"ArrayTypeName","src":"3119:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"root","nameLocation":"3161:4:11","nodeType":"VariableDeclaration","scope":2178,"src":"3153:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2164,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:11","nodeType":"VariableDeclaration","scope":2178,"src":"3175:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2163,"nodeType":"ArrayTypeName","src":"3175:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:11"},"returnParameters":{"id":2168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2178,"src":"3228:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2166,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:11"},"scope":2529,"src":"3052:258:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2203,"nodeType":"Block","src":"3715:84:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2196,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"3758:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2197,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"3765:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":2198,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"3777:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2195,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"3732:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2200,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"3788:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2194,"id":2202,"nodeType":"Return","src":"3725:67:11"}]},"documentation":{"id":2179,"nodeType":"StructuredDocumentation","src":"3316:200:11","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2204,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:11","nodeType":"FunctionDefinition","parameters":{"id":2191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2182,"mutability":"mutable","name":"proof","nameLocation":"3583:5:11","nodeType":"VariableDeclaration","scope":2204,"src":"3564:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2181,"nodeType":"ArrayTypeName","src":"3564:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2185,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:11","nodeType":"VariableDeclaration","scope":2204,"src":"3598:26:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2183,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2184,"nodeType":"ArrayTypeName","src":"3598:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2187,"mutability":"mutable","name":"root","nameLocation":"3642:4:11","nodeType":"VariableDeclaration","scope":2204,"src":"3634:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2190,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:11","nodeType":"VariableDeclaration","scope":2204,"src":"3656:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2189,"nodeType":"ArrayTypeName","src":"3656:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:11"},"returnParameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2204,"src":"3709:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2192,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:11"},"scope":2529,"src":"3521:278:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2348,"nodeType":"Block","src":"4753:1860:11","statements":[{"assignments":[2220],"declarations":[{"constant":false,"id":2220,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:11","nodeType":"VariableDeclaration","scope":2348,"src":"5136:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2223,"initialValue":{"expression":{"id":2221,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"5156:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:11","memberName":"length","nodeType":"MemberAccess","src":"5156:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:11"},{"assignments":[2225],"declarations":[{"constant":false,"id":2225,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:11","nodeType":"VariableDeclaration","scope":2348,"src":"5179:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2228,"initialValue":{"expression":{"id":2226,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"5201:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:11","memberName":"length","nodeType":"MemberAccess","src":"5201:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2230,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"5270:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2231,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"5282:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:11","memberName":"length","nodeType":"MemberAccess","src":"5282:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2236,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"5302:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2229,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5262:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2240,"nodeType":"ExpressionStatement","src":"5262:87:11"},{"assignments":[2245],"declarations":[{"constant":false,"id":2245,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:11","nodeType":"VariableDeclaration","scope":2348,"src":"5594:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2244,"nodeType":"ArrayTypeName","src":"5594:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2251,"initialValue":{"arguments":[{"id":2249,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"5634:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2247,"nodeType":"ArrayTypeName","src":"5624:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:11"},{"assignments":[2253],"declarations":[{"constant":false,"id":2253,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:11","nodeType":"VariableDeclaration","scope":2348,"src":"5656:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2255,"initialValue":{"hexValue":"30","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:11"},{"assignments":[2257],"declarations":[{"constant":false,"id":2257,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:11","nodeType":"VariableDeclaration","scope":2348,"src":"5685:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2256,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2259,"initialValue":{"hexValue":"30","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:11"},{"assignments":[2261],"declarations":[{"constant":false,"id":2261,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:11","nodeType":"VariableDeclaration","scope":2348,"src":"5714:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2263,"initialValue":{"hexValue":"30","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:11"},{"body":{"id":2321,"nodeType":"Block","src":"6151:258:11","statements":[{"assignments":[2275],"declarations":[{"constant":false,"id":2275,"mutability":"mutable","name":"a","nameLocation":"6173:1:11","nodeType":"VariableDeclaration","scope":2321,"src":"6165:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2288,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2276,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"6177:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2277,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"6187:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2283,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"6219:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2286,"indexExpression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:11","subExpression":{"id":2284,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"6226:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:11","trueExpression":{"baseExpression":{"id":2279,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"6199:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2282,"indexExpression":{"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:11","subExpression":{"id":2280,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"6206:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:11"},{"assignments":[2290],"declarations":[{"constant":false,"id":2290,"mutability":"mutable","name":"b","nameLocation":"6258:1:11","nodeType":"VariableDeclaration","scope":2321,"src":"6250:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2311,"initialValue":{"condition":{"baseExpression":{"id":2291,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"6262:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2293,"indexExpression":{"id":2292,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"6273:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2306,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"6340:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2309,"indexExpression":{"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:11","subExpression":{"id":2307,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"6346:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:11","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2294,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"6278:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2295,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"6288:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2301,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"6320:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2304,"indexExpression":{"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:11","subExpression":{"id":2302,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"6327:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:11","trueExpression":{"baseExpression":{"id":2297,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"6300:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2300,"indexExpression":{"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:11","subExpression":{"id":2298,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"6307:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:11"},{"expression":{"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2312,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"6371:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2314,"indexExpression":{"id":2313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"6378:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2316,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"6393:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2317,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"6396:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2315,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"6383:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2320,"nodeType":"ExpressionStatement","src":"6371:27:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"6129:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2269,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"6133:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2322,"initializationExpression":{"assignments":[2265],"declarations":[{"constant":false,"id":2265,"mutability":"mutable","name":"i","nameLocation":"6122:1:11","nodeType":"VariableDeclaration","scope":2322,"src":"6114:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2264,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2267,"initialValue":{"hexValue":"30","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:11"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:11","subExpression":{"id":2271,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"6146:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2273,"nodeType":"ExpressionStatement","src":"6146:3:11"},"nodeType":"ForStatement","src":"6109:300:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2323,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"6423:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2333,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"6505:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2345,"nodeType":"Block","src":"6567:40:11","statements":[{"expression":{"baseExpression":{"id":2341,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"6588:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2343,"indexExpression":{"hexValue":"30","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2218,"id":2344,"nodeType":"Return","src":"6581:15:11"}]},"id":2346,"nodeType":"IfStatement","src":"6501:106:11","trueBody":{"id":2340,"nodeType":"Block","src":"6520:41:11","statements":[{"expression":{"baseExpression":{"id":2336,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"6541:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2338,"indexExpression":{"hexValue":"30","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2218,"id":2339,"nodeType":"Return","src":"6534:16:11"}]}},"id":2347,"nodeType":"IfStatement","src":"6419:188:11","trueBody":{"id":2332,"nodeType":"Block","src":"6440:55:11","statements":[{"expression":{"baseExpression":{"id":2326,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"6461:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2330,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2327,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"6468:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2218,"id":2331,"nodeType":"Return","src":"6454:30:11"}]}}]},"documentation":{"id":2205,"nodeType":"StructuredDocumentation","src":"3805:768:11","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":2349,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:11","nodeType":"FunctionDefinition","parameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"proof","nameLocation":"4631:5:11","nodeType":"VariableDeclaration","scope":2349,"src":"4614:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2207,"nodeType":"ArrayTypeName","src":"4614:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:11","nodeType":"VariableDeclaration","scope":2349,"src":"4646:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2209,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2210,"nodeType":"ArrayTypeName","src":"4646:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2214,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:11","nodeType":"VariableDeclaration","scope":2349,"src":"4680:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2213,"nodeType":"ArrayTypeName","src":"4680:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:11"},"returnParameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:11","nodeType":"VariableDeclaration","scope":2349,"src":"4733:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:11"},"scope":2529,"src":"4578:2035:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2493,"nodeType":"Block","src":"7013:1860:11","statements":[{"assignments":[2365],"declarations":[{"constant":false,"id":2365,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:11","nodeType":"VariableDeclaration","scope":2493,"src":"7396:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2364,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2368,"initialValue":{"expression":{"id":2366,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"7416:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:11","memberName":"length","nodeType":"MemberAccess","src":"7416:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:11"},{"assignments":[2370],"declarations":[{"constant":false,"id":2370,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:11","nodeType":"VariableDeclaration","scope":2493,"src":"7439:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2369,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2373,"initialValue":{"expression":{"id":2371,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"7461:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:11","memberName":"length","nodeType":"MemberAccess","src":"7461:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2375,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"7530:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2376,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"7542:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:11","memberName":"length","nodeType":"MemberAccess","src":"7542:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2381,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"7562:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7522:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2385,"nodeType":"ExpressionStatement","src":"7522:87:11"},{"assignments":[2390],"declarations":[{"constant":false,"id":2390,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:11","nodeType":"VariableDeclaration","scope":2493,"src":"7854:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2389,"nodeType":"ArrayTypeName","src":"7854:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2396,"initialValue":{"arguments":[{"id":2394,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"7894:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2392,"nodeType":"ArrayTypeName","src":"7884:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:11"},{"assignments":[2398],"declarations":[{"constant":false,"id":2398,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:11","nodeType":"VariableDeclaration","scope":2493,"src":"7916:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2397,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2400,"initialValue":{"hexValue":"30","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:11"},{"assignments":[2402],"declarations":[{"constant":false,"id":2402,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:11","nodeType":"VariableDeclaration","scope":2493,"src":"7945:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2401,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2404,"initialValue":{"hexValue":"30","id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:11"},{"assignments":[2406],"declarations":[{"constant":false,"id":2406,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:11","nodeType":"VariableDeclaration","scope":2493,"src":"7974:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2405,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2408,"initialValue":{"hexValue":"30","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:11"},{"body":{"id":2466,"nodeType":"Block","src":"8411:258:11","statements":[{"assignments":[2420],"declarations":[{"constant":false,"id":2420,"mutability":"mutable","name":"a","nameLocation":"8433:1:11","nodeType":"VariableDeclaration","scope":2466,"src":"8425:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2433,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2421,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"8437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2422,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"8447:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2428,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8479:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2431,"indexExpression":{"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:11","subExpression":{"id":2429,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"8486:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:11","trueExpression":{"baseExpression":{"id":2424,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8459:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2427,"indexExpression":{"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:11","subExpression":{"id":2425,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"8466:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:11"},{"assignments":[2435],"declarations":[{"constant":false,"id":2435,"mutability":"mutable","name":"b","nameLocation":"8518:1:11","nodeType":"VariableDeclaration","scope":2466,"src":"8510:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2456,"initialValue":{"condition":{"baseExpression":{"id":2436,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"8522:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2438,"indexExpression":{"id":2437,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"8533:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2451,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"8600:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2454,"indexExpression":{"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:11","subExpression":{"id":2452,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"8606:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:11","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"8538:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2440,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"8548:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2446,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8580:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2449,"indexExpression":{"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:11","subExpression":{"id":2447,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"8587:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:11","trueExpression":{"baseExpression":{"id":2442,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8560:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2445,"indexExpression":{"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:11","subExpression":{"id":2443,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"8567:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:11"},{"expression":{"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2457,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8631:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2459,"indexExpression":{"id":2458,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"8638:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2461,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"8653:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2462,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"8656:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2460,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"8643:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2465,"nodeType":"ExpressionStatement","src":"8631:27:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2413,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"8389:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2414,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8393:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2467,"initializationExpression":{"assignments":[2410],"declarations":[{"constant":false,"id":2410,"mutability":"mutable","name":"i","nameLocation":"8382:1:11","nodeType":"VariableDeclaration","scope":2467,"src":"8374:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2409,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2412,"initialValue":{"hexValue":"30","id":2411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:11"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:11","subExpression":{"id":2416,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"8406:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2418,"nodeType":"ExpressionStatement","src":"8406:3:11"},"nodeType":"ForStatement","src":"8369:300:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2468,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8683:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"8765:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2490,"nodeType":"Block","src":"8827:40:11","statements":[{"expression":{"baseExpression":{"id":2486,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"8848:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2488,"indexExpression":{"hexValue":"30","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2363,"id":2489,"nodeType":"Return","src":"8841:15:11"}]},"id":2491,"nodeType":"IfStatement","src":"8761:106:11","trueBody":{"id":2485,"nodeType":"Block","src":"8780:41:11","statements":[{"expression":{"baseExpression":{"id":2481,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8801:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2483,"indexExpression":{"hexValue":"30","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2363,"id":2484,"nodeType":"Return","src":"8794:16:11"}]}},"id":2492,"nodeType":"IfStatement","src":"8679:188:11","trueBody":{"id":2477,"nodeType":"Block","src":"8700:55:11","statements":[{"expression":{"baseExpression":{"id":2471,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8721:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2475,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8728:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2363,"id":2476,"nodeType":"Return","src":"8714:30:11"}]}}]},"documentation":{"id":2350,"nodeType":"StructuredDocumentation","src":"6619:202:11","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2494,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:11","nodeType":"FunctionDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"proof","nameLocation":"6889:5:11","nodeType":"VariableDeclaration","scope":2494,"src":"6870:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2351,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2352,"nodeType":"ArrayTypeName","src":"6870:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2356,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:11","nodeType":"VariableDeclaration","scope":2494,"src":"6904:26:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2354,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2355,"nodeType":"ArrayTypeName","src":"6904:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:11","nodeType":"VariableDeclaration","scope":2494,"src":"6940:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2358,"nodeType":"ArrayTypeName","src":"6940:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:11"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:11","nodeType":"VariableDeclaration","scope":2494,"src":"6993:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:11"},"scope":2529,"src":"6826:2047:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2516,"nodeType":"Block","src":"8951:75:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2503,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"8968:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2504,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"8972:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2511,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"9014:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2512,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"9017:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2510,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"8999:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:11","trueExpression":{"arguments":[{"id":2507,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"8991:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2508,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"8994:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2506,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"8976:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2502,"id":2515,"nodeType":"Return","src":"8961:58:11"}]},"id":2517,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:11","nodeType":"FunctionDefinition","parameters":{"id":2499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2496,"mutability":"mutable","name":"a","nameLocation":"8906:1:11","nodeType":"VariableDeclaration","scope":2517,"src":"8898:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2498,"mutability":"mutable","name":"b","nameLocation":"8917:1:11","nodeType":"VariableDeclaration","scope":2517,"src":"8909:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:11"},"returnParameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2517,"src":"8942:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:11"},"scope":2529,"src":"8879:147:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2527,"nodeType":"Block","src":"9115:178:11","statements":[{"AST":{"nativeSrc":"9177:110:11","nodeType":"YulBlock","src":"9177:110:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:11","nodeType":"YulLiteral","src":"9198:4:11","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:11","nodeType":"YulIdentifier","src":"9204:1:11"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:11","nodeType":"YulIdentifier","src":"9191:6:11"},"nativeSrc":"9191:15:11","nodeType":"YulFunctionCall","src":"9191:15:11"},"nativeSrc":"9191:15:11","nodeType":"YulExpressionStatement","src":"9191:15:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:11","nodeType":"YulLiteral","src":"9226:4:11","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:11","nodeType":"YulIdentifier","src":"9232:1:11"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:11","nodeType":"YulIdentifier","src":"9219:6:11"},"nativeSrc":"9219:15:11","nodeType":"YulFunctionCall","src":"9219:15:11"},"nativeSrc":"9219:15:11","nodeType":"YulExpressionStatement","src":"9219:15:11"},{"nativeSrc":"9247:30:11","nodeType":"YulAssignment","src":"9247:30:11","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:11","nodeType":"YulLiteral","src":"9266:4:11","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:11","nodeType":"YulLiteral","src":"9272:4:11","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:11","nodeType":"YulIdentifier","src":"9256:9:11"},"nativeSrc":"9256:21:11","nodeType":"YulFunctionCall","src":"9256:21:11"},"variableNames":[{"name":"value","nativeSrc":"9247:5:11","nodeType":"YulIdentifier","src":"9247:5:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2519,"isOffset":false,"isSlot":false,"src":"9204:1:11","valueSize":1},{"declaration":2521,"isOffset":false,"isSlot":false,"src":"9232:1:11","valueSize":1},{"declaration":2524,"isOffset":false,"isSlot":false,"src":"9247:5:11","valueSize":1}],"id":2526,"nodeType":"InlineAssembly","src":"9168:119:11"}]},"id":2528,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:11","nodeType":"FunctionDefinition","parameters":{"id":2522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2519,"mutability":"mutable","name":"a","nameLocation":"9064:1:11","nodeType":"VariableDeclaration","scope":2528,"src":"9056:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"b","nameLocation":"9075:1:11","nodeType":"VariableDeclaration","scope":2528,"src":"9067:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:11"},"returnParameters":{"id":2525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2524,"mutability":"mutable","name":"value","nameLocation":"9108:5:11","nodeType":"VariableDeclaration","scope":2528,"src":"9100:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:11"},"scope":2529,"src":"9032:261:11","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2530,"src":"802:8493:11","usedErrors":[],"usedEvents":[]}],"src":"118:9178:11"},"id":11},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2553],"IERC165":[2565]},"id":2554,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2531,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2554,"sourceUnit":2566,"src":"124:23:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2534,"name":"IERC165","nameLocations":["754:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"754:7:12"},"id":2535,"nodeType":"InheritanceSpecifier","src":"754:7:12"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2533,"nodeType":"StructuredDocumentation","src":"149:576:12","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2553,"linearizedBaseContracts":[2553,2565],"name":"ERC165","nameLocation":"744:6:12","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2564],"body":{"id":2551,"nodeType":"Block","src":"920:64:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2544,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"937:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2546,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"957:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2565_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2565_$","typeString":"type(contract IERC165)"}],"id":2545,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2565","typeString":"type(contract IERC165)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2543,"id":2550,"nodeType":"Return","src":"930:47:12"}]},"documentation":{"id":2536,"nodeType":"StructuredDocumentation","src":"768:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2552,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:12","nodeType":"FunctionDefinition","overrides":{"id":2540,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:12"},"parameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:12","nodeType":"VariableDeclaration","scope":2552,"src":"856:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2537,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:12"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2552,"src":"914:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2541,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:12"},"scope":2553,"src":"829:155:12","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2554,"src":"726:260:12","usedErrors":[],"usedEvents":[]}],"src":"99:888:12"},"id":12},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2565]},"id":2566,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2555,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2556,"nodeType":"StructuredDocumentation","src":"125:279:13","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2565,"linearizedBaseContracts":[2565],"name":"IERC165","nameLocation":"415:7:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2557,"nodeType":"StructuredDocumentation","src":"429:340:13","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2564,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:13","nodeType":"FunctionDefinition","parameters":{"id":2560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:13","nodeType":"VariableDeclaration","scope":2564,"src":"801:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2558,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:13"},"returnParameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2564,"src":"844:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2561,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:13"},"scope":2565,"src":"774:76:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2566,"src":"405:447:13","usedErrors":[],"usedEvents":[]}],"src":"100:753:13"},"id":13},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3430]},"id":3431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2567,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2568,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3430,"linearizedBaseContracts":[3430],"name":"Math","nameLocation":"210:4:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2572,"members":[{"id":2569,"name":"Down","nameLocation":"245:4:14","nodeType":"EnumValue","src":"245:4:14"},{"id":2570,"name":"Up","nameLocation":"287:2:14","nodeType":"EnumValue","src":"287:2:14"},{"id":2571,"name":"Zero","nameLocation":"318:4:14","nodeType":"EnumValue","src":"318:4:14"}],"name":"Rounding","nameLocation":"226:8:14","nodeType":"EnumDefinition","src":"221:122:14"},{"body":{"id":2589,"nodeType":"Block","src":"480:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"497:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2583,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"501:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2586,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"509:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:14","trueExpression":{"id":2585,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"505:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2581,"id":2588,"nodeType":"Return","src":"490:20:14"}]},"documentation":{"id":2573,"nodeType":"StructuredDocumentation","src":"349:59:14","text":" @dev Returns the largest of two numbers."},"id":2590,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:14","nodeType":"FunctionDefinition","parameters":{"id":2578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2575,"mutability":"mutable","name":"a","nameLocation":"434:1:14","nodeType":"VariableDeclaration","scope":2590,"src":"426:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2577,"mutability":"mutable","name":"b","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":2590,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2576,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:14"},"returnParameters":{"id":2581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2590,"src":"471:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2579,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:14"},"scope":3430,"src":"413:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2607,"nodeType":"Block","src":"655:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"672:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2601,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"676:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2604,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"684:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:14","trueExpression":{"id":2603,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"680:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2599,"id":2606,"nodeType":"Return","src":"665:20:14"}]},"documentation":{"id":2591,"nodeType":"StructuredDocumentation","src":"523:60:14","text":" @dev Returns the smallest of two numbers."},"id":2608,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:14","nodeType":"FunctionDefinition","parameters":{"id":2596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"a","nameLocation":"609:1:14","nodeType":"VariableDeclaration","scope":2608,"src":"601:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"b","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":2608,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:14"},"returnParameters":{"id":2599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2608,"src":"646:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:14"},"scope":3430,"src":"588:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2630,"nodeType":"Block","src":"876:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"931:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2619,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"935:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2621,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"941:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2623,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"945:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2625,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2617,"id":2629,"nodeType":"Return","src":"923:28:14"}]},"documentation":{"id":2609,"nodeType":"StructuredDocumentation","src":"698:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2631,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:14","nodeType":"FunctionDefinition","parameters":{"id":2614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"a","nameLocation":"830:1:14","nodeType":"VariableDeclaration","scope":2631,"src":"822:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2613,"mutability":"mutable","name":"b","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":2631,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2612,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:14"},"returnParameters":{"id":2617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2631,"src":"867:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2615,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:14"},"scope":3430,"src":"805:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2655,"nodeType":"Block","src":"1228:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2641,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"1316:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2645,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"1330:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2648,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2649,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"1339:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:14","trueExpression":{"hexValue":"30","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2640,"id":2654,"nodeType":"Return","src":"1309:35:14"}]},"documentation":{"id":2632,"nodeType":"StructuredDocumentation","src":"964:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2656,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:14","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"a","nameLocation":"1182:1:14","nodeType":"VariableDeclaration","scope":2656,"src":"1174:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2633,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"b","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":2656,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2635,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:14"},"returnParameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2656,"src":"1219:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:14"},"scope":3430,"src":"1157:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2777,"nodeType":"Block","src":"1795:3797:14","statements":[{"id":2776,"nodeType":"UncheckedBlock","src":"1805:3781:14","statements":[{"assignments":[2669],"declarations":[{"constant":false,"id":2669,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:14","nodeType":"VariableDeclaration","scope":2776,"src":"2126:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2668,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2670,"nodeType":"VariableDeclarationStatement","src":"2126:13:14"},{"assignments":[2672],"declarations":[{"constant":false,"id":2672,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:14","nodeType":"VariableDeclaration","scope":2776,"src":"2198:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2671,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2673,"nodeType":"VariableDeclarationStatement","src":"2198:13:14"},{"AST":{"nativeSrc":"2278:157:14","nodeType":"YulBlock","src":"2278:157:14","statements":[{"nativeSrc":"2296:30:14","nodeType":"YulVariableDeclaration","src":"2296:30:14","value":{"arguments":[{"name":"x","nativeSrc":"2313:1:14","nodeType":"YulIdentifier","src":"2313:1:14"},{"name":"y","nativeSrc":"2316:1:14","nodeType":"YulIdentifier","src":"2316:1:14"},{"arguments":[{"kind":"number","nativeSrc":"2323:1:14","nodeType":"YulLiteral","src":"2323:1:14","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2319:3:14","nodeType":"YulIdentifier","src":"2319:3:14"},"nativeSrc":"2319:6:14","nodeType":"YulFunctionCall","src":"2319:6:14"}],"functionName":{"name":"mulmod","nativeSrc":"2306:6:14","nodeType":"YulIdentifier","src":"2306:6:14"},"nativeSrc":"2306:20:14","nodeType":"YulFunctionCall","src":"2306:20:14"},"variables":[{"name":"mm","nativeSrc":"2300:2:14","nodeType":"YulTypedName","src":"2300:2:14","type":""}]},{"nativeSrc":"2343:18:14","nodeType":"YulAssignment","src":"2343:18:14","value":{"arguments":[{"name":"x","nativeSrc":"2356:1:14","nodeType":"YulIdentifier","src":"2356:1:14"},{"name":"y","nativeSrc":"2359:1:14","nodeType":"YulIdentifier","src":"2359:1:14"}],"functionName":{"name":"mul","nativeSrc":"2352:3:14","nodeType":"YulIdentifier","src":"2352:3:14"},"nativeSrc":"2352:9:14","nodeType":"YulFunctionCall","src":"2352:9:14"},"variableNames":[{"name":"prod0","nativeSrc":"2343:5:14","nodeType":"YulIdentifier","src":"2343:5:14"}]},{"nativeSrc":"2378:43:14","nodeType":"YulAssignment","src":"2378:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2395:2:14","nodeType":"YulIdentifier","src":"2395:2:14"},{"name":"prod0","nativeSrc":"2399:5:14","nodeType":"YulIdentifier","src":"2399:5:14"}],"functionName":{"name":"sub","nativeSrc":"2391:3:14","nodeType":"YulIdentifier","src":"2391:3:14"},"nativeSrc":"2391:14:14","nodeType":"YulFunctionCall","src":"2391:14:14"},{"arguments":[{"name":"mm","nativeSrc":"2410:2:14","nodeType":"YulIdentifier","src":"2410:2:14"},{"name":"prod0","nativeSrc":"2414:5:14","nodeType":"YulIdentifier","src":"2414:5:14"}],"functionName":{"name":"lt","nativeSrc":"2407:2:14","nodeType":"YulIdentifier","src":"2407:2:14"},"nativeSrc":"2407:13:14","nodeType":"YulFunctionCall","src":"2407:13:14"}],"functionName":{"name":"sub","nativeSrc":"2387:3:14","nodeType":"YulIdentifier","src":"2387:3:14"},"nativeSrc":"2387:34:14","nodeType":"YulFunctionCall","src":"2387:34:14"},"variableNames":[{"name":"prod1","nativeSrc":"2378:5:14","nodeType":"YulIdentifier","src":"2378:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2669,"isOffset":false,"isSlot":false,"src":"2343:5:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"2399:5:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"2414:5:14","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"2378:5:14","valueSize":1},{"declaration":2659,"isOffset":false,"isSlot":false,"src":"2313:1:14","valueSize":1},{"declaration":2659,"isOffset":false,"isSlot":false,"src":"2356:1:14","valueSize":1},{"declaration":2661,"isOffset":false,"isSlot":false,"src":"2316:1:14","valueSize":1},{"declaration":2661,"isOffset":false,"isSlot":false,"src":"2359:1:14","valueSize":1}],"id":2674,"nodeType":"InlineAssembly","src":"2269:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2675,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"2516:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2683,"nodeType":"IfStatement","src":"2512:75:14","trueBody":{"id":2682,"nodeType":"Block","src":"2528:59:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2553:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2679,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"2561:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2667,"id":2681,"nodeType":"Return","src":"2546:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2685,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"2697:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2686,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"2711:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2684,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2689:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2689,"nodeType":"ExpressionStatement","src":"2689:28:14"},{"assignments":[2691],"declarations":[{"constant":false,"id":2691,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:14","nodeType":"VariableDeclaration","scope":2776,"src":"2973:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2692,"nodeType":"VariableDeclarationStatement","src":"2973:17:14"},{"AST":{"nativeSrc":"3013:291:14","nodeType":"YulBlock","src":"3013:291:14","statements":[{"nativeSrc":"3082:38:14","nodeType":"YulAssignment","src":"3082:38:14","value":{"arguments":[{"name":"x","nativeSrc":"3102:1:14","nodeType":"YulIdentifier","src":"3102:1:14"},{"name":"y","nativeSrc":"3105:1:14","nodeType":"YulIdentifier","src":"3105:1:14"},{"name":"denominator","nativeSrc":"3108:11:14","nodeType":"YulIdentifier","src":"3108:11:14"}],"functionName":{"name":"mulmod","nativeSrc":"3095:6:14","nodeType":"YulIdentifier","src":"3095:6:14"},"nativeSrc":"3095:25:14","nodeType":"YulFunctionCall","src":"3095:25:14"},"variableNames":[{"name":"remainder","nativeSrc":"3082:9:14","nodeType":"YulIdentifier","src":"3082:9:14"}]},{"nativeSrc":"3202:41:14","nodeType":"YulAssignment","src":"3202:41:14","value":{"arguments":[{"name":"prod1","nativeSrc":"3215:5:14","nodeType":"YulIdentifier","src":"3215:5:14"},{"arguments":[{"name":"remainder","nativeSrc":"3225:9:14","nodeType":"YulIdentifier","src":"3225:9:14"},{"name":"prod0","nativeSrc":"3236:5:14","nodeType":"YulIdentifier","src":"3236:5:14"}],"functionName":{"name":"gt","nativeSrc":"3222:2:14","nodeType":"YulIdentifier","src":"3222:2:14"},"nativeSrc":"3222:20:14","nodeType":"YulFunctionCall","src":"3222:20:14"}],"functionName":{"name":"sub","nativeSrc":"3211:3:14","nodeType":"YulIdentifier","src":"3211:3:14"},"nativeSrc":"3211:32:14","nodeType":"YulFunctionCall","src":"3211:32:14"},"variableNames":[{"name":"prod1","nativeSrc":"3202:5:14","nodeType":"YulIdentifier","src":"3202:5:14"}]},{"nativeSrc":"3260:30:14","nodeType":"YulAssignment","src":"3260:30:14","value":{"arguments":[{"name":"prod0","nativeSrc":"3273:5:14","nodeType":"YulIdentifier","src":"3273:5:14"},{"name":"remainder","nativeSrc":"3280:9:14","nodeType":"YulIdentifier","src":"3280:9:14"}],"functionName":{"name":"sub","nativeSrc":"3269:3:14","nodeType":"YulIdentifier","src":"3269:3:14"},"nativeSrc":"3269:21:14","nodeType":"YulFunctionCall","src":"3269:21:14"},"variableNames":[{"name":"prod0","nativeSrc":"3260:5:14","nodeType":"YulIdentifier","src":"3260:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2663,"isOffset":false,"isSlot":false,"src":"3108:11:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"3236:5:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"3260:5:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"3273:5:14","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"3202:5:14","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"3215:5:14","valueSize":1},{"declaration":2691,"isOffset":false,"isSlot":false,"src":"3082:9:14","valueSize":1},{"declaration":2691,"isOffset":false,"isSlot":false,"src":"3225:9:14","valueSize":1},{"declaration":2691,"isOffset":false,"isSlot":false,"src":"3280:9:14","valueSize":1},{"declaration":2659,"isOffset":false,"isSlot":false,"src":"3102:1:14","valueSize":1},{"declaration":2661,"isOffset":false,"isSlot":false,"src":"3105:1:14","valueSize":1}],"id":2693,"nodeType":"InlineAssembly","src":"3004:300:14"},{"assignments":[2695],"declarations":[{"constant":false,"id":2695,"mutability":"mutable","name":"twos","nameLocation":"3619:4:14","nodeType":"VariableDeclaration","scope":2776,"src":"3611:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2694,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2703,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2696,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"3626:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:14","subExpression":{"id":2697,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"3642:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:14"},{"AST":{"nativeSrc":"3681:362:14","nodeType":"YulBlock","src":"3681:362:14","statements":[{"nativeSrc":"3746:37:14","nodeType":"YulAssignment","src":"3746:37:14","value":{"arguments":[{"name":"denominator","nativeSrc":"3765:11:14","nodeType":"YulIdentifier","src":"3765:11:14"},{"name":"twos","nativeSrc":"3778:4:14","nodeType":"YulIdentifier","src":"3778:4:14"}],"functionName":{"name":"div","nativeSrc":"3761:3:14","nodeType":"YulIdentifier","src":"3761:3:14"},"nativeSrc":"3761:22:14","nodeType":"YulFunctionCall","src":"3761:22:14"},"variableNames":[{"name":"denominator","nativeSrc":"3746:11:14","nodeType":"YulIdentifier","src":"3746:11:14"}]},{"nativeSrc":"3850:25:14","nodeType":"YulAssignment","src":"3850:25:14","value":{"arguments":[{"name":"prod0","nativeSrc":"3863:5:14","nodeType":"YulIdentifier","src":"3863:5:14"},{"name":"twos","nativeSrc":"3870:4:14","nodeType":"YulIdentifier","src":"3870:4:14"}],"functionName":{"name":"div","nativeSrc":"3859:3:14","nodeType":"YulIdentifier","src":"3859:3:14"},"nativeSrc":"3859:16:14","nodeType":"YulFunctionCall","src":"3859:16:14"},"variableNames":[{"name":"prod0","nativeSrc":"3850:5:14","nodeType":"YulIdentifier","src":"3850:5:14"}]},{"nativeSrc":"3990:39:14","nodeType":"YulAssignment","src":"3990:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4010:1:14","nodeType":"YulLiteral","src":"4010:1:14","type":"","value":"0"},{"name":"twos","nativeSrc":"4013:4:14","nodeType":"YulIdentifier","src":"4013:4:14"}],"functionName":{"name":"sub","nativeSrc":"4006:3:14","nodeType":"YulIdentifier","src":"4006:3:14"},"nativeSrc":"4006:12:14","nodeType":"YulFunctionCall","src":"4006:12:14"},{"name":"twos","nativeSrc":"4020:4:14","nodeType":"YulIdentifier","src":"4020:4:14"}],"functionName":{"name":"div","nativeSrc":"4002:3:14","nodeType":"YulIdentifier","src":"4002:3:14"},"nativeSrc":"4002:23:14","nodeType":"YulFunctionCall","src":"4002:23:14"},{"kind":"number","nativeSrc":"4027:1:14","nodeType":"YulLiteral","src":"4027:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3998:3:14","nodeType":"YulIdentifier","src":"3998:3:14"},"nativeSrc":"3998:31:14","nodeType":"YulFunctionCall","src":"3998:31:14"},"variableNames":[{"name":"twos","nativeSrc":"3990:4:14","nodeType":"YulIdentifier","src":"3990:4:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2663,"isOffset":false,"isSlot":false,"src":"3746:11:14","valueSize":1},{"declaration":2663,"isOffset":false,"isSlot":false,"src":"3765:11:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"3850:5:14","valueSize":1},{"declaration":2669,"isOffset":false,"isSlot":false,"src":"3863:5:14","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"3778:4:14","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"3870:4:14","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"3990:4:14","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"4013:4:14","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"4020:4:14","valueSize":1}],"id":2704,"nodeType":"InlineAssembly","src":"3672:371:14"},{"expression":{"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2705,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"4109:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2706,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"4118:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2707,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"4126:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2710,"nodeType":"ExpressionStatement","src":"4109:21:14"},{"assignments":[2712],"declarations":[{"constant":false,"id":2712,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:14","nodeType":"VariableDeclaration","scope":2776,"src":"4448:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2711,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2719,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2714,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4471:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2716,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:14"},{"expression":{"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2720,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4704:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2722,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4719:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2723,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4733:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2727,"nodeType":"ExpressionStatement","src":"4704:36:14"},{"expression":{"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2728,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4773:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2730,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4788:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2731,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4802:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2735,"nodeType":"ExpressionStatement","src":"4773:36:14"},{"expression":{"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2736,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4843:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4858:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2739,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4872:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2743,"nodeType":"ExpressionStatement","src":"4843:36:14"},{"expression":{"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2744,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4913:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2746,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4928:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2747,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2751,"nodeType":"ExpressionStatement","src":"4913:36:14"},{"expression":{"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2752,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4983:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2754,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4998:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2755,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"5012:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2759,"nodeType":"ExpressionStatement","src":"4983:36:14"},{"expression":{"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2760,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"5054:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2762,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"5069:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2763,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"5083:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2767,"nodeType":"ExpressionStatement","src":"5054:36:14"},{"expression":{"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2768,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5524:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2769,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"5533:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2770,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"5541:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2773,"nodeType":"ExpressionStatement","src":"5524:24:14"},{"expression":{"id":2774,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5569:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2667,"id":2775,"nodeType":"Return","src":"5562:13:14"}]}]},"documentation":{"id":2657,"nodeType":"StructuredDocumentation","src":"1357:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2778,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:14","nodeType":"FunctionDefinition","parameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2659,"mutability":"mutable","name":"x","nameLocation":"1700:1:14","nodeType":"VariableDeclaration","scope":2778,"src":"1692:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2661,"mutability":"mutable","name":"y","nameLocation":"1719:1:14","nodeType":"VariableDeclaration","scope":2778,"src":"1711:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:14","nodeType":"VariableDeclaration","scope":2778,"src":"1730:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:14"},"returnParameters":{"id":2667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2666,"mutability":"mutable","name":"result","nameLocation":"1787:6:14","nodeType":"VariableDeclaration","scope":2778,"src":"1779:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:14"},"scope":3430,"src":"1667:3925:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2821,"nodeType":"Block","src":"5872:189:14","statements":[{"assignments":[2794],"declarations":[{"constant":false,"id":2794,"mutability":"mutable","name":"result","nameLocation":"5890:6:14","nodeType":"VariableDeclaration","scope":2821,"src":"5882:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2793,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2800,"initialValue":{"arguments":[{"id":2796,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"5906:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2797,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"5909:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2798,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"5912:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2795,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2778,2822],"referencedDeclaration":2778,"src":"5899:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2801,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"5938:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2802,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"5950:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2572_$","typeString":"type(enum Math.Rounding)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"5950:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"src":"5938:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2806,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"5972:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2807,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"5975:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2808,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"5978:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2805,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2818,"nodeType":"IfStatement","src":"5934:98:14","trueBody":{"id":2817,"nodeType":"Block","src":"5996:36:14","statements":[{"expression":{"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2813,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6010:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2816,"nodeType":"ExpressionStatement","src":"6010:11:14"}]}},{"expression":{"id":2819,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6048:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2792,"id":2820,"nodeType":"Return","src":"6041:13:14"}]},"documentation":{"id":2779,"nodeType":"StructuredDocumentation","src":"5598:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2822,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:14","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2781,"mutability":"mutable","name":"x","nameLocation":"5757:1:14","nodeType":"VariableDeclaration","scope":2822,"src":"5749:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2783,"mutability":"mutable","name":"y","nameLocation":"5776:1:14","nodeType":"VariableDeclaration","scope":2822,"src":"5768:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2782,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2785,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:14","nodeType":"VariableDeclaration","scope":2822,"src":"5787:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:14","nodeType":"VariableDeclaration","scope":2822,"src":"5816:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"typeName":{"id":2787,"nodeType":"UserDefinedTypeName","pathNode":{"id":2786,"name":"Rounding","nameLocations":["5816:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2572,"src":"5816:8:14"},"referencedDeclaration":2572,"src":"5816:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:14"},"returnParameters":{"id":2792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2822,"src":"5863:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2790,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:14"},"scope":3430,"src":"5724:337:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2933,"nodeType":"Block","src":"6337:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2830,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"6351:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2836,"nodeType":"IfStatement","src":"6347:45:14","trueBody":{"id":2835,"nodeType":"Block","src":"6359:33:14","statements":[{"expression":{"hexValue":"30","id":2833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2829,"id":2834,"nodeType":"Return","src":"6373:8:14"}]}},{"assignments":[2838],"declarations":[{"constant":false,"id":2838,"mutability":"mutable","name":"result","nameLocation":"7079:6:14","nodeType":"VariableDeclaration","scope":2933,"src":"7071:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2837,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2847,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2841,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7099:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2840,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3102,3138],"referencedDeclaration":3102,"src":"7094:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2845,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:14"},{"id":2932,"nodeType":"UncheckedBlock","src":"7508:408:14","statements":[{"expression":{"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2848,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7532:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7542:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2850,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7551:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2851,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7555:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2854,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2858,"nodeType":"ExpressionStatement","src":"7532:35:14"},{"expression":{"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2859,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7581:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2860,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7591:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2861,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7600:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2862,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7604:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2865,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2869,"nodeType":"ExpressionStatement","src":"7581:35:14"},{"expression":{"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2870,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7630:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2871,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7640:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2872,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7649:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7653:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2876,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2880,"nodeType":"ExpressionStatement","src":"7630:35:14"},{"expression":{"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2881,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7679:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2882,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7689:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2883,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7698:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2884,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7702:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2887,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2891,"nodeType":"ExpressionStatement","src":"7679:35:14"},{"expression":{"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2892,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7728:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2893,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7738:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2894,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7747:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2895,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7751:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2898,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2902,"nodeType":"ExpressionStatement","src":"7728:35:14"},{"expression":{"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7777:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2904,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7787:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2905,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7796:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2906,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7800:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2909,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2913,"nodeType":"ExpressionStatement","src":"7777:35:14"},{"expression":{"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2914,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7826:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2915,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7836:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2916,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7845:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2917,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7849:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2920,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2924,"nodeType":"ExpressionStatement","src":"7826:35:14"},{"expression":{"arguments":[{"id":2926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7886:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2927,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"7894:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2928,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7898:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2925,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"7882:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2829,"id":2931,"nodeType":"Return","src":"7875:30:14"}]}]},"documentation":{"id":2823,"nodeType":"StructuredDocumentation","src":"6067:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2934,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:14","nodeType":"FunctionDefinition","parameters":{"id":2826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"mutability":"mutable","name":"a","nameLocation":"6302:1:14","nodeType":"VariableDeclaration","scope":2934,"src":"6294:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2824,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:14"},"returnParameters":{"id":2829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2934,"src":"6328:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:14"},"scope":3430,"src":"6280:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2969,"nodeType":"Block","src":"8098:161:14","statements":[{"id":2968,"nodeType":"UncheckedBlock","src":"8108:145:14","statements":[{"assignments":[2946],"declarations":[{"constant":false,"id":2946,"mutability":"mutable","name":"result","nameLocation":"8140:6:14","nodeType":"VariableDeclaration","scope":2968,"src":"8132:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2950,"initialValue":{"arguments":[{"id":2948,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"8154:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2947,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2934,2970],"referencedDeclaration":2934,"src":"8149:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8177:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2952,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"8187:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2953,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"8199:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2572_$","typeString":"type(enum Math.Rounding)"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"8199:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"src":"8187:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2956,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8214:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8223:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2959,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"8232:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:14","trueExpression":{"hexValue":"31","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2944,"id":2967,"nodeType":"Return","src":"8170:72:14"}]}]},"documentation":{"id":2935,"nodeType":"StructuredDocumentation","src":"7928:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2970,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:14","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"a","nameLocation":"8044:1:14","nodeType":"VariableDeclaration","scope":2970,"src":"8036:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:14","nodeType":"VariableDeclaration","scope":2970,"src":"8047:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"typeName":{"id":2939,"nodeType":"UserDefinedTypeName","pathNode":{"id":2938,"name":"Rounding","nameLocations":["8047:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2572,"src":"8047:8:14"},"referencedDeclaration":2572,"src":"8047:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:14"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2970,"src":"8089:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:14"},"scope":3430,"src":"8022:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3101,"nodeType":"Block","src":"8444:922:14","statements":[{"assignments":[2979],"declarations":[{"constant":false,"id":2979,"mutability":"mutable","name":"result","nameLocation":"8462:6:14","nodeType":"VariableDeclaration","scope":3101,"src":"8454:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2978,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2981,"initialValue":{"hexValue":"30","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:14"},{"id":3098,"nodeType":"UncheckedBlock","src":"8482:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8510:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2996,"nodeType":"IfStatement","src":"8506:99:14","trueBody":{"id":2995,"nodeType":"Block","src":"8528:77:14","statements":[{"expression":{"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8546:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2990,"nodeType":"ExpressionStatement","src":"8546:13:14"},{"expression":{"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"8577:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2994,"nodeType":"ExpressionStatement","src":"8577:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8622:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3011,"nodeType":"IfStatement","src":"8618:96:14","trueBody":{"id":3010,"nodeType":"Block","src":"8639:75:14","statements":[{"expression":{"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8657:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3005,"nodeType":"ExpressionStatement","src":"8657:12:14"},{"expression":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"8687:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3009,"nodeType":"ExpressionStatement","src":"8687:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8731:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3026,"nodeType":"IfStatement","src":"8727:96:14","trueBody":{"id":3025,"nodeType":"Block","src":"8748:75:14","statements":[{"expression":{"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8766:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3020,"nodeType":"ExpressionStatement","src":"8766:12:14"},{"expression":{"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3021,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"8796:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3024,"nodeType":"ExpressionStatement","src":"8796:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8840:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3041,"nodeType":"IfStatement","src":"8836:96:14","trueBody":{"id":3040,"nodeType":"Block","src":"8857:75:14","statements":[{"expression":{"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8875:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3035,"nodeType":"ExpressionStatement","src":"8875:12:14"},{"expression":{"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3036,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"8905:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3039,"nodeType":"ExpressionStatement","src":"8905:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8949:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3056,"nodeType":"IfStatement","src":"8945:93:14","trueBody":{"id":3055,"nodeType":"Block","src":"8965:73:14","statements":[{"expression":{"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"8983:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3050,"nodeType":"ExpressionStatement","src":"8983:11:14"},{"expression":{"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"9012:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3054,"nodeType":"ExpressionStatement","src":"9012:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"9055:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3071,"nodeType":"IfStatement","src":"9051:93:14","trueBody":{"id":3070,"nodeType":"Block","src":"9071:73:14","statements":[{"expression":{"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"9089:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3065,"nodeType":"ExpressionStatement","src":"9089:11:14"},{"expression":{"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"9118:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3069,"nodeType":"ExpressionStatement","src":"9118:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"9161:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3086,"nodeType":"IfStatement","src":"9157:93:14","trueBody":{"id":3085,"nodeType":"Block","src":"9177:73:14","statements":[{"expression":{"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"9195:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3080,"nodeType":"ExpressionStatement","src":"9195:11:14"},{"expression":{"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"9224:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3084,"nodeType":"ExpressionStatement","src":"9224:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"9267:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3097,"nodeType":"IfStatement","src":"9263:64:14","trueBody":{"id":3096,"nodeType":"Block","src":"9283:44:14","statements":[{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3092,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"9301:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ExpressionStatement","src":"9301:11:14"}]}}]},{"expression":{"id":3099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"9353:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2977,"id":3100,"nodeType":"Return","src":"9346:13:14"}]},"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"8265:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3102,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:14","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"value","nameLocation":"8405:5:14","nodeType":"VariableDeclaration","scope":3102,"src":"8397:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:14"},"returnParameters":{"id":2977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3102,"src":"8435:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:14"},"scope":3430,"src":"8383:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3137,"nodeType":"Block","src":"9599:165:14","statements":[{"id":3136,"nodeType":"UncheckedBlock","src":"9609:149:14","statements":[{"assignments":[3114],"declarations":[{"constant":false,"id":3114,"mutability":"mutable","name":"result","nameLocation":"9641:6:14","nodeType":"VariableDeclaration","scope":3136,"src":"9633:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3113,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3118,"initialValue":{"arguments":[{"id":3116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"9655:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3115,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3102,3138],"referencedDeclaration":3102,"src":"9650:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"9682:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3120,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"9692:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3121,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"9704:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2572_$","typeString":"type(enum Math.Rounding)"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"9704:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"src":"9692:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"9724:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"9733:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:14","trueExpression":{"hexValue":"31","id":3130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3112,"id":3135,"nodeType":"Return","src":"9675:72:14"}]}]},"documentation":{"id":3103,"nodeType":"StructuredDocumentation","src":"9372:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3138,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:14","nodeType":"FunctionDefinition","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3105,"mutability":"mutable","name":"value","nameLocation":"9541:5:14","nodeType":"VariableDeclaration","scope":3138,"src":"9533:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3104,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3108,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:14","nodeType":"VariableDeclaration","scope":3138,"src":"9548:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"typeName":{"id":3107,"nodeType":"UserDefinedTypeName","pathNode":{"id":3106,"name":"Rounding","nameLocations":["9548:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2572,"src":"9548:8:14"},"referencedDeclaration":2572,"src":"9548:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:14"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3138,"src":"9590:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:14"},"scope":3430,"src":"9519:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3266,"nodeType":"Block","src":"9951:828:14","statements":[{"assignments":[3147],"declarations":[{"constant":false,"id":3147,"mutability":"mutable","name":"result","nameLocation":"9969:6:14","nodeType":"VariableDeclaration","scope":3266,"src":"9961:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3146,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3149,"initialValue":{"hexValue":"30","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:14"},{"id":3263,"nodeType":"UncheckedBlock","src":"9989:761:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10017:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3166,"nodeType":"IfStatement","src":"10013:99:14","trueBody":{"id":3165,"nodeType":"Block","src":"10034:78:14","statements":[{"expression":{"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10052:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3160,"nodeType":"ExpressionStatement","src":"10052:15:14"},{"expression":{"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10085:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3164,"nodeType":"ExpressionStatement","src":"10085:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3167,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10129:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3183,"nodeType":"IfStatement","src":"10125:99:14","trueBody":{"id":3182,"nodeType":"Block","src":"10146:78:14","statements":[{"expression":{"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10164:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3177,"nodeType":"ExpressionStatement","src":"10164:15:14"},{"expression":{"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3178,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10197:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3181,"nodeType":"ExpressionStatement","src":"10197:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3184,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10241:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3200,"nodeType":"IfStatement","src":"10237:99:14","trueBody":{"id":3199,"nodeType":"Block","src":"10258:78:14","statements":[{"expression":{"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10276:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3194,"nodeType":"ExpressionStatement","src":"10276:15:14"},{"expression":{"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3195,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10309:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3198,"nodeType":"ExpressionStatement","src":"10309:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3201,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10353:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3217,"nodeType":"IfStatement","src":"10349:96:14","trueBody":{"id":3216,"nodeType":"Block","src":"10369:76:14","statements":[{"expression":{"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10387:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3211,"nodeType":"ExpressionStatement","src":"10387:14:14"},{"expression":{"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3212,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10419:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3215,"nodeType":"ExpressionStatement","src":"10419:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3218,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10462:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3234,"nodeType":"IfStatement","src":"10458:96:14","trueBody":{"id":3233,"nodeType":"Block","src":"10478:76:14","statements":[{"expression":{"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10496:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3228,"nodeType":"ExpressionStatement","src":"10496:14:14"},{"expression":{"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10528:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3232,"nodeType":"ExpressionStatement","src":"10528:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10571:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3251,"nodeType":"IfStatement","src":"10567:96:14","trueBody":{"id":3250,"nodeType":"Block","src":"10587:76:14","statements":[{"expression":{"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10605:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3245,"nodeType":"ExpressionStatement","src":"10605:14:14"},{"expression":{"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10637:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3249,"nodeType":"ExpressionStatement","src":"10637:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3252,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"10680:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3262,"nodeType":"IfStatement","src":"10676:64:14","trueBody":{"id":3261,"nodeType":"Block","src":"10696:44:14","statements":[{"expression":{"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3257,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10714:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3260,"nodeType":"ExpressionStatement","src":"10714:11:14"}]}}]},{"expression":{"id":3264,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"10766:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3145,"id":3265,"nodeType":"Return","src":"10759:13:14"}]},"documentation":{"id":3139,"nodeType":"StructuredDocumentation","src":"9770:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3267,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:14","nodeType":"FunctionDefinition","parameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"mutability":"mutable","name":"value","nameLocation":"9912:5:14","nodeType":"VariableDeclaration","scope":3267,"src":"9904:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3140,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:14"},"returnParameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3267,"src":"9942:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3143,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:14"},"scope":3430,"src":"9889:890:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3302,"nodeType":"Block","src":"11014:165:14","statements":[{"id":3301,"nodeType":"UncheckedBlock","src":"11024:149:14","statements":[{"assignments":[3279],"declarations":[{"constant":false,"id":3279,"mutability":"mutable","name":"result","nameLocation":"11056:6:14","nodeType":"VariableDeclaration","scope":3301,"src":"11048:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3278,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3283,"initialValue":{"arguments":[{"id":3281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"11071:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3280,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3267,3303],"referencedDeclaration":3267,"src":"11065:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3284,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11098:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3285,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"11108:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3286,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"11120:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2572_$","typeString":"type(enum Math.Rounding)"}},"id":3287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"11120:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"src":"11108:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11139:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"11148:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:14","trueExpression":{"hexValue":"31","id":3295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3277,"id":3300,"nodeType":"Return","src":"11091:71:14"}]}]},"documentation":{"id":3268,"nodeType":"StructuredDocumentation","src":"10785:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3303,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:14","nodeType":"FunctionDefinition","parameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"value","nameLocation":"10956:5:14","nodeType":"VariableDeclaration","scope":3303,"src":"10948:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3273,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:14","nodeType":"VariableDeclaration","scope":3303,"src":"10963:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"typeName":{"id":3272,"nodeType":"UserDefinedTypeName","pathNode":{"id":3271,"name":"Rounding","nameLocations":["10963:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2572,"src":"10963:8:14"},"referencedDeclaration":2572,"src":"10963:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:14"},"returnParameters":{"id":3277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3303,"src":"11005:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:14"},"scope":3430,"src":"10933:246:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3389,"nodeType":"Block","src":"11493:600:14","statements":[{"assignments":[3312],"declarations":[{"constant":false,"id":3312,"mutability":"mutable","name":"result","nameLocation":"11511:6:14","nodeType":"VariableDeclaration","scope":3389,"src":"11503:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3311,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3314,"initialValue":{"hexValue":"30","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:14"},{"id":3386,"nodeType":"UncheckedBlock","src":"11531:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3315,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11559:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3329,"nodeType":"IfStatement","src":"11555:98:14","trueBody":{"id":3328,"nodeType":"Block","src":"11577:76:14","statements":[{"expression":{"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11595:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3323,"nodeType":"ExpressionStatement","src":"11595:13:14"},{"expression":{"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"11626:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3327,"nodeType":"ExpressionStatement","src":"11626:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3330,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11670:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3344,"nodeType":"IfStatement","src":"11666:95:14","trueBody":{"id":3343,"nodeType":"Block","src":"11687:74:14","statements":[{"expression":{"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11705:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3338,"nodeType":"ExpressionStatement","src":"11705:12:14"},{"expression":{"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3339,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"11735:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3342,"nodeType":"ExpressionStatement","src":"11735:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11778:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3359,"nodeType":"IfStatement","src":"11774:95:14","trueBody":{"id":3358,"nodeType":"Block","src":"11795:74:14","statements":[{"expression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11813:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3353,"nodeType":"ExpressionStatement","src":"11813:12:14"},{"expression":{"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"11843:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3357,"nodeType":"ExpressionStatement","src":"11843:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11886:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3374,"nodeType":"IfStatement","src":"11882:95:14","trueBody":{"id":3373,"nodeType":"Block","src":"11903:74:14","statements":[{"expression":{"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11921:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3368,"nodeType":"ExpressionStatement","src":"11921:12:14"},{"expression":{"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"11951:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3372,"nodeType":"ExpressionStatement","src":"11951:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"11994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3385,"nodeType":"IfStatement","src":"11990:64:14","trueBody":{"id":3384,"nodeType":"Block","src":"12010:44:14","statements":[{"expression":{"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"12028:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3383,"nodeType":"ExpressionStatement","src":"12028:11:14"}]}}]},{"expression":{"id":3387,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"12080:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3310,"id":3388,"nodeType":"Return","src":"12073:13:14"}]},"documentation":{"id":3304,"nodeType":"StructuredDocumentation","src":"11185:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3390,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:14","nodeType":"FunctionDefinition","parameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"value","nameLocation":"11454:5:14","nodeType":"VariableDeclaration","scope":3390,"src":"11446:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3305,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:14"},"returnParameters":{"id":3310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3390,"src":"11484:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3308,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:14"},"scope":3430,"src":"11430:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3428,"nodeType":"Block","src":"12329:173:14","statements":[{"id":3427,"nodeType":"UncheckedBlock","src":"12339:157:14","statements":[{"assignments":[3402],"declarations":[{"constant":false,"id":3402,"mutability":"mutable","name":"result","nameLocation":"12371:6:14","nodeType":"VariableDeclaration","scope":3427,"src":"12363:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3406,"initialValue":{"arguments":[{"id":3404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"12387:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3403,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3390,3429],"referencedDeclaration":3390,"src":"12380:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3407,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12414:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3408,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"12424:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3409,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"12436:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2572_$","typeString":"type(enum Math.Rounding)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"12436:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"src":"12424:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12457:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3416,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"12471:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:14","trueExpression":{"hexValue":"31","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3424,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3400,"id":3426,"nodeType":"Return","src":"12407:78:14"}]}]},"documentation":{"id":3391,"nodeType":"StructuredDocumentation","src":"12099:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3429,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:14","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3393,"mutability":"mutable","name":"value","nameLocation":"12271:5:14","nodeType":"VariableDeclaration","scope":3429,"src":"12263:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3392,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3396,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:14","nodeType":"VariableDeclaration","scope":3429,"src":"12278:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"},"typeName":{"id":3395,"nodeType":"UserDefinedTypeName","pathNode":{"id":3394,"name":"Rounding","nameLocations":["12278:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2572,"src":"12278:8:14"},"referencedDeclaration":2572,"src":"12278:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2572","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:14"},"returnParameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3429,"src":"12320:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3398,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:14"},"scope":3430,"src":"12247:255:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3431,"src":"202:12302:14","usedErrors":[],"usedEvents":[]}],"src":"103:12402:14"},"id":14},"@openzeppelin/contracts/utils/structs/BitMaps.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/BitMaps.sol","exportedSymbols":{"BitMaps":[3568]},"id":3569,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3432,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"BitMaps","contractDependencies":[],"contractKind":"library","documentation":{"id":3433,"nodeType":"StructuredDocumentation","src":"133:271:15","text":" @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor]."},"fullyImplemented":true,"id":3568,"linearizedBaseContracts":[3568],"name":"BitMaps","nameLocation":"413:7:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BitMaps.BitMap","id":3438,"members":[{"constant":false,"id":3437,"mutability":"mutable","name":"_data","nameLocation":"479:5:15","nodeType":"VariableDeclaration","scope":3438,"src":"451:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":3436,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3434,"name":"uint256","nodeType":"ElementaryTypeName","src":"459:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"451:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"470:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"BitMap","nameLocation":"434:6:15","nodeType":"StructDefinition","scope":3568,"src":"427:64:15","visibility":"public"},{"body":{"id":3473,"nodeType":"Block","src":"648:137:15","statements":[{"assignments":[3450],"declarations":[{"constant":false,"id":3450,"mutability":"mutable","name":"bucket","nameLocation":"666:6:15","nodeType":"VariableDeclaration","scope":3473,"src":"658:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3449,"name":"uint256","nodeType":"ElementaryTypeName","src":"658:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3454,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3451,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"675:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"684:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"675:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"658:27:15"},{"assignments":[3456],"declarations":[{"constant":false,"id":3456,"mutability":"mutable","name":"mask","nameLocation":"703:4:15","nodeType":"VariableDeclaration","scope":3473,"src":"695:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3463,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"710:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3458,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"716:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30786666","id":3459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"724:4:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"716:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"715:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"710:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:34:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":3464,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"746:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},"id":3465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"753:5:15","memberName":"_data","nodeType":"MemberAccess","referencedDeclaration":3437,"src":"746:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3467,"indexExpression":{"id":3466,"name":"bucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"759:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"746:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3468,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"769:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"746:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"777:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"746:32:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3448,"id":3472,"nodeType":"Return","src":"739:39:15"}]},"documentation":{"id":3439,"nodeType":"StructuredDocumentation","src":"497:66:15","text":" @dev Returns whether the bit at `index` is set."},"id":3474,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"577:3:15","nodeType":"FunctionDefinition","parameters":{"id":3445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"bitmap","nameLocation":"596:6:15","nodeType":"VariableDeclaration","scope":3474,"src":"581:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":3441,"nodeType":"UserDefinedTypeName","pathNode":{"id":3440,"name":"BitMap","nameLocations":["581:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3438,"src":"581:6:15"},"referencedDeclaration":3438,"src":"581:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":3444,"mutability":"mutable","name":"index","nameLocation":"612:5:15","nodeType":"VariableDeclaration","scope":3474,"src":"604:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3443,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"580:38:15"},"returnParameters":{"id":3448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3474,"src":"642:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3446,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:6:15"},"scope":3568,"src":"568:217:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3499,"nodeType":"Block","src":"971:121:15","statements":[{"condition":{"id":3485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"985:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3497,"nodeType":"Block","src":"1041:45:15","statements":[{"expression":{"arguments":[{"id":3493,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"1061:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},{"id":3494,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"1069:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3492,"name":"unset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"1055:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitMap_$3438_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1055:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3496,"nodeType":"ExpressionStatement","src":"1055:20:15"}]},"id":3498,"nodeType":"IfStatement","src":"981:105:15","trueBody":{"id":3491,"nodeType":"Block","src":"992:43:15","statements":[{"expression":{"arguments":[{"id":3487,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"1010:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},{"id":3488,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"1018:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3486,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1006:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitMap_$3438_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1006:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3490,"nodeType":"ExpressionStatement","src":"1006:18:15"}]}}]},"documentation":{"id":3475,"nodeType":"StructuredDocumentation","src":"791:71:15","text":" @dev Sets the bit at `index` to the boolean `value`."},"id":3500,"implemented":true,"kind":"function","modifiers":[],"name":"setTo","nameLocation":"876:5:15","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3478,"mutability":"mutable","name":"bitmap","nameLocation":"906:6:15","nodeType":"VariableDeclaration","scope":3500,"src":"891:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":3477,"nodeType":"UserDefinedTypeName","pathNode":{"id":3476,"name":"BitMap","nameLocations":["891:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3438,"src":"891:6:15"},"referencedDeclaration":3438,"src":"891:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":3480,"mutability":"mutable","name":"index","nameLocation":"930:5:15","nodeType":"VariableDeclaration","scope":3500,"src":"922:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3479,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"value","nameLocation":"950:5:15","nodeType":"VariableDeclaration","scope":3500,"src":"945:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3481,"name":"bool","nodeType":"ElementaryTypeName","src":"945:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"881:80:15"},"returnParameters":{"id":3484,"nodeType":"ParameterList","parameters":[],"src":"971:0:15"},"scope":3568,"src":"867:225:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3532,"nodeType":"Block","src":"1211:126:15","statements":[{"assignments":[3510],"declarations":[{"constant":false,"id":3510,"mutability":"mutable","name":"bucket","nameLocation":"1229:6:15","nodeType":"VariableDeclaration","scope":3532,"src":"1221:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3509,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3514,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3511,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"1238:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1247:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1238:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1221:27:15"},{"assignments":[3516],"declarations":[{"constant":false,"id":3516,"mutability":"mutable","name":"mask","nameLocation":"1266:4:15","nodeType":"VariableDeclaration","scope":3532,"src":"1258:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3515,"name":"uint256","nodeType":"ElementaryTypeName","src":"1258:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3523,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1273:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3518,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"1279:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30786666","id":3519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1287:4:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"1279:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3521,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1278:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1273:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1258:34:15"},{"expression":{"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3524,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"1302:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},"id":3527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1309:5:15","memberName":"_data","nodeType":"MemberAccess","referencedDeclaration":3437,"src":"1302:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3528,"indexExpression":{"id":3526,"name":"bucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"1315:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1302:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"id":3529,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"1326:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1302:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3531,"nodeType":"ExpressionStatement","src":"1302:28:15"}]},"documentation":{"id":3501,"nodeType":"StructuredDocumentation","src":"1098:48:15","text":" @dev Sets the bit at `index`."},"id":3533,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"1160:3:15","nodeType":"FunctionDefinition","parameters":{"id":3507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3504,"mutability":"mutable","name":"bitmap","nameLocation":"1179:6:15","nodeType":"VariableDeclaration","scope":3533,"src":"1164:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":3503,"nodeType":"UserDefinedTypeName","pathNode":{"id":3502,"name":"BitMap","nameLocations":["1164:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3438,"src":"1164:6:15"},"referencedDeclaration":3438,"src":"1164:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":3506,"mutability":"mutable","name":"index","nameLocation":"1195:5:15","nodeType":"VariableDeclaration","scope":3533,"src":"1187:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3505,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1163:38:15"},"returnParameters":{"id":3508,"nodeType":"ParameterList","parameters":[],"src":"1211:0:15"},"scope":3568,"src":"1151:186:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3566,"nodeType":"Block","src":"1460:127:15","statements":[{"assignments":[3543],"declarations":[{"constant":false,"id":3543,"mutability":"mutable","name":"bucket","nameLocation":"1478:6:15","nodeType":"VariableDeclaration","scope":3566,"src":"1470:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1470:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3547,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3544,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"1487:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1496:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1487:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1470:27:15"},{"assignments":[3549],"declarations":[{"constant":false,"id":3549,"mutability":"mutable","name":"mask","nameLocation":"1515:4:15","nodeType":"VariableDeclaration","scope":3566,"src":"1507:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3556,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3551,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"1528:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30786666","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:4:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"1528:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3554,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1527:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1522:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1507:34:15"},{"expression":{"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3557,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1551:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},"id":3560,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1558:5:15","memberName":"_data","nodeType":"MemberAccess","referencedDeclaration":3437,"src":"1551:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3561,"indexExpression":{"id":3559,"name":"bucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"1564:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1551:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"&=","rightHandSide":{"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"1575:5:15","subExpression":{"id":3562,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"1576:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1551:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3565,"nodeType":"ExpressionStatement","src":"1551:29:15"}]},"documentation":{"id":3534,"nodeType":"StructuredDocumentation","src":"1343:50:15","text":" @dev Unsets the bit at `index`."},"id":3567,"implemented":true,"kind":"function","modifiers":[],"name":"unset","nameLocation":"1407:5:15","nodeType":"FunctionDefinition","parameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"bitmap","nameLocation":"1428:6:15","nodeType":"VariableDeclaration","scope":3567,"src":"1413:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":3536,"nodeType":"UserDefinedTypeName","pathNode":{"id":3535,"name":"BitMap","nameLocations":["1413:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3438,"src":"1413:6:15"},"referencedDeclaration":3438,"src":"1413:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":3539,"mutability":"mutable","name":"index","nameLocation":"1444:5:15","nodeType":"VariableDeclaration","scope":3567,"src":"1436:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3538,"name":"uint256","nodeType":"ElementaryTypeName","src":"1436:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1412:38:15"},"returnParameters":{"id":3541,"nodeType":"ParameterList","parameters":[],"src":"1460:0:15"},"scope":3568,"src":"1398:189:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3569,"src":"405:1184:15","usedErrors":[],"usedEvents":[]}],"src":"108:1482:15"},"id":15},"contracts/NFT1.sol":{"ast":{"absolutePath":"contracts/NFT1.sol","exportedSymbols":{"BitMaps":[3568],"ERC2981":[1500],"ERC721":[1141],"MerkleProof":[2529],"NFT1":[3993],"Ownable2Step":[195]},"id":3994,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3570,"literals":["solidity","=","0.8",".27"],"nodeType":"PragmaDirective","src":"32:24:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":3572,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3994,"sourceUnit":1142,"src":"58:71:16","symbolAliases":[{"foreign":{"id":3571,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"66:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable2Step.sol","file":"@openzeppelin/contracts/access/Ownable2Step.sol","id":3574,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3994,"sourceUnit":196,"src":"130:77:16","symbolAliases":[{"foreign":{"id":3573,"name":"Ownable2Step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"138:12:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/common/ERC2981.sol","file":"@openzeppelin/contracts/token/common/ERC2981.sol","id":3576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3994,"sourceUnit":1501,"src":"208:73:16","symbolAliases":[{"foreign":{"id":3575,"name":"ERC2981","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"216:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/BitMaps.sol","file":"@openzeppelin/contracts/utils/structs/BitMaps.sol","id":3578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3994,"sourceUnit":3569,"src":"282:74:16","symbolAliases":[{"foreign":{"id":3577,"name":"BitMaps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"290:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":3580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3994,"sourceUnit":2530,"src":"357:87:16","symbolAliases":[{"foreign":{"id":3579,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"365:11:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3582,"name":"ERC721","nameLocations":["803:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":1141,"src":"803:6:16"},"id":3583,"nodeType":"InheritanceSpecifier","src":"803:6:16"},{"baseName":{"id":3584,"name":"Ownable2Step","nameLocations":["811:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"811:12:16"},"id":3585,"nodeType":"InheritanceSpecifier","src":"811:12:16"},{"baseName":{"id":3586,"name":"ERC2981","nameLocations":["825:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"825:7:16"},"id":3587,"nodeType":"InheritanceSpecifier","src":"825:7:16"}],"canonicalName":"NFT1","contractDependencies":[],"contractKind":"contract","documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"446:339:16","text":" @title NFT1\n @dev An ERC721 contract with added functionality for minting, discounts using Merkle proofs, and royalties (ERC2981).\n      Includes features like time-limited discounts, withdrawal of funds, and token transfers with royalty payments.\n      Based on OpenZeppelin's ERC721, Ownable2Step, and ERC2981 standards."},"fullyImplemented":true,"id":3993,"linearizedBaseContracts":[3993,1500,195,112,1141,1302,1257,2553,214,2565,1852],"name":"NFT1","nameLocation":"795:4:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"32cb6b0c","id":3590,"mutability":"constant","name":"MAX_SUPPLY","nameLocation":"863:10:16","nodeType":"VariableDeclaration","scope":3993,"src":"839:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"839:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"876:4:16","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"public"},{"constant":true,"functionSelector":"55850fe6","id":3593,"mutability":"constant","name":"ROYALTY_FEE_NUMERATOR","nameLocation":"909:21:16","nodeType":"VariableDeclaration","scope":3993,"src":"886:50:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3591,"name":"uint96","nodeType":"ElementaryTypeName","src":"886:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"value":{"hexValue":"323530","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"933:3:16","typeDescriptions":{"typeIdentifier":"t_rational_250_by_1","typeString":"int_const 250"},"value":"250"},"visibility":"public"},{"constant":true,"functionSelector":"63d9d166","id":3596,"mutability":"constant","name":"MINTING_PRICE","nameLocation":"986:13:16","nodeType":"VariableDeclaration","scope":3993,"src":"962:49:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3594,"name":"uint256","nodeType":"ElementaryTypeName","src":"962:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"302e31","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1002:9:16","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"0.1"},"visibility":"public"},{"constant":true,"functionSelector":"c7499348","id":3599,"mutability":"constant","name":"DISCOUNTED_MINTING_PRICE","nameLocation":"1041:24:16","nodeType":"VariableDeclaration","scope":3993,"src":"1017:61:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3597,"name":"uint256","nodeType":"ElementaryTypeName","src":"1017:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"302e3035","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1068:10:16","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_50000000000000000_by_1","typeString":"int_const 50000000000000000"},"value":"0.05"},"visibility":"public"},{"constant":false,"functionSelector":"98bdf6f5","id":3601,"mutability":"mutable","name":"tokenIdCounter","nameLocation":"1100:14:16","nodeType":"VariableDeclaration","scope":3993,"src":"1085:29:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1085:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"2eb4a7ab","id":3603,"mutability":"immutable","name":"merkleRoot","nameLocation":"1145:10:16","nodeType":"VariableDeclaration","scope":3993,"src":"1120:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1120:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"id":3605,"mutability":"mutable","name":"baseTokenURI","nameLocation":"1230:12:16","nodeType":"VariableDeclaration","scope":3993,"src":"1215:27:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3604,"name":"string","nodeType":"ElementaryTypeName","src":"1215:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":3608,"mutability":"mutable","name":"airdropList","nameLocation":"1271:11:16","nodeType":"VariableDeclaration","scope":3993,"src":"1248:34:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage","typeString":"struct BitMaps.BitMap"},"typeName":{"id":3607,"nodeType":"UserDefinedTypeName","pathNode":{"id":3606,"name":"BitMaps.BitMap","nameLocations":["1248:7:16","1256:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3438,"src":"1248:14:16"},"referencedDeclaration":3438,"src":"1248:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"private"},{"anonymous":false,"eventSelector":"eaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d","id":3614,"name":"FundsWithdrawn","nameLocation":"1309:14:16","nodeType":"EventDefinition","parameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3610,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1340:5:16","nodeType":"VariableDeclaration","scope":3614,"src":"1324:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3609,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3612,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1355:6:16","nodeType":"VariableDeclaration","scope":3614,"src":"1347:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3611,"name":"uint256","nodeType":"ElementaryTypeName","src":"1347:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1323:39:16"},"src":"1303:60:16"},{"anonymous":false,"eventSelector":"90ddedd5a25821bba11fbb98de02ec1f75c1be90ae147d6450ce873e7b78b5d8","id":3618,"name":"Minted","nameLocation":"1374:6:16","nodeType":"EventDefinition","parameters":{"id":3617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3616,"indexed":true,"mutability":"mutable","name":"nftOwner","nameLocation":"1397:8:16","nodeType":"VariableDeclaration","scope":3618,"src":"1381:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3615,"name":"address","nodeType":"ElementaryTypeName","src":"1381:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1380:26:16"},"src":"1368:39:16"},{"body":{"id":3648,"nodeType":"Block","src":"1708:215:16","statements":[{"expression":{"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3630,"name":"baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"1718:12:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3631,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"1733:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1718:22:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3633,"nodeType":"ExpressionStatement","src":"1718:22:16"},{"expression":{"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3634,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"1750:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3635,"name":"merkleRoot_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3623,"src":"1763:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1750:24:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3637,"nodeType":"ExpressionStatement","src":"1750:24:16"},{"expression":{"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3638,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"1784:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1784:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3641,"nodeType":"ExpressionStatement","src":"1784:18:16"},{"expression":{"arguments":[{"expression":{"id":3643,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1831:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1835:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1831:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3645,"name":"ROYALTY_FEE_NUMERATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"1843:21:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3642,"name":"_setDefaultRoyalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"1812:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint96_$returns$__$","typeString":"function (address,uint96)"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3647,"nodeType":"ExpressionStatement","src":"1812:53:16"}]},"documentation":{"id":3619,"nodeType":"StructuredDocumentation","src":"1413:211:16","text":" @notice Constructor that initializes the NFT1 contract.\n @param baseURI The base URI for token metadata.\n @param merkleRoot_ The Merkle root used for airdrop/discount verification."},"id":3649,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4e465431","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1692:6:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_416a4fca5ff7c025ec8fcb13aa3eef33b376e757671de3ae5f9afa53f9b6427f","typeString":"literal_string \"NFT1\""},"value":"NFT1"},{"hexValue":"4e465431","id":3627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1700:6:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_416a4fca5ff7c025ec8fcb13aa3eef33b376e757671de3ae5f9afa53f9b6427f","typeString":"literal_string \"NFT1\""},"value":"NFT1"}],"id":3628,"kind":"baseConstructorSpecifier","modifierName":{"id":3625,"name":"ERC721","nameLocations":["1685:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":1141,"src":"1685:6:16"},"nodeType":"ModifierInvocation","src":"1685:22:16"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"baseURI","nameLocation":"1655:7:16","nodeType":"VariableDeclaration","scope":3649,"src":"1641:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3620,"name":"string","nodeType":"ElementaryTypeName","src":"1641:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3623,"mutability":"mutable","name":"merkleRoot_","nameLocation":"1672:11:16","nodeType":"VariableDeclaration","scope":3649,"src":"1664:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1664:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1640:44:16"},"returnParameters":{"id":3629,"nodeType":"ParameterList","parameters":[],"src":"1708:0:16"},"scope":3993,"src":"1629:294:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3694,"nodeType":"Block","src":"2155:315:16","statements":[{"assignments":[3656],"declarations":[{"constant":false,"id":3656,"mutability":"mutable","name":"contractBalance","nameLocation":"2173:15:16","nodeType":"VariableDeclaration","scope":3694,"src":"2165:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3655,"name":"uint256","nodeType":"ElementaryTypeName","src":"2165:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3662,"initialValue":{"expression":{"arguments":[{"id":3659,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2199:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_NFT1_$3993","typeString":"contract NFT1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NFT1_$3993","typeString":"contract NFT1"}],"id":3658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2191:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3657,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:16","typeDescriptions":{}}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2191:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2205:7:16","memberName":"balance","nodeType":"MemberAccess","src":"2191:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2165:47:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3664,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"2230:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2248:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2230:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f2066756e647320746f207769746864726177","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2251:22:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932","typeString":"literal_string \"no funds to withdraw\""},"value":"no funds to withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932","typeString":"literal_string \"no funds to withdraw\""}],"id":3663,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2222:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2222:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3669,"nodeType":"ExpressionStatement","src":"2222:52:16"},{"assignments":[3671,null],"declarations":[{"constant":false,"id":3671,"mutability":"mutable","name":"success","nameLocation":"2290:7:16","nodeType":"VariableDeclaration","scope":3694,"src":"2285:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3670,"name":"bool","nodeType":"ElementaryTypeName","src":"2285:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3682,"initialValue":{"arguments":[{"hexValue":"","id":3680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2352:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":3674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2311:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2315:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2311:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2303:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3672,"name":"address","nodeType":"ElementaryTypeName","src":"2303:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2323:4:16","memberName":"call","nodeType":"MemberAccess","src":"2303:24:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3678,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"2335:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2303:48:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2284:71:16"},{"expression":{"arguments":[{"id":3684,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3671,"src":"2373:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66756e64207472616e73666572206661696c6564","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2382:22:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d","typeString":"literal_string \"fund transfer failed\""},"value":"fund transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d","typeString":"literal_string \"fund transfer failed\""}],"id":3683,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2365:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2365:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3687,"nodeType":"ExpressionStatement","src":"2365:40:16"},{"eventCall":{"arguments":[{"expression":{"id":3689,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2435:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2439:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2435:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3691,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"2447:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3688,"name":"FundsWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"2420:14:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3693,"nodeType":"EmitStatement","src":"2415:48:16"}]},"documentation":{"id":3650,"nodeType":"StructuredDocumentation","src":"1929:177:16","text":" @notice Withdraw all the funds from the contract to the owner's address.\n @dev Only callable by the owner of the contract. Emits a FundsWithdrawn event."},"functionSelector":"24600fc3","id":3695,"implemented":true,"kind":"function","modifiers":[{"id":3653,"kind":"modifierInvocation","modifierName":{"id":3652,"name":"onlyOwner","nameLocations":["2145:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2145:9:16"},"nodeType":"ModifierInvocation","src":"2145:9:16"}],"name":"withdrawFunds","nameLocation":"2120:13:16","nodeType":"FunctionDefinition","parameters":{"id":3651,"nodeType":"ParameterList","parameters":[],"src":"2133:2:16"},"returnParameters":{"id":3654,"nodeType":"ParameterList","parameters":[],"src":"2155:0:16"},"scope":3993,"src":"2111:359:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3755,"nodeType":"Block","src":"2974:477:16","statements":[{"assignments":[null,3708],"declarations":[null,{"constant":false,"id":3708,"mutability":"mutable","name":"royaltyAmount","nameLocation":"2995:13:16","nodeType":"VariableDeclaration","scope":3755,"src":"2987:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3707,"name":"uint256","nodeType":"ElementaryTypeName","src":"2987:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3713,"initialValue":{"arguments":[{"id":3710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"3024:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3711,"name":"salesPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"3033:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3709,"name":"royaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3012:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_address_$_t_uint256_$","typeString":"function (uint256,uint256) view returns (address,uint256)"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2984:60:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3715,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3062:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3066:5:16","memberName":"value","nodeType":"MemberAccess","src":"3062:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3717,"name":"royaltyAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"3075:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3062:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420726f79616c747920616d6f756e74","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3090:29:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad","typeString":"literal_string \"Insufficient royalty amount\""},"value":"Insufficient royalty amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad","typeString":"literal_string \"Insufficient royalty amount\""}],"id":3714,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3054:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3054:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3721,"nodeType":"ExpressionStatement","src":"3054:66:16"},{"expression":{"arguments":[{"id":3723,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"3143:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3724,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"3149:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3725,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"3153:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3722,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"3130:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3130:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3727,"nodeType":"ExpressionStatement","src":"3130:31:16"},{"assignments":[3729],"declarations":[{"constant":false,"id":3729,"mutability":"mutable","name":"excess","nameLocation":"3217:6:16","nodeType":"VariableDeclaration","scope":3755,"src":"3209:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3728,"name":"uint256","nodeType":"ElementaryTypeName","src":"3209:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3734,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3730,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3226:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3230:5:16","memberName":"value","nodeType":"MemberAccess","src":"3226:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3732,"name":"royaltyAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"3238:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3226:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3209:42:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3735,"name":"excess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"3265:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3274:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3265:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3754,"nodeType":"IfStatement","src":"3261:184:16","trueBody":{"id":3753,"nodeType":"Block","src":"3277:168:16","statements":[{"assignments":[3739,null],"declarations":[{"constant":false,"id":3739,"mutability":"mutable","name":"refundSuccess","nameLocation":"3297:13:16","nodeType":"VariableDeclaration","scope":3753,"src":"3292:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3738,"name":"bool","nodeType":"ElementaryTypeName","src":"3292:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3747,"initialValue":{"arguments":[{"hexValue":"","id":3745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3347:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":3740,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3316:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3320:6:16","memberName":"sender","nodeType":"MemberAccess","src":"3316:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3327:4:16","memberName":"call","nodeType":"MemberAccess","src":"3316:15:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3743,"name":"excess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"3339:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3316:30:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3316:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3291:59:16"},{"expression":{"arguments":[{"id":3749,"name":"refundSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"3403:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526566756e64206661696c6564","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3418:15:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e","typeString":"literal_string \"Refund failed\""},"value":"Refund failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e","typeString":"literal_string \"Refund failed\""}],"id":3748,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3395:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3395:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3752,"nodeType":"ExpressionStatement","src":"3395:39:16"}]}}]},"documentation":{"id":3696,"nodeType":"StructuredDocumentation","src":"2476:378:16","text":" @notice Transfer an NFT along with royalty payment to the rightful receiver.\n @param from The address sending the NFT.\n @param to The address receiving the NFT.\n @param tokenId The ID of the token being transferred.\n @param salesPrice The sale price of the NFT.\n @dev Ensures that the royalty payment is made before the transfer."},"functionSelector":"0ab7039e","id":3756,"implemented":true,"kind":"function","modifiers":[],"name":"transferFromWithRoyalties","nameLocation":"2868:25:16","nodeType":"FunctionDefinition","parameters":{"id":3705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3698,"mutability":"mutable","name":"from","nameLocation":"2902:4:16","nodeType":"VariableDeclaration","scope":3756,"src":"2894:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3697,"name":"address","nodeType":"ElementaryTypeName","src":"2894:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3700,"mutability":"mutable","name":"to","nameLocation":"2916:2:16","nodeType":"VariableDeclaration","scope":3756,"src":"2908:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3699,"name":"address","nodeType":"ElementaryTypeName","src":"2908:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3702,"mutability":"mutable","name":"tokenId","nameLocation":"2928:7:16","nodeType":"VariableDeclaration","scope":3756,"src":"2920:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3701,"name":"uint256","nodeType":"ElementaryTypeName","src":"2920:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"salesPrice","nameLocation":"2945:10:16","nodeType":"VariableDeclaration","scope":3756,"src":"2937:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3703,"name":"uint256","nodeType":"ElementaryTypeName","src":"2937:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2893:63:16"},"returnParameters":{"id":3706,"nodeType":"ParameterList","parameters":[],"src":"2974:0:16"},"scope":3993,"src":"2859:592:16","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3774,"nodeType":"Block","src":"3835:66:16","statements":[{"expression":{"arguments":[{"id":3769,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"3862:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3770,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"3871:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3771,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3881:12:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3768,"name":"_setTokenRoyalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"3845:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint96_$returns$__$","typeString":"function (uint256,address,uint96)"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3845:49:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3773,"nodeType":"ExpressionStatement","src":"3845:49:16"}]},"documentation":{"id":3757,"nodeType":"StructuredDocumentation","src":"3457:273:16","text":" @notice Set a custom royalty for a specific token.\n @param tokenId The ID of the token.\n @param receiver The address that should receive the royalty.\n @param feeNumerator The royalty percentage, represented as a numerator out of 10,000."},"functionSelector":"5944c753","id":3775,"implemented":true,"kind":"function","modifiers":[{"id":3766,"kind":"modifierInvocation","modifierName":{"id":3765,"name":"onlyOwner","nameLocations":["3825:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3825:9:16"},"nodeType":"ModifierInvocation","src":"3825:9:16"}],"name":"setTokenRoyalty","nameLocation":"3744:15:16","nodeType":"FunctionDefinition","parameters":{"id":3764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3759,"mutability":"mutable","name":"tokenId","nameLocation":"3768:7:16","nodeType":"VariableDeclaration","scope":3775,"src":"3760:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3758,"name":"uint256","nodeType":"ElementaryTypeName","src":"3760:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3761,"mutability":"mutable","name":"receiver","nameLocation":"3785:8:16","nodeType":"VariableDeclaration","scope":3775,"src":"3777:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3760,"name":"address","nodeType":"ElementaryTypeName","src":"3777:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3763,"mutability":"mutable","name":"feeNumerator","nameLocation":"3802:12:16","nodeType":"VariableDeclaration","scope":3775,"src":"3795:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3762,"name":"uint96","nodeType":"ElementaryTypeName","src":"3795:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3759:56:16"},"returnParameters":{"id":3767,"nodeType":"ParameterList","parameters":[],"src":"3835:0:16"},"scope":3993,"src":"3735:166:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3790,"nodeType":"Block","src":"4075:99:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3780,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4093:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4097:5:16","memberName":"value","nodeType":"MemberAccess","src":"4093:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3782,"name":"MINTING_PRICE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"4106:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4093:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"77726f6e6720616d6f756e742c2073656e6420302e3120455448","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4121:28:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e","typeString":"literal_string \"wrong amount, send 0.1 ETH\""},"value":"wrong amount, send 0.1 ETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e","typeString":"literal_string \"wrong amount, send 0.1 ETH\""}],"id":3779,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4085:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:65:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3786,"nodeType":"ExpressionStatement","src":"4085:65:16"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3787,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[3992,815],"referencedDeclaration":3992,"src":"4160:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4160:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3789,"nodeType":"ExpressionStatement","src":"4160:7:16"}]},"documentation":{"id":3776,"nodeType":"StructuredDocumentation","src":"3907:132:16","text":" @notice Mint a new NFT.\n @dev Requires sending 0.1 ETH. Only mints if the supply limit hasn't been reached."},"functionSelector":"1249c58b","id":3791,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"4053:4:16","nodeType":"FunctionDefinition","parameters":{"id":3777,"nodeType":"ParameterList","parameters":[],"src":"4057:2:16"},"returnParameters":{"id":3778,"nodeType":"ParameterList","parameters":[],"src":"4075:0:16"},"scope":3993,"src":"4044:130:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3851,"nodeType":"Block","src":"4605:356:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3803,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4623:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4627:5:16","memberName":"value","nodeType":"MemberAccess","src":"4623:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3805,"name":"DISCOUNTED_MINTING_PRICE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"4636:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4623:37:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"77726f6e6720616d6f756e742c2073656e6420302e303520455448","id":3807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4662:29:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a","typeString":"literal_string \"wrong amount, send 0.05 ETH\""},"value":"wrong amount, send 0.05 ETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a","typeString":"literal_string \"wrong amount, send 0.05 ETH\""}],"id":3802,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4615:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4615:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3809,"nodeType":"ExpressionStatement","src":"4615:77:16"},{"expression":{"arguments":[{"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4710:32:16","subExpression":{"arguments":[{"id":3813,"name":"airdropList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"4723:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage","typeString":"struct BitMaps.BitMap storage ref"}},{"id":3814,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"4736:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitMap_$3438_storage","typeString":"struct BitMaps.BitMap storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3811,"name":"BitMaps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"4711:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BitMaps_$3568_$","typeString":"type(library BitMaps)"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4719:3:16","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":3474,"src":"4711:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_BitMap_$3438_storage_ptr_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256) view returns (bool)"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4711:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"446973636f756e7420616c726561647920636c61696d6564","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4744:26:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2","typeString":"literal_string \"Discount already claimed\""},"value":"Discount already claimed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2","typeString":"literal_string \"Discount already claimed\""}],"id":3810,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4702:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3819,"nodeType":"ExpressionStatement","src":"4702:69:16"},{"expression":{"arguments":[{"id":3821,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"4794:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":3822,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"4801:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3823,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"4808:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3824,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4816:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4820:6:16","memberName":"sender","nodeType":"MemberAccess","src":"4816:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3820,"name":"_verifyProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"4781:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (bytes32[] memory,uint256,uint256,address) view"}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4781:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3827,"nodeType":"ExpressionStatement","src":"4781:46:16"},{"expression":{"arguments":[{"id":3831,"name":"airdropList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"4851:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$3438_storage","typeString":"struct BitMaps.BitMap storage ref"}},{"id":3832,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"4864:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":3833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4871:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitMap_$3438_storage","typeString":"struct BitMaps.BitMap storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3828,"name":"BitMaps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"4837:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BitMaps_$3568_$","typeString":"type(library BitMaps)"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4845:5:16","memberName":"setTo","nodeType":"MemberAccess","referencedDeclaration":3500,"src":"4837:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitMap_$3438_storage_ptr_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256,bool)"}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4837:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3835,"nodeType":"ExpressionStatement","src":"4837:39:16"},{"body":{"id":3849,"nodeType":"Block","src":"4923:32:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3846,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[3992,815],"referencedDeclaration":3992,"src":"4937:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4937:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3848,"nodeType":"ExpressionStatement","src":"4937:7:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3840,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"4906:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3841,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"4910:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4906:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3850,"initializationExpression":{"assignments":[3837],"declarations":[{"constant":false,"id":3837,"mutability":"mutable","name":"i","nameLocation":"4899:1:16","nodeType":"VariableDeclaration","scope":3850,"src":"4891:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3836,"name":"uint256","nodeType":"ElementaryTypeName","src":"4891:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3839,"initialValue":{"hexValue":"30","id":3838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4903:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4891:13:16"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4918:3:16","subExpression":{"id":3843,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"4918:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3845,"nodeType":"ExpressionStatement","src":"4918:3:16"},"nodeType":"ForStatement","src":"4886:69:16"}]},"documentation":{"id":3792,"nodeType":"StructuredDocumentation","src":"4180:322:16","text":" @notice Mint an NFT with a discount using a valid Merkle proof.\n @param proof The Merkle proof of eligibility for the discount.\n @param index The index in the Merkle tree.\n @param amount The number of tokens to mint.\n @dev Requires sending 0.05 ETH for the discounted mint price."},"functionSelector":"47b13d8a","id":3852,"implemented":true,"kind":"function","modifiers":[],"name":"mintWithDiscount","nameLocation":"4516:16:16","nodeType":"FunctionDefinition","parameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"proof","nameLocation":"4552:5:16","nodeType":"VariableDeclaration","scope":3852,"src":"4533:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4533:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3794,"nodeType":"ArrayTypeName","src":"4533:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3797,"mutability":"mutable","name":"index","nameLocation":"4567:5:16","nodeType":"VariableDeclaration","scope":3852,"src":"4559:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3796,"name":"uint256","nodeType":"ElementaryTypeName","src":"4559:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3799,"mutability":"mutable","name":"amount","nameLocation":"4582:6:16","nodeType":"VariableDeclaration","scope":3852,"src":"4574:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3798,"name":"uint256","nodeType":"ElementaryTypeName","src":"4574:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4532:57:16"},"returnParameters":{"id":3801,"nodeType":"ParameterList","parameters":[],"src":"4605:0:16"},"scope":3993,"src":"4507:454:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3864,"nodeType":"Block","src":"5141:39:16","statements":[{"expression":{"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3860,"name":"baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5151:12:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3861,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"5166:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5151:22:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3863,"nodeType":"ExpressionStatement","src":"5151:22:16"}]},"documentation":{"id":3853,"nodeType":"StructuredDocumentation","src":"4967:109:16","text":" @notice Set a new base URI for the token metadata.\n @param baseURI The new base URI."},"functionSelector":"55f804b3","id":3865,"implemented":true,"kind":"function","modifiers":[{"id":3858,"kind":"modifierInvocation","modifierName":{"id":3857,"name":"onlyOwner","nameLocations":["5131:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"5131:9:16"},"nodeType":"ModifierInvocation","src":"5131:9:16"}],"name":"setBaseURI","nameLocation":"5090:10:16","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"baseURI","nameLocation":"5115:7:16","nodeType":"VariableDeclaration","scope":3865,"src":"5101:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3854,"name":"string","nodeType":"ElementaryTypeName","src":"5101:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5100:23:16"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[],"src":"5141:0:16"},"scope":3993,"src":"5081:99:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[428],"body":{"id":3874,"nodeType":"Block","src":"5330:36:16","statements":[{"expression":{"id":3872,"name":"baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5347:12:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3871,"id":3873,"nodeType":"Return","src":"5340:19:16"}]},"documentation":{"id":3866,"nodeType":"StructuredDocumentation","src":"5186:64:16","text":" @dev Returns the base URI for token metadata."},"id":3875,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"5264:8:16","nodeType":"FunctionDefinition","overrides":{"id":3868,"nodeType":"OverrideSpecifier","overrides":[],"src":"5297:8:16"},"parameters":{"id":3867,"nodeType":"ParameterList","parameters":[],"src":"5272:2:16"},"returnParameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3875,"src":"5315:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3869,"name":"string","nodeType":"ElementaryTypeName","src":"5315:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5314:15:16"},"scope":3993,"src":"5255:111:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3883,"nodeType":"Block","src":"5538:38:16","statements":[{"expression":{"id":3881,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"5555:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3880,"id":3882,"nodeType":"Return","src":"5548:21:16"}]},"documentation":{"id":3876,"nodeType":"StructuredDocumentation","src":"5372:108:16","text":" @notice Get the total number of minted tokens.\n @return The total supply of tokens."},"functionSelector":"18160ddd","id":3884,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"5494:11:16","nodeType":"FunctionDefinition","parameters":{"id":3877,"nodeType":"ParameterList","parameters":[],"src":"5505:2:16"},"returnParameters":{"id":3880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3884,"src":"5529:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3878,"name":"uint256","nodeType":"ElementaryTypeName","src":"5529:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5528:9:16"},"scope":3993,"src":"5485:91:16","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[308,1348],"body":{"id":3900,"nodeType":"Block","src":"5894:60:16","statements":[{"expression":{"arguments":[{"id":3897,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"5935:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3895,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5911:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_NFT1_$3993_$","typeString":"type(contract super NFT1)"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5917:17:16","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"5911:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5911:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3894,"id":3899,"nodeType":"Return","src":"5904:43:16"}]},"documentation":{"id":3885,"nodeType":"StructuredDocumentation","src":"5582:199:16","text":" @notice Override to include support for ERC2981 interface.\n @param interfaceId The interface identifier.\n @return Whether the contract supports the specified interface."},"functionSelector":"01ffc9a7","id":3901,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5795:17:16","nodeType":"FunctionDefinition","overrides":{"id":3891,"nodeType":"OverrideSpecifier","overrides":[{"id":3889,"name":"ERC721","nameLocations":["5862:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":1141,"src":"5862:6:16"},{"id":3890,"name":"ERC2981","nameLocations":["5870:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"5870:7:16"}],"src":"5853:25:16"},"parameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"interfaceId","nameLocation":"5820:11:16","nodeType":"VariableDeclaration","scope":3901,"src":"5813:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3886,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5813:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5812:20:16"},"returnParameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3901,"src":"5888:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3892,"name":"bool","nodeType":"ElementaryTypeName","src":"5888:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5887:6:16"},"scope":3993,"src":"5786:168:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[172],"body":{"id":3919,"nodeType":"Block","src":"6194:160:16","statements":[{"expression":{"arguments":[{"id":3911,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"6229:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3908,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"6204:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_NFT1_$3993_$","typeString":"type(contract super NFT1)"}},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6210:18:16","memberName":"_transferOwnership","nodeType":"MemberAccess","referencedDeclaration":172,"src":"6204:24:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6204:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3913,"nodeType":"ExpressionStatement","src":"6204:34:16"},{"expression":{"arguments":[{"id":3915,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"6267:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3916,"name":"ROYALTY_FEE_NUMERATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"6277:21:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3914,"name":"_setDefaultRoyalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"6248:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint96_$returns$__$","typeString":"function (address,uint96)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6248:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3918,"nodeType":"ExpressionStatement","src":"6248:51:16"}]},"documentation":{"id":3902,"nodeType":"StructuredDocumentation","src":"5960:165:16","text":" @dev Internal function to update ownership and royalty receiver when transferring ownership.\n @param newOwner The new owner of the contract."},"id":3920,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"6139:18:16","nodeType":"FunctionDefinition","overrides":{"id":3906,"nodeType":"OverrideSpecifier","overrides":[],"src":"6185:8:16"},"parameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"newOwner","nameLocation":"6166:8:16","nodeType":"VariableDeclaration","scope":3920,"src":"6158:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"6158:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6157:18:16"},"returnParameters":{"id":3907,"nodeType":"ParameterList","parameters":[],"src":"6194:0:16"},"scope":3993,"src":"6130:224:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3960,"nodeType":"Block","src":"6767:178:16","statements":[{"assignments":[3934],"declarations":[{"constant":false,"id":3934,"mutability":"mutable","name":"leaf","nameLocation":"6785:4:16","nodeType":"VariableDeclaration","scope":3960,"src":"6777:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3933,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6777:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3949,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":3942,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3930,"src":"6836:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3943,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"6842:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3944,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"6849:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3940,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6825:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6829:6:16","memberName":"encode","nodeType":"MemberAccess","src":"6825:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6825:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3939,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6815:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6815:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6802:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3936,"name":"bytes","nodeType":"ElementaryTypeName","src":"6802:5:16","typeDescriptions":{}}},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6808:6:16","memberName":"concat","nodeType":"MemberAccess","src":"6802:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6802:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3935,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6792:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6792:67:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6777:82:16"},{"expression":{"arguments":[{"arguments":[{"id":3953,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"6896:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":3954,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"6903:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3955,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"6915:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3951,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"6877:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$2529_$","typeString":"type(library MerkleProof)"}},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6889:6:16","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":2051,"src":"6877:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6877:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726f6f66","id":3957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6922:15:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639","typeString":"literal_string \"Invalid proof\""},"value":"Invalid proof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639","typeString":"literal_string \"Invalid proof\""}],"id":3950,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6869:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6869:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3959,"nodeType":"ExpressionStatement","src":"6869:69:16"}]},"documentation":{"id":3921,"nodeType":"StructuredDocumentation","src":"6360:298:16","text":" @dev Verify the Merkle proof for an address, index, and amount.\n @param proof The Merkle proof.\n @param index The index of the leaf in the Merkle tree.\n @param amount The amount of tokens associated with the proof.\n @param addr The address being verified."},"id":3961,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyProof","nameLocation":"6672:12:16","nodeType":"FunctionDefinition","parameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3924,"mutability":"mutable","name":"proof","nameLocation":"6702:5:16","nodeType":"VariableDeclaration","scope":3961,"src":"6685:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6685:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3923,"nodeType":"ArrayTypeName","src":"6685:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3926,"mutability":"mutable","name":"index","nameLocation":"6717:5:16","nodeType":"VariableDeclaration","scope":3961,"src":"6709:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3925,"name":"uint256","nodeType":"ElementaryTypeName","src":"6709:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"amount","nameLocation":"6732:6:16","nodeType":"VariableDeclaration","scope":3961,"src":"6724:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3927,"name":"uint256","nodeType":"ElementaryTypeName","src":"6724:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3930,"mutability":"mutable","name":"addr","nameLocation":"6748:4:16","nodeType":"VariableDeclaration","scope":3961,"src":"6740:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3929,"name":"address","nodeType":"ElementaryTypeName","src":"6740:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6684:69:16"},"returnParameters":{"id":3932,"nodeType":"ParameterList","parameters":[],"src":"6767:0:16"},"scope":3993,"src":"6663:282:16","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3991,"nodeType":"Block","src":"7089:236:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3966,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"7107:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3967,"name":"MAX_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7124:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7107:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"74686520737570706c79206c696d6974206f6620313030302069732072656163686564","id":3969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7136:37:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864","typeString":"literal_string \"the supply limit of 1000 is reached\""},"value":"the supply limit of 1000 is reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864","typeString":"literal_string \"the supply limit of 1000 is reached\""}],"id":3965,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7099:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7099:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3971,"nodeType":"ExpressionStatement","src":"7099:75:16"},{"assignments":[3973],"declarations":[{"constant":false,"id":3973,"mutability":"mutable","name":"tokenId","nameLocation":"7192:7:16","nodeType":"VariableDeclaration","scope":3991,"src":"7184:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3972,"name":"uint256","nodeType":"ElementaryTypeName","src":"7184:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3975,"initialValue":{"id":3974,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"7202:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7184:32:16"},{"expression":{"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3976,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"7226:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7244:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7226:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3979,"nodeType":"ExpressionStatement","src":"7226:19:16"},{"expression":{"arguments":[{"expression":{"id":3981,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7265:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7269:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7265:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3983,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"7277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3980,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[709,738],"referencedDeclaration":709,"src":"7255:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7255:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3985,"nodeType":"ExpressionStatement","src":"7255:30:16"},{"eventCall":{"arguments":[{"expression":{"id":3987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7307:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7311:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7307:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3986,"name":"Minted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"7300:6:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7300:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3990,"nodeType":"EmitStatement","src":"7295:23:16"}]},"documentation":{"id":3962,"nodeType":"StructuredDocumentation","src":"6951:107:16","text":" @dev Internal function to mint a new token.\n Emits a Minted event when successful."},"id":3992,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"7072:5:16","nodeType":"FunctionDefinition","parameters":{"id":3963,"nodeType":"ParameterList","parameters":[],"src":"7077:2:16"},"returnParameters":{"id":3964,"nodeType":"ParameterList","parameters":[],"src":"7089:0:16"},"scope":3993,"src":"7063:262:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3994,"src":"786:6541:16","usedErrors":[],"usedEvents":[13,126,1156,1165,1174,3614,3618]}],"src":"32:7296:16"},"id":16}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable2Step.sol":{"Ownable2Step":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).","kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable2Step.sol\":\"Ownable2Step\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable2Step.sol:Ownable2Step","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":120,"contract":"@openzeppelin/contracts/access/Ownable2Step.sol:Ownable2Step","label":"_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC2981.sol":{"IERC2981":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"salePrice","type":"uint256"}],"name":"royaltyInfo","outputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"royaltyAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants. _Available since v4.5._","kind":"dev","methods":{"royaltyInfo(uint256,uint256)":{"details":"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"royaltyInfo(uint256,uint256)":"2a55205a","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":\"IERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_277":{"entryPoint":null,"id":277,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":350,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":416,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":462,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":232,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":89,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":259,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":689,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":582,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":986,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":821,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":951,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":841,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1127,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":308,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":710,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":640,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1099,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":183,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":831,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1069,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":593,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":136,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":875,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":104,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":119,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":726,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1056,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":927,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":739,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":885,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":922,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:8576:17","nodeType":"YulBlock","src":"0:8576:17","statements":[{"body":{"nativeSrc":"47:35:17","nodeType":"YulBlock","src":"47:35:17","statements":[{"nativeSrc":"57:19:17","nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:17","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:17","nodeType":"YulIdentifier","src":"67:5:17"},"nativeSrc":"67:9:17","nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:17","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:17","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nativeSrc":"177:28:17","nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:17","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:17","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:17","nodeType":"YulIdentifier","src":"187:6:17"},"nativeSrc":"187:12:17","nodeType":"YulFunctionCall","src":"187:12:17"},"nativeSrc":"187:12:17","nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:17","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nativeSrc":"300:28:17","nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:17","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:17","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:17","nodeType":"YulIdentifier","src":"310:6:17"},"nativeSrc":"310:12:17","nodeType":"YulFunctionCall","src":"310:12:17"},"nativeSrc":"310:12:17","nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:17","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nativeSrc":"423:28:17","nodeType":"YulBlock","src":"423:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"440:1:17","nodeType":"YulLiteral","src":"440:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"443:1:17","nodeType":"YulLiteral","src":"443:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"433:6:17","nodeType":"YulIdentifier","src":"433:6:17"},"nativeSrc":"433:12:17","nodeType":"YulFunctionCall","src":"433:12:17"},"nativeSrc":"433:12:17","nodeType":"YulExpressionStatement","src":"433:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"334:117:17","nodeType":"YulFunctionDefinition","src":"334:117:17"},{"body":{"nativeSrc":"546:28:17","nodeType":"YulBlock","src":"546:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"563:1:17","nodeType":"YulLiteral","src":"563:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"566:1:17","nodeType":"YulLiteral","src":"566:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"556:6:17","nodeType":"YulIdentifier","src":"556:6:17"},"nativeSrc":"556:12:17","nodeType":"YulFunctionCall","src":"556:12:17"},"nativeSrc":"556:12:17","nodeType":"YulExpressionStatement","src":"556:12:17"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"457:117:17","nodeType":"YulFunctionDefinition","src":"457:117:17"},{"body":{"nativeSrc":"628:54:17","nodeType":"YulBlock","src":"628:54:17","statements":[{"nativeSrc":"638:38:17","nodeType":"YulAssignment","src":"638:38:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"656:5:17","nodeType":"YulIdentifier","src":"656:5:17"},{"kind":"number","nativeSrc":"663:2:17","nodeType":"YulLiteral","src":"663:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"652:3:17","nodeType":"YulIdentifier","src":"652:3:17"},"nativeSrc":"652:14:17","nodeType":"YulFunctionCall","src":"652:14:17"},{"arguments":[{"kind":"number","nativeSrc":"672:2:17","nodeType":"YulLiteral","src":"672:2:17","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"668:3:17","nodeType":"YulIdentifier","src":"668:3:17"},"nativeSrc":"668:7:17","nodeType":"YulFunctionCall","src":"668:7:17"}],"functionName":{"name":"and","nativeSrc":"648:3:17","nodeType":"YulIdentifier","src":"648:3:17"},"nativeSrc":"648:28:17","nodeType":"YulFunctionCall","src":"648:28:17"},"variableNames":[{"name":"result","nativeSrc":"638:6:17","nodeType":"YulIdentifier","src":"638:6:17"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"580:102:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"611:5:17","nodeType":"YulTypedName","src":"611:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"621:6:17","nodeType":"YulTypedName","src":"621:6:17","type":""}],"src":"580:102:17"},{"body":{"nativeSrc":"716:152:17","nodeType":"YulBlock","src":"716:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"733:1:17","nodeType":"YulLiteral","src":"733:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"736:77:17","nodeType":"YulLiteral","src":"736:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"726:6:17","nodeType":"YulIdentifier","src":"726:6:17"},"nativeSrc":"726:88:17","nodeType":"YulFunctionCall","src":"726:88:17"},"nativeSrc":"726:88:17","nodeType":"YulExpressionStatement","src":"726:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"830:1:17","nodeType":"YulLiteral","src":"830:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"833:4:17","nodeType":"YulLiteral","src":"833:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"823:6:17","nodeType":"YulIdentifier","src":"823:6:17"},"nativeSrc":"823:15:17","nodeType":"YulFunctionCall","src":"823:15:17"},"nativeSrc":"823:15:17","nodeType":"YulExpressionStatement","src":"823:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"854:1:17","nodeType":"YulLiteral","src":"854:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"857:4:17","nodeType":"YulLiteral","src":"857:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"847:6:17","nodeType":"YulIdentifier","src":"847:6:17"},"nativeSrc":"847:15:17","nodeType":"YulFunctionCall","src":"847:15:17"},"nativeSrc":"847:15:17","nodeType":"YulExpressionStatement","src":"847:15:17"}]},"name":"panic_error_0x41","nativeSrc":"688:180:17","nodeType":"YulFunctionDefinition","src":"688:180:17"},{"body":{"nativeSrc":"917:238:17","nodeType":"YulBlock","src":"917:238:17","statements":[{"nativeSrc":"927:58:17","nodeType":"YulVariableDeclaration","src":"927:58:17","value":{"arguments":[{"name":"memPtr","nativeSrc":"949:6:17","nodeType":"YulIdentifier","src":"949:6:17"},{"arguments":[{"name":"size","nativeSrc":"979:4:17","nodeType":"YulIdentifier","src":"979:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"957:21:17","nodeType":"YulIdentifier","src":"957:21:17"},"nativeSrc":"957:27:17","nodeType":"YulFunctionCall","src":"957:27:17"}],"functionName":{"name":"add","nativeSrc":"945:3:17","nodeType":"YulIdentifier","src":"945:3:17"},"nativeSrc":"945:40:17","nodeType":"YulFunctionCall","src":"945:40:17"},"variables":[{"name":"newFreePtr","nativeSrc":"931:10:17","nodeType":"YulTypedName","src":"931:10:17","type":""}]},{"body":{"nativeSrc":"1096:22:17","nodeType":"YulBlock","src":"1096:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1098:16:17","nodeType":"YulIdentifier","src":"1098:16:17"},"nativeSrc":"1098:18:17","nodeType":"YulFunctionCall","src":"1098:18:17"},"nativeSrc":"1098:18:17","nodeType":"YulExpressionStatement","src":"1098:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1039:10:17","nodeType":"YulIdentifier","src":"1039:10:17"},{"kind":"number","nativeSrc":"1051:18:17","nodeType":"YulLiteral","src":"1051:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1036:2:17","nodeType":"YulIdentifier","src":"1036:2:17"},"nativeSrc":"1036:34:17","nodeType":"YulFunctionCall","src":"1036:34:17"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1075:10:17","nodeType":"YulIdentifier","src":"1075:10:17"},{"name":"memPtr","nativeSrc":"1087:6:17","nodeType":"YulIdentifier","src":"1087:6:17"}],"functionName":{"name":"lt","nativeSrc":"1072:2:17","nodeType":"YulIdentifier","src":"1072:2:17"},"nativeSrc":"1072:22:17","nodeType":"YulFunctionCall","src":"1072:22:17"}],"functionName":{"name":"or","nativeSrc":"1033:2:17","nodeType":"YulIdentifier","src":"1033:2:17"},"nativeSrc":"1033:62:17","nodeType":"YulFunctionCall","src":"1033:62:17"},"nativeSrc":"1030:88:17","nodeType":"YulIf","src":"1030:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1134:2:17","nodeType":"YulLiteral","src":"1134:2:17","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1138:10:17","nodeType":"YulIdentifier","src":"1138:10:17"}],"functionName":{"name":"mstore","nativeSrc":"1127:6:17","nodeType":"YulIdentifier","src":"1127:6:17"},"nativeSrc":"1127:22:17","nodeType":"YulFunctionCall","src":"1127:22:17"},"nativeSrc":"1127:22:17","nodeType":"YulExpressionStatement","src":"1127:22:17"}]},"name":"finalize_allocation","nativeSrc":"874:281:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"903:6:17","nodeType":"YulTypedName","src":"903:6:17","type":""},{"name":"size","nativeSrc":"911:4:17","nodeType":"YulTypedName","src":"911:4:17","type":""}],"src":"874:281:17"},{"body":{"nativeSrc":"1202:88:17","nodeType":"YulBlock","src":"1202:88:17","statements":[{"nativeSrc":"1212:30:17","nodeType":"YulAssignment","src":"1212:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1222:18:17","nodeType":"YulIdentifier","src":"1222:18:17"},"nativeSrc":"1222:20:17","nodeType":"YulFunctionCall","src":"1222:20:17"},"variableNames":[{"name":"memPtr","nativeSrc":"1212:6:17","nodeType":"YulIdentifier","src":"1212:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1271:6:17","nodeType":"YulIdentifier","src":"1271:6:17"},{"name":"size","nativeSrc":"1279:4:17","nodeType":"YulIdentifier","src":"1279:4:17"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1251:19:17","nodeType":"YulIdentifier","src":"1251:19:17"},"nativeSrc":"1251:33:17","nodeType":"YulFunctionCall","src":"1251:33:17"},"nativeSrc":"1251:33:17","nodeType":"YulExpressionStatement","src":"1251:33:17"}]},"name":"allocate_memory","nativeSrc":"1161:129:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1186:4:17","nodeType":"YulTypedName","src":"1186:4:17","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1195:6:17","nodeType":"YulTypedName","src":"1195:6:17","type":""}],"src":"1161:129:17"},{"body":{"nativeSrc":"1363:241:17","nodeType":"YulBlock","src":"1363:241:17","statements":[{"body":{"nativeSrc":"1468:22:17","nodeType":"YulBlock","src":"1468:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1470:16:17","nodeType":"YulIdentifier","src":"1470:16:17"},"nativeSrc":"1470:18:17","nodeType":"YulFunctionCall","src":"1470:18:17"},"nativeSrc":"1470:18:17","nodeType":"YulExpressionStatement","src":"1470:18:17"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1440:6:17","nodeType":"YulIdentifier","src":"1440:6:17"},{"kind":"number","nativeSrc":"1448:18:17","nodeType":"YulLiteral","src":"1448:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1437:2:17","nodeType":"YulIdentifier","src":"1437:2:17"},"nativeSrc":"1437:30:17","nodeType":"YulFunctionCall","src":"1437:30:17"},"nativeSrc":"1434:56:17","nodeType":"YulIf","src":"1434:56:17"},{"nativeSrc":"1500:37:17","nodeType":"YulAssignment","src":"1500:37:17","value":{"arguments":[{"name":"length","nativeSrc":"1530:6:17","nodeType":"YulIdentifier","src":"1530:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1508:21:17","nodeType":"YulIdentifier","src":"1508:21:17"},"nativeSrc":"1508:29:17","nodeType":"YulFunctionCall","src":"1508:29:17"},"variableNames":[{"name":"size","nativeSrc":"1500:4:17","nodeType":"YulIdentifier","src":"1500:4:17"}]},{"nativeSrc":"1574:23:17","nodeType":"YulAssignment","src":"1574:23:17","value":{"arguments":[{"name":"size","nativeSrc":"1586:4:17","nodeType":"YulIdentifier","src":"1586:4:17"},{"kind":"number","nativeSrc":"1592:4:17","nodeType":"YulLiteral","src":"1592:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1582:3:17","nodeType":"YulIdentifier","src":"1582:3:17"},"nativeSrc":"1582:15:17","nodeType":"YulFunctionCall","src":"1582:15:17"},"variableNames":[{"name":"size","nativeSrc":"1574:4:17","nodeType":"YulIdentifier","src":"1574:4:17"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1296:308:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1347:6:17","nodeType":"YulTypedName","src":"1347:6:17","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1358:4:17","nodeType":"YulTypedName","src":"1358:4:17","type":""}],"src":"1296:308:17"},{"body":{"nativeSrc":"1672:186:17","nodeType":"YulBlock","src":"1672:186:17","statements":[{"nativeSrc":"1683:10:17","nodeType":"YulVariableDeclaration","src":"1683:10:17","value":{"kind":"number","nativeSrc":"1692:1:17","nodeType":"YulLiteral","src":"1692:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1687:1:17","nodeType":"YulTypedName","src":"1687:1:17","type":""}]},{"body":{"nativeSrc":"1752:63:17","nodeType":"YulBlock","src":"1752:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1777:3:17","nodeType":"YulIdentifier","src":"1777:3:17"},{"name":"i","nativeSrc":"1782:1:17","nodeType":"YulIdentifier","src":"1782:1:17"}],"functionName":{"name":"add","nativeSrc":"1773:3:17","nodeType":"YulIdentifier","src":"1773:3:17"},"nativeSrc":"1773:11:17","nodeType":"YulFunctionCall","src":"1773:11:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1796:3:17","nodeType":"YulIdentifier","src":"1796:3:17"},{"name":"i","nativeSrc":"1801:1:17","nodeType":"YulIdentifier","src":"1801:1:17"}],"functionName":{"name":"add","nativeSrc":"1792:3:17","nodeType":"YulIdentifier","src":"1792:3:17"},"nativeSrc":"1792:11:17","nodeType":"YulFunctionCall","src":"1792:11:17"}],"functionName":{"name":"mload","nativeSrc":"1786:5:17","nodeType":"YulIdentifier","src":"1786:5:17"},"nativeSrc":"1786:18:17","nodeType":"YulFunctionCall","src":"1786:18:17"}],"functionName":{"name":"mstore","nativeSrc":"1766:6:17","nodeType":"YulIdentifier","src":"1766:6:17"},"nativeSrc":"1766:39:17","nodeType":"YulFunctionCall","src":"1766:39:17"},"nativeSrc":"1766:39:17","nodeType":"YulExpressionStatement","src":"1766:39:17"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1713:1:17","nodeType":"YulIdentifier","src":"1713:1:17"},{"name":"length","nativeSrc":"1716:6:17","nodeType":"YulIdentifier","src":"1716:6:17"}],"functionName":{"name":"lt","nativeSrc":"1710:2:17","nodeType":"YulIdentifier","src":"1710:2:17"},"nativeSrc":"1710:13:17","nodeType":"YulFunctionCall","src":"1710:13:17"},"nativeSrc":"1702:113:17","nodeType":"YulForLoop","post":{"nativeSrc":"1724:19:17","nodeType":"YulBlock","src":"1724:19:17","statements":[{"nativeSrc":"1726:15:17","nodeType":"YulAssignment","src":"1726:15:17","value":{"arguments":[{"name":"i","nativeSrc":"1735:1:17","nodeType":"YulIdentifier","src":"1735:1:17"},{"kind":"number","nativeSrc":"1738:2:17","nodeType":"YulLiteral","src":"1738:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1731:3:17","nodeType":"YulIdentifier","src":"1731:3:17"},"nativeSrc":"1731:10:17","nodeType":"YulFunctionCall","src":"1731:10:17"},"variableNames":[{"name":"i","nativeSrc":"1726:1:17","nodeType":"YulIdentifier","src":"1726:1:17"}]}]},"pre":{"nativeSrc":"1706:3:17","nodeType":"YulBlock","src":"1706:3:17","statements":[]},"src":"1702:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1835:3:17","nodeType":"YulIdentifier","src":"1835:3:17"},{"name":"length","nativeSrc":"1840:6:17","nodeType":"YulIdentifier","src":"1840:6:17"}],"functionName":{"name":"add","nativeSrc":"1831:3:17","nodeType":"YulIdentifier","src":"1831:3:17"},"nativeSrc":"1831:16:17","nodeType":"YulFunctionCall","src":"1831:16:17"},{"kind":"number","nativeSrc":"1849:1:17","nodeType":"YulLiteral","src":"1849:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1824:6:17","nodeType":"YulIdentifier","src":"1824:6:17"},"nativeSrc":"1824:27:17","nodeType":"YulFunctionCall","src":"1824:27:17"},"nativeSrc":"1824:27:17","nodeType":"YulExpressionStatement","src":"1824:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1610:248:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1654:3:17","nodeType":"YulTypedName","src":"1654:3:17","type":""},{"name":"dst","nativeSrc":"1659:3:17","nodeType":"YulTypedName","src":"1659:3:17","type":""},{"name":"length","nativeSrc":"1664:6:17","nodeType":"YulTypedName","src":"1664:6:17","type":""}],"src":"1610:248:17"},{"body":{"nativeSrc":"1959:339:17","nodeType":"YulBlock","src":"1959:339:17","statements":[{"nativeSrc":"1969:75:17","nodeType":"YulAssignment","src":"1969:75:17","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2036:6:17","nodeType":"YulIdentifier","src":"2036:6:17"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1994:41:17","nodeType":"YulIdentifier","src":"1994:41:17"},"nativeSrc":"1994:49:17","nodeType":"YulFunctionCall","src":"1994:49:17"}],"functionName":{"name":"allocate_memory","nativeSrc":"1978:15:17","nodeType":"YulIdentifier","src":"1978:15:17"},"nativeSrc":"1978:66:17","nodeType":"YulFunctionCall","src":"1978:66:17"},"variableNames":[{"name":"array","nativeSrc":"1969:5:17","nodeType":"YulIdentifier","src":"1969:5:17"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2060:5:17","nodeType":"YulIdentifier","src":"2060:5:17"},{"name":"length","nativeSrc":"2067:6:17","nodeType":"YulIdentifier","src":"2067:6:17"}],"functionName":{"name":"mstore","nativeSrc":"2053:6:17","nodeType":"YulIdentifier","src":"2053:6:17"},"nativeSrc":"2053:21:17","nodeType":"YulFunctionCall","src":"2053:21:17"},"nativeSrc":"2053:21:17","nodeType":"YulExpressionStatement","src":"2053:21:17"},{"nativeSrc":"2083:27:17","nodeType":"YulVariableDeclaration","src":"2083:27:17","value":{"arguments":[{"name":"array","nativeSrc":"2098:5:17","nodeType":"YulIdentifier","src":"2098:5:17"},{"kind":"number","nativeSrc":"2105:4:17","nodeType":"YulLiteral","src":"2105:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2094:3:17","nodeType":"YulIdentifier","src":"2094:3:17"},"nativeSrc":"2094:16:17","nodeType":"YulFunctionCall","src":"2094:16:17"},"variables":[{"name":"dst","nativeSrc":"2087:3:17","nodeType":"YulTypedName","src":"2087:3:17","type":""}]},{"body":{"nativeSrc":"2148:83:17","nodeType":"YulBlock","src":"2148:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"2150:77:17","nodeType":"YulIdentifier","src":"2150:77:17"},"nativeSrc":"2150:79:17","nodeType":"YulFunctionCall","src":"2150:79:17"},"nativeSrc":"2150:79:17","nodeType":"YulExpressionStatement","src":"2150:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2129:3:17","nodeType":"YulIdentifier","src":"2129:3:17"},{"name":"length","nativeSrc":"2134:6:17","nodeType":"YulIdentifier","src":"2134:6:17"}],"functionName":{"name":"add","nativeSrc":"2125:3:17","nodeType":"YulIdentifier","src":"2125:3:17"},"nativeSrc":"2125:16:17","nodeType":"YulFunctionCall","src":"2125:16:17"},{"name":"end","nativeSrc":"2143:3:17","nodeType":"YulIdentifier","src":"2143:3:17"}],"functionName":{"name":"gt","nativeSrc":"2122:2:17","nodeType":"YulIdentifier","src":"2122:2:17"},"nativeSrc":"2122:25:17","nodeType":"YulFunctionCall","src":"2122:25:17"},"nativeSrc":"2119:112:17","nodeType":"YulIf","src":"2119:112:17"},{"expression":{"arguments":[{"name":"src","nativeSrc":"2275:3:17","nodeType":"YulIdentifier","src":"2275:3:17"},{"name":"dst","nativeSrc":"2280:3:17","nodeType":"YulIdentifier","src":"2280:3:17"},{"name":"length","nativeSrc":"2285:6:17","nodeType":"YulIdentifier","src":"2285:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2240:34:17","nodeType":"YulIdentifier","src":"2240:34:17"},"nativeSrc":"2240:52:17","nodeType":"YulFunctionCall","src":"2240:52:17"},"nativeSrc":"2240:52:17","nodeType":"YulExpressionStatement","src":"2240:52:17"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"1864:434:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1932:3:17","nodeType":"YulTypedName","src":"1932:3:17","type":""},{"name":"length","nativeSrc":"1937:6:17","nodeType":"YulTypedName","src":"1937:6:17","type":""},{"name":"end","nativeSrc":"1945:3:17","nodeType":"YulTypedName","src":"1945:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1953:5:17","nodeType":"YulTypedName","src":"1953:5:17","type":""}],"src":"1864:434:17"},{"body":{"nativeSrc":"2391:282:17","nodeType":"YulBlock","src":"2391:282:17","statements":[{"body":{"nativeSrc":"2440:83:17","nodeType":"YulBlock","src":"2440:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2442:77:17","nodeType":"YulIdentifier","src":"2442:77:17"},"nativeSrc":"2442:79:17","nodeType":"YulFunctionCall","src":"2442:79:17"},"nativeSrc":"2442:79:17","nodeType":"YulExpressionStatement","src":"2442:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2419:6:17","nodeType":"YulIdentifier","src":"2419:6:17"},{"kind":"number","nativeSrc":"2427:4:17","nodeType":"YulLiteral","src":"2427:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2415:3:17","nodeType":"YulIdentifier","src":"2415:3:17"},"nativeSrc":"2415:17:17","nodeType":"YulFunctionCall","src":"2415:17:17"},{"name":"end","nativeSrc":"2434:3:17","nodeType":"YulIdentifier","src":"2434:3:17"}],"functionName":{"name":"slt","nativeSrc":"2411:3:17","nodeType":"YulIdentifier","src":"2411:3:17"},"nativeSrc":"2411:27:17","nodeType":"YulFunctionCall","src":"2411:27:17"}],"functionName":{"name":"iszero","nativeSrc":"2404:6:17","nodeType":"YulIdentifier","src":"2404:6:17"},"nativeSrc":"2404:35:17","nodeType":"YulFunctionCall","src":"2404:35:17"},"nativeSrc":"2401:122:17","nodeType":"YulIf","src":"2401:122:17"},{"nativeSrc":"2532:27:17","nodeType":"YulVariableDeclaration","src":"2532:27:17","value":{"arguments":[{"name":"offset","nativeSrc":"2552:6:17","nodeType":"YulIdentifier","src":"2552:6:17"}],"functionName":{"name":"mload","nativeSrc":"2546:5:17","nodeType":"YulIdentifier","src":"2546:5:17"},"nativeSrc":"2546:13:17","nodeType":"YulFunctionCall","src":"2546:13:17"},"variables":[{"name":"length","nativeSrc":"2536:6:17","nodeType":"YulTypedName","src":"2536:6:17","type":""}]},{"nativeSrc":"2568:99:17","nodeType":"YulAssignment","src":"2568:99:17","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2640:6:17","nodeType":"YulIdentifier","src":"2640:6:17"},{"kind":"number","nativeSrc":"2648:4:17","nodeType":"YulLiteral","src":"2648:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2636:3:17","nodeType":"YulIdentifier","src":"2636:3:17"},"nativeSrc":"2636:17:17","nodeType":"YulFunctionCall","src":"2636:17:17"},{"name":"length","nativeSrc":"2655:6:17","nodeType":"YulIdentifier","src":"2655:6:17"},{"name":"end","nativeSrc":"2663:3:17","nodeType":"YulIdentifier","src":"2663:3:17"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"2577:58:17","nodeType":"YulIdentifier","src":"2577:58:17"},"nativeSrc":"2577:90:17","nodeType":"YulFunctionCall","src":"2577:90:17"},"variableNames":[{"name":"array","nativeSrc":"2568:5:17","nodeType":"YulIdentifier","src":"2568:5:17"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"2318:355:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2369:6:17","nodeType":"YulTypedName","src":"2369:6:17","type":""},{"name":"end","nativeSrc":"2377:3:17","nodeType":"YulTypedName","src":"2377:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2385:5:17","nodeType":"YulTypedName","src":"2385:5:17","type":""}],"src":"2318:355:17"},{"body":{"nativeSrc":"2793:739:17","nodeType":"YulBlock","src":"2793:739:17","statements":[{"body":{"nativeSrc":"2839:83:17","nodeType":"YulBlock","src":"2839:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"2841:77:17","nodeType":"YulIdentifier","src":"2841:77:17"},"nativeSrc":"2841:79:17","nodeType":"YulFunctionCall","src":"2841:79:17"},"nativeSrc":"2841:79:17","nodeType":"YulExpressionStatement","src":"2841:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2814:7:17","nodeType":"YulIdentifier","src":"2814:7:17"},{"name":"headStart","nativeSrc":"2823:9:17","nodeType":"YulIdentifier","src":"2823:9:17"}],"functionName":{"name":"sub","nativeSrc":"2810:3:17","nodeType":"YulIdentifier","src":"2810:3:17"},"nativeSrc":"2810:23:17","nodeType":"YulFunctionCall","src":"2810:23:17"},{"kind":"number","nativeSrc":"2835:2:17","nodeType":"YulLiteral","src":"2835:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2806:3:17","nodeType":"YulIdentifier","src":"2806:3:17"},"nativeSrc":"2806:32:17","nodeType":"YulFunctionCall","src":"2806:32:17"},"nativeSrc":"2803:119:17","nodeType":"YulIf","src":"2803:119:17"},{"nativeSrc":"2932:291:17","nodeType":"YulBlock","src":"2932:291:17","statements":[{"nativeSrc":"2947:38:17","nodeType":"YulVariableDeclaration","src":"2947:38:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2971:9:17","nodeType":"YulIdentifier","src":"2971:9:17"},{"kind":"number","nativeSrc":"2982:1:17","nodeType":"YulLiteral","src":"2982:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2967:3:17","nodeType":"YulIdentifier","src":"2967:3:17"},"nativeSrc":"2967:17:17","nodeType":"YulFunctionCall","src":"2967:17:17"}],"functionName":{"name":"mload","nativeSrc":"2961:5:17","nodeType":"YulIdentifier","src":"2961:5:17"},"nativeSrc":"2961:24:17","nodeType":"YulFunctionCall","src":"2961:24:17"},"variables":[{"name":"offset","nativeSrc":"2951:6:17","nodeType":"YulTypedName","src":"2951:6:17","type":""}]},{"body":{"nativeSrc":"3032:83:17","nodeType":"YulBlock","src":"3032:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3034:77:17","nodeType":"YulIdentifier","src":"3034:77:17"},"nativeSrc":"3034:79:17","nodeType":"YulFunctionCall","src":"3034:79:17"},"nativeSrc":"3034:79:17","nodeType":"YulExpressionStatement","src":"3034:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3004:6:17","nodeType":"YulIdentifier","src":"3004:6:17"},{"kind":"number","nativeSrc":"3012:18:17","nodeType":"YulLiteral","src":"3012:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3001:2:17","nodeType":"YulIdentifier","src":"3001:2:17"},"nativeSrc":"3001:30:17","nodeType":"YulFunctionCall","src":"3001:30:17"},"nativeSrc":"2998:117:17","nodeType":"YulIf","src":"2998:117:17"},{"nativeSrc":"3129:84:17","nodeType":"YulAssignment","src":"3129:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3185:9:17","nodeType":"YulIdentifier","src":"3185:9:17"},{"name":"offset","nativeSrc":"3196:6:17","nodeType":"YulIdentifier","src":"3196:6:17"}],"functionName":{"name":"add","nativeSrc":"3181:3:17","nodeType":"YulIdentifier","src":"3181:3:17"},"nativeSrc":"3181:22:17","nodeType":"YulFunctionCall","src":"3181:22:17"},{"name":"dataEnd","nativeSrc":"3205:7:17","nodeType":"YulIdentifier","src":"3205:7:17"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3139:41:17","nodeType":"YulIdentifier","src":"3139:41:17"},"nativeSrc":"3139:74:17","nodeType":"YulFunctionCall","src":"3139:74:17"},"variableNames":[{"name":"value0","nativeSrc":"3129:6:17","nodeType":"YulIdentifier","src":"3129:6:17"}]}]},{"nativeSrc":"3233:292:17","nodeType":"YulBlock","src":"3233:292:17","statements":[{"nativeSrc":"3248:39:17","nodeType":"YulVariableDeclaration","src":"3248:39:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3272:9:17","nodeType":"YulIdentifier","src":"3272:9:17"},{"kind":"number","nativeSrc":"3283:2:17","nodeType":"YulLiteral","src":"3283:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3268:3:17","nodeType":"YulIdentifier","src":"3268:3:17"},"nativeSrc":"3268:18:17","nodeType":"YulFunctionCall","src":"3268:18:17"}],"functionName":{"name":"mload","nativeSrc":"3262:5:17","nodeType":"YulIdentifier","src":"3262:5:17"},"nativeSrc":"3262:25:17","nodeType":"YulFunctionCall","src":"3262:25:17"},"variables":[{"name":"offset","nativeSrc":"3252:6:17","nodeType":"YulTypedName","src":"3252:6:17","type":""}]},{"body":{"nativeSrc":"3334:83:17","nodeType":"YulBlock","src":"3334:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3336:77:17","nodeType":"YulIdentifier","src":"3336:77:17"},"nativeSrc":"3336:79:17","nodeType":"YulFunctionCall","src":"3336:79:17"},"nativeSrc":"3336:79:17","nodeType":"YulExpressionStatement","src":"3336:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3306:6:17","nodeType":"YulIdentifier","src":"3306:6:17"},{"kind":"number","nativeSrc":"3314:18:17","nodeType":"YulLiteral","src":"3314:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3303:2:17","nodeType":"YulIdentifier","src":"3303:2:17"},"nativeSrc":"3303:30:17","nodeType":"YulFunctionCall","src":"3303:30:17"},"nativeSrc":"3300:117:17","nodeType":"YulIf","src":"3300:117:17"},{"nativeSrc":"3431:84:17","nodeType":"YulAssignment","src":"3431:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3487:9:17","nodeType":"YulIdentifier","src":"3487:9:17"},{"name":"offset","nativeSrc":"3498:6:17","nodeType":"YulIdentifier","src":"3498:6:17"}],"functionName":{"name":"add","nativeSrc":"3483:3:17","nodeType":"YulIdentifier","src":"3483:3:17"},"nativeSrc":"3483:22:17","nodeType":"YulFunctionCall","src":"3483:22:17"},{"name":"dataEnd","nativeSrc":"3507:7:17","nodeType":"YulIdentifier","src":"3507:7:17"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3441:41:17","nodeType":"YulIdentifier","src":"3441:41:17"},"nativeSrc":"3441:74:17","nodeType":"YulFunctionCall","src":"3441:74:17"},"variableNames":[{"name":"value1","nativeSrc":"3431:6:17","nodeType":"YulIdentifier","src":"3431:6:17"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nativeSrc":"2679:853:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2755:9:17","nodeType":"YulTypedName","src":"2755:9:17","type":""},{"name":"dataEnd","nativeSrc":"2766:7:17","nodeType":"YulTypedName","src":"2766:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2778:6:17","nodeType":"YulTypedName","src":"2778:6:17","type":""},{"name":"value1","nativeSrc":"2786:6:17","nodeType":"YulTypedName","src":"2786:6:17","type":""}],"src":"2679:853:17"},{"body":{"nativeSrc":"3597:40:17","nodeType":"YulBlock","src":"3597:40:17","statements":[{"nativeSrc":"3608:22:17","nodeType":"YulAssignment","src":"3608:22:17","value":{"arguments":[{"name":"value","nativeSrc":"3624:5:17","nodeType":"YulIdentifier","src":"3624:5:17"}],"functionName":{"name":"mload","nativeSrc":"3618:5:17","nodeType":"YulIdentifier","src":"3618:5:17"},"nativeSrc":"3618:12:17","nodeType":"YulFunctionCall","src":"3618:12:17"},"variableNames":[{"name":"length","nativeSrc":"3608:6:17","nodeType":"YulIdentifier","src":"3608:6:17"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"3538:99:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:17","nodeType":"YulTypedName","src":"3580:5:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"3590:6:17","nodeType":"YulTypedName","src":"3590:6:17","type":""}],"src":"3538:99:17"},{"body":{"nativeSrc":"3671:152:17","nodeType":"YulBlock","src":"3671:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3688:1:17","nodeType":"YulLiteral","src":"3688:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"3691:77:17","nodeType":"YulLiteral","src":"3691:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3681:6:17","nodeType":"YulIdentifier","src":"3681:6:17"},"nativeSrc":"3681:88:17","nodeType":"YulFunctionCall","src":"3681:88:17"},"nativeSrc":"3681:88:17","nodeType":"YulExpressionStatement","src":"3681:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3785:1:17","nodeType":"YulLiteral","src":"3785:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"3788:4:17","nodeType":"YulLiteral","src":"3788:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"3778:6:17","nodeType":"YulIdentifier","src":"3778:6:17"},"nativeSrc":"3778:15:17","nodeType":"YulFunctionCall","src":"3778:15:17"},"nativeSrc":"3778:15:17","nodeType":"YulExpressionStatement","src":"3778:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3809:1:17","nodeType":"YulLiteral","src":"3809:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"3812:4:17","nodeType":"YulLiteral","src":"3812:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3802:6:17","nodeType":"YulIdentifier","src":"3802:6:17"},"nativeSrc":"3802:15:17","nodeType":"YulFunctionCall","src":"3802:15:17"},"nativeSrc":"3802:15:17","nodeType":"YulExpressionStatement","src":"3802:15:17"}]},"name":"panic_error_0x22","nativeSrc":"3643:180:17","nodeType":"YulFunctionDefinition","src":"3643:180:17"},{"body":{"nativeSrc":"3880:269:17","nodeType":"YulBlock","src":"3880:269:17","statements":[{"nativeSrc":"3890:22:17","nodeType":"YulAssignment","src":"3890:22:17","value":{"arguments":[{"name":"data","nativeSrc":"3904:4:17","nodeType":"YulIdentifier","src":"3904:4:17"},{"kind":"number","nativeSrc":"3910:1:17","nodeType":"YulLiteral","src":"3910:1:17","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"3900:3:17","nodeType":"YulIdentifier","src":"3900:3:17"},"nativeSrc":"3900:12:17","nodeType":"YulFunctionCall","src":"3900:12:17"},"variableNames":[{"name":"length","nativeSrc":"3890:6:17","nodeType":"YulIdentifier","src":"3890:6:17"}]},{"nativeSrc":"3921:38:17","nodeType":"YulVariableDeclaration","src":"3921:38:17","value":{"arguments":[{"name":"data","nativeSrc":"3951:4:17","nodeType":"YulIdentifier","src":"3951:4:17"},{"kind":"number","nativeSrc":"3957:1:17","nodeType":"YulLiteral","src":"3957:1:17","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"3947:3:17","nodeType":"YulIdentifier","src":"3947:3:17"},"nativeSrc":"3947:12:17","nodeType":"YulFunctionCall","src":"3947:12:17"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"3925:18:17","nodeType":"YulTypedName","src":"3925:18:17","type":""}]},{"body":{"nativeSrc":"3998:51:17","nodeType":"YulBlock","src":"3998:51:17","statements":[{"nativeSrc":"4012:27:17","nodeType":"YulAssignment","src":"4012:27:17","value":{"arguments":[{"name":"length","nativeSrc":"4026:6:17","nodeType":"YulIdentifier","src":"4026:6:17"},{"kind":"number","nativeSrc":"4034:4:17","nodeType":"YulLiteral","src":"4034:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"4022:3:17","nodeType":"YulIdentifier","src":"4022:3:17"},"nativeSrc":"4022:17:17","nodeType":"YulFunctionCall","src":"4022:17:17"},"variableNames":[{"name":"length","nativeSrc":"4012:6:17","nodeType":"YulIdentifier","src":"4012:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"3978:18:17","nodeType":"YulIdentifier","src":"3978:18:17"}],"functionName":{"name":"iszero","nativeSrc":"3971:6:17","nodeType":"YulIdentifier","src":"3971:6:17"},"nativeSrc":"3971:26:17","nodeType":"YulFunctionCall","src":"3971:26:17"},"nativeSrc":"3968:81:17","nodeType":"YulIf","src":"3968:81:17"},{"body":{"nativeSrc":"4101:42:17","nodeType":"YulBlock","src":"4101:42:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"4115:16:17","nodeType":"YulIdentifier","src":"4115:16:17"},"nativeSrc":"4115:18:17","nodeType":"YulFunctionCall","src":"4115:18:17"},"nativeSrc":"4115:18:17","nodeType":"YulExpressionStatement","src":"4115:18:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"4065:18:17","nodeType":"YulIdentifier","src":"4065:18:17"},{"arguments":[{"name":"length","nativeSrc":"4088:6:17","nodeType":"YulIdentifier","src":"4088:6:17"},{"kind":"number","nativeSrc":"4096:2:17","nodeType":"YulLiteral","src":"4096:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"4085:2:17","nodeType":"YulIdentifier","src":"4085:2:17"},"nativeSrc":"4085:14:17","nodeType":"YulFunctionCall","src":"4085:14:17"}],"functionName":{"name":"eq","nativeSrc":"4062:2:17","nodeType":"YulIdentifier","src":"4062:2:17"},"nativeSrc":"4062:38:17","nodeType":"YulFunctionCall","src":"4062:38:17"},"nativeSrc":"4059:84:17","nodeType":"YulIf","src":"4059:84:17"}]},"name":"extract_byte_array_length","nativeSrc":"3829:320:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3864:4:17","nodeType":"YulTypedName","src":"3864:4:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"3873:6:17","nodeType":"YulTypedName","src":"3873:6:17","type":""}],"src":"3829:320:17"},{"body":{"nativeSrc":"4209:87:17","nodeType":"YulBlock","src":"4209:87:17","statements":[{"nativeSrc":"4219:11:17","nodeType":"YulAssignment","src":"4219:11:17","value":{"name":"ptr","nativeSrc":"4227:3:17","nodeType":"YulIdentifier","src":"4227:3:17"},"variableNames":[{"name":"data","nativeSrc":"4219:4:17","nodeType":"YulIdentifier","src":"4219:4:17"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4247:1:17","nodeType":"YulLiteral","src":"4247:1:17","type":"","value":"0"},{"name":"ptr","nativeSrc":"4250:3:17","nodeType":"YulIdentifier","src":"4250:3:17"}],"functionName":{"name":"mstore","nativeSrc":"4240:6:17","nodeType":"YulIdentifier","src":"4240:6:17"},"nativeSrc":"4240:14:17","nodeType":"YulFunctionCall","src":"4240:14:17"},"nativeSrc":"4240:14:17","nodeType":"YulExpressionStatement","src":"4240:14:17"},{"nativeSrc":"4263:26:17","nodeType":"YulAssignment","src":"4263:26:17","value":{"arguments":[{"kind":"number","nativeSrc":"4281:1:17","nodeType":"YulLiteral","src":"4281:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"4284:4:17","nodeType":"YulLiteral","src":"4284:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"4271:9:17","nodeType":"YulIdentifier","src":"4271:9:17"},"nativeSrc":"4271:18:17","nodeType":"YulFunctionCall","src":"4271:18:17"},"variableNames":[{"name":"data","nativeSrc":"4263:4:17","nodeType":"YulIdentifier","src":"4263:4:17"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"4155:141:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"4196:3:17","nodeType":"YulTypedName","src":"4196:3:17","type":""}],"returnVariables":[{"name":"data","nativeSrc":"4204:4:17","nodeType":"YulTypedName","src":"4204:4:17","type":""}],"src":"4155:141:17"},{"body":{"nativeSrc":"4346:49:17","nodeType":"YulBlock","src":"4346:49:17","statements":[{"nativeSrc":"4356:33:17","nodeType":"YulAssignment","src":"4356:33:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4374:5:17","nodeType":"YulIdentifier","src":"4374:5:17"},{"kind":"number","nativeSrc":"4381:2:17","nodeType":"YulLiteral","src":"4381:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"4370:3:17","nodeType":"YulIdentifier","src":"4370:3:17"},"nativeSrc":"4370:14:17","nodeType":"YulFunctionCall","src":"4370:14:17"},{"kind":"number","nativeSrc":"4386:2:17","nodeType":"YulLiteral","src":"4386:2:17","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"4366:3:17","nodeType":"YulIdentifier","src":"4366:3:17"},"nativeSrc":"4366:23:17","nodeType":"YulFunctionCall","src":"4366:23:17"},"variableNames":[{"name":"result","nativeSrc":"4356:6:17","nodeType":"YulIdentifier","src":"4356:6:17"}]}]},"name":"divide_by_32_ceil","nativeSrc":"4302:93:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4329:5:17","nodeType":"YulTypedName","src":"4329:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4339:6:17","nodeType":"YulTypedName","src":"4339:6:17","type":""}],"src":"4302:93:17"},{"body":{"nativeSrc":"4454:54:17","nodeType":"YulBlock","src":"4454:54:17","statements":[{"nativeSrc":"4464:37:17","nodeType":"YulAssignment","src":"4464:37:17","value":{"arguments":[{"name":"bits","nativeSrc":"4489:4:17","nodeType":"YulIdentifier","src":"4489:4:17"},{"name":"value","nativeSrc":"4495:5:17","nodeType":"YulIdentifier","src":"4495:5:17"}],"functionName":{"name":"shl","nativeSrc":"4485:3:17","nodeType":"YulIdentifier","src":"4485:3:17"},"nativeSrc":"4485:16:17","nodeType":"YulFunctionCall","src":"4485:16:17"},"variableNames":[{"name":"newValue","nativeSrc":"4464:8:17","nodeType":"YulIdentifier","src":"4464:8:17"}]}]},"name":"shift_left_dynamic","nativeSrc":"4401:107:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"4429:4:17","nodeType":"YulTypedName","src":"4429:4:17","type":""},{"name":"value","nativeSrc":"4435:5:17","nodeType":"YulTypedName","src":"4435:5:17","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"4445:8:17","nodeType":"YulTypedName","src":"4445:8:17","type":""}],"src":"4401:107:17"},{"body":{"nativeSrc":"4590:317:17","nodeType":"YulBlock","src":"4590:317:17","statements":[{"nativeSrc":"4600:35:17","nodeType":"YulVariableDeclaration","src":"4600:35:17","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"4621:10:17","nodeType":"YulIdentifier","src":"4621:10:17"},{"kind":"number","nativeSrc":"4633:1:17","nodeType":"YulLiteral","src":"4633:1:17","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"4617:3:17","nodeType":"YulIdentifier","src":"4617:3:17"},"nativeSrc":"4617:18:17","nodeType":"YulFunctionCall","src":"4617:18:17"},"variables":[{"name":"shiftBits","nativeSrc":"4604:9:17","nodeType":"YulTypedName","src":"4604:9:17","type":""}]},{"nativeSrc":"4644:109:17","nodeType":"YulVariableDeclaration","src":"4644:109:17","value":{"arguments":[{"name":"shiftBits","nativeSrc":"4675:9:17","nodeType":"YulIdentifier","src":"4675:9:17"},{"kind":"number","nativeSrc":"4686:66:17","nodeType":"YulLiteral","src":"4686:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"4656:18:17","nodeType":"YulIdentifier","src":"4656:18:17"},"nativeSrc":"4656:97:17","nodeType":"YulFunctionCall","src":"4656:97:17"},"variables":[{"name":"mask","nativeSrc":"4648:4:17","nodeType":"YulTypedName","src":"4648:4:17","type":""}]},{"nativeSrc":"4762:51:17","nodeType":"YulAssignment","src":"4762:51:17","value":{"arguments":[{"name":"shiftBits","nativeSrc":"4793:9:17","nodeType":"YulIdentifier","src":"4793:9:17"},{"name":"toInsert","nativeSrc":"4804:8:17","nodeType":"YulIdentifier","src":"4804:8:17"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"4774:18:17","nodeType":"YulIdentifier","src":"4774:18:17"},"nativeSrc":"4774:39:17","nodeType":"YulFunctionCall","src":"4774:39:17"},"variableNames":[{"name":"toInsert","nativeSrc":"4762:8:17","nodeType":"YulIdentifier","src":"4762:8:17"}]},{"nativeSrc":"4822:30:17","nodeType":"YulAssignment","src":"4822:30:17","value":{"arguments":[{"name":"value","nativeSrc":"4835:5:17","nodeType":"YulIdentifier","src":"4835:5:17"},{"arguments":[{"name":"mask","nativeSrc":"4846:4:17","nodeType":"YulIdentifier","src":"4846:4:17"}],"functionName":{"name":"not","nativeSrc":"4842:3:17","nodeType":"YulIdentifier","src":"4842:3:17"},"nativeSrc":"4842:9:17","nodeType":"YulFunctionCall","src":"4842:9:17"}],"functionName":{"name":"and","nativeSrc":"4831:3:17","nodeType":"YulIdentifier","src":"4831:3:17"},"nativeSrc":"4831:21:17","nodeType":"YulFunctionCall","src":"4831:21:17"},"variableNames":[{"name":"value","nativeSrc":"4822:5:17","nodeType":"YulIdentifier","src":"4822:5:17"}]},{"nativeSrc":"4861:40:17","nodeType":"YulAssignment","src":"4861:40:17","value":{"arguments":[{"name":"value","nativeSrc":"4874:5:17","nodeType":"YulIdentifier","src":"4874:5:17"},{"arguments":[{"name":"toInsert","nativeSrc":"4885:8:17","nodeType":"YulIdentifier","src":"4885:8:17"},{"name":"mask","nativeSrc":"4895:4:17","nodeType":"YulIdentifier","src":"4895:4:17"}],"functionName":{"name":"and","nativeSrc":"4881:3:17","nodeType":"YulIdentifier","src":"4881:3:17"},"nativeSrc":"4881:19:17","nodeType":"YulFunctionCall","src":"4881:19:17"}],"functionName":{"name":"or","nativeSrc":"4871:2:17","nodeType":"YulIdentifier","src":"4871:2:17"},"nativeSrc":"4871:30:17","nodeType":"YulFunctionCall","src":"4871:30:17"},"variableNames":[{"name":"result","nativeSrc":"4861:6:17","nodeType":"YulIdentifier","src":"4861:6:17"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"4514:393:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4551:5:17","nodeType":"YulTypedName","src":"4551:5:17","type":""},{"name":"shiftBytes","nativeSrc":"4558:10:17","nodeType":"YulTypedName","src":"4558:10:17","type":""},{"name":"toInsert","nativeSrc":"4570:8:17","nodeType":"YulTypedName","src":"4570:8:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4583:6:17","nodeType":"YulTypedName","src":"4583:6:17","type":""}],"src":"4514:393:17"},{"body":{"nativeSrc":"4958:32:17","nodeType":"YulBlock","src":"4958:32:17","statements":[{"nativeSrc":"4968:16:17","nodeType":"YulAssignment","src":"4968:16:17","value":{"name":"value","nativeSrc":"4979:5:17","nodeType":"YulIdentifier","src":"4979:5:17"},"variableNames":[{"name":"cleaned","nativeSrc":"4968:7:17","nodeType":"YulIdentifier","src":"4968:7:17"}]}]},"name":"cleanup_t_uint256","nativeSrc":"4913:77:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4940:5:17","nodeType":"YulTypedName","src":"4940:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4950:7:17","nodeType":"YulTypedName","src":"4950:7:17","type":""}],"src":"4913:77:17"},{"body":{"nativeSrc":"5028:28:17","nodeType":"YulBlock","src":"5028:28:17","statements":[{"nativeSrc":"5038:12:17","nodeType":"YulAssignment","src":"5038:12:17","value":{"name":"value","nativeSrc":"5045:5:17","nodeType":"YulIdentifier","src":"5045:5:17"},"variableNames":[{"name":"ret","nativeSrc":"5038:3:17","nodeType":"YulIdentifier","src":"5038:3:17"}]}]},"name":"identity","nativeSrc":"4996:60:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5014:5:17","nodeType":"YulTypedName","src":"5014:5:17","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5024:3:17","nodeType":"YulTypedName","src":"5024:3:17","type":""}],"src":"4996:60:17"},{"body":{"nativeSrc":"5122:82:17","nodeType":"YulBlock","src":"5122:82:17","statements":[{"nativeSrc":"5132:66:17","nodeType":"YulAssignment","src":"5132:66:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5190:5:17","nodeType":"YulIdentifier","src":"5190:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5172:17:17","nodeType":"YulIdentifier","src":"5172:17:17"},"nativeSrc":"5172:24:17","nodeType":"YulFunctionCall","src":"5172:24:17"}],"functionName":{"name":"identity","nativeSrc":"5163:8:17","nodeType":"YulIdentifier","src":"5163:8:17"},"nativeSrc":"5163:34:17","nodeType":"YulFunctionCall","src":"5163:34:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5145:17:17","nodeType":"YulIdentifier","src":"5145:17:17"},"nativeSrc":"5145:53:17","nodeType":"YulFunctionCall","src":"5145:53:17"},"variableNames":[{"name":"converted","nativeSrc":"5132:9:17","nodeType":"YulIdentifier","src":"5132:9:17"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"5062:142:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5102:5:17","nodeType":"YulTypedName","src":"5102:5:17","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"5112:9:17","nodeType":"YulTypedName","src":"5112:9:17","type":""}],"src":"5062:142:17"},{"body":{"nativeSrc":"5257:28:17","nodeType":"YulBlock","src":"5257:28:17","statements":[{"nativeSrc":"5267:12:17","nodeType":"YulAssignment","src":"5267:12:17","value":{"name":"value","nativeSrc":"5274:5:17","nodeType":"YulIdentifier","src":"5274:5:17"},"variableNames":[{"name":"ret","nativeSrc":"5267:3:17","nodeType":"YulIdentifier","src":"5267:3:17"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"5210:75:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5243:5:17","nodeType":"YulTypedName","src":"5243:5:17","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5253:3:17","nodeType":"YulTypedName","src":"5253:3:17","type":""}],"src":"5210:75:17"},{"body":{"nativeSrc":"5367:193:17","nodeType":"YulBlock","src":"5367:193:17","statements":[{"nativeSrc":"5377:63:17","nodeType":"YulVariableDeclaration","src":"5377:63:17","value":{"arguments":[{"name":"value_0","nativeSrc":"5432:7:17","nodeType":"YulIdentifier","src":"5432:7:17"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"5401:30:17","nodeType":"YulIdentifier","src":"5401:30:17"},"nativeSrc":"5401:39:17","nodeType":"YulFunctionCall","src":"5401:39:17"},"variables":[{"name":"convertedValue_0","nativeSrc":"5381:16:17","nodeType":"YulTypedName","src":"5381:16:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5456:4:17","nodeType":"YulIdentifier","src":"5456:4:17"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"5496:4:17","nodeType":"YulIdentifier","src":"5496:4:17"}],"functionName":{"name":"sload","nativeSrc":"5490:5:17","nodeType":"YulIdentifier","src":"5490:5:17"},"nativeSrc":"5490:11:17","nodeType":"YulFunctionCall","src":"5490:11:17"},{"name":"offset","nativeSrc":"5503:6:17","nodeType":"YulIdentifier","src":"5503:6:17"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"5535:16:17","nodeType":"YulIdentifier","src":"5535:16:17"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"5511:23:17","nodeType":"YulIdentifier","src":"5511:23:17"},"nativeSrc":"5511:41:17","nodeType":"YulFunctionCall","src":"5511:41:17"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"5462:27:17","nodeType":"YulIdentifier","src":"5462:27:17"},"nativeSrc":"5462:91:17","nodeType":"YulFunctionCall","src":"5462:91:17"}],"functionName":{"name":"sstore","nativeSrc":"5449:6:17","nodeType":"YulIdentifier","src":"5449:6:17"},"nativeSrc":"5449:105:17","nodeType":"YulFunctionCall","src":"5449:105:17"},"nativeSrc":"5449:105:17","nodeType":"YulExpressionStatement","src":"5449:105:17"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"5291:269:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5344:4:17","nodeType":"YulTypedName","src":"5344:4:17","type":""},{"name":"offset","nativeSrc":"5350:6:17","nodeType":"YulTypedName","src":"5350:6:17","type":""},{"name":"value_0","nativeSrc":"5358:7:17","nodeType":"YulTypedName","src":"5358:7:17","type":""}],"src":"5291:269:17"},{"body":{"nativeSrc":"5615:24:17","nodeType":"YulBlock","src":"5615:24:17","statements":[{"nativeSrc":"5625:8:17","nodeType":"YulAssignment","src":"5625:8:17","value":{"kind":"number","nativeSrc":"5632:1:17","nodeType":"YulLiteral","src":"5632:1:17","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"5625:3:17","nodeType":"YulIdentifier","src":"5625:3:17"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"5566:73:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"5611:3:17","nodeType":"YulTypedName","src":"5611:3:17","type":""}],"src":"5566:73:17"},{"body":{"nativeSrc":"5698:136:17","nodeType":"YulBlock","src":"5698:136:17","statements":[{"nativeSrc":"5708:46:17","nodeType":"YulVariableDeclaration","src":"5708:46:17","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"5722:30:17","nodeType":"YulIdentifier","src":"5722:30:17"},"nativeSrc":"5722:32:17","nodeType":"YulFunctionCall","src":"5722:32:17"},"variables":[{"name":"zero_0","nativeSrc":"5712:6:17","nodeType":"YulTypedName","src":"5712:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5807:4:17","nodeType":"YulIdentifier","src":"5807:4:17"},{"name":"offset","nativeSrc":"5813:6:17","nodeType":"YulIdentifier","src":"5813:6:17"},{"name":"zero_0","nativeSrc":"5821:6:17","nodeType":"YulIdentifier","src":"5821:6:17"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"5763:43:17","nodeType":"YulIdentifier","src":"5763:43:17"},"nativeSrc":"5763:65:17","nodeType":"YulFunctionCall","src":"5763:65:17"},"nativeSrc":"5763:65:17","nodeType":"YulExpressionStatement","src":"5763:65:17"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"5645:189:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5684:4:17","nodeType":"YulTypedName","src":"5684:4:17","type":""},{"name":"offset","nativeSrc":"5690:6:17","nodeType":"YulTypedName","src":"5690:6:17","type":""}],"src":"5645:189:17"},{"body":{"nativeSrc":"5890:136:17","nodeType":"YulBlock","src":"5890:136:17","statements":[{"body":{"nativeSrc":"5957:63:17","nodeType":"YulBlock","src":"5957:63:17","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"6001:5:17","nodeType":"YulIdentifier","src":"6001:5:17"},{"kind":"number","nativeSrc":"6008:1:17","nodeType":"YulLiteral","src":"6008:1:17","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"5971:29:17","nodeType":"YulIdentifier","src":"5971:29:17"},"nativeSrc":"5971:39:17","nodeType":"YulFunctionCall","src":"5971:39:17"},"nativeSrc":"5971:39:17","nodeType":"YulExpressionStatement","src":"5971:39:17"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"5910:5:17","nodeType":"YulIdentifier","src":"5910:5:17"},{"name":"end","nativeSrc":"5917:3:17","nodeType":"YulIdentifier","src":"5917:3:17"}],"functionName":{"name":"lt","nativeSrc":"5907:2:17","nodeType":"YulIdentifier","src":"5907:2:17"},"nativeSrc":"5907:14:17","nodeType":"YulFunctionCall","src":"5907:14:17"},"nativeSrc":"5900:120:17","nodeType":"YulForLoop","post":{"nativeSrc":"5922:26:17","nodeType":"YulBlock","src":"5922:26:17","statements":[{"nativeSrc":"5924:22:17","nodeType":"YulAssignment","src":"5924:22:17","value":{"arguments":[{"name":"start","nativeSrc":"5937:5:17","nodeType":"YulIdentifier","src":"5937:5:17"},{"kind":"number","nativeSrc":"5944:1:17","nodeType":"YulLiteral","src":"5944:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5933:3:17","nodeType":"YulIdentifier","src":"5933:3:17"},"nativeSrc":"5933:13:17","nodeType":"YulFunctionCall","src":"5933:13:17"},"variableNames":[{"name":"start","nativeSrc":"5924:5:17","nodeType":"YulIdentifier","src":"5924:5:17"}]}]},"pre":{"nativeSrc":"5904:2:17","nodeType":"YulBlock","src":"5904:2:17","statements":[]},"src":"5900:120:17"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"5840:186:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"5878:5:17","nodeType":"YulTypedName","src":"5878:5:17","type":""},{"name":"end","nativeSrc":"5885:3:17","nodeType":"YulTypedName","src":"5885:3:17","type":""}],"src":"5840:186:17"},{"body":{"nativeSrc":"6111:464:17","nodeType":"YulBlock","src":"6111:464:17","statements":[{"body":{"nativeSrc":"6137:431:17","nodeType":"YulBlock","src":"6137:431:17","statements":[{"nativeSrc":"6151:54:17","nodeType":"YulVariableDeclaration","src":"6151:54:17","value":{"arguments":[{"name":"array","nativeSrc":"6199:5:17","nodeType":"YulIdentifier","src":"6199:5:17"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"6167:31:17","nodeType":"YulIdentifier","src":"6167:31:17"},"nativeSrc":"6167:38:17","nodeType":"YulFunctionCall","src":"6167:38:17"},"variables":[{"name":"dataArea","nativeSrc":"6155:8:17","nodeType":"YulTypedName","src":"6155:8:17","type":""}]},{"nativeSrc":"6218:63:17","nodeType":"YulVariableDeclaration","src":"6218:63:17","value":{"arguments":[{"name":"dataArea","nativeSrc":"6241:8:17","nodeType":"YulIdentifier","src":"6241:8:17"},{"arguments":[{"name":"startIndex","nativeSrc":"6269:10:17","nodeType":"YulIdentifier","src":"6269:10:17"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"6251:17:17","nodeType":"YulIdentifier","src":"6251:17:17"},"nativeSrc":"6251:29:17","nodeType":"YulFunctionCall","src":"6251:29:17"}],"functionName":{"name":"add","nativeSrc":"6237:3:17","nodeType":"YulIdentifier","src":"6237:3:17"},"nativeSrc":"6237:44:17","nodeType":"YulFunctionCall","src":"6237:44:17"},"variables":[{"name":"deleteStart","nativeSrc":"6222:11:17","nodeType":"YulTypedName","src":"6222:11:17","type":""}]},{"body":{"nativeSrc":"6438:27:17","nodeType":"YulBlock","src":"6438:27:17","statements":[{"nativeSrc":"6440:23:17","nodeType":"YulAssignment","src":"6440:23:17","value":{"name":"dataArea","nativeSrc":"6455:8:17","nodeType":"YulIdentifier","src":"6455:8:17"},"variableNames":[{"name":"deleteStart","nativeSrc":"6440:11:17","nodeType":"YulIdentifier","src":"6440:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"6422:10:17","nodeType":"YulIdentifier","src":"6422:10:17"},{"kind":"number","nativeSrc":"6434:2:17","nodeType":"YulLiteral","src":"6434:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"6419:2:17","nodeType":"YulIdentifier","src":"6419:2:17"},"nativeSrc":"6419:18:17","nodeType":"YulFunctionCall","src":"6419:18:17"},"nativeSrc":"6416:49:17","nodeType":"YulIf","src":"6416:49:17"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"6507:11:17","nodeType":"YulIdentifier","src":"6507:11:17"},{"arguments":[{"name":"dataArea","nativeSrc":"6524:8:17","nodeType":"YulIdentifier","src":"6524:8:17"},{"arguments":[{"name":"len","nativeSrc":"6552:3:17","nodeType":"YulIdentifier","src":"6552:3:17"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"6534:17:17","nodeType":"YulIdentifier","src":"6534:17:17"},"nativeSrc":"6534:22:17","nodeType":"YulFunctionCall","src":"6534:22:17"}],"functionName":{"name":"add","nativeSrc":"6520:3:17","nodeType":"YulIdentifier","src":"6520:3:17"},"nativeSrc":"6520:37:17","nodeType":"YulFunctionCall","src":"6520:37:17"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"6478:28:17","nodeType":"YulIdentifier","src":"6478:28:17"},"nativeSrc":"6478:80:17","nodeType":"YulFunctionCall","src":"6478:80:17"},"nativeSrc":"6478:80:17","nodeType":"YulExpressionStatement","src":"6478:80:17"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"6128:3:17","nodeType":"YulIdentifier","src":"6128:3:17"},{"kind":"number","nativeSrc":"6133:2:17","nodeType":"YulLiteral","src":"6133:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"6125:2:17","nodeType":"YulIdentifier","src":"6125:2:17"},"nativeSrc":"6125:11:17","nodeType":"YulFunctionCall","src":"6125:11:17"},"nativeSrc":"6122:446:17","nodeType":"YulIf","src":"6122:446:17"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"6032:543:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"6087:5:17","nodeType":"YulTypedName","src":"6087:5:17","type":""},{"name":"len","nativeSrc":"6094:3:17","nodeType":"YulTypedName","src":"6094:3:17","type":""},{"name":"startIndex","nativeSrc":"6099:10:17","nodeType":"YulTypedName","src":"6099:10:17","type":""}],"src":"6032:543:17"},{"body":{"nativeSrc":"6644:54:17","nodeType":"YulBlock","src":"6644:54:17","statements":[{"nativeSrc":"6654:37:17","nodeType":"YulAssignment","src":"6654:37:17","value":{"arguments":[{"name":"bits","nativeSrc":"6679:4:17","nodeType":"YulIdentifier","src":"6679:4:17"},{"name":"value","nativeSrc":"6685:5:17","nodeType":"YulIdentifier","src":"6685:5:17"}],"functionName":{"name":"shr","nativeSrc":"6675:3:17","nodeType":"YulIdentifier","src":"6675:3:17"},"nativeSrc":"6675:16:17","nodeType":"YulFunctionCall","src":"6675:16:17"},"variableNames":[{"name":"newValue","nativeSrc":"6654:8:17","nodeType":"YulIdentifier","src":"6654:8:17"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"6581:117:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"6619:4:17","nodeType":"YulTypedName","src":"6619:4:17","type":""},{"name":"value","nativeSrc":"6625:5:17","nodeType":"YulTypedName","src":"6625:5:17","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"6635:8:17","nodeType":"YulTypedName","src":"6635:8:17","type":""}],"src":"6581:117:17"},{"body":{"nativeSrc":"6755:118:17","nodeType":"YulBlock","src":"6755:118:17","statements":[{"nativeSrc":"6765:68:17","nodeType":"YulVariableDeclaration","src":"6765:68:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6814:1:17","nodeType":"YulLiteral","src":"6814:1:17","type":"","value":"8"},{"name":"bytes","nativeSrc":"6817:5:17","nodeType":"YulIdentifier","src":"6817:5:17"}],"functionName":{"name":"mul","nativeSrc":"6810:3:17","nodeType":"YulIdentifier","src":"6810:3:17"},"nativeSrc":"6810:13:17","nodeType":"YulFunctionCall","src":"6810:13:17"},{"arguments":[{"kind":"number","nativeSrc":"6829:1:17","nodeType":"YulLiteral","src":"6829:1:17","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"6825:3:17","nodeType":"YulIdentifier","src":"6825:3:17"},"nativeSrc":"6825:6:17","nodeType":"YulFunctionCall","src":"6825:6:17"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"6781:28:17","nodeType":"YulIdentifier","src":"6781:28:17"},"nativeSrc":"6781:51:17","nodeType":"YulFunctionCall","src":"6781:51:17"}],"functionName":{"name":"not","nativeSrc":"6777:3:17","nodeType":"YulIdentifier","src":"6777:3:17"},"nativeSrc":"6777:56:17","nodeType":"YulFunctionCall","src":"6777:56:17"},"variables":[{"name":"mask","nativeSrc":"6769:4:17","nodeType":"YulTypedName","src":"6769:4:17","type":""}]},{"nativeSrc":"6842:25:17","nodeType":"YulAssignment","src":"6842:25:17","value":{"arguments":[{"name":"data","nativeSrc":"6856:4:17","nodeType":"YulIdentifier","src":"6856:4:17"},{"name":"mask","nativeSrc":"6862:4:17","nodeType":"YulIdentifier","src":"6862:4:17"}],"functionName":{"name":"and","nativeSrc":"6852:3:17","nodeType":"YulIdentifier","src":"6852:3:17"},"nativeSrc":"6852:15:17","nodeType":"YulFunctionCall","src":"6852:15:17"},"variableNames":[{"name":"result","nativeSrc":"6842:6:17","nodeType":"YulIdentifier","src":"6842:6:17"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"6704:169:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"6732:4:17","nodeType":"YulTypedName","src":"6732:4:17","type":""},{"name":"bytes","nativeSrc":"6738:5:17","nodeType":"YulTypedName","src":"6738:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"6748:6:17","nodeType":"YulTypedName","src":"6748:6:17","type":""}],"src":"6704:169:17"},{"body":{"nativeSrc":"6959:214:17","nodeType":"YulBlock","src":"6959:214:17","statements":[{"nativeSrc":"7092:37:17","nodeType":"YulAssignment","src":"7092:37:17","value":{"arguments":[{"name":"data","nativeSrc":"7119:4:17","nodeType":"YulIdentifier","src":"7119:4:17"},{"name":"len","nativeSrc":"7125:3:17","nodeType":"YulIdentifier","src":"7125:3:17"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"7100:18:17","nodeType":"YulIdentifier","src":"7100:18:17"},"nativeSrc":"7100:29:17","nodeType":"YulFunctionCall","src":"7100:29:17"},"variableNames":[{"name":"data","nativeSrc":"7092:4:17","nodeType":"YulIdentifier","src":"7092:4:17"}]},{"nativeSrc":"7138:29:17","nodeType":"YulAssignment","src":"7138:29:17","value":{"arguments":[{"name":"data","nativeSrc":"7149:4:17","nodeType":"YulIdentifier","src":"7149:4:17"},{"arguments":[{"kind":"number","nativeSrc":"7159:1:17","nodeType":"YulLiteral","src":"7159:1:17","type":"","value":"2"},{"name":"len","nativeSrc":"7162:3:17","nodeType":"YulIdentifier","src":"7162:3:17"}],"functionName":{"name":"mul","nativeSrc":"7155:3:17","nodeType":"YulIdentifier","src":"7155:3:17"},"nativeSrc":"7155:11:17","nodeType":"YulFunctionCall","src":"7155:11:17"}],"functionName":{"name":"or","nativeSrc":"7146:2:17","nodeType":"YulIdentifier","src":"7146:2:17"},"nativeSrc":"7146:21:17","nodeType":"YulFunctionCall","src":"7146:21:17"},"variableNames":[{"name":"used","nativeSrc":"7138:4:17","nodeType":"YulIdentifier","src":"7138:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"6878:295:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"6940:4:17","nodeType":"YulTypedName","src":"6940:4:17","type":""},{"name":"len","nativeSrc":"6946:3:17","nodeType":"YulTypedName","src":"6946:3:17","type":""}],"returnVariables":[{"name":"used","nativeSrc":"6954:4:17","nodeType":"YulTypedName","src":"6954:4:17","type":""}],"src":"6878:295:17"},{"body":{"nativeSrc":"7270:1303:17","nodeType":"YulBlock","src":"7270:1303:17","statements":[{"nativeSrc":"7281:51:17","nodeType":"YulVariableDeclaration","src":"7281:51:17","value":{"arguments":[{"name":"src","nativeSrc":"7328:3:17","nodeType":"YulIdentifier","src":"7328:3:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"7295:32:17","nodeType":"YulIdentifier","src":"7295:32:17"},"nativeSrc":"7295:37:17","nodeType":"YulFunctionCall","src":"7295:37:17"},"variables":[{"name":"newLen","nativeSrc":"7285:6:17","nodeType":"YulTypedName","src":"7285:6:17","type":""}]},{"body":{"nativeSrc":"7417:22:17","nodeType":"YulBlock","src":"7417:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7419:16:17","nodeType":"YulIdentifier","src":"7419:16:17"},"nativeSrc":"7419:18:17","nodeType":"YulFunctionCall","src":"7419:18:17"},"nativeSrc":"7419:18:17","nodeType":"YulExpressionStatement","src":"7419:18:17"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"7389:6:17","nodeType":"YulIdentifier","src":"7389:6:17"},{"kind":"number","nativeSrc":"7397:18:17","nodeType":"YulLiteral","src":"7397:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7386:2:17","nodeType":"YulIdentifier","src":"7386:2:17"},"nativeSrc":"7386:30:17","nodeType":"YulFunctionCall","src":"7386:30:17"},"nativeSrc":"7383:56:17","nodeType":"YulIf","src":"7383:56:17"},{"nativeSrc":"7449:52:17","nodeType":"YulVariableDeclaration","src":"7449:52:17","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"7495:4:17","nodeType":"YulIdentifier","src":"7495:4:17"}],"functionName":{"name":"sload","nativeSrc":"7489:5:17","nodeType":"YulIdentifier","src":"7489:5:17"},"nativeSrc":"7489:11:17","nodeType":"YulFunctionCall","src":"7489:11:17"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"7463:25:17","nodeType":"YulIdentifier","src":"7463:25:17"},"nativeSrc":"7463:38:17","nodeType":"YulFunctionCall","src":"7463:38:17"},"variables":[{"name":"oldLen","nativeSrc":"7453:6:17","nodeType":"YulTypedName","src":"7453:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"7594:4:17","nodeType":"YulIdentifier","src":"7594:4:17"},{"name":"oldLen","nativeSrc":"7600:6:17","nodeType":"YulIdentifier","src":"7600:6:17"},{"name":"newLen","nativeSrc":"7608:6:17","nodeType":"YulIdentifier","src":"7608:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"7548:45:17","nodeType":"YulIdentifier","src":"7548:45:17"},"nativeSrc":"7548:67:17","nodeType":"YulFunctionCall","src":"7548:67:17"},"nativeSrc":"7548:67:17","nodeType":"YulExpressionStatement","src":"7548:67:17"},{"nativeSrc":"7625:18:17","nodeType":"YulVariableDeclaration","src":"7625:18:17","value":{"kind":"number","nativeSrc":"7642:1:17","nodeType":"YulLiteral","src":"7642:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"7629:9:17","nodeType":"YulTypedName","src":"7629:9:17","type":""}]},{"nativeSrc":"7653:17:17","nodeType":"YulAssignment","src":"7653:17:17","value":{"kind":"number","nativeSrc":"7666:4:17","nodeType":"YulLiteral","src":"7666:4:17","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"7653:9:17","nodeType":"YulIdentifier","src":"7653:9:17"}]},{"cases":[{"body":{"nativeSrc":"7717:611:17","nodeType":"YulBlock","src":"7717:611:17","statements":[{"nativeSrc":"7731:37:17","nodeType":"YulVariableDeclaration","src":"7731:37:17","value":{"arguments":[{"name":"newLen","nativeSrc":"7750:6:17","nodeType":"YulIdentifier","src":"7750:6:17"},{"arguments":[{"kind":"number","nativeSrc":"7762:4:17","nodeType":"YulLiteral","src":"7762:4:17","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"7758:3:17","nodeType":"YulIdentifier","src":"7758:3:17"},"nativeSrc":"7758:9:17","nodeType":"YulFunctionCall","src":"7758:9:17"}],"functionName":{"name":"and","nativeSrc":"7746:3:17","nodeType":"YulIdentifier","src":"7746:3:17"},"nativeSrc":"7746:22:17","nodeType":"YulFunctionCall","src":"7746:22:17"},"variables":[{"name":"loopEnd","nativeSrc":"7735:7:17","nodeType":"YulTypedName","src":"7735:7:17","type":""}]},{"nativeSrc":"7782:51:17","nodeType":"YulVariableDeclaration","src":"7782:51:17","value":{"arguments":[{"name":"slot","nativeSrc":"7828:4:17","nodeType":"YulIdentifier","src":"7828:4:17"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"7796:31:17","nodeType":"YulIdentifier","src":"7796:31:17"},"nativeSrc":"7796:37:17","nodeType":"YulFunctionCall","src":"7796:37:17"},"variables":[{"name":"dstPtr","nativeSrc":"7786:6:17","nodeType":"YulTypedName","src":"7786:6:17","type":""}]},{"nativeSrc":"7846:10:17","nodeType":"YulVariableDeclaration","src":"7846:10:17","value":{"kind":"number","nativeSrc":"7855:1:17","nodeType":"YulLiteral","src":"7855:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7850:1:17","nodeType":"YulTypedName","src":"7850:1:17","type":""}]},{"body":{"nativeSrc":"7914:163:17","nodeType":"YulBlock","src":"7914:163:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"7939:6:17","nodeType":"YulIdentifier","src":"7939:6:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"7957:3:17","nodeType":"YulIdentifier","src":"7957:3:17"},{"name":"srcOffset","nativeSrc":"7962:9:17","nodeType":"YulIdentifier","src":"7962:9:17"}],"functionName":{"name":"add","nativeSrc":"7953:3:17","nodeType":"YulIdentifier","src":"7953:3:17"},"nativeSrc":"7953:19:17","nodeType":"YulFunctionCall","src":"7953:19:17"}],"functionName":{"name":"mload","nativeSrc":"7947:5:17","nodeType":"YulIdentifier","src":"7947:5:17"},"nativeSrc":"7947:26:17","nodeType":"YulFunctionCall","src":"7947:26:17"}],"functionName":{"name":"sstore","nativeSrc":"7932:6:17","nodeType":"YulIdentifier","src":"7932:6:17"},"nativeSrc":"7932:42:17","nodeType":"YulFunctionCall","src":"7932:42:17"},"nativeSrc":"7932:42:17","nodeType":"YulExpressionStatement","src":"7932:42:17"},{"nativeSrc":"7991:24:17","nodeType":"YulAssignment","src":"7991:24:17","value":{"arguments":[{"name":"dstPtr","nativeSrc":"8005:6:17","nodeType":"YulIdentifier","src":"8005:6:17"},{"kind":"number","nativeSrc":"8013:1:17","nodeType":"YulLiteral","src":"8013:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8001:3:17","nodeType":"YulIdentifier","src":"8001:3:17"},"nativeSrc":"8001:14:17","nodeType":"YulFunctionCall","src":"8001:14:17"},"variableNames":[{"name":"dstPtr","nativeSrc":"7991:6:17","nodeType":"YulIdentifier","src":"7991:6:17"}]},{"nativeSrc":"8032:31:17","nodeType":"YulAssignment","src":"8032:31:17","value":{"arguments":[{"name":"srcOffset","nativeSrc":"8049:9:17","nodeType":"YulIdentifier","src":"8049:9:17"},{"kind":"number","nativeSrc":"8060:2:17","nodeType":"YulLiteral","src":"8060:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8045:3:17","nodeType":"YulIdentifier","src":"8045:3:17"},"nativeSrc":"8045:18:17","nodeType":"YulFunctionCall","src":"8045:18:17"},"variableNames":[{"name":"srcOffset","nativeSrc":"8032:9:17","nodeType":"YulIdentifier","src":"8032:9:17"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7880:1:17","nodeType":"YulIdentifier","src":"7880:1:17"},{"name":"loopEnd","nativeSrc":"7883:7:17","nodeType":"YulIdentifier","src":"7883:7:17"}],"functionName":{"name":"lt","nativeSrc":"7877:2:17","nodeType":"YulIdentifier","src":"7877:2:17"},"nativeSrc":"7877:14:17","nodeType":"YulFunctionCall","src":"7877:14:17"},"nativeSrc":"7869:208:17","nodeType":"YulForLoop","post":{"nativeSrc":"7892:21:17","nodeType":"YulBlock","src":"7892:21:17","statements":[{"nativeSrc":"7894:17:17","nodeType":"YulAssignment","src":"7894:17:17","value":{"arguments":[{"name":"i","nativeSrc":"7903:1:17","nodeType":"YulIdentifier","src":"7903:1:17"},{"kind":"number","nativeSrc":"7906:4:17","nodeType":"YulLiteral","src":"7906:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7899:3:17","nodeType":"YulIdentifier","src":"7899:3:17"},"nativeSrc":"7899:12:17","nodeType":"YulFunctionCall","src":"7899:12:17"},"variableNames":[{"name":"i","nativeSrc":"7894:1:17","nodeType":"YulIdentifier","src":"7894:1:17"}]}]},"pre":{"nativeSrc":"7873:3:17","nodeType":"YulBlock","src":"7873:3:17","statements":[]},"src":"7869:208:17"},{"body":{"nativeSrc":"8113:156:17","nodeType":"YulBlock","src":"8113:156:17","statements":[{"nativeSrc":"8131:43:17","nodeType":"YulVariableDeclaration","src":"8131:43:17","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8158:3:17","nodeType":"YulIdentifier","src":"8158:3:17"},{"name":"srcOffset","nativeSrc":"8163:9:17","nodeType":"YulIdentifier","src":"8163:9:17"}],"functionName":{"name":"add","nativeSrc":"8154:3:17","nodeType":"YulIdentifier","src":"8154:3:17"},"nativeSrc":"8154:19:17","nodeType":"YulFunctionCall","src":"8154:19:17"}],"functionName":{"name":"mload","nativeSrc":"8148:5:17","nodeType":"YulIdentifier","src":"8148:5:17"},"nativeSrc":"8148:26:17","nodeType":"YulFunctionCall","src":"8148:26:17"},"variables":[{"name":"lastValue","nativeSrc":"8135:9:17","nodeType":"YulTypedName","src":"8135:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"8198:6:17","nodeType":"YulIdentifier","src":"8198:6:17"},{"arguments":[{"name":"lastValue","nativeSrc":"8225:9:17","nodeType":"YulIdentifier","src":"8225:9:17"},{"arguments":[{"name":"newLen","nativeSrc":"8240:6:17","nodeType":"YulIdentifier","src":"8240:6:17"},{"kind":"number","nativeSrc":"8248:4:17","nodeType":"YulLiteral","src":"8248:4:17","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"8236:3:17","nodeType":"YulIdentifier","src":"8236:3:17"},"nativeSrc":"8236:17:17","nodeType":"YulFunctionCall","src":"8236:17:17"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"8206:18:17","nodeType":"YulIdentifier","src":"8206:18:17"},"nativeSrc":"8206:48:17","nodeType":"YulFunctionCall","src":"8206:48:17"}],"functionName":{"name":"sstore","nativeSrc":"8191:6:17","nodeType":"YulIdentifier","src":"8191:6:17"},"nativeSrc":"8191:64:17","nodeType":"YulFunctionCall","src":"8191:64:17"},"nativeSrc":"8191:64:17","nodeType":"YulExpressionStatement","src":"8191:64:17"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"8096:7:17","nodeType":"YulIdentifier","src":"8096:7:17"},{"name":"newLen","nativeSrc":"8105:6:17","nodeType":"YulIdentifier","src":"8105:6:17"}],"functionName":{"name":"lt","nativeSrc":"8093:2:17","nodeType":"YulIdentifier","src":"8093:2:17"},"nativeSrc":"8093:19:17","nodeType":"YulFunctionCall","src":"8093:19:17"},"nativeSrc":"8090:179:17","nodeType":"YulIf","src":"8090:179:17"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8289:4:17","nodeType":"YulIdentifier","src":"8289:4:17"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"8303:6:17","nodeType":"YulIdentifier","src":"8303:6:17"},{"kind":"number","nativeSrc":"8311:1:17","nodeType":"YulLiteral","src":"8311:1:17","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"8299:3:17","nodeType":"YulIdentifier","src":"8299:3:17"},"nativeSrc":"8299:14:17","nodeType":"YulFunctionCall","src":"8299:14:17"},{"kind":"number","nativeSrc":"8315:1:17","nodeType":"YulLiteral","src":"8315:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8295:3:17","nodeType":"YulIdentifier","src":"8295:3:17"},"nativeSrc":"8295:22:17","nodeType":"YulFunctionCall","src":"8295:22:17"}],"functionName":{"name":"sstore","nativeSrc":"8282:6:17","nodeType":"YulIdentifier","src":"8282:6:17"},"nativeSrc":"8282:36:17","nodeType":"YulFunctionCall","src":"8282:36:17"},"nativeSrc":"8282:36:17","nodeType":"YulExpressionStatement","src":"8282:36:17"}]},"nativeSrc":"7710:618:17","nodeType":"YulCase","src":"7710:618:17","value":{"kind":"number","nativeSrc":"7715:1:17","nodeType":"YulLiteral","src":"7715:1:17","type":"","value":"1"}},{"body":{"nativeSrc":"8345:222:17","nodeType":"YulBlock","src":"8345:222:17","statements":[{"nativeSrc":"8359:14:17","nodeType":"YulVariableDeclaration","src":"8359:14:17","value":{"kind":"number","nativeSrc":"8372:1:17","nodeType":"YulLiteral","src":"8372:1:17","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"8363:5:17","nodeType":"YulTypedName","src":"8363:5:17","type":""}]},{"body":{"nativeSrc":"8396:67:17","nodeType":"YulBlock","src":"8396:67:17","statements":[{"nativeSrc":"8414:35:17","nodeType":"YulAssignment","src":"8414:35:17","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8433:3:17","nodeType":"YulIdentifier","src":"8433:3:17"},{"name":"srcOffset","nativeSrc":"8438:9:17","nodeType":"YulIdentifier","src":"8438:9:17"}],"functionName":{"name":"add","nativeSrc":"8429:3:17","nodeType":"YulIdentifier","src":"8429:3:17"},"nativeSrc":"8429:19:17","nodeType":"YulFunctionCall","src":"8429:19:17"}],"functionName":{"name":"mload","nativeSrc":"8423:5:17","nodeType":"YulIdentifier","src":"8423:5:17"},"nativeSrc":"8423:26:17","nodeType":"YulFunctionCall","src":"8423:26:17"},"variableNames":[{"name":"value","nativeSrc":"8414:5:17","nodeType":"YulIdentifier","src":"8414:5:17"}]}]},"condition":{"name":"newLen","nativeSrc":"8389:6:17","nodeType":"YulIdentifier","src":"8389:6:17"},"nativeSrc":"8386:77:17","nodeType":"YulIf","src":"8386:77:17"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8483:4:17","nodeType":"YulIdentifier","src":"8483:4:17"},{"arguments":[{"name":"value","nativeSrc":"8542:5:17","nodeType":"YulIdentifier","src":"8542:5:17"},{"name":"newLen","nativeSrc":"8549:6:17","nodeType":"YulIdentifier","src":"8549:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"8489:52:17","nodeType":"YulIdentifier","src":"8489:52:17"},"nativeSrc":"8489:67:17","nodeType":"YulFunctionCall","src":"8489:67:17"}],"functionName":{"name":"sstore","nativeSrc":"8476:6:17","nodeType":"YulIdentifier","src":"8476:6:17"},"nativeSrc":"8476:81:17","nodeType":"YulFunctionCall","src":"8476:81:17"},"nativeSrc":"8476:81:17","nodeType":"YulExpressionStatement","src":"8476:81:17"}]},"nativeSrc":"8337:230:17","nodeType":"YulCase","src":"8337:230:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"7690:6:17","nodeType":"YulIdentifier","src":"7690:6:17"},{"kind":"number","nativeSrc":"7698:2:17","nodeType":"YulLiteral","src":"7698:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"7687:2:17","nodeType":"YulIdentifier","src":"7687:2:17"},"nativeSrc":"7687:14:17","nodeType":"YulFunctionCall","src":"7687:14:17"},"nativeSrc":"7680:887:17","nodeType":"YulSwitch","src":"7680:887:17"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"7178:1395:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"7259:4:17","nodeType":"YulTypedName","src":"7259:4:17","type":""},{"name":"src","nativeSrc":"7265:3:17","nodeType":"YulTypedName","src":"7265:3:17","type":""}],"src":"7178:1395:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2668 CODESIZE SUB DUP1 PUSH2 0x2668 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x1CE JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH2 0x41 SWAP2 SWAP1 PUSH2 0x467 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x51 SWAP2 SWAP1 PUSH2 0x467 JUMP JUMPDEST POP POP POP PUSH2 0x539 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xC0 DUP3 PUSH2 0x77 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xDF JUMPI PUSH2 0xDE PUSH2 0x88 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2 PUSH2 0x59 JUMP JUMPDEST SWAP1 POP PUSH2 0xFE DUP3 DUP3 PUSH2 0xB7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11E JUMPI PUSH2 0x11D PUSH2 0x88 JUMP JUMPDEST JUMPDEST PUSH2 0x127 DUP3 PUSH2 0x77 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x152 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x137 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x171 PUSH2 0x16C DUP5 PUSH2 0x103 JUMP JUMPDEST PUSH2 0xE8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x18D JUMPI PUSH2 0x18C PUSH2 0x72 JUMP JUMPDEST JUMPDEST PUSH2 0x198 DUP5 DUP3 DUP6 PUSH2 0x134 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B5 JUMPI PUSH2 0x1B4 PUSH2 0x6D JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x1C5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E5 JUMPI PUSH2 0x1E4 PUSH2 0x63 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x203 JUMPI PUSH2 0x202 PUSH2 0x68 JUMP JUMPDEST JUMPDEST PUSH2 0x20F DUP6 DUP3 DUP7 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x230 JUMPI PUSH2 0x22F PUSH2 0x68 JUMP JUMPDEST JUMPDEST PUSH2 0x23C DUP6 DUP3 DUP7 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x298 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2AB JUMPI PUSH2 0x2AA PUSH2 0x251 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x313 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2D6 JUMP JUMPDEST PUSH2 0x31D DUP7 DUP4 PUSH2 0x2D6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x364 PUSH2 0x35F PUSH2 0x35A DUP5 PUSH2 0x335 JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37E DUP4 PUSH2 0x349 JUMP JUMPDEST PUSH2 0x392 PUSH2 0x38A DUP3 PUSH2 0x36B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2E3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3A7 PUSH2 0x39A JUMP JUMPDEST PUSH2 0x3B2 DUP2 DUP5 DUP5 PUSH2 0x375 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3CB PUSH1 0x0 DUP3 PUSH2 0x39F JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x41B JUMPI PUSH2 0x3EC DUP2 PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x3F5 DUP5 PUSH2 0x2C6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x404 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x418 PUSH2 0x410 DUP6 PUSH2 0x2C6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3B7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x420 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x457 DUP4 DUP4 PUSH2 0x42D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x470 DUP3 PUSH2 0x246 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x489 JUMPI PUSH2 0x488 PUSH2 0x88 JUMP JUMPDEST JUMPDEST PUSH2 0x493 DUP3 SLOAD PUSH2 0x280 JUMP JUMPDEST PUSH2 0x49E DUP3 DUP3 DUP6 PUSH2 0x3DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x4D1 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4BF JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x4C9 DUP6 DUP3 PUSH2 0x44B JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4DF DUP7 PUSH2 0x2B1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x507 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4E2 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x524 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x520 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x42D JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2120 DUP1 PUSH2 0x548 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x180A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1D36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1185 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1312 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11AC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1465 JUMP JUMPDEST ISZERO PUSH2 0x1305 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11D5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1230 SWAP2 SWAP1 PUSH2 0x20BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12B5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x130A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1370 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1366 JUMPI PUSH2 0x1365 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13AD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13DC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13D2 JUMPI PUSH2 0x13D1 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1405 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x13FB JUMPI PUSH2 0x13FA PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x142A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1420 JUMPI PUSH2 0x141F PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x144D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1443 JUMPI PUSH2 0x1442 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x145C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14D1 DUP2 PUSH2 0x149C JUMP JUMPDEST DUP2 EQ PUSH2 0x14DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14EE DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x150A JUMPI PUSH2 0x1509 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1518 DUP5 DUP3 DUP6 ADD PUSH2 0x14DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1536 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1551 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x152D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1576 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B9 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x15C3 DUP2 DUP6 PUSH2 0x1562 JUMP JUMPDEST SWAP4 POP PUSH2 0x15D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x15DC DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1601 DUP2 DUP5 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x161C DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP2 EQ PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1639 DUP2 PUSH2 0x1613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI PUSH2 0x1654 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1663 DUP5 DUP3 DUP6 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1697 DUP3 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16A7 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D1 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP2 EQ PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16EE DUP2 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x170B JUMPI PUSH2 0x170A PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1719 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x172A DUP6 DUP3 DUP7 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174D JUMPI PUSH2 0x174C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x176C DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x177D DUP7 DUP3 DUP8 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17BD DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1804 DUP2 PUSH2 0x17DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1821 JUMPI PUSH2 0x1820 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x182F DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1840 DUP6 DUP3 DUP7 ADD PUSH2 0x17F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x188C DUP3 PUSH2 0x159D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x1854 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BE PUSH2 0x1488 JUMP JUMPDEST SWAP1 POP PUSH2 0x18CA DUP3 DUP3 PUSH2 0x1883 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EA JUMPI PUSH2 0x18E9 PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH2 0x18F3 DUP3 PUSH2 0x159D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH2 0x191D DUP5 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x193E JUMPI PUSH2 0x193D PUSH2 0x184F JUMP JUMPDEST JUMPDEST PUSH2 0x1949 DUP5 DUP3 DUP6 PUSH2 0x1900 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1966 JUMPI PUSH2 0x1965 PUSH2 0x184A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1976 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x190F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1999 JUMPI PUSH2 0x1998 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B8 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19C9 DUP8 DUP3 DUP9 ADD PUSH2 0x162A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST PUSH2 0x19F6 DUP8 DUP3 DUP9 ADD PUSH2 0x1951 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A18 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A27 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A38 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1A89 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A9C JUMPI PUSH2 0x1A9B PUSH2 0x1A42 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x21 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x1AA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B2D DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B90 PUSH1 0x3D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B9B DUP3 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BBF DUP2 PUSH2 0x1B83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C22 PUSH1 0x2D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C2D DUP3 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C51 DUP2 PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8E PUSH1 0x18 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C99 DUP3 PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CBD DUP2 PUSH2 0x1C81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH1 0x29 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2B DUP3 PUSH2 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D4F DUP2 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6C DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x1D76 DUP2 DUP6 PUSH2 0x1D56 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D86 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9E DUP3 DUP6 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DAA DUP3 DUP5 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E12 PUSH1 0x25 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1D DUP3 PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x1E05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH1 0x24 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAF DUP3 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED3 DUP2 PUSH2 0x1E97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F10 PUSH1 0x19 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F1B DUP3 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3F DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FA2 PUSH1 0x32 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAD DUP3 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FD1 DUP2 PUSH2 0x1F95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202E DUP3 PUSH2 0x2007 JUMP JUMPDEST PUSH2 0x2038 DUP2 DUP6 PUSH2 0x2012 JUMP JUMPDEST SWAP4 POP PUSH2 0x2048 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x2051 DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x209D DUP2 DUP5 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20B7 DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D3 JUMPI PUSH2 0x20D2 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20E1 DUP5 DUP3 DUP6 ADD PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x3C PUSH6 0xE4F474C18FA0 SWAP8 0x2E 0xB0 JUMP BALANCE TIMESTAMP MLOAD STATICCALL 0xCA DUP8 0xC6 0xDC 0xD4 MOD DUP9 PUSH18 0xC10C1BE48F0BD564736F6C634300081B0033 ","sourceMap":"628:16679:3:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;628:16679;;7:75:17;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:248::-;1692:1;1702:113;1716:6;1713:1;1710:13;1702:113;;;1801:1;1796:3;1792:11;1786:18;1782:1;1777:3;1773:11;1766:39;1738:2;1735:1;1731:10;1726:15;;1702:113;;;1849:1;1840:6;1835:3;1831:16;1824:27;1672:186;1610:248;;;:::o;1864:434::-;1953:5;1978:66;1994:49;2036:6;1994:49;:::i;:::-;1978:66;:::i;:::-;1969:75;;2067:6;2060:5;2053:21;2105:4;2098:5;2094:16;2143:3;2134:6;2129:3;2125:16;2122:25;2119:112;;;2150:79;;:::i;:::-;2119:112;2240:52;2285:6;2280:3;2275;2240:52;:::i;:::-;1959:339;1864:434;;;;;:::o;2318:355::-;2385:5;2434:3;2427:4;2419:6;2415:17;2411:27;2401:122;;2442:79;;:::i;:::-;2401:122;2552:6;2546:13;2577:90;2663:3;2655:6;2648:4;2640:6;2636:17;2577:90;:::i;:::-;2568:99;;2391:282;2318:355;;;;:::o;2679:853::-;2778:6;2786;2835:2;2823:9;2814:7;2810:23;2806:32;2803:119;;;2841:79;;:::i;:::-;2803:119;2982:1;2971:9;2967:17;2961:24;3012:18;3004:6;3001:30;2998:117;;;3034:79;;:::i;:::-;2998:117;3139:74;3205:7;3196:6;3185:9;3181:22;3139:74;:::i;:::-;3129:84;;2932:291;3283:2;3272:9;3268:18;3262:25;3314:18;3306:6;3303:30;3300:117;;;3336:79;;:::i;:::-;3300:117;3441:74;3507:7;3498:6;3487:9;3483:22;3441:74;:::i;:::-;3431:84;;3233:292;2679:853;;;;;:::o;3538:99::-;3590:6;3624:5;3618:12;3608:22;;3538:99;;;:::o;3643:180::-;3691:77;3688:1;3681:88;3788:4;3785:1;3778:15;3812:4;3809:1;3802:15;3829:320;3873:6;3910:1;3904:4;3900:12;3890:22;;3957:1;3951:4;3947:12;3978:18;3968:81;;4034:4;4026:6;4022:17;4012:27;;3968:81;4096:2;4088:6;4085:14;4065:18;4062:38;4059:84;;4115:18;;:::i;:::-;4059:84;3880:269;3829:320;;;:::o;4155:141::-;4204:4;4227:3;4219:11;;4250:3;4247:1;4240:14;4284:4;4281:1;4271:18;4263:26;;4155:141;;;:::o;4302:93::-;4339:6;4386:2;4381;4374:5;4370:14;4366:23;4356:33;;4302:93;;;:::o;4401:107::-;4445:8;4495:5;4489:4;4485:16;4464:37;;4401:107;;;;:::o;4514:393::-;4583:6;4633:1;4621:10;4617:18;4656:97;4686:66;4675:9;4656:97;:::i;:::-;4774:39;4804:8;4793:9;4774:39;:::i;:::-;4762:51;;4846:4;4842:9;4835:5;4831:21;4822:30;;4895:4;4885:8;4881:19;4874:5;4871:30;4861:40;;4590:317;;4514:393;;;;;:::o;4913:77::-;4950:7;4979:5;4968:16;;4913:77;;;:::o;4996:60::-;5024:3;5045:5;5038:12;;4996:60;;;:::o;5062:142::-;5112:9;5145:53;5163:34;5172:24;5190:5;5172:24;:::i;:::-;5163:34;:::i;:::-;5145:53;:::i;:::-;5132:66;;5062:142;;;:::o;5210:75::-;5253:3;5274:5;5267:12;;5210:75;;;:::o;5291:269::-;5401:39;5432:7;5401:39;:::i;:::-;5462:91;5511:41;5535:16;5511:41;:::i;:::-;5503:6;5496:4;5490:11;5462:91;:::i;:::-;5456:4;5449:105;5367:193;5291:269;;;:::o;5566:73::-;5611:3;5566:73;:::o;5645:189::-;5722:32;;:::i;:::-;5763:65;5821:6;5813;5807:4;5763:65;:::i;:::-;5698:136;5645:189;;:::o;5840:186::-;5900:120;5917:3;5910:5;5907:14;5900:120;;;5971:39;6008:1;6001:5;5971:39;:::i;:::-;5944:1;5937:5;5933:13;5924:22;;5900:120;;;5840:186;;:::o;6032:543::-;6133:2;6128:3;6125:11;6122:446;;;6167:38;6199:5;6167:38;:::i;:::-;6251:29;6269:10;6251:29;:::i;:::-;6241:8;6237:44;6434:2;6422:10;6419:18;6416:49;;;6455:8;6440:23;;6416:49;6478:80;6534:22;6552:3;6534:22;:::i;:::-;6524:8;6520:37;6507:11;6478:80;:::i;:::-;6137:431;;6122:446;6032:543;;;:::o;6581:117::-;6635:8;6685:5;6679:4;6675:16;6654:37;;6581:117;;;;:::o;6704:169::-;6748:6;6781:51;6829:1;6825:6;6817:5;6814:1;6810:13;6781:51;:::i;:::-;6777:56;6862:4;6856;6852:15;6842:25;;6755:118;6704:169;;;;:::o;6878:295::-;6954:4;7100:29;7125:3;7119:4;7100:29;:::i;:::-;7092:37;;7162:3;7159:1;7155:11;7149:4;7146:21;7138:29;;6878:295;;;;:::o;7178:1395::-;7295:37;7328:3;7295:37;:::i;:::-;7397:18;7389:6;7386:30;7383:56;;;7419:18;;:::i;:::-;7383:56;7463:38;7495:4;7489:11;7463:38;:::i;:::-;7548:67;7608:6;7600;7594:4;7548:67;:::i;:::-;7642:1;7666:4;7653:17;;7698:2;7690:6;7687:14;7715:1;7710:618;;;;8372:1;8389:6;8386:77;;;8438:9;8433:3;8429:19;8423:26;8414:35;;8386:77;8489:67;8549:6;8542:5;8489:67;:::i;:::-;8483:4;8476:81;8345:222;7680:887;;7710:618;7762:4;7758:9;7750:6;7746:22;7796:37;7828:4;7796:37;:::i;:::-;7855:1;7869:208;7883:7;7880:1;7877:14;7869:208;;;7962:9;7957:3;7953:19;7947:26;7939:6;7932:42;8013:1;8005:6;8001:14;7991:24;;8060:2;8049:9;8045:18;8032:31;;7906:4;7903:1;7899:12;7894:17;;7869:208;;;8105:6;8096:7;8093:19;8090:179;;;8163:9;8158:3;8154:19;8148:26;8206:48;8248:4;8240:6;8236:17;8225:9;8206:48;:::i;:::-;8198:6;8191:64;8113:156;8090:179;8315:1;8311;8303:6;8299:14;8295:22;8289:4;8282:36;7717:611;;;7680:887;;7270:1303;;;7178:1395;;:::o;628:16679:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1125":{"entryPoint":4485,"id":1125,"parameterSlots":4,"returnSlots":0},"@_approve_991":{"entryPoint":2573,"id":991,"parameterSlots":2,"returnSlots":0},"@_baseURI_428":{"entryPoint":4185,"id":428,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1112":{"entryPoint":4479,"id":1112,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1099":{"entryPoint":4491,"id":1099,"parameterSlots":4,"returnSlots":1},"@_exists_660":{"entryPoint":4414,"id":660,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_694":{"entryPoint":2758,"id":694,"parameterSlots":2,"returnSlots":1},"@_msgSender_1842":{"entryPoint":2565,"id":1842,"parameterSlots":0,"returnSlots":1},"@_ownerOf_642":{"entryPoint":3668,"id":642,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1037":{"entryPoint":2490,"id":1037,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_629":{"entryPoint":4093,"id":629,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1023":{"entryPoint":3729,"id":1023,"parameterSlots":3,"returnSlots":0},"@_transfer_967":{"entryPoint":2907,"id":967,"parameterSlots":3,"returnSlots":0},"@approve_471":{"entryPoint":1142,"id":471,"parameterSlots":2,"returnSlots":0},"@balanceOf_332":{"entryPoint":1683,"id":332,"parameterSlots":1,"returnSlots":1},"@getApproved_489":{"entryPoint":1072,"id":489,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_524":{"entryPoint":2236,"id":524,"parameterSlots":2,"returnSlots":1},"@isContract_1518":{"entryPoint":5221,"id":1518,"parameterSlots":1,"returnSlots":1},"@log10_3267":{"entryPoint":4882,"id":3267,"parameterSlots":1,"returnSlots":1},"@name_370":{"entryPoint":926,"id":370,"parameterSlots":0,"returnSlots":1},"@ownerOf_360":{"entryPoint":1549,"id":360,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_570":{"entryPoint":1517,"id":570,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_600":{"entryPoint":2034,"id":600,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_506":{"entryPoint":2012,"id":506,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2552":{"entryPoint":2384,"id":2552,"parameterSlots":1,"returnSlots":1},"@supportsInterface_308":{"entryPoint":700,"id":308,"parameterSlots":1,"returnSlots":1},"@symbol_380":{"entryPoint":1866,"id":380,"parameterSlots":0,"returnSlots":1},"@toString_1910":{"entryPoint":4208,"id":1910,"parameterSlots":1,"returnSlots":1},"@tokenURI_419":{"entryPoint":2132,"id":419,"parameterSlots":1,"returnSlots":1},"@transferFrom_551":{"entryPoint":1421,"id":551,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6415,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6133,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6481,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5674,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6658,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5940,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6527,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6154,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5876,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8381,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5695,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5790,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5421,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8227,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5550,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7521,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7189,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8085,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":7685,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":7831,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":7939,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7443,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7043,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6068,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7570,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5805,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8284,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5607,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7224,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8120,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7866,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7974,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7478,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7332,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7078,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6083,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6324,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5256,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6351,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8199,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5463,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8210,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5474,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7510,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5772,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5409,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5276,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5740,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5641,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6400,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5491,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6769,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6275,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x12":{"entryPoint":8152,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6722,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6228,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6218,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6223,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5271,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5266,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5533,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7110,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8006,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7606,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":7752,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":7898,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7364,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7256,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":6818,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":6964,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5832,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6110,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5320,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5651,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:23154:17","nodeType":"YulBlock","src":"0:23154:17","statements":[{"body":{"nativeSrc":"47:35:17","nodeType":"YulBlock","src":"47:35:17","statements":[{"nativeSrc":"57:19:17","nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:17","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:17","nodeType":"YulIdentifier","src":"67:5:17"},"nativeSrc":"67:9:17","nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:17","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:17","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nativeSrc":"177:28:17","nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:17","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:17","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:17","nodeType":"YulIdentifier","src":"187:6:17"},"nativeSrc":"187:12:17","nodeType":"YulFunctionCall","src":"187:12:17"},"nativeSrc":"187:12:17","nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:17","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nativeSrc":"300:28:17","nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:17","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:17","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:17","nodeType":"YulIdentifier","src":"310:6:17"},"nativeSrc":"310:12:17","nodeType":"YulFunctionCall","src":"310:12:17"},"nativeSrc":"310:12:17","nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:17","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nativeSrc":"378:105:17","nodeType":"YulBlock","src":"378:105:17","statements":[{"nativeSrc":"388:89:17","nodeType":"YulAssignment","src":"388:89:17","value":{"arguments":[{"name":"value","nativeSrc":"403:5:17","nodeType":"YulIdentifier","src":"403:5:17"},{"kind":"number","nativeSrc":"410:66:17","nodeType":"YulLiteral","src":"410:66:17","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:17","nodeType":"YulIdentifier","src":"399:3:17"},"nativeSrc":"399:78:17","nodeType":"YulFunctionCall","src":"399:78:17"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:17","nodeType":"YulIdentifier","src":"388:7:17"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:17","nodeType":"YulTypedName","src":"360:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:17","nodeType":"YulTypedName","src":"370:7:17","type":""}],"src":"334:149:17"},{"body":{"nativeSrc":"531:78:17","nodeType":"YulBlock","src":"531:78:17","statements":[{"body":{"nativeSrc":"587:16:17","nodeType":"YulBlock","src":"587:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:17","nodeType":"YulLiteral","src":"596:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:17","nodeType":"YulLiteral","src":"599:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:17","nodeType":"YulIdentifier","src":"589:6:17"},"nativeSrc":"589:12:17","nodeType":"YulFunctionCall","src":"589:12:17"},"nativeSrc":"589:12:17","nodeType":"YulExpressionStatement","src":"589:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:17","nodeType":"YulIdentifier","src":"554:5:17"},{"arguments":[{"name":"value","nativeSrc":"578:5:17","nodeType":"YulIdentifier","src":"578:5:17"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:17","nodeType":"YulIdentifier","src":"561:16:17"},"nativeSrc":"561:23:17","nodeType":"YulFunctionCall","src":"561:23:17"}],"functionName":{"name":"eq","nativeSrc":"551:2:17","nodeType":"YulIdentifier","src":"551:2:17"},"nativeSrc":"551:34:17","nodeType":"YulFunctionCall","src":"551:34:17"}],"functionName":{"name":"iszero","nativeSrc":"544:6:17","nodeType":"YulIdentifier","src":"544:6:17"},"nativeSrc":"544:42:17","nodeType":"YulFunctionCall","src":"544:42:17"},"nativeSrc":"541:62:17","nodeType":"YulIf","src":"541:62:17"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:17","nodeType":"YulTypedName","src":"524:5:17","type":""}],"src":"489:120:17"},{"body":{"nativeSrc":"666:86:17","nodeType":"YulBlock","src":"666:86:17","statements":[{"nativeSrc":"676:29:17","nodeType":"YulAssignment","src":"676:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:17","nodeType":"YulIdentifier","src":"698:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:17","nodeType":"YulIdentifier","src":"685:12:17"},"nativeSrc":"685:20:17","nodeType":"YulFunctionCall","src":"685:20:17"},"variableNames":[{"name":"value","nativeSrc":"676:5:17","nodeType":"YulIdentifier","src":"676:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:17","nodeType":"YulIdentifier","src":"740:5:17"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:17","nodeType":"YulIdentifier","src":"714:25:17"},"nativeSrc":"714:32:17","nodeType":"YulFunctionCall","src":"714:32:17"},"nativeSrc":"714:32:17","nodeType":"YulExpressionStatement","src":"714:32:17"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:17","nodeType":"YulTypedName","src":"644:6:17","type":""},{"name":"end","nativeSrc":"652:3:17","nodeType":"YulTypedName","src":"652:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:17","nodeType":"YulTypedName","src":"660:5:17","type":""}],"src":"615:137:17"},{"body":{"nativeSrc":"823:262:17","nodeType":"YulBlock","src":"823:262:17","statements":[{"body":{"nativeSrc":"869:83:17","nodeType":"YulBlock","src":"869:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:17","nodeType":"YulIdentifier","src":"871:77:17"},"nativeSrc":"871:79:17","nodeType":"YulFunctionCall","src":"871:79:17"},"nativeSrc":"871:79:17","nodeType":"YulExpressionStatement","src":"871:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:17","nodeType":"YulIdentifier","src":"844:7:17"},{"name":"headStart","nativeSrc":"853:9:17","nodeType":"YulIdentifier","src":"853:9:17"}],"functionName":{"name":"sub","nativeSrc":"840:3:17","nodeType":"YulIdentifier","src":"840:3:17"},"nativeSrc":"840:23:17","nodeType":"YulFunctionCall","src":"840:23:17"},{"kind":"number","nativeSrc":"865:2:17","nodeType":"YulLiteral","src":"865:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:17","nodeType":"YulIdentifier","src":"836:3:17"},"nativeSrc":"836:32:17","nodeType":"YulFunctionCall","src":"836:32:17"},"nativeSrc":"833:119:17","nodeType":"YulIf","src":"833:119:17"},{"nativeSrc":"962:116:17","nodeType":"YulBlock","src":"962:116:17","statements":[{"nativeSrc":"977:15:17","nodeType":"YulVariableDeclaration","src":"977:15:17","value":{"kind":"number","nativeSrc":"991:1:17","nodeType":"YulLiteral","src":"991:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:17","nodeType":"YulTypedName","src":"981:6:17","type":""}]},{"nativeSrc":"1006:62:17","nodeType":"YulAssignment","src":"1006:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:17","nodeType":"YulIdentifier","src":"1040:9:17"},{"name":"offset","nativeSrc":"1051:6:17","nodeType":"YulIdentifier","src":"1051:6:17"}],"functionName":{"name":"add","nativeSrc":"1036:3:17","nodeType":"YulIdentifier","src":"1036:3:17"},"nativeSrc":"1036:22:17","nodeType":"YulFunctionCall","src":"1036:22:17"},{"name":"dataEnd","nativeSrc":"1060:7:17","nodeType":"YulIdentifier","src":"1060:7:17"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:17","nodeType":"YulIdentifier","src":"1016:19:17"},"nativeSrc":"1016:52:17","nodeType":"YulFunctionCall","src":"1016:52:17"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:17","nodeType":"YulIdentifier","src":"1006:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:17","nodeType":"YulTypedName","src":"793:9:17","type":""},{"name":"dataEnd","nativeSrc":"804:7:17","nodeType":"YulTypedName","src":"804:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:17","nodeType":"YulTypedName","src":"816:6:17","type":""}],"src":"758:327:17"},{"body":{"nativeSrc":"1133:48:17","nodeType":"YulBlock","src":"1133:48:17","statements":[{"nativeSrc":"1143:32:17","nodeType":"YulAssignment","src":"1143:32:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:17","nodeType":"YulIdentifier","src":"1168:5:17"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:17","nodeType":"YulIdentifier","src":"1161:6:17"},"nativeSrc":"1161:13:17","nodeType":"YulFunctionCall","src":"1161:13:17"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:17","nodeType":"YulIdentifier","src":"1154:6:17"},"nativeSrc":"1154:21:17","nodeType":"YulFunctionCall","src":"1154:21:17"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:17","nodeType":"YulIdentifier","src":"1143:7:17"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:17","nodeType":"YulTypedName","src":"1115:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:17","nodeType":"YulTypedName","src":"1125:7:17","type":""}],"src":"1091:90:17"},{"body":{"nativeSrc":"1246:50:17","nodeType":"YulBlock","src":"1246:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:17","nodeType":"YulIdentifier","src":"1263:3:17"},{"arguments":[{"name":"value","nativeSrc":"1283:5:17","nodeType":"YulIdentifier","src":"1283:5:17"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:17","nodeType":"YulIdentifier","src":"1268:14:17"},"nativeSrc":"1268:21:17","nodeType":"YulFunctionCall","src":"1268:21:17"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:17","nodeType":"YulIdentifier","src":"1256:6:17"},"nativeSrc":"1256:34:17","nodeType":"YulFunctionCall","src":"1256:34:17"},"nativeSrc":"1256:34:17","nodeType":"YulExpressionStatement","src":"1256:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:17","nodeType":"YulTypedName","src":"1234:5:17","type":""},{"name":"pos","nativeSrc":"1241:3:17","nodeType":"YulTypedName","src":"1241:3:17","type":""}],"src":"1187:109:17"},{"body":{"nativeSrc":"1394:118:17","nodeType":"YulBlock","src":"1394:118:17","statements":[{"nativeSrc":"1404:26:17","nodeType":"YulAssignment","src":"1404:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:17","nodeType":"YulIdentifier","src":"1416:9:17"},{"kind":"number","nativeSrc":"1427:2:17","nodeType":"YulLiteral","src":"1427:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:17","nodeType":"YulIdentifier","src":"1412:3:17"},"nativeSrc":"1412:18:17","nodeType":"YulFunctionCall","src":"1412:18:17"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:17","nodeType":"YulIdentifier","src":"1404:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:17","nodeType":"YulIdentifier","src":"1478:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:17","nodeType":"YulIdentifier","src":"1491:9:17"},{"kind":"number","nativeSrc":"1502:1:17","nodeType":"YulLiteral","src":"1502:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:17","nodeType":"YulIdentifier","src":"1487:3:17"},"nativeSrc":"1487:17:17","nodeType":"YulFunctionCall","src":"1487:17:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:17","nodeType":"YulIdentifier","src":"1440:37:17"},"nativeSrc":"1440:65:17","nodeType":"YulFunctionCall","src":"1440:65:17"},"nativeSrc":"1440:65:17","nodeType":"YulExpressionStatement","src":"1440:65:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:17","nodeType":"YulTypedName","src":"1366:9:17","type":""},{"name":"value0","nativeSrc":"1378:6:17","nodeType":"YulTypedName","src":"1378:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:17","nodeType":"YulTypedName","src":"1389:4:17","type":""}],"src":"1302:210:17"},{"body":{"nativeSrc":"1577:40:17","nodeType":"YulBlock","src":"1577:40:17","statements":[{"nativeSrc":"1588:22:17","nodeType":"YulAssignment","src":"1588:22:17","value":{"arguments":[{"name":"value","nativeSrc":"1604:5:17","nodeType":"YulIdentifier","src":"1604:5:17"}],"functionName":{"name":"mload","nativeSrc":"1598:5:17","nodeType":"YulIdentifier","src":"1598:5:17"},"nativeSrc":"1598:12:17","nodeType":"YulFunctionCall","src":"1598:12:17"},"variableNames":[{"name":"length","nativeSrc":"1588:6:17","nodeType":"YulIdentifier","src":"1588:6:17"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1518:99:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1560:5:17","nodeType":"YulTypedName","src":"1560:5:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1570:6:17","nodeType":"YulTypedName","src":"1570:6:17","type":""}],"src":"1518:99:17"},{"body":{"nativeSrc":"1719:73:17","nodeType":"YulBlock","src":"1719:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1736:3:17","nodeType":"YulIdentifier","src":"1736:3:17"},{"name":"length","nativeSrc":"1741:6:17","nodeType":"YulIdentifier","src":"1741:6:17"}],"functionName":{"name":"mstore","nativeSrc":"1729:6:17","nodeType":"YulIdentifier","src":"1729:6:17"},"nativeSrc":"1729:19:17","nodeType":"YulFunctionCall","src":"1729:19:17"},"nativeSrc":"1729:19:17","nodeType":"YulExpressionStatement","src":"1729:19:17"},{"nativeSrc":"1757:29:17","nodeType":"YulAssignment","src":"1757:29:17","value":{"arguments":[{"name":"pos","nativeSrc":"1776:3:17","nodeType":"YulIdentifier","src":"1776:3:17"},{"kind":"number","nativeSrc":"1781:4:17","nodeType":"YulLiteral","src":"1781:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1772:3:17","nodeType":"YulIdentifier","src":"1772:3:17"},"nativeSrc":"1772:14:17","nodeType":"YulFunctionCall","src":"1772:14:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"1757:11:17","nodeType":"YulIdentifier","src":"1757:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1623:169:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:17","nodeType":"YulTypedName","src":"1691:3:17","type":""},{"name":"length","nativeSrc":"1696:6:17","nodeType":"YulTypedName","src":"1696:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1707:11:17","nodeType":"YulTypedName","src":"1707:11:17","type":""}],"src":"1623:169:17"},{"body":{"nativeSrc":"1860:186:17","nodeType":"YulBlock","src":"1860:186:17","statements":[{"nativeSrc":"1871:10:17","nodeType":"YulVariableDeclaration","src":"1871:10:17","value":{"kind":"number","nativeSrc":"1880:1:17","nodeType":"YulLiteral","src":"1880:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1875:1:17","nodeType":"YulTypedName","src":"1875:1:17","type":""}]},{"body":{"nativeSrc":"1940:63:17","nodeType":"YulBlock","src":"1940:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1965:3:17","nodeType":"YulIdentifier","src":"1965:3:17"},{"name":"i","nativeSrc":"1970:1:17","nodeType":"YulIdentifier","src":"1970:1:17"}],"functionName":{"name":"add","nativeSrc":"1961:3:17","nodeType":"YulIdentifier","src":"1961:3:17"},"nativeSrc":"1961:11:17","nodeType":"YulFunctionCall","src":"1961:11:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1984:3:17","nodeType":"YulIdentifier","src":"1984:3:17"},{"name":"i","nativeSrc":"1989:1:17","nodeType":"YulIdentifier","src":"1989:1:17"}],"functionName":{"name":"add","nativeSrc":"1980:3:17","nodeType":"YulIdentifier","src":"1980:3:17"},"nativeSrc":"1980:11:17","nodeType":"YulFunctionCall","src":"1980:11:17"}],"functionName":{"name":"mload","nativeSrc":"1974:5:17","nodeType":"YulIdentifier","src":"1974:5:17"},"nativeSrc":"1974:18:17","nodeType":"YulFunctionCall","src":"1974:18:17"}],"functionName":{"name":"mstore","nativeSrc":"1954:6:17","nodeType":"YulIdentifier","src":"1954:6:17"},"nativeSrc":"1954:39:17","nodeType":"YulFunctionCall","src":"1954:39:17"},"nativeSrc":"1954:39:17","nodeType":"YulExpressionStatement","src":"1954:39:17"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1901:1:17","nodeType":"YulIdentifier","src":"1901:1:17"},{"name":"length","nativeSrc":"1904:6:17","nodeType":"YulIdentifier","src":"1904:6:17"}],"functionName":{"name":"lt","nativeSrc":"1898:2:17","nodeType":"YulIdentifier","src":"1898:2:17"},"nativeSrc":"1898:13:17","nodeType":"YulFunctionCall","src":"1898:13:17"},"nativeSrc":"1890:113:17","nodeType":"YulForLoop","post":{"nativeSrc":"1912:19:17","nodeType":"YulBlock","src":"1912:19:17","statements":[{"nativeSrc":"1914:15:17","nodeType":"YulAssignment","src":"1914:15:17","value":{"arguments":[{"name":"i","nativeSrc":"1923:1:17","nodeType":"YulIdentifier","src":"1923:1:17"},{"kind":"number","nativeSrc":"1926:2:17","nodeType":"YulLiteral","src":"1926:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1919:3:17","nodeType":"YulIdentifier","src":"1919:3:17"},"nativeSrc":"1919:10:17","nodeType":"YulFunctionCall","src":"1919:10:17"},"variableNames":[{"name":"i","nativeSrc":"1914:1:17","nodeType":"YulIdentifier","src":"1914:1:17"}]}]},"pre":{"nativeSrc":"1894:3:17","nodeType":"YulBlock","src":"1894:3:17","statements":[]},"src":"1890:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2023:3:17","nodeType":"YulIdentifier","src":"2023:3:17"},{"name":"length","nativeSrc":"2028:6:17","nodeType":"YulIdentifier","src":"2028:6:17"}],"functionName":{"name":"add","nativeSrc":"2019:3:17","nodeType":"YulIdentifier","src":"2019:3:17"},"nativeSrc":"2019:16:17","nodeType":"YulFunctionCall","src":"2019:16:17"},{"kind":"number","nativeSrc":"2037:1:17","nodeType":"YulLiteral","src":"2037:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2012:6:17","nodeType":"YulIdentifier","src":"2012:6:17"},"nativeSrc":"2012:27:17","nodeType":"YulFunctionCall","src":"2012:27:17"},"nativeSrc":"2012:27:17","nodeType":"YulExpressionStatement","src":"2012:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1798:248:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1842:3:17","nodeType":"YulTypedName","src":"1842:3:17","type":""},{"name":"dst","nativeSrc":"1847:3:17","nodeType":"YulTypedName","src":"1847:3:17","type":""},{"name":"length","nativeSrc":"1852:6:17","nodeType":"YulTypedName","src":"1852:6:17","type":""}],"src":"1798:248:17"},{"body":{"nativeSrc":"2100:54:17","nodeType":"YulBlock","src":"2100:54:17","statements":[{"nativeSrc":"2110:38:17","nodeType":"YulAssignment","src":"2110:38:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2128:5:17","nodeType":"YulIdentifier","src":"2128:5:17"},{"kind":"number","nativeSrc":"2135:2:17","nodeType":"YulLiteral","src":"2135:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2124:3:17","nodeType":"YulIdentifier","src":"2124:3:17"},"nativeSrc":"2124:14:17","nodeType":"YulFunctionCall","src":"2124:14:17"},{"arguments":[{"kind":"number","nativeSrc":"2144:2:17","nodeType":"YulLiteral","src":"2144:2:17","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2140:3:17","nodeType":"YulIdentifier","src":"2140:3:17"},"nativeSrc":"2140:7:17","nodeType":"YulFunctionCall","src":"2140:7:17"}],"functionName":{"name":"and","nativeSrc":"2120:3:17","nodeType":"YulIdentifier","src":"2120:3:17"},"nativeSrc":"2120:28:17","nodeType":"YulFunctionCall","src":"2120:28:17"},"variableNames":[{"name":"result","nativeSrc":"2110:6:17","nodeType":"YulIdentifier","src":"2110:6:17"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"2052:102:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2083:5:17","nodeType":"YulTypedName","src":"2083:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2093:6:17","nodeType":"YulTypedName","src":"2093:6:17","type":""}],"src":"2052:102:17"},{"body":{"nativeSrc":"2252:285:17","nodeType":"YulBlock","src":"2252:285:17","statements":[{"nativeSrc":"2262:53:17","nodeType":"YulVariableDeclaration","src":"2262:53:17","value":{"arguments":[{"name":"value","nativeSrc":"2309:5:17","nodeType":"YulIdentifier","src":"2309:5:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"2276:32:17","nodeType":"YulIdentifier","src":"2276:32:17"},"nativeSrc":"2276:39:17","nodeType":"YulFunctionCall","src":"2276:39:17"},"variables":[{"name":"length","nativeSrc":"2266:6:17","nodeType":"YulTypedName","src":"2266:6:17","type":""}]},{"nativeSrc":"2324:78:17","nodeType":"YulAssignment","src":"2324:78:17","value":{"arguments":[{"name":"pos","nativeSrc":"2390:3:17","nodeType":"YulIdentifier","src":"2390:3:17"},{"name":"length","nativeSrc":"2395:6:17","nodeType":"YulIdentifier","src":"2395:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2331:58:17","nodeType":"YulIdentifier","src":"2331:58:17"},"nativeSrc":"2331:71:17","nodeType":"YulFunctionCall","src":"2331:71:17"},"variableNames":[{"name":"pos","nativeSrc":"2324:3:17","nodeType":"YulIdentifier","src":"2324:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2450:5:17","nodeType":"YulIdentifier","src":"2450:5:17"},{"kind":"number","nativeSrc":"2457:4:17","nodeType":"YulLiteral","src":"2457:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2446:3:17","nodeType":"YulIdentifier","src":"2446:3:17"},"nativeSrc":"2446:16:17","nodeType":"YulFunctionCall","src":"2446:16:17"},{"name":"pos","nativeSrc":"2464:3:17","nodeType":"YulIdentifier","src":"2464:3:17"},{"name":"length","nativeSrc":"2469:6:17","nodeType":"YulIdentifier","src":"2469:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2411:34:17","nodeType":"YulIdentifier","src":"2411:34:17"},"nativeSrc":"2411:65:17","nodeType":"YulFunctionCall","src":"2411:65:17"},"nativeSrc":"2411:65:17","nodeType":"YulExpressionStatement","src":"2411:65:17"},{"nativeSrc":"2485:46:17","nodeType":"YulAssignment","src":"2485:46:17","value":{"arguments":[{"name":"pos","nativeSrc":"2496:3:17","nodeType":"YulIdentifier","src":"2496:3:17"},{"arguments":[{"name":"length","nativeSrc":"2523:6:17","nodeType":"YulIdentifier","src":"2523:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2501:21:17","nodeType":"YulIdentifier","src":"2501:21:17"},"nativeSrc":"2501:29:17","nodeType":"YulFunctionCall","src":"2501:29:17"}],"functionName":{"name":"add","nativeSrc":"2492:3:17","nodeType":"YulIdentifier","src":"2492:3:17"},"nativeSrc":"2492:39:17","nodeType":"YulFunctionCall","src":"2492:39:17"},"variableNames":[{"name":"end","nativeSrc":"2485:3:17","nodeType":"YulIdentifier","src":"2485:3:17"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2160:377:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2233:5:17","nodeType":"YulTypedName","src":"2233:5:17","type":""},{"name":"pos","nativeSrc":"2240:3:17","nodeType":"YulTypedName","src":"2240:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2248:3:17","nodeType":"YulTypedName","src":"2248:3:17","type":""}],"src":"2160:377:17"},{"body":{"nativeSrc":"2661:195:17","nodeType":"YulBlock","src":"2661:195:17","statements":[{"nativeSrc":"2671:26:17","nodeType":"YulAssignment","src":"2671:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"2683:9:17","nodeType":"YulIdentifier","src":"2683:9:17"},{"kind":"number","nativeSrc":"2694:2:17","nodeType":"YulLiteral","src":"2694:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2679:3:17","nodeType":"YulIdentifier","src":"2679:3:17"},"nativeSrc":"2679:18:17","nodeType":"YulFunctionCall","src":"2679:18:17"},"variableNames":[{"name":"tail","nativeSrc":"2671:4:17","nodeType":"YulIdentifier","src":"2671:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2718:9:17","nodeType":"YulIdentifier","src":"2718:9:17"},{"kind":"number","nativeSrc":"2729:1:17","nodeType":"YulLiteral","src":"2729:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2714:3:17","nodeType":"YulIdentifier","src":"2714:3:17"},"nativeSrc":"2714:17:17","nodeType":"YulFunctionCall","src":"2714:17:17"},{"arguments":[{"name":"tail","nativeSrc":"2737:4:17","nodeType":"YulIdentifier","src":"2737:4:17"},{"name":"headStart","nativeSrc":"2743:9:17","nodeType":"YulIdentifier","src":"2743:9:17"}],"functionName":{"name":"sub","nativeSrc":"2733:3:17","nodeType":"YulIdentifier","src":"2733:3:17"},"nativeSrc":"2733:20:17","nodeType":"YulFunctionCall","src":"2733:20:17"}],"functionName":{"name":"mstore","nativeSrc":"2707:6:17","nodeType":"YulIdentifier","src":"2707:6:17"},"nativeSrc":"2707:47:17","nodeType":"YulFunctionCall","src":"2707:47:17"},"nativeSrc":"2707:47:17","nodeType":"YulExpressionStatement","src":"2707:47:17"},{"nativeSrc":"2763:86:17","nodeType":"YulAssignment","src":"2763:86:17","value":{"arguments":[{"name":"value0","nativeSrc":"2835:6:17","nodeType":"YulIdentifier","src":"2835:6:17"},{"name":"tail","nativeSrc":"2844:4:17","nodeType":"YulIdentifier","src":"2844:4:17"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2771:63:17","nodeType":"YulIdentifier","src":"2771:63:17"},"nativeSrc":"2771:78:17","nodeType":"YulFunctionCall","src":"2771:78:17"},"variableNames":[{"name":"tail","nativeSrc":"2763:4:17","nodeType":"YulIdentifier","src":"2763:4:17"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2543:313:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2633:9:17","nodeType":"YulTypedName","src":"2633:9:17","type":""},{"name":"value0","nativeSrc":"2645:6:17","nodeType":"YulTypedName","src":"2645:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2656:4:17","nodeType":"YulTypedName","src":"2656:4:17","type":""}],"src":"2543:313:17"},{"body":{"nativeSrc":"2907:32:17","nodeType":"YulBlock","src":"2907:32:17","statements":[{"nativeSrc":"2917:16:17","nodeType":"YulAssignment","src":"2917:16:17","value":{"name":"value","nativeSrc":"2928:5:17","nodeType":"YulIdentifier","src":"2928:5:17"},"variableNames":[{"name":"cleaned","nativeSrc":"2917:7:17","nodeType":"YulIdentifier","src":"2917:7:17"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2862:77:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2889:5:17","nodeType":"YulTypedName","src":"2889:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2899:7:17","nodeType":"YulTypedName","src":"2899:7:17","type":""}],"src":"2862:77:17"},{"body":{"nativeSrc":"2988:79:17","nodeType":"YulBlock","src":"2988:79:17","statements":[{"body":{"nativeSrc":"3045:16:17","nodeType":"YulBlock","src":"3045:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3054:1:17","nodeType":"YulLiteral","src":"3054:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"3057:1:17","nodeType":"YulLiteral","src":"3057:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3047:6:17","nodeType":"YulIdentifier","src":"3047:6:17"},"nativeSrc":"3047:12:17","nodeType":"YulFunctionCall","src":"3047:12:17"},"nativeSrc":"3047:12:17","nodeType":"YulExpressionStatement","src":"3047:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3011:5:17","nodeType":"YulIdentifier","src":"3011:5:17"},{"arguments":[{"name":"value","nativeSrc":"3036:5:17","nodeType":"YulIdentifier","src":"3036:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3018:17:17","nodeType":"YulIdentifier","src":"3018:17:17"},"nativeSrc":"3018:24:17","nodeType":"YulFunctionCall","src":"3018:24:17"}],"functionName":{"name":"eq","nativeSrc":"3008:2:17","nodeType":"YulIdentifier","src":"3008:2:17"},"nativeSrc":"3008:35:17","nodeType":"YulFunctionCall","src":"3008:35:17"}],"functionName":{"name":"iszero","nativeSrc":"3001:6:17","nodeType":"YulIdentifier","src":"3001:6:17"},"nativeSrc":"3001:43:17","nodeType":"YulFunctionCall","src":"3001:43:17"},"nativeSrc":"2998:63:17","nodeType":"YulIf","src":"2998:63:17"}]},"name":"validator_revert_t_uint256","nativeSrc":"2945:122:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2981:5:17","nodeType":"YulTypedName","src":"2981:5:17","type":""}],"src":"2945:122:17"},{"body":{"nativeSrc":"3125:87:17","nodeType":"YulBlock","src":"3125:87:17","statements":[{"nativeSrc":"3135:29:17","nodeType":"YulAssignment","src":"3135:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"3157:6:17","nodeType":"YulIdentifier","src":"3157:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"3144:12:17","nodeType":"YulIdentifier","src":"3144:12:17"},"nativeSrc":"3144:20:17","nodeType":"YulFunctionCall","src":"3144:20:17"},"variableNames":[{"name":"value","nativeSrc":"3135:5:17","nodeType":"YulIdentifier","src":"3135:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3200:5:17","nodeType":"YulIdentifier","src":"3200:5:17"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3173:26:17","nodeType":"YulIdentifier","src":"3173:26:17"},"nativeSrc":"3173:33:17","nodeType":"YulFunctionCall","src":"3173:33:17"},"nativeSrc":"3173:33:17","nodeType":"YulExpressionStatement","src":"3173:33:17"}]},"name":"abi_decode_t_uint256","nativeSrc":"3073:139:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3103:6:17","nodeType":"YulTypedName","src":"3103:6:17","type":""},{"name":"end","nativeSrc":"3111:3:17","nodeType":"YulTypedName","src":"3111:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3119:5:17","nodeType":"YulTypedName","src":"3119:5:17","type":""}],"src":"3073:139:17"},{"body":{"nativeSrc":"3284:263:17","nodeType":"YulBlock","src":"3284:263:17","statements":[{"body":{"nativeSrc":"3330:83:17","nodeType":"YulBlock","src":"3330:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3332:77:17","nodeType":"YulIdentifier","src":"3332:77:17"},"nativeSrc":"3332:79:17","nodeType":"YulFunctionCall","src":"3332:79:17"},"nativeSrc":"3332:79:17","nodeType":"YulExpressionStatement","src":"3332:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3305:7:17","nodeType":"YulIdentifier","src":"3305:7:17"},{"name":"headStart","nativeSrc":"3314:9:17","nodeType":"YulIdentifier","src":"3314:9:17"}],"functionName":{"name":"sub","nativeSrc":"3301:3:17","nodeType":"YulIdentifier","src":"3301:3:17"},"nativeSrc":"3301:23:17","nodeType":"YulFunctionCall","src":"3301:23:17"},{"kind":"number","nativeSrc":"3326:2:17","nodeType":"YulLiteral","src":"3326:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3297:3:17","nodeType":"YulIdentifier","src":"3297:3:17"},"nativeSrc":"3297:32:17","nodeType":"YulFunctionCall","src":"3297:32:17"},"nativeSrc":"3294:119:17","nodeType":"YulIf","src":"3294:119:17"},{"nativeSrc":"3423:117:17","nodeType":"YulBlock","src":"3423:117:17","statements":[{"nativeSrc":"3438:15:17","nodeType":"YulVariableDeclaration","src":"3438:15:17","value":{"kind":"number","nativeSrc":"3452:1:17","nodeType":"YulLiteral","src":"3452:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3442:6:17","nodeType":"YulTypedName","src":"3442:6:17","type":""}]},{"nativeSrc":"3467:63:17","nodeType":"YulAssignment","src":"3467:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3502:9:17","nodeType":"YulIdentifier","src":"3502:9:17"},{"name":"offset","nativeSrc":"3513:6:17","nodeType":"YulIdentifier","src":"3513:6:17"}],"functionName":{"name":"add","nativeSrc":"3498:3:17","nodeType":"YulIdentifier","src":"3498:3:17"},"nativeSrc":"3498:22:17","nodeType":"YulFunctionCall","src":"3498:22:17"},{"name":"dataEnd","nativeSrc":"3522:7:17","nodeType":"YulIdentifier","src":"3522:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3477:20:17","nodeType":"YulIdentifier","src":"3477:20:17"},"nativeSrc":"3477:53:17","nodeType":"YulFunctionCall","src":"3477:53:17"},"variableNames":[{"name":"value0","nativeSrc":"3467:6:17","nodeType":"YulIdentifier","src":"3467:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3218:329:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3254:9:17","nodeType":"YulTypedName","src":"3254:9:17","type":""},{"name":"dataEnd","nativeSrc":"3265:7:17","nodeType":"YulTypedName","src":"3265:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3277:6:17","nodeType":"YulTypedName","src":"3277:6:17","type":""}],"src":"3218:329:17"},{"body":{"nativeSrc":"3598:81:17","nodeType":"YulBlock","src":"3598:81:17","statements":[{"nativeSrc":"3608:65:17","nodeType":"YulAssignment","src":"3608:65:17","value":{"arguments":[{"name":"value","nativeSrc":"3623:5:17","nodeType":"YulIdentifier","src":"3623:5:17"},{"kind":"number","nativeSrc":"3630:42:17","nodeType":"YulLiteral","src":"3630:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3619:3:17","nodeType":"YulIdentifier","src":"3619:3:17"},"nativeSrc":"3619:54:17","nodeType":"YulFunctionCall","src":"3619:54:17"},"variableNames":[{"name":"cleaned","nativeSrc":"3608:7:17","nodeType":"YulIdentifier","src":"3608:7:17"}]}]},"name":"cleanup_t_uint160","nativeSrc":"3553:126:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:17","nodeType":"YulTypedName","src":"3580:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3590:7:17","nodeType":"YulTypedName","src":"3590:7:17","type":""}],"src":"3553:126:17"},{"body":{"nativeSrc":"3730:51:17","nodeType":"YulBlock","src":"3730:51:17","statements":[{"nativeSrc":"3740:35:17","nodeType":"YulAssignment","src":"3740:35:17","value":{"arguments":[{"name":"value","nativeSrc":"3769:5:17","nodeType":"YulIdentifier","src":"3769:5:17"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3751:17:17","nodeType":"YulIdentifier","src":"3751:17:17"},"nativeSrc":"3751:24:17","nodeType":"YulFunctionCall","src":"3751:24:17"},"variableNames":[{"name":"cleaned","nativeSrc":"3740:7:17","nodeType":"YulIdentifier","src":"3740:7:17"}]}]},"name":"cleanup_t_address","nativeSrc":"3685:96:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3712:5:17","nodeType":"YulTypedName","src":"3712:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3722:7:17","nodeType":"YulTypedName","src":"3722:7:17","type":""}],"src":"3685:96:17"},{"body":{"nativeSrc":"3852:53:17","nodeType":"YulBlock","src":"3852:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3869:3:17","nodeType":"YulIdentifier","src":"3869:3:17"},{"arguments":[{"name":"value","nativeSrc":"3892:5:17","nodeType":"YulIdentifier","src":"3892:5:17"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"3874:17:17","nodeType":"YulIdentifier","src":"3874:17:17"},"nativeSrc":"3874:24:17","nodeType":"YulFunctionCall","src":"3874:24:17"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:17","nodeType":"YulIdentifier","src":"3862:6:17"},"nativeSrc":"3862:37:17","nodeType":"YulFunctionCall","src":"3862:37:17"},"nativeSrc":"3862:37:17","nodeType":"YulExpressionStatement","src":"3862:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"3787:118:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3840:5:17","nodeType":"YulTypedName","src":"3840:5:17","type":""},{"name":"pos","nativeSrc":"3847:3:17","nodeType":"YulTypedName","src":"3847:3:17","type":""}],"src":"3787:118:17"},{"body":{"nativeSrc":"4009:124:17","nodeType":"YulBlock","src":"4009:124:17","statements":[{"nativeSrc":"4019:26:17","nodeType":"YulAssignment","src":"4019:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"4031:9:17","nodeType":"YulIdentifier","src":"4031:9:17"},{"kind":"number","nativeSrc":"4042:2:17","nodeType":"YulLiteral","src":"4042:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4027:3:17","nodeType":"YulIdentifier","src":"4027:3:17"},"nativeSrc":"4027:18:17","nodeType":"YulFunctionCall","src":"4027:18:17"},"variableNames":[{"name":"tail","nativeSrc":"4019:4:17","nodeType":"YulIdentifier","src":"4019:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4099:6:17","nodeType":"YulIdentifier","src":"4099:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"4112:9:17","nodeType":"YulIdentifier","src":"4112:9:17"},{"kind":"number","nativeSrc":"4123:1:17","nodeType":"YulLiteral","src":"4123:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4108:3:17","nodeType":"YulIdentifier","src":"4108:3:17"},"nativeSrc":"4108:17:17","nodeType":"YulFunctionCall","src":"4108:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4055:43:17","nodeType":"YulIdentifier","src":"4055:43:17"},"nativeSrc":"4055:71:17","nodeType":"YulFunctionCall","src":"4055:71:17"},"nativeSrc":"4055:71:17","nodeType":"YulExpressionStatement","src":"4055:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3911:222:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3981:9:17","nodeType":"YulTypedName","src":"3981:9:17","type":""},{"name":"value0","nativeSrc":"3993:6:17","nodeType":"YulTypedName","src":"3993:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4004:4:17","nodeType":"YulTypedName","src":"4004:4:17","type":""}],"src":"3911:222:17"},{"body":{"nativeSrc":"4182:79:17","nodeType":"YulBlock","src":"4182:79:17","statements":[{"body":{"nativeSrc":"4239:16:17","nodeType":"YulBlock","src":"4239:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4248:1:17","nodeType":"YulLiteral","src":"4248:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"4251:1:17","nodeType":"YulLiteral","src":"4251:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4241:6:17","nodeType":"YulIdentifier","src":"4241:6:17"},"nativeSrc":"4241:12:17","nodeType":"YulFunctionCall","src":"4241:12:17"},"nativeSrc":"4241:12:17","nodeType":"YulExpressionStatement","src":"4241:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4205:5:17","nodeType":"YulIdentifier","src":"4205:5:17"},{"arguments":[{"name":"value","nativeSrc":"4230:5:17","nodeType":"YulIdentifier","src":"4230:5:17"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4212:17:17","nodeType":"YulIdentifier","src":"4212:17:17"},"nativeSrc":"4212:24:17","nodeType":"YulFunctionCall","src":"4212:24:17"}],"functionName":{"name":"eq","nativeSrc":"4202:2:17","nodeType":"YulIdentifier","src":"4202:2:17"},"nativeSrc":"4202:35:17","nodeType":"YulFunctionCall","src":"4202:35:17"}],"functionName":{"name":"iszero","nativeSrc":"4195:6:17","nodeType":"YulIdentifier","src":"4195:6:17"},"nativeSrc":"4195:43:17","nodeType":"YulFunctionCall","src":"4195:43:17"},"nativeSrc":"4192:63:17","nodeType":"YulIf","src":"4192:63:17"}]},"name":"validator_revert_t_address","nativeSrc":"4139:122:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4175:5:17","nodeType":"YulTypedName","src":"4175:5:17","type":""}],"src":"4139:122:17"},{"body":{"nativeSrc":"4319:87:17","nodeType":"YulBlock","src":"4319:87:17","statements":[{"nativeSrc":"4329:29:17","nodeType":"YulAssignment","src":"4329:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"4351:6:17","nodeType":"YulIdentifier","src":"4351:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"4338:12:17","nodeType":"YulIdentifier","src":"4338:12:17"},"nativeSrc":"4338:20:17","nodeType":"YulFunctionCall","src":"4338:20:17"},"variableNames":[{"name":"value","nativeSrc":"4329:5:17","nodeType":"YulIdentifier","src":"4329:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4394:5:17","nodeType":"YulIdentifier","src":"4394:5:17"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4367:26:17","nodeType":"YulIdentifier","src":"4367:26:17"},"nativeSrc":"4367:33:17","nodeType":"YulFunctionCall","src":"4367:33:17"},"nativeSrc":"4367:33:17","nodeType":"YulExpressionStatement","src":"4367:33:17"}]},"name":"abi_decode_t_address","nativeSrc":"4267:139:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4297:6:17","nodeType":"YulTypedName","src":"4297:6:17","type":""},{"name":"end","nativeSrc":"4305:3:17","nodeType":"YulTypedName","src":"4305:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4313:5:17","nodeType":"YulTypedName","src":"4313:5:17","type":""}],"src":"4267:139:17"},{"body":{"nativeSrc":"4495:391:17","nodeType":"YulBlock","src":"4495:391:17","statements":[{"body":{"nativeSrc":"4541:83:17","nodeType":"YulBlock","src":"4541:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4543:77:17","nodeType":"YulIdentifier","src":"4543:77:17"},"nativeSrc":"4543:79:17","nodeType":"YulFunctionCall","src":"4543:79:17"},"nativeSrc":"4543:79:17","nodeType":"YulExpressionStatement","src":"4543:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4516:7:17","nodeType":"YulIdentifier","src":"4516:7:17"},{"name":"headStart","nativeSrc":"4525:9:17","nodeType":"YulIdentifier","src":"4525:9:17"}],"functionName":{"name":"sub","nativeSrc":"4512:3:17","nodeType":"YulIdentifier","src":"4512:3:17"},"nativeSrc":"4512:23:17","nodeType":"YulFunctionCall","src":"4512:23:17"},{"kind":"number","nativeSrc":"4537:2:17","nodeType":"YulLiteral","src":"4537:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4508:3:17","nodeType":"YulIdentifier","src":"4508:3:17"},"nativeSrc":"4508:32:17","nodeType":"YulFunctionCall","src":"4508:32:17"},"nativeSrc":"4505:119:17","nodeType":"YulIf","src":"4505:119:17"},{"nativeSrc":"4634:117:17","nodeType":"YulBlock","src":"4634:117:17","statements":[{"nativeSrc":"4649:15:17","nodeType":"YulVariableDeclaration","src":"4649:15:17","value":{"kind":"number","nativeSrc":"4663:1:17","nodeType":"YulLiteral","src":"4663:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4653:6:17","nodeType":"YulTypedName","src":"4653:6:17","type":""}]},{"nativeSrc":"4678:63:17","nodeType":"YulAssignment","src":"4678:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4713:9:17","nodeType":"YulIdentifier","src":"4713:9:17"},{"name":"offset","nativeSrc":"4724:6:17","nodeType":"YulIdentifier","src":"4724:6:17"}],"functionName":{"name":"add","nativeSrc":"4709:3:17","nodeType":"YulIdentifier","src":"4709:3:17"},"nativeSrc":"4709:22:17","nodeType":"YulFunctionCall","src":"4709:22:17"},{"name":"dataEnd","nativeSrc":"4733:7:17","nodeType":"YulIdentifier","src":"4733:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4688:20:17","nodeType":"YulIdentifier","src":"4688:20:17"},"nativeSrc":"4688:53:17","nodeType":"YulFunctionCall","src":"4688:53:17"},"variableNames":[{"name":"value0","nativeSrc":"4678:6:17","nodeType":"YulIdentifier","src":"4678:6:17"}]}]},{"nativeSrc":"4761:118:17","nodeType":"YulBlock","src":"4761:118:17","statements":[{"nativeSrc":"4776:16:17","nodeType":"YulVariableDeclaration","src":"4776:16:17","value":{"kind":"number","nativeSrc":"4790:2:17","nodeType":"YulLiteral","src":"4790:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4780:6:17","nodeType":"YulTypedName","src":"4780:6:17","type":""}]},{"nativeSrc":"4806:63:17","nodeType":"YulAssignment","src":"4806:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4841:9:17","nodeType":"YulIdentifier","src":"4841:9:17"},{"name":"offset","nativeSrc":"4852:6:17","nodeType":"YulIdentifier","src":"4852:6:17"}],"functionName":{"name":"add","nativeSrc":"4837:3:17","nodeType":"YulIdentifier","src":"4837:3:17"},"nativeSrc":"4837:22:17","nodeType":"YulFunctionCall","src":"4837:22:17"},{"name":"dataEnd","nativeSrc":"4861:7:17","nodeType":"YulIdentifier","src":"4861:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4816:20:17","nodeType":"YulIdentifier","src":"4816:20:17"},"nativeSrc":"4816:53:17","nodeType":"YulFunctionCall","src":"4816:53:17"},"variableNames":[{"name":"value1","nativeSrc":"4806:6:17","nodeType":"YulIdentifier","src":"4806:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4412:474:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4457:9:17","nodeType":"YulTypedName","src":"4457:9:17","type":""},{"name":"dataEnd","nativeSrc":"4468:7:17","nodeType":"YulTypedName","src":"4468:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4480:6:17","nodeType":"YulTypedName","src":"4480:6:17","type":""},{"name":"value1","nativeSrc":"4488:6:17","nodeType":"YulTypedName","src":"4488:6:17","type":""}],"src":"4412:474:17"},{"body":{"nativeSrc":"4992:519:17","nodeType":"YulBlock","src":"4992:519:17","statements":[{"body":{"nativeSrc":"5038:83:17","nodeType":"YulBlock","src":"5038:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5040:77:17","nodeType":"YulIdentifier","src":"5040:77:17"},"nativeSrc":"5040:79:17","nodeType":"YulFunctionCall","src":"5040:79:17"},"nativeSrc":"5040:79:17","nodeType":"YulExpressionStatement","src":"5040:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5013:7:17","nodeType":"YulIdentifier","src":"5013:7:17"},{"name":"headStart","nativeSrc":"5022:9:17","nodeType":"YulIdentifier","src":"5022:9:17"}],"functionName":{"name":"sub","nativeSrc":"5009:3:17","nodeType":"YulIdentifier","src":"5009:3:17"},"nativeSrc":"5009:23:17","nodeType":"YulFunctionCall","src":"5009:23:17"},{"kind":"number","nativeSrc":"5034:2:17","nodeType":"YulLiteral","src":"5034:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5005:3:17","nodeType":"YulIdentifier","src":"5005:3:17"},"nativeSrc":"5005:32:17","nodeType":"YulFunctionCall","src":"5005:32:17"},"nativeSrc":"5002:119:17","nodeType":"YulIf","src":"5002:119:17"},{"nativeSrc":"5131:117:17","nodeType":"YulBlock","src":"5131:117:17","statements":[{"nativeSrc":"5146:15:17","nodeType":"YulVariableDeclaration","src":"5146:15:17","value":{"kind":"number","nativeSrc":"5160:1:17","nodeType":"YulLiteral","src":"5160:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5150:6:17","nodeType":"YulTypedName","src":"5150:6:17","type":""}]},{"nativeSrc":"5175:63:17","nodeType":"YulAssignment","src":"5175:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5210:9:17","nodeType":"YulIdentifier","src":"5210:9:17"},{"name":"offset","nativeSrc":"5221:6:17","nodeType":"YulIdentifier","src":"5221:6:17"}],"functionName":{"name":"add","nativeSrc":"5206:3:17","nodeType":"YulIdentifier","src":"5206:3:17"},"nativeSrc":"5206:22:17","nodeType":"YulFunctionCall","src":"5206:22:17"},{"name":"dataEnd","nativeSrc":"5230:7:17","nodeType":"YulIdentifier","src":"5230:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5185:20:17","nodeType":"YulIdentifier","src":"5185:20:17"},"nativeSrc":"5185:53:17","nodeType":"YulFunctionCall","src":"5185:53:17"},"variableNames":[{"name":"value0","nativeSrc":"5175:6:17","nodeType":"YulIdentifier","src":"5175:6:17"}]}]},{"nativeSrc":"5258:118:17","nodeType":"YulBlock","src":"5258:118:17","statements":[{"nativeSrc":"5273:16:17","nodeType":"YulVariableDeclaration","src":"5273:16:17","value":{"kind":"number","nativeSrc":"5287:2:17","nodeType":"YulLiteral","src":"5287:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5277:6:17","nodeType":"YulTypedName","src":"5277:6:17","type":""}]},{"nativeSrc":"5303:63:17","nodeType":"YulAssignment","src":"5303:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5338:9:17","nodeType":"YulIdentifier","src":"5338:9:17"},{"name":"offset","nativeSrc":"5349:6:17","nodeType":"YulIdentifier","src":"5349:6:17"}],"functionName":{"name":"add","nativeSrc":"5334:3:17","nodeType":"YulIdentifier","src":"5334:3:17"},"nativeSrc":"5334:22:17","nodeType":"YulFunctionCall","src":"5334:22:17"},{"name":"dataEnd","nativeSrc":"5358:7:17","nodeType":"YulIdentifier","src":"5358:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5313:20:17","nodeType":"YulIdentifier","src":"5313:20:17"},"nativeSrc":"5313:53:17","nodeType":"YulFunctionCall","src":"5313:53:17"},"variableNames":[{"name":"value1","nativeSrc":"5303:6:17","nodeType":"YulIdentifier","src":"5303:6:17"}]}]},{"nativeSrc":"5386:118:17","nodeType":"YulBlock","src":"5386:118:17","statements":[{"nativeSrc":"5401:16:17","nodeType":"YulVariableDeclaration","src":"5401:16:17","value":{"kind":"number","nativeSrc":"5415:2:17","nodeType":"YulLiteral","src":"5415:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"5405:6:17","nodeType":"YulTypedName","src":"5405:6:17","type":""}]},{"nativeSrc":"5431:63:17","nodeType":"YulAssignment","src":"5431:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5466:9:17","nodeType":"YulIdentifier","src":"5466:9:17"},{"name":"offset","nativeSrc":"5477:6:17","nodeType":"YulIdentifier","src":"5477:6:17"}],"functionName":{"name":"add","nativeSrc":"5462:3:17","nodeType":"YulIdentifier","src":"5462:3:17"},"nativeSrc":"5462:22:17","nodeType":"YulFunctionCall","src":"5462:22:17"},{"name":"dataEnd","nativeSrc":"5486:7:17","nodeType":"YulIdentifier","src":"5486:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5441:20:17","nodeType":"YulIdentifier","src":"5441:20:17"},"nativeSrc":"5441:53:17","nodeType":"YulFunctionCall","src":"5441:53:17"},"variableNames":[{"name":"value2","nativeSrc":"5431:6:17","nodeType":"YulIdentifier","src":"5431:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"4892:619:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4946:9:17","nodeType":"YulTypedName","src":"4946:9:17","type":""},{"name":"dataEnd","nativeSrc":"4957:7:17","nodeType":"YulTypedName","src":"4957:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4969:6:17","nodeType":"YulTypedName","src":"4969:6:17","type":""},{"name":"value1","nativeSrc":"4977:6:17","nodeType":"YulTypedName","src":"4977:6:17","type":""},{"name":"value2","nativeSrc":"4985:6:17","nodeType":"YulTypedName","src":"4985:6:17","type":""}],"src":"4892:619:17"},{"body":{"nativeSrc":"5583:263:17","nodeType":"YulBlock","src":"5583:263:17","statements":[{"body":{"nativeSrc":"5629:83:17","nodeType":"YulBlock","src":"5629:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5631:77:17","nodeType":"YulIdentifier","src":"5631:77:17"},"nativeSrc":"5631:79:17","nodeType":"YulFunctionCall","src":"5631:79:17"},"nativeSrc":"5631:79:17","nodeType":"YulExpressionStatement","src":"5631:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5604:7:17","nodeType":"YulIdentifier","src":"5604:7:17"},{"name":"headStart","nativeSrc":"5613:9:17","nodeType":"YulIdentifier","src":"5613:9:17"}],"functionName":{"name":"sub","nativeSrc":"5600:3:17","nodeType":"YulIdentifier","src":"5600:3:17"},"nativeSrc":"5600:23:17","nodeType":"YulFunctionCall","src":"5600:23:17"},{"kind":"number","nativeSrc":"5625:2:17","nodeType":"YulLiteral","src":"5625:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5596:3:17","nodeType":"YulIdentifier","src":"5596:3:17"},"nativeSrc":"5596:32:17","nodeType":"YulFunctionCall","src":"5596:32:17"},"nativeSrc":"5593:119:17","nodeType":"YulIf","src":"5593:119:17"},{"nativeSrc":"5722:117:17","nodeType":"YulBlock","src":"5722:117:17","statements":[{"nativeSrc":"5737:15:17","nodeType":"YulVariableDeclaration","src":"5737:15:17","value":{"kind":"number","nativeSrc":"5751:1:17","nodeType":"YulLiteral","src":"5751:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5741:6:17","nodeType":"YulTypedName","src":"5741:6:17","type":""}]},{"nativeSrc":"5766:63:17","nodeType":"YulAssignment","src":"5766:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5801:9:17","nodeType":"YulIdentifier","src":"5801:9:17"},{"name":"offset","nativeSrc":"5812:6:17","nodeType":"YulIdentifier","src":"5812:6:17"}],"functionName":{"name":"add","nativeSrc":"5797:3:17","nodeType":"YulIdentifier","src":"5797:3:17"},"nativeSrc":"5797:22:17","nodeType":"YulFunctionCall","src":"5797:22:17"},{"name":"dataEnd","nativeSrc":"5821:7:17","nodeType":"YulIdentifier","src":"5821:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5776:20:17","nodeType":"YulIdentifier","src":"5776:20:17"},"nativeSrc":"5776:53:17","nodeType":"YulFunctionCall","src":"5776:53:17"},"variableNames":[{"name":"value0","nativeSrc":"5766:6:17","nodeType":"YulIdentifier","src":"5766:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"5517:329:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5553:9:17","nodeType":"YulTypedName","src":"5553:9:17","type":""},{"name":"dataEnd","nativeSrc":"5564:7:17","nodeType":"YulTypedName","src":"5564:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5576:6:17","nodeType":"YulTypedName","src":"5576:6:17","type":""}],"src":"5517:329:17"},{"body":{"nativeSrc":"5917:53:17","nodeType":"YulBlock","src":"5917:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5934:3:17","nodeType":"YulIdentifier","src":"5934:3:17"},{"arguments":[{"name":"value","nativeSrc":"5957:5:17","nodeType":"YulIdentifier","src":"5957:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5939:17:17","nodeType":"YulIdentifier","src":"5939:17:17"},"nativeSrc":"5939:24:17","nodeType":"YulFunctionCall","src":"5939:24:17"}],"functionName":{"name":"mstore","nativeSrc":"5927:6:17","nodeType":"YulIdentifier","src":"5927:6:17"},"nativeSrc":"5927:37:17","nodeType":"YulFunctionCall","src":"5927:37:17"},"nativeSrc":"5927:37:17","nodeType":"YulExpressionStatement","src":"5927:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"5852:118:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5905:5:17","nodeType":"YulTypedName","src":"5905:5:17","type":""},{"name":"pos","nativeSrc":"5912:3:17","nodeType":"YulTypedName","src":"5912:3:17","type":""}],"src":"5852:118:17"},{"body":{"nativeSrc":"6074:124:17","nodeType":"YulBlock","src":"6074:124:17","statements":[{"nativeSrc":"6084:26:17","nodeType":"YulAssignment","src":"6084:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"6096:9:17","nodeType":"YulIdentifier","src":"6096:9:17"},{"kind":"number","nativeSrc":"6107:2:17","nodeType":"YulLiteral","src":"6107:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6092:3:17","nodeType":"YulIdentifier","src":"6092:3:17"},"nativeSrc":"6092:18:17","nodeType":"YulFunctionCall","src":"6092:18:17"},"variableNames":[{"name":"tail","nativeSrc":"6084:4:17","nodeType":"YulIdentifier","src":"6084:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"6164:6:17","nodeType":"YulIdentifier","src":"6164:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"6177:9:17","nodeType":"YulIdentifier","src":"6177:9:17"},{"kind":"number","nativeSrc":"6188:1:17","nodeType":"YulLiteral","src":"6188:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6173:3:17","nodeType":"YulIdentifier","src":"6173:3:17"},"nativeSrc":"6173:17:17","nodeType":"YulFunctionCall","src":"6173:17:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"6120:43:17","nodeType":"YulIdentifier","src":"6120:43:17"},"nativeSrc":"6120:71:17","nodeType":"YulFunctionCall","src":"6120:71:17"},"nativeSrc":"6120:71:17","nodeType":"YulExpressionStatement","src":"6120:71:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5976:222:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6046:9:17","nodeType":"YulTypedName","src":"6046:9:17","type":""},{"name":"value0","nativeSrc":"6058:6:17","nodeType":"YulTypedName","src":"6058:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6069:4:17","nodeType":"YulTypedName","src":"6069:4:17","type":""}],"src":"5976:222:17"},{"body":{"nativeSrc":"6244:76:17","nodeType":"YulBlock","src":"6244:76:17","statements":[{"body":{"nativeSrc":"6298:16:17","nodeType":"YulBlock","src":"6298:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6307:1:17","nodeType":"YulLiteral","src":"6307:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"6310:1:17","nodeType":"YulLiteral","src":"6310:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6300:6:17","nodeType":"YulIdentifier","src":"6300:6:17"},"nativeSrc":"6300:12:17","nodeType":"YulFunctionCall","src":"6300:12:17"},"nativeSrc":"6300:12:17","nodeType":"YulExpressionStatement","src":"6300:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6267:5:17","nodeType":"YulIdentifier","src":"6267:5:17"},{"arguments":[{"name":"value","nativeSrc":"6289:5:17","nodeType":"YulIdentifier","src":"6289:5:17"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"6274:14:17","nodeType":"YulIdentifier","src":"6274:14:17"},"nativeSrc":"6274:21:17","nodeType":"YulFunctionCall","src":"6274:21:17"}],"functionName":{"name":"eq","nativeSrc":"6264:2:17","nodeType":"YulIdentifier","src":"6264:2:17"},"nativeSrc":"6264:32:17","nodeType":"YulFunctionCall","src":"6264:32:17"}],"functionName":{"name":"iszero","nativeSrc":"6257:6:17","nodeType":"YulIdentifier","src":"6257:6:17"},"nativeSrc":"6257:40:17","nodeType":"YulFunctionCall","src":"6257:40:17"},"nativeSrc":"6254:60:17","nodeType":"YulIf","src":"6254:60:17"}]},"name":"validator_revert_t_bool","nativeSrc":"6204:116:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6237:5:17","nodeType":"YulTypedName","src":"6237:5:17","type":""}],"src":"6204:116:17"},{"body":{"nativeSrc":"6375:84:17","nodeType":"YulBlock","src":"6375:84:17","statements":[{"nativeSrc":"6385:29:17","nodeType":"YulAssignment","src":"6385:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"6407:6:17","nodeType":"YulIdentifier","src":"6407:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"6394:12:17","nodeType":"YulIdentifier","src":"6394:12:17"},"nativeSrc":"6394:20:17","nodeType":"YulFunctionCall","src":"6394:20:17"},"variableNames":[{"name":"value","nativeSrc":"6385:5:17","nodeType":"YulIdentifier","src":"6385:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6447:5:17","nodeType":"YulIdentifier","src":"6447:5:17"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"6423:23:17","nodeType":"YulIdentifier","src":"6423:23:17"},"nativeSrc":"6423:30:17","nodeType":"YulFunctionCall","src":"6423:30:17"},"nativeSrc":"6423:30:17","nodeType":"YulExpressionStatement","src":"6423:30:17"}]},"name":"abi_decode_t_bool","nativeSrc":"6326:133:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6353:6:17","nodeType":"YulTypedName","src":"6353:6:17","type":""},{"name":"end","nativeSrc":"6361:3:17","nodeType":"YulTypedName","src":"6361:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6369:5:17","nodeType":"YulTypedName","src":"6369:5:17","type":""}],"src":"6326:133:17"},{"body":{"nativeSrc":"6545:388:17","nodeType":"YulBlock","src":"6545:388:17","statements":[{"body":{"nativeSrc":"6591:83:17","nodeType":"YulBlock","src":"6591:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"6593:77:17","nodeType":"YulIdentifier","src":"6593:77:17"},"nativeSrc":"6593:79:17","nodeType":"YulFunctionCall","src":"6593:79:17"},"nativeSrc":"6593:79:17","nodeType":"YulExpressionStatement","src":"6593:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6566:7:17","nodeType":"YulIdentifier","src":"6566:7:17"},{"name":"headStart","nativeSrc":"6575:9:17","nodeType":"YulIdentifier","src":"6575:9:17"}],"functionName":{"name":"sub","nativeSrc":"6562:3:17","nodeType":"YulIdentifier","src":"6562:3:17"},"nativeSrc":"6562:23:17","nodeType":"YulFunctionCall","src":"6562:23:17"},{"kind":"number","nativeSrc":"6587:2:17","nodeType":"YulLiteral","src":"6587:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6558:3:17","nodeType":"YulIdentifier","src":"6558:3:17"},"nativeSrc":"6558:32:17","nodeType":"YulFunctionCall","src":"6558:32:17"},"nativeSrc":"6555:119:17","nodeType":"YulIf","src":"6555:119:17"},{"nativeSrc":"6684:117:17","nodeType":"YulBlock","src":"6684:117:17","statements":[{"nativeSrc":"6699:15:17","nodeType":"YulVariableDeclaration","src":"6699:15:17","value":{"kind":"number","nativeSrc":"6713:1:17","nodeType":"YulLiteral","src":"6713:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"6703:6:17","nodeType":"YulTypedName","src":"6703:6:17","type":""}]},{"nativeSrc":"6728:63:17","nodeType":"YulAssignment","src":"6728:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6763:9:17","nodeType":"YulIdentifier","src":"6763:9:17"},{"name":"offset","nativeSrc":"6774:6:17","nodeType":"YulIdentifier","src":"6774:6:17"}],"functionName":{"name":"add","nativeSrc":"6759:3:17","nodeType":"YulIdentifier","src":"6759:3:17"},"nativeSrc":"6759:22:17","nodeType":"YulFunctionCall","src":"6759:22:17"},{"name":"dataEnd","nativeSrc":"6783:7:17","nodeType":"YulIdentifier","src":"6783:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6738:20:17","nodeType":"YulIdentifier","src":"6738:20:17"},"nativeSrc":"6738:53:17","nodeType":"YulFunctionCall","src":"6738:53:17"},"variableNames":[{"name":"value0","nativeSrc":"6728:6:17","nodeType":"YulIdentifier","src":"6728:6:17"}]}]},{"nativeSrc":"6811:115:17","nodeType":"YulBlock","src":"6811:115:17","statements":[{"nativeSrc":"6826:16:17","nodeType":"YulVariableDeclaration","src":"6826:16:17","value":{"kind":"number","nativeSrc":"6840:2:17","nodeType":"YulLiteral","src":"6840:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"6830:6:17","nodeType":"YulTypedName","src":"6830:6:17","type":""}]},{"nativeSrc":"6856:60:17","nodeType":"YulAssignment","src":"6856:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6888:9:17","nodeType":"YulIdentifier","src":"6888:9:17"},{"name":"offset","nativeSrc":"6899:6:17","nodeType":"YulIdentifier","src":"6899:6:17"}],"functionName":{"name":"add","nativeSrc":"6884:3:17","nodeType":"YulIdentifier","src":"6884:3:17"},"nativeSrc":"6884:22:17","nodeType":"YulFunctionCall","src":"6884:22:17"},{"name":"dataEnd","nativeSrc":"6908:7:17","nodeType":"YulIdentifier","src":"6908:7:17"}],"functionName":{"name":"abi_decode_t_bool","nativeSrc":"6866:17:17","nodeType":"YulIdentifier","src":"6866:17:17"},"nativeSrc":"6866:50:17","nodeType":"YulFunctionCall","src":"6866:50:17"},"variableNames":[{"name":"value1","nativeSrc":"6856:6:17","nodeType":"YulIdentifier","src":"6856:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"6465:468:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6507:9:17","nodeType":"YulTypedName","src":"6507:9:17","type":""},{"name":"dataEnd","nativeSrc":"6518:7:17","nodeType":"YulTypedName","src":"6518:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6530:6:17","nodeType":"YulTypedName","src":"6530:6:17","type":""},{"name":"value1","nativeSrc":"6538:6:17","nodeType":"YulTypedName","src":"6538:6:17","type":""}],"src":"6465:468:17"},{"body":{"nativeSrc":"7028:28:17","nodeType":"YulBlock","src":"7028:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7045:1:17","nodeType":"YulLiteral","src":"7045:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"7048:1:17","nodeType":"YulLiteral","src":"7048:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7038:6:17","nodeType":"YulIdentifier","src":"7038:6:17"},"nativeSrc":"7038:12:17","nodeType":"YulFunctionCall","src":"7038:12:17"},"nativeSrc":"7038:12:17","nodeType":"YulExpressionStatement","src":"7038:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"6939:117:17","nodeType":"YulFunctionDefinition","src":"6939:117:17"},{"body":{"nativeSrc":"7151:28:17","nodeType":"YulBlock","src":"7151:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7168:1:17","nodeType":"YulLiteral","src":"7168:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"7171:1:17","nodeType":"YulLiteral","src":"7171:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7161:6:17","nodeType":"YulIdentifier","src":"7161:6:17"},"nativeSrc":"7161:12:17","nodeType":"YulFunctionCall","src":"7161:12:17"},"nativeSrc":"7161:12:17","nodeType":"YulExpressionStatement","src":"7161:12:17"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"7062:117:17","nodeType":"YulFunctionDefinition","src":"7062:117:17"},{"body":{"nativeSrc":"7213:152:17","nodeType":"YulBlock","src":"7213:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7230:1:17","nodeType":"YulLiteral","src":"7230:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"7233:77:17","nodeType":"YulLiteral","src":"7233:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7223:6:17","nodeType":"YulIdentifier","src":"7223:6:17"},"nativeSrc":"7223:88:17","nodeType":"YulFunctionCall","src":"7223:88:17"},"nativeSrc":"7223:88:17","nodeType":"YulExpressionStatement","src":"7223:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7327:1:17","nodeType":"YulLiteral","src":"7327:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"7330:4:17","nodeType":"YulLiteral","src":"7330:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"7320:6:17","nodeType":"YulIdentifier","src":"7320:6:17"},"nativeSrc":"7320:15:17","nodeType":"YulFunctionCall","src":"7320:15:17"},"nativeSrc":"7320:15:17","nodeType":"YulExpressionStatement","src":"7320:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7351:1:17","nodeType":"YulLiteral","src":"7351:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"7354:4:17","nodeType":"YulLiteral","src":"7354:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7344:6:17","nodeType":"YulIdentifier","src":"7344:6:17"},"nativeSrc":"7344:15:17","nodeType":"YulFunctionCall","src":"7344:15:17"},"nativeSrc":"7344:15:17","nodeType":"YulExpressionStatement","src":"7344:15:17"}]},"name":"panic_error_0x41","nativeSrc":"7185:180:17","nodeType":"YulFunctionDefinition","src":"7185:180:17"},{"body":{"nativeSrc":"7414:238:17","nodeType":"YulBlock","src":"7414:238:17","statements":[{"nativeSrc":"7424:58:17","nodeType":"YulVariableDeclaration","src":"7424:58:17","value":{"arguments":[{"name":"memPtr","nativeSrc":"7446:6:17","nodeType":"YulIdentifier","src":"7446:6:17"},{"arguments":[{"name":"size","nativeSrc":"7476:4:17","nodeType":"YulIdentifier","src":"7476:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"7454:21:17","nodeType":"YulIdentifier","src":"7454:21:17"},"nativeSrc":"7454:27:17","nodeType":"YulFunctionCall","src":"7454:27:17"}],"functionName":{"name":"add","nativeSrc":"7442:3:17","nodeType":"YulIdentifier","src":"7442:3:17"},"nativeSrc":"7442:40:17","nodeType":"YulFunctionCall","src":"7442:40:17"},"variables":[{"name":"newFreePtr","nativeSrc":"7428:10:17","nodeType":"YulTypedName","src":"7428:10:17","type":""}]},{"body":{"nativeSrc":"7593:22:17","nodeType":"YulBlock","src":"7593:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7595:16:17","nodeType":"YulIdentifier","src":"7595:16:17"},"nativeSrc":"7595:18:17","nodeType":"YulFunctionCall","src":"7595:18:17"},"nativeSrc":"7595:18:17","nodeType":"YulExpressionStatement","src":"7595:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"7536:10:17","nodeType":"YulIdentifier","src":"7536:10:17"},{"kind":"number","nativeSrc":"7548:18:17","nodeType":"YulLiteral","src":"7548:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7533:2:17","nodeType":"YulIdentifier","src":"7533:2:17"},"nativeSrc":"7533:34:17","nodeType":"YulFunctionCall","src":"7533:34:17"},{"arguments":[{"name":"newFreePtr","nativeSrc":"7572:10:17","nodeType":"YulIdentifier","src":"7572:10:17"},{"name":"memPtr","nativeSrc":"7584:6:17","nodeType":"YulIdentifier","src":"7584:6:17"}],"functionName":{"name":"lt","nativeSrc":"7569:2:17","nodeType":"YulIdentifier","src":"7569:2:17"},"nativeSrc":"7569:22:17","nodeType":"YulFunctionCall","src":"7569:22:17"}],"functionName":{"name":"or","nativeSrc":"7530:2:17","nodeType":"YulIdentifier","src":"7530:2:17"},"nativeSrc":"7530:62:17","nodeType":"YulFunctionCall","src":"7530:62:17"},"nativeSrc":"7527:88:17","nodeType":"YulIf","src":"7527:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7631:2:17","nodeType":"YulLiteral","src":"7631:2:17","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"7635:10:17","nodeType":"YulIdentifier","src":"7635:10:17"}],"functionName":{"name":"mstore","nativeSrc":"7624:6:17","nodeType":"YulIdentifier","src":"7624:6:17"},"nativeSrc":"7624:22:17","nodeType":"YulFunctionCall","src":"7624:22:17"},"nativeSrc":"7624:22:17","nodeType":"YulExpressionStatement","src":"7624:22:17"}]},"name":"finalize_allocation","nativeSrc":"7371:281:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"7400:6:17","nodeType":"YulTypedName","src":"7400:6:17","type":""},{"name":"size","nativeSrc":"7408:4:17","nodeType":"YulTypedName","src":"7408:4:17","type":""}],"src":"7371:281:17"},{"body":{"nativeSrc":"7699:88:17","nodeType":"YulBlock","src":"7699:88:17","statements":[{"nativeSrc":"7709:30:17","nodeType":"YulAssignment","src":"7709:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"7719:18:17","nodeType":"YulIdentifier","src":"7719:18:17"},"nativeSrc":"7719:20:17","nodeType":"YulFunctionCall","src":"7719:20:17"},"variableNames":[{"name":"memPtr","nativeSrc":"7709:6:17","nodeType":"YulIdentifier","src":"7709:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"7768:6:17","nodeType":"YulIdentifier","src":"7768:6:17"},{"name":"size","nativeSrc":"7776:4:17","nodeType":"YulIdentifier","src":"7776:4:17"}],"functionName":{"name":"finalize_allocation","nativeSrc":"7748:19:17","nodeType":"YulIdentifier","src":"7748:19:17"},"nativeSrc":"7748:33:17","nodeType":"YulFunctionCall","src":"7748:33:17"},"nativeSrc":"7748:33:17","nodeType":"YulExpressionStatement","src":"7748:33:17"}]},"name":"allocate_memory","nativeSrc":"7658:129:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"7683:4:17","nodeType":"YulTypedName","src":"7683:4:17","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"7692:6:17","nodeType":"YulTypedName","src":"7692:6:17","type":""}],"src":"7658:129:17"},{"body":{"nativeSrc":"7859:241:17","nodeType":"YulBlock","src":"7859:241:17","statements":[{"body":{"nativeSrc":"7964:22:17","nodeType":"YulBlock","src":"7964:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7966:16:17","nodeType":"YulIdentifier","src":"7966:16:17"},"nativeSrc":"7966:18:17","nodeType":"YulFunctionCall","src":"7966:18:17"},"nativeSrc":"7966:18:17","nodeType":"YulExpressionStatement","src":"7966:18:17"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7936:6:17","nodeType":"YulIdentifier","src":"7936:6:17"},{"kind":"number","nativeSrc":"7944:18:17","nodeType":"YulLiteral","src":"7944:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7933:2:17","nodeType":"YulIdentifier","src":"7933:2:17"},"nativeSrc":"7933:30:17","nodeType":"YulFunctionCall","src":"7933:30:17"},"nativeSrc":"7930:56:17","nodeType":"YulIf","src":"7930:56:17"},{"nativeSrc":"7996:37:17","nodeType":"YulAssignment","src":"7996:37:17","value":{"arguments":[{"name":"length","nativeSrc":"8026:6:17","nodeType":"YulIdentifier","src":"8026:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8004:21:17","nodeType":"YulIdentifier","src":"8004:21:17"},"nativeSrc":"8004:29:17","nodeType":"YulFunctionCall","src":"8004:29:17"},"variableNames":[{"name":"size","nativeSrc":"7996:4:17","nodeType":"YulIdentifier","src":"7996:4:17"}]},{"nativeSrc":"8070:23:17","nodeType":"YulAssignment","src":"8070:23:17","value":{"arguments":[{"name":"size","nativeSrc":"8082:4:17","nodeType":"YulIdentifier","src":"8082:4:17"},{"kind":"number","nativeSrc":"8088:4:17","nodeType":"YulLiteral","src":"8088:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8078:3:17","nodeType":"YulIdentifier","src":"8078:3:17"},"nativeSrc":"8078:15:17","nodeType":"YulFunctionCall","src":"8078:15:17"},"variableNames":[{"name":"size","nativeSrc":"8070:4:17","nodeType":"YulIdentifier","src":"8070:4:17"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"7793:307:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"7843:6:17","nodeType":"YulTypedName","src":"7843:6:17","type":""}],"returnVariables":[{"name":"size","nativeSrc":"7854:4:17","nodeType":"YulTypedName","src":"7854:4:17","type":""}],"src":"7793:307:17"},{"body":{"nativeSrc":"8170:84:17","nodeType":"YulBlock","src":"8170:84:17","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"8194:3:17","nodeType":"YulIdentifier","src":"8194:3:17"},{"name":"src","nativeSrc":"8199:3:17","nodeType":"YulIdentifier","src":"8199:3:17"},{"name":"length","nativeSrc":"8204:6:17","nodeType":"YulIdentifier","src":"8204:6:17"}],"functionName":{"name":"calldatacopy","nativeSrc":"8181:12:17","nodeType":"YulIdentifier","src":"8181:12:17"},"nativeSrc":"8181:30:17","nodeType":"YulFunctionCall","src":"8181:30:17"},"nativeSrc":"8181:30:17","nodeType":"YulExpressionStatement","src":"8181:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"8231:3:17","nodeType":"YulIdentifier","src":"8231:3:17"},{"name":"length","nativeSrc":"8236:6:17","nodeType":"YulIdentifier","src":"8236:6:17"}],"functionName":{"name":"add","nativeSrc":"8227:3:17","nodeType":"YulIdentifier","src":"8227:3:17"},"nativeSrc":"8227:16:17","nodeType":"YulFunctionCall","src":"8227:16:17"},{"kind":"number","nativeSrc":"8245:1:17","nodeType":"YulLiteral","src":"8245:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"8220:6:17","nodeType":"YulIdentifier","src":"8220:6:17"},"nativeSrc":"8220:27:17","nodeType":"YulFunctionCall","src":"8220:27:17"},"nativeSrc":"8220:27:17","nodeType":"YulExpressionStatement","src":"8220:27:17"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"8106:148:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8152:3:17","nodeType":"YulTypedName","src":"8152:3:17","type":""},{"name":"dst","nativeSrc":"8157:3:17","nodeType":"YulTypedName","src":"8157:3:17","type":""},{"name":"length","nativeSrc":"8162:6:17","nodeType":"YulTypedName","src":"8162:6:17","type":""}],"src":"8106:148:17"},{"body":{"nativeSrc":"8343:340:17","nodeType":"YulBlock","src":"8343:340:17","statements":[{"nativeSrc":"8353:74:17","nodeType":"YulAssignment","src":"8353:74:17","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"8419:6:17","nodeType":"YulIdentifier","src":"8419:6:17"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"8378:40:17","nodeType":"YulIdentifier","src":"8378:40:17"},"nativeSrc":"8378:48:17","nodeType":"YulFunctionCall","src":"8378:48:17"}],"functionName":{"name":"allocate_memory","nativeSrc":"8362:15:17","nodeType":"YulIdentifier","src":"8362:15:17"},"nativeSrc":"8362:65:17","nodeType":"YulFunctionCall","src":"8362:65:17"},"variableNames":[{"name":"array","nativeSrc":"8353:5:17","nodeType":"YulIdentifier","src":"8353:5:17"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"8443:5:17","nodeType":"YulIdentifier","src":"8443:5:17"},{"name":"length","nativeSrc":"8450:6:17","nodeType":"YulIdentifier","src":"8450:6:17"}],"functionName":{"name":"mstore","nativeSrc":"8436:6:17","nodeType":"YulIdentifier","src":"8436:6:17"},"nativeSrc":"8436:21:17","nodeType":"YulFunctionCall","src":"8436:21:17"},"nativeSrc":"8436:21:17","nodeType":"YulExpressionStatement","src":"8436:21:17"},{"nativeSrc":"8466:27:17","nodeType":"YulVariableDeclaration","src":"8466:27:17","value":{"arguments":[{"name":"array","nativeSrc":"8481:5:17","nodeType":"YulIdentifier","src":"8481:5:17"},{"kind":"number","nativeSrc":"8488:4:17","nodeType":"YulLiteral","src":"8488:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8477:3:17","nodeType":"YulIdentifier","src":"8477:3:17"},"nativeSrc":"8477:16:17","nodeType":"YulFunctionCall","src":"8477:16:17"},"variables":[{"name":"dst","nativeSrc":"8470:3:17","nodeType":"YulTypedName","src":"8470:3:17","type":""}]},{"body":{"nativeSrc":"8531:83:17","nodeType":"YulBlock","src":"8531:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"8533:77:17","nodeType":"YulIdentifier","src":"8533:77:17"},"nativeSrc":"8533:79:17","nodeType":"YulFunctionCall","src":"8533:79:17"},"nativeSrc":"8533:79:17","nodeType":"YulExpressionStatement","src":"8533:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8512:3:17","nodeType":"YulIdentifier","src":"8512:3:17"},{"name":"length","nativeSrc":"8517:6:17","nodeType":"YulIdentifier","src":"8517:6:17"}],"functionName":{"name":"add","nativeSrc":"8508:3:17","nodeType":"YulIdentifier","src":"8508:3:17"},"nativeSrc":"8508:16:17","nodeType":"YulFunctionCall","src":"8508:16:17"},{"name":"end","nativeSrc":"8526:3:17","nodeType":"YulIdentifier","src":"8526:3:17"}],"functionName":{"name":"gt","nativeSrc":"8505:2:17","nodeType":"YulIdentifier","src":"8505:2:17"},"nativeSrc":"8505:25:17","nodeType":"YulFunctionCall","src":"8505:25:17"},"nativeSrc":"8502:112:17","nodeType":"YulIf","src":"8502:112:17"},{"expression":{"arguments":[{"name":"src","nativeSrc":"8660:3:17","nodeType":"YulIdentifier","src":"8660:3:17"},{"name":"dst","nativeSrc":"8665:3:17","nodeType":"YulIdentifier","src":"8665:3:17"},{"name":"length","nativeSrc":"8670:6:17","nodeType":"YulIdentifier","src":"8670:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"8623:36:17","nodeType":"YulIdentifier","src":"8623:36:17"},"nativeSrc":"8623:54:17","nodeType":"YulFunctionCall","src":"8623:54:17"},"nativeSrc":"8623:54:17","nodeType":"YulExpressionStatement","src":"8623:54:17"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"8260:423:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8316:3:17","nodeType":"YulTypedName","src":"8316:3:17","type":""},{"name":"length","nativeSrc":"8321:6:17","nodeType":"YulTypedName","src":"8321:6:17","type":""},{"name":"end","nativeSrc":"8329:3:17","nodeType":"YulTypedName","src":"8329:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8337:5:17","nodeType":"YulTypedName","src":"8337:5:17","type":""}],"src":"8260:423:17"},{"body":{"nativeSrc":"8763:277:17","nodeType":"YulBlock","src":"8763:277:17","statements":[{"body":{"nativeSrc":"8812:83:17","nodeType":"YulBlock","src":"8812:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"8814:77:17","nodeType":"YulIdentifier","src":"8814:77:17"},"nativeSrc":"8814:79:17","nodeType":"YulFunctionCall","src":"8814:79:17"},"nativeSrc":"8814:79:17","nodeType":"YulExpressionStatement","src":"8814:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8791:6:17","nodeType":"YulIdentifier","src":"8791:6:17"},{"kind":"number","nativeSrc":"8799:4:17","nodeType":"YulLiteral","src":"8799:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8787:3:17","nodeType":"YulIdentifier","src":"8787:3:17"},"nativeSrc":"8787:17:17","nodeType":"YulFunctionCall","src":"8787:17:17"},{"name":"end","nativeSrc":"8806:3:17","nodeType":"YulIdentifier","src":"8806:3:17"}],"functionName":{"name":"slt","nativeSrc":"8783:3:17","nodeType":"YulIdentifier","src":"8783:3:17"},"nativeSrc":"8783:27:17","nodeType":"YulFunctionCall","src":"8783:27:17"}],"functionName":{"name":"iszero","nativeSrc":"8776:6:17","nodeType":"YulIdentifier","src":"8776:6:17"},"nativeSrc":"8776:35:17","nodeType":"YulFunctionCall","src":"8776:35:17"},"nativeSrc":"8773:122:17","nodeType":"YulIf","src":"8773:122:17"},{"nativeSrc":"8904:34:17","nodeType":"YulVariableDeclaration","src":"8904:34:17","value":{"arguments":[{"name":"offset","nativeSrc":"8931:6:17","nodeType":"YulIdentifier","src":"8931:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"8918:12:17","nodeType":"YulIdentifier","src":"8918:12:17"},"nativeSrc":"8918:20:17","nodeType":"YulFunctionCall","src":"8918:20:17"},"variables":[{"name":"length","nativeSrc":"8908:6:17","nodeType":"YulTypedName","src":"8908:6:17","type":""}]},{"nativeSrc":"8947:87:17","nodeType":"YulAssignment","src":"8947:87:17","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"9007:6:17","nodeType":"YulIdentifier","src":"9007:6:17"},{"kind":"number","nativeSrc":"9015:4:17","nodeType":"YulLiteral","src":"9015:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9003:3:17","nodeType":"YulIdentifier","src":"9003:3:17"},"nativeSrc":"9003:17:17","nodeType":"YulFunctionCall","src":"9003:17:17"},{"name":"length","nativeSrc":"9022:6:17","nodeType":"YulIdentifier","src":"9022:6:17"},{"name":"end","nativeSrc":"9030:3:17","nodeType":"YulIdentifier","src":"9030:3:17"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"8956:46:17","nodeType":"YulIdentifier","src":"8956:46:17"},"nativeSrc":"8956:78:17","nodeType":"YulFunctionCall","src":"8956:78:17"},"variableNames":[{"name":"array","nativeSrc":"8947:5:17","nodeType":"YulIdentifier","src":"8947:5:17"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"8702:338:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8741:6:17","nodeType":"YulTypedName","src":"8741:6:17","type":""},{"name":"end","nativeSrc":"8749:3:17","nodeType":"YulTypedName","src":"8749:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8757:5:17","nodeType":"YulTypedName","src":"8757:5:17","type":""}],"src":"8702:338:17"},{"body":{"nativeSrc":"9172:817:17","nodeType":"YulBlock","src":"9172:817:17","statements":[{"body":{"nativeSrc":"9219:83:17","nodeType":"YulBlock","src":"9219:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"9221:77:17","nodeType":"YulIdentifier","src":"9221:77:17"},"nativeSrc":"9221:79:17","nodeType":"YulFunctionCall","src":"9221:79:17"},"nativeSrc":"9221:79:17","nodeType":"YulExpressionStatement","src":"9221:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9193:7:17","nodeType":"YulIdentifier","src":"9193:7:17"},{"name":"headStart","nativeSrc":"9202:9:17","nodeType":"YulIdentifier","src":"9202:9:17"}],"functionName":{"name":"sub","nativeSrc":"9189:3:17","nodeType":"YulIdentifier","src":"9189:3:17"},"nativeSrc":"9189:23:17","nodeType":"YulFunctionCall","src":"9189:23:17"},{"kind":"number","nativeSrc":"9214:3:17","nodeType":"YulLiteral","src":"9214:3:17","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9185:3:17","nodeType":"YulIdentifier","src":"9185:3:17"},"nativeSrc":"9185:33:17","nodeType":"YulFunctionCall","src":"9185:33:17"},"nativeSrc":"9182:120:17","nodeType":"YulIf","src":"9182:120:17"},{"nativeSrc":"9312:117:17","nodeType":"YulBlock","src":"9312:117:17","statements":[{"nativeSrc":"9327:15:17","nodeType":"YulVariableDeclaration","src":"9327:15:17","value":{"kind":"number","nativeSrc":"9341:1:17","nodeType":"YulLiteral","src":"9341:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"9331:6:17","nodeType":"YulTypedName","src":"9331:6:17","type":""}]},{"nativeSrc":"9356:63:17","nodeType":"YulAssignment","src":"9356:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9391:9:17","nodeType":"YulIdentifier","src":"9391:9:17"},{"name":"offset","nativeSrc":"9402:6:17","nodeType":"YulIdentifier","src":"9402:6:17"}],"functionName":{"name":"add","nativeSrc":"9387:3:17","nodeType":"YulIdentifier","src":"9387:3:17"},"nativeSrc":"9387:22:17","nodeType":"YulFunctionCall","src":"9387:22:17"},{"name":"dataEnd","nativeSrc":"9411:7:17","nodeType":"YulIdentifier","src":"9411:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9366:20:17","nodeType":"YulIdentifier","src":"9366:20:17"},"nativeSrc":"9366:53:17","nodeType":"YulFunctionCall","src":"9366:53:17"},"variableNames":[{"name":"value0","nativeSrc":"9356:6:17","nodeType":"YulIdentifier","src":"9356:6:17"}]}]},{"nativeSrc":"9439:118:17","nodeType":"YulBlock","src":"9439:118:17","statements":[{"nativeSrc":"9454:16:17","nodeType":"YulVariableDeclaration","src":"9454:16:17","value":{"kind":"number","nativeSrc":"9468:2:17","nodeType":"YulLiteral","src":"9468:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"9458:6:17","nodeType":"YulTypedName","src":"9458:6:17","type":""}]},{"nativeSrc":"9484:63:17","nodeType":"YulAssignment","src":"9484:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9519:9:17","nodeType":"YulIdentifier","src":"9519:9:17"},{"name":"offset","nativeSrc":"9530:6:17","nodeType":"YulIdentifier","src":"9530:6:17"}],"functionName":{"name":"add","nativeSrc":"9515:3:17","nodeType":"YulIdentifier","src":"9515:3:17"},"nativeSrc":"9515:22:17","nodeType":"YulFunctionCall","src":"9515:22:17"},{"name":"dataEnd","nativeSrc":"9539:7:17","nodeType":"YulIdentifier","src":"9539:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9494:20:17","nodeType":"YulIdentifier","src":"9494:20:17"},"nativeSrc":"9494:53:17","nodeType":"YulFunctionCall","src":"9494:53:17"},"variableNames":[{"name":"value1","nativeSrc":"9484:6:17","nodeType":"YulIdentifier","src":"9484:6:17"}]}]},{"nativeSrc":"9567:118:17","nodeType":"YulBlock","src":"9567:118:17","statements":[{"nativeSrc":"9582:16:17","nodeType":"YulVariableDeclaration","src":"9582:16:17","value":{"kind":"number","nativeSrc":"9596:2:17","nodeType":"YulLiteral","src":"9596:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"9586:6:17","nodeType":"YulTypedName","src":"9586:6:17","type":""}]},{"nativeSrc":"9612:63:17","nodeType":"YulAssignment","src":"9612:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9647:9:17","nodeType":"YulIdentifier","src":"9647:9:17"},{"name":"offset","nativeSrc":"9658:6:17","nodeType":"YulIdentifier","src":"9658:6:17"}],"functionName":{"name":"add","nativeSrc":"9643:3:17","nodeType":"YulIdentifier","src":"9643:3:17"},"nativeSrc":"9643:22:17","nodeType":"YulFunctionCall","src":"9643:22:17"},{"name":"dataEnd","nativeSrc":"9667:7:17","nodeType":"YulIdentifier","src":"9667:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"9622:20:17","nodeType":"YulIdentifier","src":"9622:20:17"},"nativeSrc":"9622:53:17","nodeType":"YulFunctionCall","src":"9622:53:17"},"variableNames":[{"name":"value2","nativeSrc":"9612:6:17","nodeType":"YulIdentifier","src":"9612:6:17"}]}]},{"nativeSrc":"9695:287:17","nodeType":"YulBlock","src":"9695:287:17","statements":[{"nativeSrc":"9710:46:17","nodeType":"YulVariableDeclaration","src":"9710:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9741:9:17","nodeType":"YulIdentifier","src":"9741:9:17"},{"kind":"number","nativeSrc":"9752:2:17","nodeType":"YulLiteral","src":"9752:2:17","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9737:3:17","nodeType":"YulIdentifier","src":"9737:3:17"},"nativeSrc":"9737:18:17","nodeType":"YulFunctionCall","src":"9737:18:17"}],"functionName":{"name":"calldataload","nativeSrc":"9724:12:17","nodeType":"YulIdentifier","src":"9724:12:17"},"nativeSrc":"9724:32:17","nodeType":"YulFunctionCall","src":"9724:32:17"},"variables":[{"name":"offset","nativeSrc":"9714:6:17","nodeType":"YulTypedName","src":"9714:6:17","type":""}]},{"body":{"nativeSrc":"9803:83:17","nodeType":"YulBlock","src":"9803:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"9805:77:17","nodeType":"YulIdentifier","src":"9805:77:17"},"nativeSrc":"9805:79:17","nodeType":"YulFunctionCall","src":"9805:79:17"},"nativeSrc":"9805:79:17","nodeType":"YulExpressionStatement","src":"9805:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9775:6:17","nodeType":"YulIdentifier","src":"9775:6:17"},{"kind":"number","nativeSrc":"9783:18:17","nodeType":"YulLiteral","src":"9783:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9772:2:17","nodeType":"YulIdentifier","src":"9772:2:17"},"nativeSrc":"9772:30:17","nodeType":"YulFunctionCall","src":"9772:30:17"},"nativeSrc":"9769:117:17","nodeType":"YulIf","src":"9769:117:17"},{"nativeSrc":"9900:72:17","nodeType":"YulAssignment","src":"9900:72:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9944:9:17","nodeType":"YulIdentifier","src":"9944:9:17"},{"name":"offset","nativeSrc":"9955:6:17","nodeType":"YulIdentifier","src":"9955:6:17"}],"functionName":{"name":"add","nativeSrc":"9940:3:17","nodeType":"YulIdentifier","src":"9940:3:17"},"nativeSrc":"9940:22:17","nodeType":"YulFunctionCall","src":"9940:22:17"},{"name":"dataEnd","nativeSrc":"9964:7:17","nodeType":"YulIdentifier","src":"9964:7:17"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"9910:29:17","nodeType":"YulIdentifier","src":"9910:29:17"},"nativeSrc":"9910:62:17","nodeType":"YulFunctionCall","src":"9910:62:17"},"variableNames":[{"name":"value3","nativeSrc":"9900:6:17","nodeType":"YulIdentifier","src":"9900:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"9046:943:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9118:9:17","nodeType":"YulTypedName","src":"9118:9:17","type":""},{"name":"dataEnd","nativeSrc":"9129:7:17","nodeType":"YulTypedName","src":"9129:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9141:6:17","nodeType":"YulTypedName","src":"9141:6:17","type":""},{"name":"value1","nativeSrc":"9149:6:17","nodeType":"YulTypedName","src":"9149:6:17","type":""},{"name":"value2","nativeSrc":"9157:6:17","nodeType":"YulTypedName","src":"9157:6:17","type":""},{"name":"value3","nativeSrc":"9165:6:17","nodeType":"YulTypedName","src":"9165:6:17","type":""}],"src":"9046:943:17"},{"body":{"nativeSrc":"10078:391:17","nodeType":"YulBlock","src":"10078:391:17","statements":[{"body":{"nativeSrc":"10124:83:17","nodeType":"YulBlock","src":"10124:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"10126:77:17","nodeType":"YulIdentifier","src":"10126:77:17"},"nativeSrc":"10126:79:17","nodeType":"YulFunctionCall","src":"10126:79:17"},"nativeSrc":"10126:79:17","nodeType":"YulExpressionStatement","src":"10126:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10099:7:17","nodeType":"YulIdentifier","src":"10099:7:17"},{"name":"headStart","nativeSrc":"10108:9:17","nodeType":"YulIdentifier","src":"10108:9:17"}],"functionName":{"name":"sub","nativeSrc":"10095:3:17","nodeType":"YulIdentifier","src":"10095:3:17"},"nativeSrc":"10095:23:17","nodeType":"YulFunctionCall","src":"10095:23:17"},{"kind":"number","nativeSrc":"10120:2:17","nodeType":"YulLiteral","src":"10120:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10091:3:17","nodeType":"YulIdentifier","src":"10091:3:17"},"nativeSrc":"10091:32:17","nodeType":"YulFunctionCall","src":"10091:32:17"},"nativeSrc":"10088:119:17","nodeType":"YulIf","src":"10088:119:17"},{"nativeSrc":"10217:117:17","nodeType":"YulBlock","src":"10217:117:17","statements":[{"nativeSrc":"10232:15:17","nodeType":"YulVariableDeclaration","src":"10232:15:17","value":{"kind":"number","nativeSrc":"10246:1:17","nodeType":"YulLiteral","src":"10246:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"10236:6:17","nodeType":"YulTypedName","src":"10236:6:17","type":""}]},{"nativeSrc":"10261:63:17","nodeType":"YulAssignment","src":"10261:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10296:9:17","nodeType":"YulIdentifier","src":"10296:9:17"},{"name":"offset","nativeSrc":"10307:6:17","nodeType":"YulIdentifier","src":"10307:6:17"}],"functionName":{"name":"add","nativeSrc":"10292:3:17","nodeType":"YulIdentifier","src":"10292:3:17"},"nativeSrc":"10292:22:17","nodeType":"YulFunctionCall","src":"10292:22:17"},{"name":"dataEnd","nativeSrc":"10316:7:17","nodeType":"YulIdentifier","src":"10316:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10271:20:17","nodeType":"YulIdentifier","src":"10271:20:17"},"nativeSrc":"10271:53:17","nodeType":"YulFunctionCall","src":"10271:53:17"},"variableNames":[{"name":"value0","nativeSrc":"10261:6:17","nodeType":"YulIdentifier","src":"10261:6:17"}]}]},{"nativeSrc":"10344:118:17","nodeType":"YulBlock","src":"10344:118:17","statements":[{"nativeSrc":"10359:16:17","nodeType":"YulVariableDeclaration","src":"10359:16:17","value":{"kind":"number","nativeSrc":"10373:2:17","nodeType":"YulLiteral","src":"10373:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"10363:6:17","nodeType":"YulTypedName","src":"10363:6:17","type":""}]},{"nativeSrc":"10389:63:17","nodeType":"YulAssignment","src":"10389:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10424:9:17","nodeType":"YulIdentifier","src":"10424:9:17"},{"name":"offset","nativeSrc":"10435:6:17","nodeType":"YulIdentifier","src":"10435:6:17"}],"functionName":{"name":"add","nativeSrc":"10420:3:17","nodeType":"YulIdentifier","src":"10420:3:17"},"nativeSrc":"10420:22:17","nodeType":"YulFunctionCall","src":"10420:22:17"},{"name":"dataEnd","nativeSrc":"10444:7:17","nodeType":"YulIdentifier","src":"10444:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10399:20:17","nodeType":"YulIdentifier","src":"10399:20:17"},"nativeSrc":"10399:53:17","nodeType":"YulFunctionCall","src":"10399:53:17"},"variableNames":[{"name":"value1","nativeSrc":"10389:6:17","nodeType":"YulIdentifier","src":"10389:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"9995:474:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10040:9:17","nodeType":"YulTypedName","src":"10040:9:17","type":""},{"name":"dataEnd","nativeSrc":"10051:7:17","nodeType":"YulTypedName","src":"10051:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10063:6:17","nodeType":"YulTypedName","src":"10063:6:17","type":""},{"name":"value1","nativeSrc":"10071:6:17","nodeType":"YulTypedName","src":"10071:6:17","type":""}],"src":"9995:474:17"},{"body":{"nativeSrc":"10503:152:17","nodeType":"YulBlock","src":"10503:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10520:1:17","nodeType":"YulLiteral","src":"10520:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"10523:77:17","nodeType":"YulLiteral","src":"10523:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10513:6:17","nodeType":"YulIdentifier","src":"10513:6:17"},"nativeSrc":"10513:88:17","nodeType":"YulFunctionCall","src":"10513:88:17"},"nativeSrc":"10513:88:17","nodeType":"YulExpressionStatement","src":"10513:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10617:1:17","nodeType":"YulLiteral","src":"10617:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"10620:4:17","nodeType":"YulLiteral","src":"10620:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"10610:6:17","nodeType":"YulIdentifier","src":"10610:6:17"},"nativeSrc":"10610:15:17","nodeType":"YulFunctionCall","src":"10610:15:17"},"nativeSrc":"10610:15:17","nodeType":"YulExpressionStatement","src":"10610:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10641:1:17","nodeType":"YulLiteral","src":"10641:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"10644:4:17","nodeType":"YulLiteral","src":"10644:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10634:6:17","nodeType":"YulIdentifier","src":"10634:6:17"},"nativeSrc":"10634:15:17","nodeType":"YulFunctionCall","src":"10634:15:17"},"nativeSrc":"10634:15:17","nodeType":"YulExpressionStatement","src":"10634:15:17"}]},"name":"panic_error_0x22","nativeSrc":"10475:180:17","nodeType":"YulFunctionDefinition","src":"10475:180:17"},{"body":{"nativeSrc":"10712:269:17","nodeType":"YulBlock","src":"10712:269:17","statements":[{"nativeSrc":"10722:22:17","nodeType":"YulAssignment","src":"10722:22:17","value":{"arguments":[{"name":"data","nativeSrc":"10736:4:17","nodeType":"YulIdentifier","src":"10736:4:17"},{"kind":"number","nativeSrc":"10742:1:17","nodeType":"YulLiteral","src":"10742:1:17","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"10732:3:17","nodeType":"YulIdentifier","src":"10732:3:17"},"nativeSrc":"10732:12:17","nodeType":"YulFunctionCall","src":"10732:12:17"},"variableNames":[{"name":"length","nativeSrc":"10722:6:17","nodeType":"YulIdentifier","src":"10722:6:17"}]},{"nativeSrc":"10753:38:17","nodeType":"YulVariableDeclaration","src":"10753:38:17","value":{"arguments":[{"name":"data","nativeSrc":"10783:4:17","nodeType":"YulIdentifier","src":"10783:4:17"},{"kind":"number","nativeSrc":"10789:1:17","nodeType":"YulLiteral","src":"10789:1:17","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"10779:3:17","nodeType":"YulIdentifier","src":"10779:3:17"},"nativeSrc":"10779:12:17","nodeType":"YulFunctionCall","src":"10779:12:17"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"10757:18:17","nodeType":"YulTypedName","src":"10757:18:17","type":""}]},{"body":{"nativeSrc":"10830:51:17","nodeType":"YulBlock","src":"10830:51:17","statements":[{"nativeSrc":"10844:27:17","nodeType":"YulAssignment","src":"10844:27:17","value":{"arguments":[{"name":"length","nativeSrc":"10858:6:17","nodeType":"YulIdentifier","src":"10858:6:17"},{"kind":"number","nativeSrc":"10866:4:17","nodeType":"YulLiteral","src":"10866:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"10854:3:17","nodeType":"YulIdentifier","src":"10854:3:17"},"nativeSrc":"10854:17:17","nodeType":"YulFunctionCall","src":"10854:17:17"},"variableNames":[{"name":"length","nativeSrc":"10844:6:17","nodeType":"YulIdentifier","src":"10844:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10810:18:17","nodeType":"YulIdentifier","src":"10810:18:17"}],"functionName":{"name":"iszero","nativeSrc":"10803:6:17","nodeType":"YulIdentifier","src":"10803:6:17"},"nativeSrc":"10803:26:17","nodeType":"YulFunctionCall","src":"10803:26:17"},"nativeSrc":"10800:81:17","nodeType":"YulIf","src":"10800:81:17"},{"body":{"nativeSrc":"10933:42:17","nodeType":"YulBlock","src":"10933:42:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"10947:16:17","nodeType":"YulIdentifier","src":"10947:16:17"},"nativeSrc":"10947:18:17","nodeType":"YulFunctionCall","src":"10947:18:17"},"nativeSrc":"10947:18:17","nodeType":"YulExpressionStatement","src":"10947:18:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10897:18:17","nodeType":"YulIdentifier","src":"10897:18:17"},{"arguments":[{"name":"length","nativeSrc":"10920:6:17","nodeType":"YulIdentifier","src":"10920:6:17"},{"kind":"number","nativeSrc":"10928:2:17","nodeType":"YulLiteral","src":"10928:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"10917:2:17","nodeType":"YulIdentifier","src":"10917:2:17"},"nativeSrc":"10917:14:17","nodeType":"YulFunctionCall","src":"10917:14:17"}],"functionName":{"name":"eq","nativeSrc":"10894:2:17","nodeType":"YulIdentifier","src":"10894:2:17"},"nativeSrc":"10894:38:17","nodeType":"YulFunctionCall","src":"10894:38:17"},"nativeSrc":"10891:84:17","nodeType":"YulIf","src":"10891:84:17"}]},"name":"extract_byte_array_length","nativeSrc":"10661:320:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"10696:4:17","nodeType":"YulTypedName","src":"10696:4:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"10705:6:17","nodeType":"YulTypedName","src":"10705:6:17","type":""}],"src":"10661:320:17"},{"body":{"nativeSrc":"11093:114:17","nodeType":"YulBlock","src":"11093:114:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"11115:6:17","nodeType":"YulIdentifier","src":"11115:6:17"},{"kind":"number","nativeSrc":"11123:1:17","nodeType":"YulLiteral","src":"11123:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11111:3:17","nodeType":"YulIdentifier","src":"11111:3:17"},"nativeSrc":"11111:14:17","nodeType":"YulFunctionCall","src":"11111:14:17"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nativeSrc":"11127:34:17","nodeType":"YulLiteral","src":"11127:34:17","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nativeSrc":"11104:6:17","nodeType":"YulIdentifier","src":"11104:6:17"},"nativeSrc":"11104:58:17","nodeType":"YulFunctionCall","src":"11104:58:17"},"nativeSrc":"11104:58:17","nodeType":"YulExpressionStatement","src":"11104:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"11183:6:17","nodeType":"YulIdentifier","src":"11183:6:17"},{"kind":"number","nativeSrc":"11191:2:17","nodeType":"YulLiteral","src":"11191:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11179:3:17","nodeType":"YulIdentifier","src":"11179:3:17"},"nativeSrc":"11179:15:17","nodeType":"YulFunctionCall","src":"11179:15:17"},{"hexValue":"72","kind":"string","nativeSrc":"11196:3:17","nodeType":"YulLiteral","src":"11196:3:17","type":"","value":"r"}],"functionName":{"name":"mstore","nativeSrc":"11172:6:17","nodeType":"YulIdentifier","src":"11172:6:17"},"nativeSrc":"11172:28:17","nodeType":"YulFunctionCall","src":"11172:28:17"},"nativeSrc":"11172:28:17","nodeType":"YulExpressionStatement","src":"11172:28:17"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"10987:220:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"11085:6:17","nodeType":"YulTypedName","src":"11085:6:17","type":""}],"src":"10987:220:17"},{"body":{"nativeSrc":"11359:220:17","nodeType":"YulBlock","src":"11359:220:17","statements":[{"nativeSrc":"11369:74:17","nodeType":"YulAssignment","src":"11369:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"11435:3:17","nodeType":"YulIdentifier","src":"11435:3:17"},{"kind":"number","nativeSrc":"11440:2:17","nodeType":"YulLiteral","src":"11440:2:17","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"11376:58:17","nodeType":"YulIdentifier","src":"11376:58:17"},"nativeSrc":"11376:67:17","nodeType":"YulFunctionCall","src":"11376:67:17"},"variableNames":[{"name":"pos","nativeSrc":"11369:3:17","nodeType":"YulIdentifier","src":"11369:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"11541:3:17","nodeType":"YulIdentifier","src":"11541:3:17"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"11452:88:17","nodeType":"YulIdentifier","src":"11452:88:17"},"nativeSrc":"11452:93:17","nodeType":"YulFunctionCall","src":"11452:93:17"},"nativeSrc":"11452:93:17","nodeType":"YulExpressionStatement","src":"11452:93:17"},{"nativeSrc":"11554:19:17","nodeType":"YulAssignment","src":"11554:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"11565:3:17","nodeType":"YulIdentifier","src":"11565:3:17"},{"kind":"number","nativeSrc":"11570:2:17","nodeType":"YulLiteral","src":"11570:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11561:3:17","nodeType":"YulIdentifier","src":"11561:3:17"},"nativeSrc":"11561:12:17","nodeType":"YulFunctionCall","src":"11561:12:17"},"variableNames":[{"name":"end","nativeSrc":"11554:3:17","nodeType":"YulIdentifier","src":"11554:3:17"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"11213:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"11347:3:17","nodeType":"YulTypedName","src":"11347:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"11355:3:17","nodeType":"YulTypedName","src":"11355:3:17","type":""}],"src":"11213:366:17"},{"body":{"nativeSrc":"11756:248:17","nodeType":"YulBlock","src":"11756:248:17","statements":[{"nativeSrc":"11766:26:17","nodeType":"YulAssignment","src":"11766:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"11778:9:17","nodeType":"YulIdentifier","src":"11778:9:17"},{"kind":"number","nativeSrc":"11789:2:17","nodeType":"YulLiteral","src":"11789:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11774:3:17","nodeType":"YulIdentifier","src":"11774:3:17"},"nativeSrc":"11774:18:17","nodeType":"YulFunctionCall","src":"11774:18:17"},"variableNames":[{"name":"tail","nativeSrc":"11766:4:17","nodeType":"YulIdentifier","src":"11766:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11813:9:17","nodeType":"YulIdentifier","src":"11813:9:17"},{"kind":"number","nativeSrc":"11824:1:17","nodeType":"YulLiteral","src":"11824:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11809:3:17","nodeType":"YulIdentifier","src":"11809:3:17"},"nativeSrc":"11809:17:17","nodeType":"YulFunctionCall","src":"11809:17:17"},{"arguments":[{"name":"tail","nativeSrc":"11832:4:17","nodeType":"YulIdentifier","src":"11832:4:17"},{"name":"headStart","nativeSrc":"11838:9:17","nodeType":"YulIdentifier","src":"11838:9:17"}],"functionName":{"name":"sub","nativeSrc":"11828:3:17","nodeType":"YulIdentifier","src":"11828:3:17"},"nativeSrc":"11828:20:17","nodeType":"YulFunctionCall","src":"11828:20:17"}],"functionName":{"name":"mstore","nativeSrc":"11802:6:17","nodeType":"YulIdentifier","src":"11802:6:17"},"nativeSrc":"11802:47:17","nodeType":"YulFunctionCall","src":"11802:47:17"},"nativeSrc":"11802:47:17","nodeType":"YulExpressionStatement","src":"11802:47:17"},{"nativeSrc":"11858:139:17","nodeType":"YulAssignment","src":"11858:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"11992:4:17","nodeType":"YulIdentifier","src":"11992:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"11866:124:17","nodeType":"YulIdentifier","src":"11866:124:17"},"nativeSrc":"11866:131:17","nodeType":"YulFunctionCall","src":"11866:131:17"},"variableNames":[{"name":"tail","nativeSrc":"11858:4:17","nodeType":"YulIdentifier","src":"11858:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11585:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11736:9:17","nodeType":"YulTypedName","src":"11736:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11751:4:17","nodeType":"YulTypedName","src":"11751:4:17","type":""}],"src":"11585:419:17"},{"body":{"nativeSrc":"12116:142:17","nodeType":"YulBlock","src":"12116:142:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"12138:6:17","nodeType":"YulIdentifier","src":"12138:6:17"},{"kind":"number","nativeSrc":"12146:1:17","nodeType":"YulLiteral","src":"12146:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12134:3:17","nodeType":"YulIdentifier","src":"12134:3:17"},"nativeSrc":"12134:14:17","nodeType":"YulFunctionCall","src":"12134:14:17"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nativeSrc":"12150:34:17","nodeType":"YulLiteral","src":"12150:34:17","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nativeSrc":"12127:6:17","nodeType":"YulIdentifier","src":"12127:6:17"},"nativeSrc":"12127:58:17","nodeType":"YulFunctionCall","src":"12127:58:17"},"nativeSrc":"12127:58:17","nodeType":"YulExpressionStatement","src":"12127:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"12206:6:17","nodeType":"YulIdentifier","src":"12206:6:17"},{"kind":"number","nativeSrc":"12214:2:17","nodeType":"YulLiteral","src":"12214:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12202:3:17","nodeType":"YulIdentifier","src":"12202:3:17"},"nativeSrc":"12202:15:17","nodeType":"YulFunctionCall","src":"12202:15:17"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nativeSrc":"12219:31:17","nodeType":"YulLiteral","src":"12219:31:17","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nativeSrc":"12195:6:17","nodeType":"YulIdentifier","src":"12195:6:17"},"nativeSrc":"12195:56:17","nodeType":"YulFunctionCall","src":"12195:56:17"},"nativeSrc":"12195:56:17","nodeType":"YulExpressionStatement","src":"12195:56:17"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"12010:248:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"12108:6:17","nodeType":"YulTypedName","src":"12108:6:17","type":""}],"src":"12010:248:17"},{"body":{"nativeSrc":"12410:220:17","nodeType":"YulBlock","src":"12410:220:17","statements":[{"nativeSrc":"12420:74:17","nodeType":"YulAssignment","src":"12420:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"12486:3:17","nodeType":"YulIdentifier","src":"12486:3:17"},{"kind":"number","nativeSrc":"12491:2:17","nodeType":"YulLiteral","src":"12491:2:17","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"12427:58:17","nodeType":"YulIdentifier","src":"12427:58:17"},"nativeSrc":"12427:67:17","nodeType":"YulFunctionCall","src":"12427:67:17"},"variableNames":[{"name":"pos","nativeSrc":"12420:3:17","nodeType":"YulIdentifier","src":"12420:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"12592:3:17","nodeType":"YulIdentifier","src":"12592:3:17"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"12503:88:17","nodeType":"YulIdentifier","src":"12503:88:17"},"nativeSrc":"12503:93:17","nodeType":"YulFunctionCall","src":"12503:93:17"},"nativeSrc":"12503:93:17","nodeType":"YulExpressionStatement","src":"12503:93:17"},{"nativeSrc":"12605:19:17","nodeType":"YulAssignment","src":"12605:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"12616:3:17","nodeType":"YulIdentifier","src":"12616:3:17"},{"kind":"number","nativeSrc":"12621:2:17","nodeType":"YulLiteral","src":"12621:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12612:3:17","nodeType":"YulIdentifier","src":"12612:3:17"},"nativeSrc":"12612:12:17","nodeType":"YulFunctionCall","src":"12612:12:17"},"variableNames":[{"name":"end","nativeSrc":"12605:3:17","nodeType":"YulIdentifier","src":"12605:3:17"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"12264:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"12398:3:17","nodeType":"YulTypedName","src":"12398:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12406:3:17","nodeType":"YulTypedName","src":"12406:3:17","type":""}],"src":"12264:366:17"},{"body":{"nativeSrc":"12807:248:17","nodeType":"YulBlock","src":"12807:248:17","statements":[{"nativeSrc":"12817:26:17","nodeType":"YulAssignment","src":"12817:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"12829:9:17","nodeType":"YulIdentifier","src":"12829:9:17"},{"kind":"number","nativeSrc":"12840:2:17","nodeType":"YulLiteral","src":"12840:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12825:3:17","nodeType":"YulIdentifier","src":"12825:3:17"},"nativeSrc":"12825:18:17","nodeType":"YulFunctionCall","src":"12825:18:17"},"variableNames":[{"name":"tail","nativeSrc":"12817:4:17","nodeType":"YulIdentifier","src":"12817:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12864:9:17","nodeType":"YulIdentifier","src":"12864:9:17"},{"kind":"number","nativeSrc":"12875:1:17","nodeType":"YulLiteral","src":"12875:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12860:3:17","nodeType":"YulIdentifier","src":"12860:3:17"},"nativeSrc":"12860:17:17","nodeType":"YulFunctionCall","src":"12860:17:17"},{"arguments":[{"name":"tail","nativeSrc":"12883:4:17","nodeType":"YulIdentifier","src":"12883:4:17"},{"name":"headStart","nativeSrc":"12889:9:17","nodeType":"YulIdentifier","src":"12889:9:17"}],"functionName":{"name":"sub","nativeSrc":"12879:3:17","nodeType":"YulIdentifier","src":"12879:3:17"},"nativeSrc":"12879:20:17","nodeType":"YulFunctionCall","src":"12879:20:17"}],"functionName":{"name":"mstore","nativeSrc":"12853:6:17","nodeType":"YulIdentifier","src":"12853:6:17"},"nativeSrc":"12853:47:17","nodeType":"YulFunctionCall","src":"12853:47:17"},"nativeSrc":"12853:47:17","nodeType":"YulExpressionStatement","src":"12853:47:17"},{"nativeSrc":"12909:139:17","nodeType":"YulAssignment","src":"12909:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"13043:4:17","nodeType":"YulIdentifier","src":"13043:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"12917:124:17","nodeType":"YulIdentifier","src":"12917:124:17"},"nativeSrc":"12917:131:17","nodeType":"YulFunctionCall","src":"12917:131:17"},"variableNames":[{"name":"tail","nativeSrc":"12909:4:17","nodeType":"YulIdentifier","src":"12909:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12636:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12787:9:17","nodeType":"YulTypedName","src":"12787:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12802:4:17","nodeType":"YulTypedName","src":"12802:4:17","type":""}],"src":"12636:419:17"},{"body":{"nativeSrc":"13167:126:17","nodeType":"YulBlock","src":"13167:126:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13189:6:17","nodeType":"YulIdentifier","src":"13189:6:17"},{"kind":"number","nativeSrc":"13197:1:17","nodeType":"YulLiteral","src":"13197:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13185:3:17","nodeType":"YulIdentifier","src":"13185:3:17"},"nativeSrc":"13185:14:17","nodeType":"YulFunctionCall","src":"13185:14:17"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nativeSrc":"13201:34:17","nodeType":"YulLiteral","src":"13201:34:17","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nativeSrc":"13178:6:17","nodeType":"YulIdentifier","src":"13178:6:17"},"nativeSrc":"13178:58:17","nodeType":"YulFunctionCall","src":"13178:58:17"},"nativeSrc":"13178:58:17","nodeType":"YulExpressionStatement","src":"13178:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13257:6:17","nodeType":"YulIdentifier","src":"13257:6:17"},{"kind":"number","nativeSrc":"13265:2:17","nodeType":"YulLiteral","src":"13265:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13253:3:17","nodeType":"YulIdentifier","src":"13253:3:17"},"nativeSrc":"13253:15:17","nodeType":"YulFunctionCall","src":"13253:15:17"},{"hexValue":"72206f7220617070726f766564","kind":"string","nativeSrc":"13270:15:17","nodeType":"YulLiteral","src":"13270:15:17","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nativeSrc":"13246:6:17","nodeType":"YulIdentifier","src":"13246:6:17"},"nativeSrc":"13246:40:17","nodeType":"YulFunctionCall","src":"13246:40:17"},"nativeSrc":"13246:40:17","nodeType":"YulExpressionStatement","src":"13246:40:17"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"13061:232:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"13159:6:17","nodeType":"YulTypedName","src":"13159:6:17","type":""}],"src":"13061:232:17"},{"body":{"nativeSrc":"13445:220:17","nodeType":"YulBlock","src":"13445:220:17","statements":[{"nativeSrc":"13455:74:17","nodeType":"YulAssignment","src":"13455:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"13521:3:17","nodeType":"YulIdentifier","src":"13521:3:17"},{"kind":"number","nativeSrc":"13526:2:17","nodeType":"YulLiteral","src":"13526:2:17","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"13462:58:17","nodeType":"YulIdentifier","src":"13462:58:17"},"nativeSrc":"13462:67:17","nodeType":"YulFunctionCall","src":"13462:67:17"},"variableNames":[{"name":"pos","nativeSrc":"13455:3:17","nodeType":"YulIdentifier","src":"13455:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13627:3:17","nodeType":"YulIdentifier","src":"13627:3:17"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"13538:88:17","nodeType":"YulIdentifier","src":"13538:88:17"},"nativeSrc":"13538:93:17","nodeType":"YulFunctionCall","src":"13538:93:17"},"nativeSrc":"13538:93:17","nodeType":"YulExpressionStatement","src":"13538:93:17"},{"nativeSrc":"13640:19:17","nodeType":"YulAssignment","src":"13640:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"13651:3:17","nodeType":"YulIdentifier","src":"13651:3:17"},{"kind":"number","nativeSrc":"13656:2:17","nodeType":"YulLiteral","src":"13656:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13647:3:17","nodeType":"YulIdentifier","src":"13647:3:17"},"nativeSrc":"13647:12:17","nodeType":"YulFunctionCall","src":"13647:12:17"},"variableNames":[{"name":"end","nativeSrc":"13640:3:17","nodeType":"YulIdentifier","src":"13640:3:17"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"13299:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13433:3:17","nodeType":"YulTypedName","src":"13433:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13441:3:17","nodeType":"YulTypedName","src":"13441:3:17","type":""}],"src":"13299:366:17"},{"body":{"nativeSrc":"13842:248:17","nodeType":"YulBlock","src":"13842:248:17","statements":[{"nativeSrc":"13852:26:17","nodeType":"YulAssignment","src":"13852:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"13864:9:17","nodeType":"YulIdentifier","src":"13864:9:17"},{"kind":"number","nativeSrc":"13875:2:17","nodeType":"YulLiteral","src":"13875:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13860:3:17","nodeType":"YulIdentifier","src":"13860:3:17"},"nativeSrc":"13860:18:17","nodeType":"YulFunctionCall","src":"13860:18:17"},"variableNames":[{"name":"tail","nativeSrc":"13852:4:17","nodeType":"YulIdentifier","src":"13852:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13899:9:17","nodeType":"YulIdentifier","src":"13899:9:17"},{"kind":"number","nativeSrc":"13910:1:17","nodeType":"YulLiteral","src":"13910:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13895:3:17","nodeType":"YulIdentifier","src":"13895:3:17"},"nativeSrc":"13895:17:17","nodeType":"YulFunctionCall","src":"13895:17:17"},{"arguments":[{"name":"tail","nativeSrc":"13918:4:17","nodeType":"YulIdentifier","src":"13918:4:17"},{"name":"headStart","nativeSrc":"13924:9:17","nodeType":"YulIdentifier","src":"13924:9:17"}],"functionName":{"name":"sub","nativeSrc":"13914:3:17","nodeType":"YulIdentifier","src":"13914:3:17"},"nativeSrc":"13914:20:17","nodeType":"YulFunctionCall","src":"13914:20:17"}],"functionName":{"name":"mstore","nativeSrc":"13888:6:17","nodeType":"YulIdentifier","src":"13888:6:17"},"nativeSrc":"13888:47:17","nodeType":"YulFunctionCall","src":"13888:47:17"},"nativeSrc":"13888:47:17","nodeType":"YulExpressionStatement","src":"13888:47:17"},{"nativeSrc":"13944:139:17","nodeType":"YulAssignment","src":"13944:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"14078:4:17","nodeType":"YulIdentifier","src":"14078:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"13952:124:17","nodeType":"YulIdentifier","src":"13952:124:17"},"nativeSrc":"13952:131:17","nodeType":"YulFunctionCall","src":"13952:131:17"},"variableNames":[{"name":"tail","nativeSrc":"13944:4:17","nodeType":"YulIdentifier","src":"13944:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13671:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13822:9:17","nodeType":"YulTypedName","src":"13822:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13837:4:17","nodeType":"YulTypedName","src":"13837:4:17","type":""}],"src":"13671:419:17"},{"body":{"nativeSrc":"14202:68:17","nodeType":"YulBlock","src":"14202:68:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"14224:6:17","nodeType":"YulIdentifier","src":"14224:6:17"},{"kind":"number","nativeSrc":"14232:1:17","nodeType":"YulLiteral","src":"14232:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14220:3:17","nodeType":"YulIdentifier","src":"14220:3:17"},"nativeSrc":"14220:14:17","nodeType":"YulFunctionCall","src":"14220:14:17"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nativeSrc":"14236:26:17","nodeType":"YulLiteral","src":"14236:26:17","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nativeSrc":"14213:6:17","nodeType":"YulIdentifier","src":"14213:6:17"},"nativeSrc":"14213:50:17","nodeType":"YulFunctionCall","src":"14213:50:17"},"nativeSrc":"14213:50:17","nodeType":"YulExpressionStatement","src":"14213:50:17"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"14096:174:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"14194:6:17","nodeType":"YulTypedName","src":"14194:6:17","type":""}],"src":"14096:174:17"},{"body":{"nativeSrc":"14422:220:17","nodeType":"YulBlock","src":"14422:220:17","statements":[{"nativeSrc":"14432:74:17","nodeType":"YulAssignment","src":"14432:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"14498:3:17","nodeType":"YulIdentifier","src":"14498:3:17"},{"kind":"number","nativeSrc":"14503:2:17","nodeType":"YulLiteral","src":"14503:2:17","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"14439:58:17","nodeType":"YulIdentifier","src":"14439:58:17"},"nativeSrc":"14439:67:17","nodeType":"YulFunctionCall","src":"14439:67:17"},"variableNames":[{"name":"pos","nativeSrc":"14432:3:17","nodeType":"YulIdentifier","src":"14432:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"14604:3:17","nodeType":"YulIdentifier","src":"14604:3:17"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"14515:88:17","nodeType":"YulIdentifier","src":"14515:88:17"},"nativeSrc":"14515:93:17","nodeType":"YulFunctionCall","src":"14515:93:17"},"nativeSrc":"14515:93:17","nodeType":"YulExpressionStatement","src":"14515:93:17"},{"nativeSrc":"14617:19:17","nodeType":"YulAssignment","src":"14617:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"14628:3:17","nodeType":"YulIdentifier","src":"14628:3:17"},{"kind":"number","nativeSrc":"14633:2:17","nodeType":"YulLiteral","src":"14633:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14624:3:17","nodeType":"YulIdentifier","src":"14624:3:17"},"nativeSrc":"14624:12:17","nodeType":"YulFunctionCall","src":"14624:12:17"},"variableNames":[{"name":"end","nativeSrc":"14617:3:17","nodeType":"YulIdentifier","src":"14617:3:17"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"14276:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14410:3:17","nodeType":"YulTypedName","src":"14410:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14418:3:17","nodeType":"YulTypedName","src":"14418:3:17","type":""}],"src":"14276:366:17"},{"body":{"nativeSrc":"14819:248:17","nodeType":"YulBlock","src":"14819:248:17","statements":[{"nativeSrc":"14829:26:17","nodeType":"YulAssignment","src":"14829:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"14841:9:17","nodeType":"YulIdentifier","src":"14841:9:17"},{"kind":"number","nativeSrc":"14852:2:17","nodeType":"YulLiteral","src":"14852:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14837:3:17","nodeType":"YulIdentifier","src":"14837:3:17"},"nativeSrc":"14837:18:17","nodeType":"YulFunctionCall","src":"14837:18:17"},"variableNames":[{"name":"tail","nativeSrc":"14829:4:17","nodeType":"YulIdentifier","src":"14829:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14876:9:17","nodeType":"YulIdentifier","src":"14876:9:17"},{"kind":"number","nativeSrc":"14887:1:17","nodeType":"YulLiteral","src":"14887:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14872:3:17","nodeType":"YulIdentifier","src":"14872:3:17"},"nativeSrc":"14872:17:17","nodeType":"YulFunctionCall","src":"14872:17:17"},{"arguments":[{"name":"tail","nativeSrc":"14895:4:17","nodeType":"YulIdentifier","src":"14895:4:17"},{"name":"headStart","nativeSrc":"14901:9:17","nodeType":"YulIdentifier","src":"14901:9:17"}],"functionName":{"name":"sub","nativeSrc":"14891:3:17","nodeType":"YulIdentifier","src":"14891:3:17"},"nativeSrc":"14891:20:17","nodeType":"YulFunctionCall","src":"14891:20:17"}],"functionName":{"name":"mstore","nativeSrc":"14865:6:17","nodeType":"YulIdentifier","src":"14865:6:17"},"nativeSrc":"14865:47:17","nodeType":"YulFunctionCall","src":"14865:47:17"},"nativeSrc":"14865:47:17","nodeType":"YulExpressionStatement","src":"14865:47:17"},{"nativeSrc":"14921:139:17","nodeType":"YulAssignment","src":"14921:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"15055:4:17","nodeType":"YulIdentifier","src":"15055:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"14929:124:17","nodeType":"YulIdentifier","src":"14929:124:17"},"nativeSrc":"14929:131:17","nodeType":"YulFunctionCall","src":"14929:131:17"},"variableNames":[{"name":"tail","nativeSrc":"14921:4:17","nodeType":"YulIdentifier","src":"14921:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14648:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14799:9:17","nodeType":"YulTypedName","src":"14799:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14814:4:17","nodeType":"YulTypedName","src":"14814:4:17","type":""}],"src":"14648:419:17"},{"body":{"nativeSrc":"15179:122:17","nodeType":"YulBlock","src":"15179:122:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"15201:6:17","nodeType":"YulIdentifier","src":"15201:6:17"},{"kind":"number","nativeSrc":"15209:1:17","nodeType":"YulLiteral","src":"15209:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15197:3:17","nodeType":"YulIdentifier","src":"15197:3:17"},"nativeSrc":"15197:14:17","nodeType":"YulFunctionCall","src":"15197:14:17"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nativeSrc":"15213:34:17","nodeType":"YulLiteral","src":"15213:34:17","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nativeSrc":"15190:6:17","nodeType":"YulIdentifier","src":"15190:6:17"},"nativeSrc":"15190:58:17","nodeType":"YulFunctionCall","src":"15190:58:17"},"nativeSrc":"15190:58:17","nodeType":"YulExpressionStatement","src":"15190:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"15269:6:17","nodeType":"YulIdentifier","src":"15269:6:17"},{"kind":"number","nativeSrc":"15277:2:17","nodeType":"YulLiteral","src":"15277:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15265:3:17","nodeType":"YulIdentifier","src":"15265:3:17"},"nativeSrc":"15265:15:17","nodeType":"YulFunctionCall","src":"15265:15:17"},{"hexValue":"6c6964206f776e6572","kind":"string","nativeSrc":"15282:11:17","nodeType":"YulLiteral","src":"15282:11:17","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nativeSrc":"15258:6:17","nodeType":"YulIdentifier","src":"15258:6:17"},"nativeSrc":"15258:36:17","nodeType":"YulFunctionCall","src":"15258:36:17"},"nativeSrc":"15258:36:17","nodeType":"YulExpressionStatement","src":"15258:36:17"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"15073:228:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"15171:6:17","nodeType":"YulTypedName","src":"15171:6:17","type":""}],"src":"15073:228:17"},{"body":{"nativeSrc":"15453:220:17","nodeType":"YulBlock","src":"15453:220:17","statements":[{"nativeSrc":"15463:74:17","nodeType":"YulAssignment","src":"15463:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"15529:3:17","nodeType":"YulIdentifier","src":"15529:3:17"},{"kind":"number","nativeSrc":"15534:2:17","nodeType":"YulLiteral","src":"15534:2:17","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"15470:58:17","nodeType":"YulIdentifier","src":"15470:58:17"},"nativeSrc":"15470:67:17","nodeType":"YulFunctionCall","src":"15470:67:17"},"variableNames":[{"name":"pos","nativeSrc":"15463:3:17","nodeType":"YulIdentifier","src":"15463:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"15635:3:17","nodeType":"YulIdentifier","src":"15635:3:17"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"15546:88:17","nodeType":"YulIdentifier","src":"15546:88:17"},"nativeSrc":"15546:93:17","nodeType":"YulFunctionCall","src":"15546:93:17"},"nativeSrc":"15546:93:17","nodeType":"YulExpressionStatement","src":"15546:93:17"},{"nativeSrc":"15648:19:17","nodeType":"YulAssignment","src":"15648:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"15659:3:17","nodeType":"YulIdentifier","src":"15659:3:17"},{"kind":"number","nativeSrc":"15664:2:17","nodeType":"YulLiteral","src":"15664:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15655:3:17","nodeType":"YulIdentifier","src":"15655:3:17"},"nativeSrc":"15655:12:17","nodeType":"YulFunctionCall","src":"15655:12:17"},"variableNames":[{"name":"end","nativeSrc":"15648:3:17","nodeType":"YulIdentifier","src":"15648:3:17"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"15307:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15441:3:17","nodeType":"YulTypedName","src":"15441:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15449:3:17","nodeType":"YulTypedName","src":"15449:3:17","type":""}],"src":"15307:366:17"},{"body":{"nativeSrc":"15850:248:17","nodeType":"YulBlock","src":"15850:248:17","statements":[{"nativeSrc":"15860:26:17","nodeType":"YulAssignment","src":"15860:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"15872:9:17","nodeType":"YulIdentifier","src":"15872:9:17"},{"kind":"number","nativeSrc":"15883:2:17","nodeType":"YulLiteral","src":"15883:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15868:3:17","nodeType":"YulIdentifier","src":"15868:3:17"},"nativeSrc":"15868:18:17","nodeType":"YulFunctionCall","src":"15868:18:17"},"variableNames":[{"name":"tail","nativeSrc":"15860:4:17","nodeType":"YulIdentifier","src":"15860:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15907:9:17","nodeType":"YulIdentifier","src":"15907:9:17"},{"kind":"number","nativeSrc":"15918:1:17","nodeType":"YulLiteral","src":"15918:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15903:3:17","nodeType":"YulIdentifier","src":"15903:3:17"},"nativeSrc":"15903:17:17","nodeType":"YulFunctionCall","src":"15903:17:17"},{"arguments":[{"name":"tail","nativeSrc":"15926:4:17","nodeType":"YulIdentifier","src":"15926:4:17"},{"name":"headStart","nativeSrc":"15932:9:17","nodeType":"YulIdentifier","src":"15932:9:17"}],"functionName":{"name":"sub","nativeSrc":"15922:3:17","nodeType":"YulIdentifier","src":"15922:3:17"},"nativeSrc":"15922:20:17","nodeType":"YulFunctionCall","src":"15922:20:17"}],"functionName":{"name":"mstore","nativeSrc":"15896:6:17","nodeType":"YulIdentifier","src":"15896:6:17"},"nativeSrc":"15896:47:17","nodeType":"YulFunctionCall","src":"15896:47:17"},"nativeSrc":"15896:47:17","nodeType":"YulExpressionStatement","src":"15896:47:17"},{"nativeSrc":"15952:139:17","nodeType":"YulAssignment","src":"15952:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"16086:4:17","nodeType":"YulIdentifier","src":"16086:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"15960:124:17","nodeType":"YulIdentifier","src":"15960:124:17"},"nativeSrc":"15960:131:17","nodeType":"YulFunctionCall","src":"15960:131:17"},"variableNames":[{"name":"tail","nativeSrc":"15952:4:17","nodeType":"YulIdentifier","src":"15952:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15679:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15830:9:17","nodeType":"YulTypedName","src":"15830:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15845:4:17","nodeType":"YulTypedName","src":"15845:4:17","type":""}],"src":"15679:419:17"},{"body":{"nativeSrc":"16218:34:17","nodeType":"YulBlock","src":"16218:34:17","statements":[{"nativeSrc":"16228:18:17","nodeType":"YulAssignment","src":"16228:18:17","value":{"name":"pos","nativeSrc":"16243:3:17","nodeType":"YulIdentifier","src":"16243:3:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"16228:11:17","nodeType":"YulIdentifier","src":"16228:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16104:148:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16190:3:17","nodeType":"YulTypedName","src":"16190:3:17","type":""},{"name":"length","nativeSrc":"16195:6:17","nodeType":"YulTypedName","src":"16195:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"16206:11:17","nodeType":"YulTypedName","src":"16206:11:17","type":""}],"src":"16104:148:17"},{"body":{"nativeSrc":"16368:280:17","nodeType":"YulBlock","src":"16368:280:17","statements":[{"nativeSrc":"16378:53:17","nodeType":"YulVariableDeclaration","src":"16378:53:17","value":{"arguments":[{"name":"value","nativeSrc":"16425:5:17","nodeType":"YulIdentifier","src":"16425:5:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"16392:32:17","nodeType":"YulIdentifier","src":"16392:32:17"},"nativeSrc":"16392:39:17","nodeType":"YulFunctionCall","src":"16392:39:17"},"variables":[{"name":"length","nativeSrc":"16382:6:17","nodeType":"YulTypedName","src":"16382:6:17","type":""}]},{"nativeSrc":"16440:96:17","nodeType":"YulAssignment","src":"16440:96:17","value":{"arguments":[{"name":"pos","nativeSrc":"16524:3:17","nodeType":"YulIdentifier","src":"16524:3:17"},{"name":"length","nativeSrc":"16529:6:17","nodeType":"YulIdentifier","src":"16529:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16447:76:17","nodeType":"YulIdentifier","src":"16447:76:17"},"nativeSrc":"16447:89:17","nodeType":"YulFunctionCall","src":"16447:89:17"},"variableNames":[{"name":"pos","nativeSrc":"16440:3:17","nodeType":"YulIdentifier","src":"16440:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"16584:5:17","nodeType":"YulIdentifier","src":"16584:5:17"},{"kind":"number","nativeSrc":"16591:4:17","nodeType":"YulLiteral","src":"16591:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16580:3:17","nodeType":"YulIdentifier","src":"16580:3:17"},"nativeSrc":"16580:16:17","nodeType":"YulFunctionCall","src":"16580:16:17"},{"name":"pos","nativeSrc":"16598:3:17","nodeType":"YulIdentifier","src":"16598:3:17"},{"name":"length","nativeSrc":"16603:6:17","nodeType":"YulIdentifier","src":"16603:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"16545:34:17","nodeType":"YulIdentifier","src":"16545:34:17"},"nativeSrc":"16545:65:17","nodeType":"YulFunctionCall","src":"16545:65:17"},"nativeSrc":"16545:65:17","nodeType":"YulExpressionStatement","src":"16545:65:17"},{"nativeSrc":"16619:23:17","nodeType":"YulAssignment","src":"16619:23:17","value":{"arguments":[{"name":"pos","nativeSrc":"16630:3:17","nodeType":"YulIdentifier","src":"16630:3:17"},{"name":"length","nativeSrc":"16635:6:17","nodeType":"YulIdentifier","src":"16635:6:17"}],"functionName":{"name":"add","nativeSrc":"16626:3:17","nodeType":"YulIdentifier","src":"16626:3:17"},"nativeSrc":"16626:16:17","nodeType":"YulFunctionCall","src":"16626:16:17"},"variableNames":[{"name":"end","nativeSrc":"16619:3:17","nodeType":"YulIdentifier","src":"16619:3:17"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16258:390:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"16349:5:17","nodeType":"YulTypedName","src":"16349:5:17","type":""},{"name":"pos","nativeSrc":"16356:3:17","nodeType":"YulTypedName","src":"16356:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16364:3:17","nodeType":"YulTypedName","src":"16364:3:17","type":""}],"src":"16258:390:17"},{"body":{"nativeSrc":"16838:251:17","nodeType":"YulBlock","src":"16838:251:17","statements":[{"nativeSrc":"16849:102:17","nodeType":"YulAssignment","src":"16849:102:17","value":{"arguments":[{"name":"value0","nativeSrc":"16938:6:17","nodeType":"YulIdentifier","src":"16938:6:17"},{"name":"pos","nativeSrc":"16947:3:17","nodeType":"YulIdentifier","src":"16947:3:17"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16856:81:17","nodeType":"YulIdentifier","src":"16856:81:17"},"nativeSrc":"16856:95:17","nodeType":"YulFunctionCall","src":"16856:95:17"},"variableNames":[{"name":"pos","nativeSrc":"16849:3:17","nodeType":"YulIdentifier","src":"16849:3:17"}]},{"nativeSrc":"16961:102:17","nodeType":"YulAssignment","src":"16961:102:17","value":{"arguments":[{"name":"value1","nativeSrc":"17050:6:17","nodeType":"YulIdentifier","src":"17050:6:17"},{"name":"pos","nativeSrc":"17059:3:17","nodeType":"YulIdentifier","src":"17059:3:17"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16968:81:17","nodeType":"YulIdentifier","src":"16968:81:17"},"nativeSrc":"16968:95:17","nodeType":"YulFunctionCall","src":"16968:95:17"},"variableNames":[{"name":"pos","nativeSrc":"16961:3:17","nodeType":"YulIdentifier","src":"16961:3:17"}]},{"nativeSrc":"17073:10:17","nodeType":"YulAssignment","src":"17073:10:17","value":{"name":"pos","nativeSrc":"17080:3:17","nodeType":"YulIdentifier","src":"17080:3:17"},"variableNames":[{"name":"end","nativeSrc":"17073:3:17","nodeType":"YulIdentifier","src":"17073:3:17"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"16654:435:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16809:3:17","nodeType":"YulTypedName","src":"16809:3:17","type":""},{"name":"value1","nativeSrc":"16815:6:17","nodeType":"YulTypedName","src":"16815:6:17","type":""},{"name":"value0","nativeSrc":"16823:6:17","nodeType":"YulTypedName","src":"16823:6:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16834:3:17","nodeType":"YulTypedName","src":"16834:3:17","type":""}],"src":"16654:435:17"},{"body":{"nativeSrc":"17201:118:17","nodeType":"YulBlock","src":"17201:118:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17223:6:17","nodeType":"YulIdentifier","src":"17223:6:17"},{"kind":"number","nativeSrc":"17231:1:17","nodeType":"YulLiteral","src":"17231:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17219:3:17","nodeType":"YulIdentifier","src":"17219:3:17"},"nativeSrc":"17219:14:17","nodeType":"YulFunctionCall","src":"17219:14:17"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nativeSrc":"17235:34:17","nodeType":"YulLiteral","src":"17235:34:17","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nativeSrc":"17212:6:17","nodeType":"YulIdentifier","src":"17212:6:17"},"nativeSrc":"17212:58:17","nodeType":"YulFunctionCall","src":"17212:58:17"},"nativeSrc":"17212:58:17","nodeType":"YulExpressionStatement","src":"17212:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17291:6:17","nodeType":"YulIdentifier","src":"17291:6:17"},{"kind":"number","nativeSrc":"17299:2:17","nodeType":"YulLiteral","src":"17299:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17287:3:17","nodeType":"YulIdentifier","src":"17287:3:17"},"nativeSrc":"17287:15:17","nodeType":"YulFunctionCall","src":"17287:15:17"},{"hexValue":"6f776e6572","kind":"string","nativeSrc":"17304:7:17","nodeType":"YulLiteral","src":"17304:7:17","type":"","value":"owner"}],"functionName":{"name":"mstore","nativeSrc":"17280:6:17","nodeType":"YulIdentifier","src":"17280:6:17"},"nativeSrc":"17280:32:17","nodeType":"YulFunctionCall","src":"17280:32:17"},"nativeSrc":"17280:32:17","nodeType":"YulExpressionStatement","src":"17280:32:17"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"17095:224:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"17193:6:17","nodeType":"YulTypedName","src":"17193:6:17","type":""}],"src":"17095:224:17"},{"body":{"nativeSrc":"17471:220:17","nodeType":"YulBlock","src":"17471:220:17","statements":[{"nativeSrc":"17481:74:17","nodeType":"YulAssignment","src":"17481:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"17547:3:17","nodeType":"YulIdentifier","src":"17547:3:17"},{"kind":"number","nativeSrc":"17552:2:17","nodeType":"YulLiteral","src":"17552:2:17","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"17488:58:17","nodeType":"YulIdentifier","src":"17488:58:17"},"nativeSrc":"17488:67:17","nodeType":"YulFunctionCall","src":"17488:67:17"},"variableNames":[{"name":"pos","nativeSrc":"17481:3:17","nodeType":"YulIdentifier","src":"17481:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"17653:3:17","nodeType":"YulIdentifier","src":"17653:3:17"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"17564:88:17","nodeType":"YulIdentifier","src":"17564:88:17"},"nativeSrc":"17564:93:17","nodeType":"YulFunctionCall","src":"17564:93:17"},"nativeSrc":"17564:93:17","nodeType":"YulExpressionStatement","src":"17564:93:17"},{"nativeSrc":"17666:19:17","nodeType":"YulAssignment","src":"17666:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"17677:3:17","nodeType":"YulIdentifier","src":"17677:3:17"},{"kind":"number","nativeSrc":"17682:2:17","nodeType":"YulLiteral","src":"17682:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17673:3:17","nodeType":"YulIdentifier","src":"17673:3:17"},"nativeSrc":"17673:12:17","nodeType":"YulFunctionCall","src":"17673:12:17"},"variableNames":[{"name":"end","nativeSrc":"17666:3:17","nodeType":"YulIdentifier","src":"17666:3:17"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"17325:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17459:3:17","nodeType":"YulTypedName","src":"17459:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17467:3:17","nodeType":"YulTypedName","src":"17467:3:17","type":""}],"src":"17325:366:17"},{"body":{"nativeSrc":"17868:248:17","nodeType":"YulBlock","src":"17868:248:17","statements":[{"nativeSrc":"17878:26:17","nodeType":"YulAssignment","src":"17878:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"17890:9:17","nodeType":"YulIdentifier","src":"17890:9:17"},{"kind":"number","nativeSrc":"17901:2:17","nodeType":"YulLiteral","src":"17901:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17886:3:17","nodeType":"YulIdentifier","src":"17886:3:17"},"nativeSrc":"17886:18:17","nodeType":"YulFunctionCall","src":"17886:18:17"},"variableNames":[{"name":"tail","nativeSrc":"17878:4:17","nodeType":"YulIdentifier","src":"17878:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17925:9:17","nodeType":"YulIdentifier","src":"17925:9:17"},{"kind":"number","nativeSrc":"17936:1:17","nodeType":"YulLiteral","src":"17936:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17921:3:17","nodeType":"YulIdentifier","src":"17921:3:17"},"nativeSrc":"17921:17:17","nodeType":"YulFunctionCall","src":"17921:17:17"},{"arguments":[{"name":"tail","nativeSrc":"17944:4:17","nodeType":"YulIdentifier","src":"17944:4:17"},{"name":"headStart","nativeSrc":"17950:9:17","nodeType":"YulIdentifier","src":"17950:9:17"}],"functionName":{"name":"sub","nativeSrc":"17940:3:17","nodeType":"YulIdentifier","src":"17940:3:17"},"nativeSrc":"17940:20:17","nodeType":"YulFunctionCall","src":"17940:20:17"}],"functionName":{"name":"mstore","nativeSrc":"17914:6:17","nodeType":"YulIdentifier","src":"17914:6:17"},"nativeSrc":"17914:47:17","nodeType":"YulFunctionCall","src":"17914:47:17"},"nativeSrc":"17914:47:17","nodeType":"YulExpressionStatement","src":"17914:47:17"},{"nativeSrc":"17970:139:17","nodeType":"YulAssignment","src":"17970:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"18104:4:17","nodeType":"YulIdentifier","src":"18104:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"17978:124:17","nodeType":"YulIdentifier","src":"17978:124:17"},"nativeSrc":"17978:131:17","nodeType":"YulFunctionCall","src":"17978:131:17"},"variableNames":[{"name":"tail","nativeSrc":"17970:4:17","nodeType":"YulIdentifier","src":"17970:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17697:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17848:9:17","nodeType":"YulTypedName","src":"17848:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17863:4:17","nodeType":"YulTypedName","src":"17863:4:17","type":""}],"src":"17697:419:17"},{"body":{"nativeSrc":"18228:117:17","nodeType":"YulBlock","src":"18228:117:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18250:6:17","nodeType":"YulIdentifier","src":"18250:6:17"},{"kind":"number","nativeSrc":"18258:1:17","nodeType":"YulLiteral","src":"18258:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18246:3:17","nodeType":"YulIdentifier","src":"18246:3:17"},"nativeSrc":"18246:14:17","nodeType":"YulFunctionCall","src":"18246:14:17"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nativeSrc":"18262:34:17","nodeType":"YulLiteral","src":"18262:34:17","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nativeSrc":"18239:6:17","nodeType":"YulIdentifier","src":"18239:6:17"},"nativeSrc":"18239:58:17","nodeType":"YulFunctionCall","src":"18239:58:17"},"nativeSrc":"18239:58:17","nodeType":"YulExpressionStatement","src":"18239:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18318:6:17","nodeType":"YulIdentifier","src":"18318:6:17"},{"kind":"number","nativeSrc":"18326:2:17","nodeType":"YulLiteral","src":"18326:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18314:3:17","nodeType":"YulIdentifier","src":"18314:3:17"},"nativeSrc":"18314:15:17","nodeType":"YulFunctionCall","src":"18314:15:17"},{"hexValue":"72657373","kind":"string","nativeSrc":"18331:6:17","nodeType":"YulLiteral","src":"18331:6:17","type":"","value":"ress"}],"functionName":{"name":"mstore","nativeSrc":"18307:6:17","nodeType":"YulIdentifier","src":"18307:6:17"},"nativeSrc":"18307:31:17","nodeType":"YulFunctionCall","src":"18307:31:17"},"nativeSrc":"18307:31:17","nodeType":"YulExpressionStatement","src":"18307:31:17"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"18122:223:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"18220:6:17","nodeType":"YulTypedName","src":"18220:6:17","type":""}],"src":"18122:223:17"},{"body":{"nativeSrc":"18497:220:17","nodeType":"YulBlock","src":"18497:220:17","statements":[{"nativeSrc":"18507:74:17","nodeType":"YulAssignment","src":"18507:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"18573:3:17","nodeType":"YulIdentifier","src":"18573:3:17"},{"kind":"number","nativeSrc":"18578:2:17","nodeType":"YulLiteral","src":"18578:2:17","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"18514:58:17","nodeType":"YulIdentifier","src":"18514:58:17"},"nativeSrc":"18514:67:17","nodeType":"YulFunctionCall","src":"18514:67:17"},"variableNames":[{"name":"pos","nativeSrc":"18507:3:17","nodeType":"YulIdentifier","src":"18507:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"18679:3:17","nodeType":"YulIdentifier","src":"18679:3:17"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"18590:88:17","nodeType":"YulIdentifier","src":"18590:88:17"},"nativeSrc":"18590:93:17","nodeType":"YulFunctionCall","src":"18590:93:17"},"nativeSrc":"18590:93:17","nodeType":"YulExpressionStatement","src":"18590:93:17"},{"nativeSrc":"18692:19:17","nodeType":"YulAssignment","src":"18692:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"18703:3:17","nodeType":"YulIdentifier","src":"18703:3:17"},{"kind":"number","nativeSrc":"18708:2:17","nodeType":"YulLiteral","src":"18708:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18699:3:17","nodeType":"YulIdentifier","src":"18699:3:17"},"nativeSrc":"18699:12:17","nodeType":"YulFunctionCall","src":"18699:12:17"},"variableNames":[{"name":"end","nativeSrc":"18692:3:17","nodeType":"YulIdentifier","src":"18692:3:17"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"18351:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18485:3:17","nodeType":"YulTypedName","src":"18485:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18493:3:17","nodeType":"YulTypedName","src":"18493:3:17","type":""}],"src":"18351:366:17"},{"body":{"nativeSrc":"18894:248:17","nodeType":"YulBlock","src":"18894:248:17","statements":[{"nativeSrc":"18904:26:17","nodeType":"YulAssignment","src":"18904:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"18916:9:17","nodeType":"YulIdentifier","src":"18916:9:17"},{"kind":"number","nativeSrc":"18927:2:17","nodeType":"YulLiteral","src":"18927:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18912:3:17","nodeType":"YulIdentifier","src":"18912:3:17"},"nativeSrc":"18912:18:17","nodeType":"YulFunctionCall","src":"18912:18:17"},"variableNames":[{"name":"tail","nativeSrc":"18904:4:17","nodeType":"YulIdentifier","src":"18904:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18951:9:17","nodeType":"YulIdentifier","src":"18951:9:17"},{"kind":"number","nativeSrc":"18962:1:17","nodeType":"YulLiteral","src":"18962:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18947:3:17","nodeType":"YulIdentifier","src":"18947:3:17"},"nativeSrc":"18947:17:17","nodeType":"YulFunctionCall","src":"18947:17:17"},{"arguments":[{"name":"tail","nativeSrc":"18970:4:17","nodeType":"YulIdentifier","src":"18970:4:17"},{"name":"headStart","nativeSrc":"18976:9:17","nodeType":"YulIdentifier","src":"18976:9:17"}],"functionName":{"name":"sub","nativeSrc":"18966:3:17","nodeType":"YulIdentifier","src":"18966:3:17"},"nativeSrc":"18966:20:17","nodeType":"YulFunctionCall","src":"18966:20:17"}],"functionName":{"name":"mstore","nativeSrc":"18940:6:17","nodeType":"YulIdentifier","src":"18940:6:17"},"nativeSrc":"18940:47:17","nodeType":"YulFunctionCall","src":"18940:47:17"},"nativeSrc":"18940:47:17","nodeType":"YulExpressionStatement","src":"18940:47:17"},{"nativeSrc":"18996:139:17","nodeType":"YulAssignment","src":"18996:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"19130:4:17","nodeType":"YulIdentifier","src":"19130:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"19004:124:17","nodeType":"YulIdentifier","src":"19004:124:17"},"nativeSrc":"19004:131:17","nodeType":"YulFunctionCall","src":"19004:131:17"},"variableNames":[{"name":"tail","nativeSrc":"18996:4:17","nodeType":"YulIdentifier","src":"18996:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18723:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18874:9:17","nodeType":"YulTypedName","src":"18874:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18889:4:17","nodeType":"YulTypedName","src":"18889:4:17","type":""}],"src":"18723:419:17"},{"body":{"nativeSrc":"19254:69:17","nodeType":"YulBlock","src":"19254:69:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"19276:6:17","nodeType":"YulIdentifier","src":"19276:6:17"},{"kind":"number","nativeSrc":"19284:1:17","nodeType":"YulLiteral","src":"19284:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19272:3:17","nodeType":"YulIdentifier","src":"19272:3:17"},"nativeSrc":"19272:14:17","nodeType":"YulFunctionCall","src":"19272:14:17"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nativeSrc":"19288:27:17","nodeType":"YulLiteral","src":"19288:27:17","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nativeSrc":"19265:6:17","nodeType":"YulIdentifier","src":"19265:6:17"},"nativeSrc":"19265:51:17","nodeType":"YulFunctionCall","src":"19265:51:17"},"nativeSrc":"19265:51:17","nodeType":"YulExpressionStatement","src":"19265:51:17"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"19148:175:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"19246:6:17","nodeType":"YulTypedName","src":"19246:6:17","type":""}],"src":"19148:175:17"},{"body":{"nativeSrc":"19475:220:17","nodeType":"YulBlock","src":"19475:220:17","statements":[{"nativeSrc":"19485:74:17","nodeType":"YulAssignment","src":"19485:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"19551:3:17","nodeType":"YulIdentifier","src":"19551:3:17"},{"kind":"number","nativeSrc":"19556:2:17","nodeType":"YulLiteral","src":"19556:2:17","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"19492:58:17","nodeType":"YulIdentifier","src":"19492:58:17"},"nativeSrc":"19492:67:17","nodeType":"YulFunctionCall","src":"19492:67:17"},"variableNames":[{"name":"pos","nativeSrc":"19485:3:17","nodeType":"YulIdentifier","src":"19485:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19657:3:17","nodeType":"YulIdentifier","src":"19657:3:17"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"19568:88:17","nodeType":"YulIdentifier","src":"19568:88:17"},"nativeSrc":"19568:93:17","nodeType":"YulFunctionCall","src":"19568:93:17"},"nativeSrc":"19568:93:17","nodeType":"YulExpressionStatement","src":"19568:93:17"},{"nativeSrc":"19670:19:17","nodeType":"YulAssignment","src":"19670:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"19681:3:17","nodeType":"YulIdentifier","src":"19681:3:17"},{"kind":"number","nativeSrc":"19686:2:17","nodeType":"YulLiteral","src":"19686:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19677:3:17","nodeType":"YulIdentifier","src":"19677:3:17"},"nativeSrc":"19677:12:17","nodeType":"YulFunctionCall","src":"19677:12:17"},"variableNames":[{"name":"end","nativeSrc":"19670:3:17","nodeType":"YulIdentifier","src":"19670:3:17"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"19329:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19463:3:17","nodeType":"YulTypedName","src":"19463:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19471:3:17","nodeType":"YulTypedName","src":"19471:3:17","type":""}],"src":"19329:366:17"},{"body":{"nativeSrc":"19872:248:17","nodeType":"YulBlock","src":"19872:248:17","statements":[{"nativeSrc":"19882:26:17","nodeType":"YulAssignment","src":"19882:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"19894:9:17","nodeType":"YulIdentifier","src":"19894:9:17"},{"kind":"number","nativeSrc":"19905:2:17","nodeType":"YulLiteral","src":"19905:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19890:3:17","nodeType":"YulIdentifier","src":"19890:3:17"},"nativeSrc":"19890:18:17","nodeType":"YulFunctionCall","src":"19890:18:17"},"variableNames":[{"name":"tail","nativeSrc":"19882:4:17","nodeType":"YulIdentifier","src":"19882:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19929:9:17","nodeType":"YulIdentifier","src":"19929:9:17"},{"kind":"number","nativeSrc":"19940:1:17","nodeType":"YulLiteral","src":"19940:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19925:3:17","nodeType":"YulIdentifier","src":"19925:3:17"},"nativeSrc":"19925:17:17","nodeType":"YulFunctionCall","src":"19925:17:17"},{"arguments":[{"name":"tail","nativeSrc":"19948:4:17","nodeType":"YulIdentifier","src":"19948:4:17"},{"name":"headStart","nativeSrc":"19954:9:17","nodeType":"YulIdentifier","src":"19954:9:17"}],"functionName":{"name":"sub","nativeSrc":"19944:3:17","nodeType":"YulIdentifier","src":"19944:3:17"},"nativeSrc":"19944:20:17","nodeType":"YulFunctionCall","src":"19944:20:17"}],"functionName":{"name":"mstore","nativeSrc":"19918:6:17","nodeType":"YulIdentifier","src":"19918:6:17"},"nativeSrc":"19918:47:17","nodeType":"YulFunctionCall","src":"19918:47:17"},"nativeSrc":"19918:47:17","nodeType":"YulExpressionStatement","src":"19918:47:17"},{"nativeSrc":"19974:139:17","nodeType":"YulAssignment","src":"19974:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"20108:4:17","nodeType":"YulIdentifier","src":"20108:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"19982:124:17","nodeType":"YulIdentifier","src":"19982:124:17"},"nativeSrc":"19982:131:17","nodeType":"YulFunctionCall","src":"19982:131:17"},"variableNames":[{"name":"tail","nativeSrc":"19974:4:17","nodeType":"YulIdentifier","src":"19974:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19701:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19852:9:17","nodeType":"YulTypedName","src":"19852:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19867:4:17","nodeType":"YulTypedName","src":"19867:4:17","type":""}],"src":"19701:419:17"},{"body":{"nativeSrc":"20232:131:17","nodeType":"YulBlock","src":"20232:131:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"20254:6:17","nodeType":"YulIdentifier","src":"20254:6:17"},{"kind":"number","nativeSrc":"20262:1:17","nodeType":"YulLiteral","src":"20262:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20250:3:17","nodeType":"YulIdentifier","src":"20250:3:17"},"nativeSrc":"20250:14:17","nodeType":"YulFunctionCall","src":"20250:14:17"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nativeSrc":"20266:34:17","nodeType":"YulLiteral","src":"20266:34:17","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nativeSrc":"20243:6:17","nodeType":"YulIdentifier","src":"20243:6:17"},"nativeSrc":"20243:58:17","nodeType":"YulFunctionCall","src":"20243:58:17"},"nativeSrc":"20243:58:17","nodeType":"YulExpressionStatement","src":"20243:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"20322:6:17","nodeType":"YulIdentifier","src":"20322:6:17"},{"kind":"number","nativeSrc":"20330:2:17","nodeType":"YulLiteral","src":"20330:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20318:3:17","nodeType":"YulIdentifier","src":"20318:3:17"},"nativeSrc":"20318:15:17","nodeType":"YulFunctionCall","src":"20318:15:17"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nativeSrc":"20335:20:17","nodeType":"YulLiteral","src":"20335:20:17","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nativeSrc":"20311:6:17","nodeType":"YulIdentifier","src":"20311:6:17"},"nativeSrc":"20311:45:17","nodeType":"YulFunctionCall","src":"20311:45:17"},"nativeSrc":"20311:45:17","nodeType":"YulExpressionStatement","src":"20311:45:17"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"20126:237:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"20224:6:17","nodeType":"YulTypedName","src":"20224:6:17","type":""}],"src":"20126:237:17"},{"body":{"nativeSrc":"20515:220:17","nodeType":"YulBlock","src":"20515:220:17","statements":[{"nativeSrc":"20525:74:17","nodeType":"YulAssignment","src":"20525:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"20591:3:17","nodeType":"YulIdentifier","src":"20591:3:17"},{"kind":"number","nativeSrc":"20596:2:17","nodeType":"YulLiteral","src":"20596:2:17","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"20532:58:17","nodeType":"YulIdentifier","src":"20532:58:17"},"nativeSrc":"20532:67:17","nodeType":"YulFunctionCall","src":"20532:67:17"},"variableNames":[{"name":"pos","nativeSrc":"20525:3:17","nodeType":"YulIdentifier","src":"20525:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"20697:3:17","nodeType":"YulIdentifier","src":"20697:3:17"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"20608:88:17","nodeType":"YulIdentifier","src":"20608:88:17"},"nativeSrc":"20608:93:17","nodeType":"YulFunctionCall","src":"20608:93:17"},"nativeSrc":"20608:93:17","nodeType":"YulExpressionStatement","src":"20608:93:17"},{"nativeSrc":"20710:19:17","nodeType":"YulAssignment","src":"20710:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"20721:3:17","nodeType":"YulIdentifier","src":"20721:3:17"},{"kind":"number","nativeSrc":"20726:2:17","nodeType":"YulLiteral","src":"20726:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20717:3:17","nodeType":"YulIdentifier","src":"20717:3:17"},"nativeSrc":"20717:12:17","nodeType":"YulFunctionCall","src":"20717:12:17"},"variableNames":[{"name":"end","nativeSrc":"20710:3:17","nodeType":"YulIdentifier","src":"20710:3:17"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"20369:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20503:3:17","nodeType":"YulTypedName","src":"20503:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20511:3:17","nodeType":"YulTypedName","src":"20511:3:17","type":""}],"src":"20369:366:17"},{"body":{"nativeSrc":"20912:248:17","nodeType":"YulBlock","src":"20912:248:17","statements":[{"nativeSrc":"20922:26:17","nodeType":"YulAssignment","src":"20922:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"20934:9:17","nodeType":"YulIdentifier","src":"20934:9:17"},{"kind":"number","nativeSrc":"20945:2:17","nodeType":"YulLiteral","src":"20945:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20930:3:17","nodeType":"YulIdentifier","src":"20930:3:17"},"nativeSrc":"20930:18:17","nodeType":"YulFunctionCall","src":"20930:18:17"},"variableNames":[{"name":"tail","nativeSrc":"20922:4:17","nodeType":"YulIdentifier","src":"20922:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20969:9:17","nodeType":"YulIdentifier","src":"20969:9:17"},{"kind":"number","nativeSrc":"20980:1:17","nodeType":"YulLiteral","src":"20980:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20965:3:17","nodeType":"YulIdentifier","src":"20965:3:17"},"nativeSrc":"20965:17:17","nodeType":"YulFunctionCall","src":"20965:17:17"},{"arguments":[{"name":"tail","nativeSrc":"20988:4:17","nodeType":"YulIdentifier","src":"20988:4:17"},{"name":"headStart","nativeSrc":"20994:9:17","nodeType":"YulIdentifier","src":"20994:9:17"}],"functionName":{"name":"sub","nativeSrc":"20984:3:17","nodeType":"YulIdentifier","src":"20984:3:17"},"nativeSrc":"20984:20:17","nodeType":"YulFunctionCall","src":"20984:20:17"}],"functionName":{"name":"mstore","nativeSrc":"20958:6:17","nodeType":"YulIdentifier","src":"20958:6:17"},"nativeSrc":"20958:47:17","nodeType":"YulFunctionCall","src":"20958:47:17"},"nativeSrc":"20958:47:17","nodeType":"YulExpressionStatement","src":"20958:47:17"},{"nativeSrc":"21014:139:17","nodeType":"YulAssignment","src":"21014:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"21148:4:17","nodeType":"YulIdentifier","src":"21148:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"21022:124:17","nodeType":"YulIdentifier","src":"21022:124:17"},"nativeSrc":"21022:131:17","nodeType":"YulFunctionCall","src":"21022:131:17"},"variableNames":[{"name":"tail","nativeSrc":"21014:4:17","nodeType":"YulIdentifier","src":"21014:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20741:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20892:9:17","nodeType":"YulTypedName","src":"20892:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20907:4:17","nodeType":"YulTypedName","src":"20907:4:17","type":""}],"src":"20741:419:17"},{"body":{"nativeSrc":"21194:152:17","nodeType":"YulBlock","src":"21194:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21211:1:17","nodeType":"YulLiteral","src":"21211:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"21214:77:17","nodeType":"YulLiteral","src":"21214:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"21204:6:17","nodeType":"YulIdentifier","src":"21204:6:17"},"nativeSrc":"21204:88:17","nodeType":"YulFunctionCall","src":"21204:88:17"},"nativeSrc":"21204:88:17","nodeType":"YulExpressionStatement","src":"21204:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"21308:1:17","nodeType":"YulLiteral","src":"21308:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"21311:4:17","nodeType":"YulLiteral","src":"21311:4:17","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"21301:6:17","nodeType":"YulIdentifier","src":"21301:6:17"},"nativeSrc":"21301:15:17","nodeType":"YulFunctionCall","src":"21301:15:17"},"nativeSrc":"21301:15:17","nodeType":"YulExpressionStatement","src":"21301:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"21332:1:17","nodeType":"YulLiteral","src":"21332:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"21335:4:17","nodeType":"YulLiteral","src":"21335:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"21325:6:17","nodeType":"YulIdentifier","src":"21325:6:17"},"nativeSrc":"21325:15:17","nodeType":"YulFunctionCall","src":"21325:15:17"},"nativeSrc":"21325:15:17","nodeType":"YulExpressionStatement","src":"21325:15:17"}]},"name":"panic_error_0x12","nativeSrc":"21166:180:17","nodeType":"YulFunctionDefinition","src":"21166:180:17"},{"body":{"nativeSrc":"21410:40:17","nodeType":"YulBlock","src":"21410:40:17","statements":[{"nativeSrc":"21421:22:17","nodeType":"YulAssignment","src":"21421:22:17","value":{"arguments":[{"name":"value","nativeSrc":"21437:5:17","nodeType":"YulIdentifier","src":"21437:5:17"}],"functionName":{"name":"mload","nativeSrc":"21431:5:17","nodeType":"YulIdentifier","src":"21431:5:17"},"nativeSrc":"21431:12:17","nodeType":"YulFunctionCall","src":"21431:12:17"},"variableNames":[{"name":"length","nativeSrc":"21421:6:17","nodeType":"YulIdentifier","src":"21421:6:17"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"21352:98:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21393:5:17","nodeType":"YulTypedName","src":"21393:5:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"21403:6:17","nodeType":"YulTypedName","src":"21403:6:17","type":""}],"src":"21352:98:17"},{"body":{"nativeSrc":"21551:73:17","nodeType":"YulBlock","src":"21551:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"21568:3:17","nodeType":"YulIdentifier","src":"21568:3:17"},{"name":"length","nativeSrc":"21573:6:17","nodeType":"YulIdentifier","src":"21573:6:17"}],"functionName":{"name":"mstore","nativeSrc":"21561:6:17","nodeType":"YulIdentifier","src":"21561:6:17"},"nativeSrc":"21561:19:17","nodeType":"YulFunctionCall","src":"21561:19:17"},"nativeSrc":"21561:19:17","nodeType":"YulExpressionStatement","src":"21561:19:17"},{"nativeSrc":"21589:29:17","nodeType":"YulAssignment","src":"21589:29:17","value":{"arguments":[{"name":"pos","nativeSrc":"21608:3:17","nodeType":"YulIdentifier","src":"21608:3:17"},{"kind":"number","nativeSrc":"21613:4:17","nodeType":"YulLiteral","src":"21613:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21604:3:17","nodeType":"YulIdentifier","src":"21604:3:17"},"nativeSrc":"21604:14:17","nodeType":"YulFunctionCall","src":"21604:14:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"21589:11:17","nodeType":"YulIdentifier","src":"21589:11:17"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"21456:168:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21523:3:17","nodeType":"YulTypedName","src":"21523:3:17","type":""},{"name":"length","nativeSrc":"21528:6:17","nodeType":"YulTypedName","src":"21528:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"21539:11:17","nodeType":"YulTypedName","src":"21539:11:17","type":""}],"src":"21456:168:17"},{"body":{"nativeSrc":"21720:283:17","nodeType":"YulBlock","src":"21720:283:17","statements":[{"nativeSrc":"21730:52:17","nodeType":"YulVariableDeclaration","src":"21730:52:17","value":{"arguments":[{"name":"value","nativeSrc":"21776:5:17","nodeType":"YulIdentifier","src":"21776:5:17"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"21744:31:17","nodeType":"YulIdentifier","src":"21744:31:17"},"nativeSrc":"21744:38:17","nodeType":"YulFunctionCall","src":"21744:38:17"},"variables":[{"name":"length","nativeSrc":"21734:6:17","nodeType":"YulTypedName","src":"21734:6:17","type":""}]},{"nativeSrc":"21791:77:17","nodeType":"YulAssignment","src":"21791:77:17","value":{"arguments":[{"name":"pos","nativeSrc":"21856:3:17","nodeType":"YulIdentifier","src":"21856:3:17"},{"name":"length","nativeSrc":"21861:6:17","nodeType":"YulIdentifier","src":"21861:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"21798:57:17","nodeType":"YulIdentifier","src":"21798:57:17"},"nativeSrc":"21798:70:17","nodeType":"YulFunctionCall","src":"21798:70:17"},"variableNames":[{"name":"pos","nativeSrc":"21791:3:17","nodeType":"YulIdentifier","src":"21791:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21916:5:17","nodeType":"YulIdentifier","src":"21916:5:17"},{"kind":"number","nativeSrc":"21923:4:17","nodeType":"YulLiteral","src":"21923:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21912:3:17","nodeType":"YulIdentifier","src":"21912:3:17"},"nativeSrc":"21912:16:17","nodeType":"YulFunctionCall","src":"21912:16:17"},{"name":"pos","nativeSrc":"21930:3:17","nodeType":"YulIdentifier","src":"21930:3:17"},{"name":"length","nativeSrc":"21935:6:17","nodeType":"YulIdentifier","src":"21935:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21877:34:17","nodeType":"YulIdentifier","src":"21877:34:17"},"nativeSrc":"21877:65:17","nodeType":"YulFunctionCall","src":"21877:65:17"},"nativeSrc":"21877:65:17","nodeType":"YulExpressionStatement","src":"21877:65:17"},{"nativeSrc":"21951:46:17","nodeType":"YulAssignment","src":"21951:46:17","value":{"arguments":[{"name":"pos","nativeSrc":"21962:3:17","nodeType":"YulIdentifier","src":"21962:3:17"},{"arguments":[{"name":"length","nativeSrc":"21989:6:17","nodeType":"YulIdentifier","src":"21989:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"21967:21:17","nodeType":"YulIdentifier","src":"21967:21:17"},"nativeSrc":"21967:29:17","nodeType":"YulFunctionCall","src":"21967:29:17"}],"functionName":{"name":"add","nativeSrc":"21958:3:17","nodeType":"YulIdentifier","src":"21958:3:17"},"nativeSrc":"21958:39:17","nodeType":"YulFunctionCall","src":"21958:39:17"},"variableNames":[{"name":"end","nativeSrc":"21951:3:17","nodeType":"YulIdentifier","src":"21951:3:17"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"21630:373:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21701:5:17","nodeType":"YulTypedName","src":"21701:5:17","type":""},{"name":"pos","nativeSrc":"21708:3:17","nodeType":"YulTypedName","src":"21708:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21716:3:17","nodeType":"YulTypedName","src":"21716:3:17","type":""}],"src":"21630:373:17"},{"body":{"nativeSrc":"22209:440:17","nodeType":"YulBlock","src":"22209:440:17","statements":[{"nativeSrc":"22219:27:17","nodeType":"YulAssignment","src":"22219:27:17","value":{"arguments":[{"name":"headStart","nativeSrc":"22231:9:17","nodeType":"YulIdentifier","src":"22231:9:17"},{"kind":"number","nativeSrc":"22242:3:17","nodeType":"YulLiteral","src":"22242:3:17","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22227:3:17","nodeType":"YulIdentifier","src":"22227:3:17"},"nativeSrc":"22227:19:17","nodeType":"YulFunctionCall","src":"22227:19:17"},"variableNames":[{"name":"tail","nativeSrc":"22219:4:17","nodeType":"YulIdentifier","src":"22219:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"22300:6:17","nodeType":"YulIdentifier","src":"22300:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"22313:9:17","nodeType":"YulIdentifier","src":"22313:9:17"},{"kind":"number","nativeSrc":"22324:1:17","nodeType":"YulLiteral","src":"22324:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22309:3:17","nodeType":"YulIdentifier","src":"22309:3:17"},"nativeSrc":"22309:17:17","nodeType":"YulFunctionCall","src":"22309:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22256:43:17","nodeType":"YulIdentifier","src":"22256:43:17"},"nativeSrc":"22256:71:17","nodeType":"YulFunctionCall","src":"22256:71:17"},"nativeSrc":"22256:71:17","nodeType":"YulExpressionStatement","src":"22256:71:17"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"22381:6:17","nodeType":"YulIdentifier","src":"22381:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"22394:9:17","nodeType":"YulIdentifier","src":"22394:9:17"},{"kind":"number","nativeSrc":"22405:2:17","nodeType":"YulLiteral","src":"22405:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22390:3:17","nodeType":"YulIdentifier","src":"22390:3:17"},"nativeSrc":"22390:18:17","nodeType":"YulFunctionCall","src":"22390:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22337:43:17","nodeType":"YulIdentifier","src":"22337:43:17"},"nativeSrc":"22337:72:17","nodeType":"YulFunctionCall","src":"22337:72:17"},"nativeSrc":"22337:72:17","nodeType":"YulExpressionStatement","src":"22337:72:17"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"22463:6:17","nodeType":"YulIdentifier","src":"22463:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"22476:9:17","nodeType":"YulIdentifier","src":"22476:9:17"},{"kind":"number","nativeSrc":"22487:2:17","nodeType":"YulLiteral","src":"22487:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22472:3:17","nodeType":"YulIdentifier","src":"22472:3:17"},"nativeSrc":"22472:18:17","nodeType":"YulFunctionCall","src":"22472:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"22419:43:17","nodeType":"YulIdentifier","src":"22419:43:17"},"nativeSrc":"22419:72:17","nodeType":"YulFunctionCall","src":"22419:72:17"},"nativeSrc":"22419:72:17","nodeType":"YulExpressionStatement","src":"22419:72:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22512:9:17","nodeType":"YulIdentifier","src":"22512:9:17"},{"kind":"number","nativeSrc":"22523:2:17","nodeType":"YulLiteral","src":"22523:2:17","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22508:3:17","nodeType":"YulIdentifier","src":"22508:3:17"},"nativeSrc":"22508:18:17","nodeType":"YulFunctionCall","src":"22508:18:17"},{"arguments":[{"name":"tail","nativeSrc":"22532:4:17","nodeType":"YulIdentifier","src":"22532:4:17"},{"name":"headStart","nativeSrc":"22538:9:17","nodeType":"YulIdentifier","src":"22538:9:17"}],"functionName":{"name":"sub","nativeSrc":"22528:3:17","nodeType":"YulIdentifier","src":"22528:3:17"},"nativeSrc":"22528:20:17","nodeType":"YulFunctionCall","src":"22528:20:17"}],"functionName":{"name":"mstore","nativeSrc":"22501:6:17","nodeType":"YulIdentifier","src":"22501:6:17"},"nativeSrc":"22501:48:17","nodeType":"YulFunctionCall","src":"22501:48:17"},"nativeSrc":"22501:48:17","nodeType":"YulExpressionStatement","src":"22501:48:17"},{"nativeSrc":"22558:84:17","nodeType":"YulAssignment","src":"22558:84:17","value":{"arguments":[{"name":"value3","nativeSrc":"22628:6:17","nodeType":"YulIdentifier","src":"22628:6:17"},{"name":"tail","nativeSrc":"22637:4:17","nodeType":"YulIdentifier","src":"22637:4:17"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"22566:61:17","nodeType":"YulIdentifier","src":"22566:61:17"},"nativeSrc":"22566:76:17","nodeType":"YulFunctionCall","src":"22566:76:17"},"variableNames":[{"name":"tail","nativeSrc":"22558:4:17","nodeType":"YulIdentifier","src":"22558:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"22009:640:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22157:9:17","nodeType":"YulTypedName","src":"22157:9:17","type":""},{"name":"value3","nativeSrc":"22169:6:17","nodeType":"YulTypedName","src":"22169:6:17","type":""},{"name":"value2","nativeSrc":"22177:6:17","nodeType":"YulTypedName","src":"22177:6:17","type":""},{"name":"value1","nativeSrc":"22185:6:17","nodeType":"YulTypedName","src":"22185:6:17","type":""},{"name":"value0","nativeSrc":"22193:6:17","nodeType":"YulTypedName","src":"22193:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22204:4:17","nodeType":"YulTypedName","src":"22204:4:17","type":""}],"src":"22009:640:17"},{"body":{"nativeSrc":"22717:79:17","nodeType":"YulBlock","src":"22717:79:17","statements":[{"nativeSrc":"22727:22:17","nodeType":"YulAssignment","src":"22727:22:17","value":{"arguments":[{"name":"offset","nativeSrc":"22742:6:17","nodeType":"YulIdentifier","src":"22742:6:17"}],"functionName":{"name":"mload","nativeSrc":"22736:5:17","nodeType":"YulIdentifier","src":"22736:5:17"},"nativeSrc":"22736:13:17","nodeType":"YulFunctionCall","src":"22736:13:17"},"variableNames":[{"name":"value","nativeSrc":"22727:5:17","nodeType":"YulIdentifier","src":"22727:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"22784:5:17","nodeType":"YulIdentifier","src":"22784:5:17"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"22758:25:17","nodeType":"YulIdentifier","src":"22758:25:17"},"nativeSrc":"22758:32:17","nodeType":"YulFunctionCall","src":"22758:32:17"},"nativeSrc":"22758:32:17","nodeType":"YulExpressionStatement","src":"22758:32:17"}]},"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"22655:141:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"22695:6:17","nodeType":"YulTypedName","src":"22695:6:17","type":""},{"name":"end","nativeSrc":"22703:3:17","nodeType":"YulTypedName","src":"22703:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"22711:5:17","nodeType":"YulTypedName","src":"22711:5:17","type":""}],"src":"22655:141:17"},{"body":{"nativeSrc":"22878:273:17","nodeType":"YulBlock","src":"22878:273:17","statements":[{"body":{"nativeSrc":"22924:83:17","nodeType":"YulBlock","src":"22924:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"22926:77:17","nodeType":"YulIdentifier","src":"22926:77:17"},"nativeSrc":"22926:79:17","nodeType":"YulFunctionCall","src":"22926:79:17"},"nativeSrc":"22926:79:17","nodeType":"YulExpressionStatement","src":"22926:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"22899:7:17","nodeType":"YulIdentifier","src":"22899:7:17"},{"name":"headStart","nativeSrc":"22908:9:17","nodeType":"YulIdentifier","src":"22908:9:17"}],"functionName":{"name":"sub","nativeSrc":"22895:3:17","nodeType":"YulIdentifier","src":"22895:3:17"},"nativeSrc":"22895:23:17","nodeType":"YulFunctionCall","src":"22895:23:17"},{"kind":"number","nativeSrc":"22920:2:17","nodeType":"YulLiteral","src":"22920:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"22891:3:17","nodeType":"YulIdentifier","src":"22891:3:17"},"nativeSrc":"22891:32:17","nodeType":"YulFunctionCall","src":"22891:32:17"},"nativeSrc":"22888:119:17","nodeType":"YulIf","src":"22888:119:17"},{"nativeSrc":"23017:127:17","nodeType":"YulBlock","src":"23017:127:17","statements":[{"nativeSrc":"23032:15:17","nodeType":"YulVariableDeclaration","src":"23032:15:17","value":{"kind":"number","nativeSrc":"23046:1:17","nodeType":"YulLiteral","src":"23046:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"23036:6:17","nodeType":"YulTypedName","src":"23036:6:17","type":""}]},{"nativeSrc":"23061:73:17","nodeType":"YulAssignment","src":"23061:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23106:9:17","nodeType":"YulIdentifier","src":"23106:9:17"},{"name":"offset","nativeSrc":"23117:6:17","nodeType":"YulIdentifier","src":"23117:6:17"}],"functionName":{"name":"add","nativeSrc":"23102:3:17","nodeType":"YulIdentifier","src":"23102:3:17"},"nativeSrc":"23102:22:17","nodeType":"YulFunctionCall","src":"23102:22:17"},{"name":"dataEnd","nativeSrc":"23126:7:17","nodeType":"YulIdentifier","src":"23126:7:17"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"23071:30:17","nodeType":"YulIdentifier","src":"23071:30:17"},"nativeSrc":"23071:63:17","nodeType":"YulFunctionCall","src":"23071:63:17"},"variableNames":[{"name":"value0","nativeSrc":"23061:6:17","nodeType":"YulIdentifier","src":"23061:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"22802:349:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22848:9:17","nodeType":"YulTypedName","src":"22848:9:17","type":""},{"name":"dataEnd","nativeSrc":"22859:7:17","nodeType":"YulTypedName","src":"22859:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"22871:6:17","nodeType":"YulTypedName","src":"22871:6:17","type":""}],"src":"22802:349:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e991906114f4565b6102bc565b6040516100fb919061153c565b60405180910390f35b61010c61039e565b60405161011991906115e7565b60405180910390f35b61013c6004803603810190610137919061163f565b610430565b60405161014991906116ad565b60405180910390f35b61016c600480360381019061016791906116f4565b610476565b005b61018860048036038101906101839190611734565b61058d565b005b6101a4600480360381019061019f9190611734565b6105ed565b005b6101c060048036038101906101bb919061163f565b61060d565b6040516101cd91906116ad565b60405180910390f35b6101f060048036038101906101eb9190611787565b610693565b6040516101fd91906117c3565b60405180910390f35b61020e61074a565b60405161021b91906115e7565b60405180910390f35b61023e6004803603810190610239919061180a565b6107dc565b005b61025a6004803603810190610255919061197f565b6107f2565b005b6102766004803603810190610271919061163f565b610854565b60405161028391906115e7565b60405180910390f35b6102a660048036038101906102a19190611a02565b6108bc565b6040516102b3919061153c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611a71565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611a71565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611b14565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611ba6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611c38565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611ca4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611d36565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611a71565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611a71565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611c38565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611d92565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611ca4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611eba565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611e28565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f8383836001611185565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690611f26565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061153c565b60405180910390a3505050565b611008848484610b5b565b6110148484848461118b565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90611fb8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611312565b01905060008167ffffffffffffffff81111561109e5761109d611854565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112757611126611fd8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006111ac8473ffffffffffffffffffffffffffffffffffffffff16611465565b15611305578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111d5610a05565b8786866040518563ffffffff1660e01b81526004016111f7949392919061205c565b6020604051808303816000875af192505050801561123357506040513d601f19601f8201168201806040525081019061123091906120bd565b60015b6112b5573d8060008114611263576040519150601f19603f3d011682016040523d82523d6000602084013e611268565b606091505b5060008151036112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490611fb8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061130a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611370577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161136657611365611fd8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113ad576d04ee2d6d415b85acef810000000083816113a3576113a2611fd8565b5b0492506020810190505b662386f26fc1000083106113dc57662386f26fc1000083816113d2576113d1611fd8565b5b0492506010810190505b6305f5e1008310611405576305f5e10083816113fb576113fa611fd8565b5b0492506008810190505b612710831061142a5761271083816114205761141f611fd8565b5b0492506004810190505b6064831061144d576064838161144357611442611fd8565b5b0492506002810190505b600a831061145c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d18161149c565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b60006020828403121561150a57611509611492565b5b6000611518848285016114df565b91505092915050565b60008115159050919050565b61153681611521565b82525050565b6000602082019050611551600083018461152d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611591578082015181840152602081019050611576565b60008484015250505050565b6000601f19601f8301169050919050565b60006115b982611557565b6115c38185611562565b93506115d3818560208601611573565b6115dc8161159d565b840191505092915050565b6000602082019050818103600083015261160181846115ae565b905092915050565b6000819050919050565b61161c81611609565b811461162757600080fd5b50565b60008135905061163981611613565b92915050565b60006020828403121561165557611654611492565b5b60006116638482850161162a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b82525050565b60006020820190506116c2600083018461169e565b92915050565b6116d18161168c565b81146116dc57600080fd5b50565b6000813590506116ee816116c8565b92915050565b6000806040838503121561170b5761170a611492565b5b6000611719858286016116df565b925050602061172a8582860161162a565b9150509250929050565b60008060006060848603121561174d5761174c611492565b5b600061175b868287016116df565b935050602061176c868287016116df565b925050604061177d8682870161162a565b9150509250925092565b60006020828403121561179d5761179c611492565b5b60006117ab848285016116df565b91505092915050565b6117bd81611609565b82525050565b60006020820190506117d860008301846117b4565b92915050565b6117e781611521565b81146117f257600080fd5b50565b600081359050611804816117de565b92915050565b6000806040838503121561182157611820611492565b5b600061182f858286016116df565b9250506020611840858286016117f5565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61188c8261159d565b810181811067ffffffffffffffff821117156118ab576118aa611854565b5b80604052505050565b60006118be611488565b90506118ca8282611883565b919050565b600067ffffffffffffffff8211156118ea576118e9611854565b5b6118f38261159d565b9050602081019050919050565b82818337600083830152505050565b600061192261191d846118cf565b6118b4565b90508281526020810184848401111561193e5761193d61184f565b5b611949848285611900565b509392505050565b600082601f8301126119665761196561184a565b5b813561197684826020860161190f565b91505092915050565b6000806000806080858703121561199957611998611492565b5b60006119a7878288016116df565b94505060206119b8878288016116df565b93505060406119c98782880161162a565b925050606085013567ffffffffffffffff8111156119ea576119e9611497565b5b6119f687828801611951565b91505092959194509250565b60008060408385031215611a1957611a18611492565b5b6000611a27858286016116df565b9250506020611a38858286016116df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a8957607f821691505b602082108103611a9c57611a9b611a42565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611afe602183611562565b9150611b0982611aa2565b604082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611b90603d83611562565b9150611b9b82611b34565b604082019050919050565b60006020820190508181036000830152611bbf81611b83565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611c22602d83611562565b9150611c2d82611bc6565b604082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611c8e601883611562565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611d20602983611562565b9150611d2b82611cc4565b604082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b600081905092915050565b6000611d6c82611557565b611d768185611d56565b9350611d86818560208601611573565b80840191505092915050565b6000611d9e8285611d61565b9150611daa8284611d61565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611e12602583611562565b9150611e1d82611db6565b604082019050919050565b60006020820190508181036000830152611e4181611e05565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611ea4602483611562565b9150611eaf82611e48565b604082019050919050565b60006020820190508181036000830152611ed381611e97565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f10601983611562565b9150611f1b82611eda565b602082019050919050565b60006020820190508181036000830152611f3f81611f03565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fa2603283611562565b9150611fad82611f46565b604082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061202e82612007565b6120388185612012565b9350612048818560208601611573565b6120518161159d565b840191505092915050565b6000608082019050612071600083018761169e565b61207e602083018661169e565b61208b60408301856117b4565b818103606083015261209d8184612023565b905095945050505050565b6000815190506120b7816114c8565b92915050565b6000602082840312156120d3576120d2611492565b5b60006120e1848285016120a8565b9150509291505056fea2646970667358221220603c65e4f474c18fa0972eb056314251faca87c6dcd4068871c10c1be48f0bd564736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x180A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1D36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1185 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1312 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11AC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1465 JUMP JUMPDEST ISZERO PUSH2 0x1305 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11D5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1230 SWAP2 SWAP1 PUSH2 0x20BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12B5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x130A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1370 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1366 JUMPI PUSH2 0x1365 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13AD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13DC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13D2 JUMPI PUSH2 0x13D1 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1405 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x13FB JUMPI PUSH2 0x13FA PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x142A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1420 JUMPI PUSH2 0x141F PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x144D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1443 JUMPI PUSH2 0x1442 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x145C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14D1 DUP2 PUSH2 0x149C JUMP JUMPDEST DUP2 EQ PUSH2 0x14DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14EE DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x150A JUMPI PUSH2 0x1509 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1518 DUP5 DUP3 DUP6 ADD PUSH2 0x14DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1536 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1551 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x152D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1576 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B9 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x15C3 DUP2 DUP6 PUSH2 0x1562 JUMP JUMPDEST SWAP4 POP PUSH2 0x15D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x15DC DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1601 DUP2 DUP5 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x161C DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP2 EQ PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1639 DUP2 PUSH2 0x1613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI PUSH2 0x1654 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1663 DUP5 DUP3 DUP6 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1697 DUP3 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16A7 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D1 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP2 EQ PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16EE DUP2 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x170B JUMPI PUSH2 0x170A PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1719 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x172A DUP6 DUP3 DUP7 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174D JUMPI PUSH2 0x174C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x176C DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x177D DUP7 DUP3 DUP8 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17BD DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1804 DUP2 PUSH2 0x17DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1821 JUMPI PUSH2 0x1820 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x182F DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1840 DUP6 DUP3 DUP7 ADD PUSH2 0x17F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x188C DUP3 PUSH2 0x159D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x1854 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BE PUSH2 0x1488 JUMP JUMPDEST SWAP1 POP PUSH2 0x18CA DUP3 DUP3 PUSH2 0x1883 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EA JUMPI PUSH2 0x18E9 PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH2 0x18F3 DUP3 PUSH2 0x159D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH2 0x191D DUP5 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x193E JUMPI PUSH2 0x193D PUSH2 0x184F JUMP JUMPDEST JUMPDEST PUSH2 0x1949 DUP5 DUP3 DUP6 PUSH2 0x1900 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1966 JUMPI PUSH2 0x1965 PUSH2 0x184A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1976 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x190F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1999 JUMPI PUSH2 0x1998 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B8 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19C9 DUP8 DUP3 DUP9 ADD PUSH2 0x162A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST PUSH2 0x19F6 DUP8 DUP3 DUP9 ADD PUSH2 0x1951 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A18 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A27 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A38 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1A89 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A9C JUMPI PUSH2 0x1A9B PUSH2 0x1A42 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x21 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x1AA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B2D DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B90 PUSH1 0x3D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B9B DUP3 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BBF DUP2 PUSH2 0x1B83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C22 PUSH1 0x2D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C2D DUP3 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C51 DUP2 PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8E PUSH1 0x18 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C99 DUP3 PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CBD DUP2 PUSH2 0x1C81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH1 0x29 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2B DUP3 PUSH2 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D4F DUP2 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6C DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x1D76 DUP2 DUP6 PUSH2 0x1D56 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D86 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9E DUP3 DUP6 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DAA DUP3 DUP5 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E12 PUSH1 0x25 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1D DUP3 PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x1E05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH1 0x24 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAF DUP3 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED3 DUP2 PUSH2 0x1E97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F10 PUSH1 0x19 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F1B DUP3 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3F DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FA2 PUSH1 0x32 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAD DUP3 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FD1 DUP2 PUSH2 0x1F95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202E DUP3 PUSH2 0x2007 JUMP JUMPDEST PUSH2 0x2038 DUP2 DUP6 PUSH2 0x2012 JUMP JUMPDEST SWAP4 POP PUSH2 0x2048 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x2051 DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x209D DUP2 DUP5 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20B7 DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D3 JUMPI PUSH2 0x20D2 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20E1 DUP5 DUP3 DUP6 ADD PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x3C PUSH6 0xE4F474C18FA0 SWAP8 0x2E 0xB0 JUMP BALANCE TIMESTAMP MLOAD STATICCALL 0xCA DUP8 0xC6 0xDC 0xD4 MOD DUP9 PUSH18 0xC10C1BE48F0BD564736F6C634300081B0033 ","sourceMap":"628:16679:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:12:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:3:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:9:-;693:7;719:10;712:17;;640:96;:::o;12768:171:3:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:10:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:3:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:154::-;;;;;:::o;16558:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:14:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:8:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:248::-;1880:1;1890:113;1904:6;1901:1;1898:13;1890:113;;;1989:1;1984:3;1980:11;1974:18;1970:1;1965:3;1961:11;1954:39;1926:2;1923:1;1919:10;1914:15;;1890:113;;;2037:1;2028:6;2023:3;2019:16;2012:27;1860:186;1798:248;;;:::o;2052:102::-;2093:6;2144:2;2140:7;2135:2;2128:5;2124:14;2120:28;2110:38;;2052:102;;;:::o;2160:377::-;2248:3;2276:39;2309:5;2276:39;:::i;:::-;2331:71;2395:6;2390:3;2331:71;:::i;:::-;2324:78;;2411:65;2469:6;2464:3;2457:4;2450:5;2446:16;2411:65;:::i;:::-;2501:29;2523:6;2501:29;:::i;:::-;2496:3;2492:39;2485:46;;2252:285;2160:377;;;;:::o;2543:313::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2743:9;2737:4;2733:20;2729:1;2718:9;2714:17;2707:47;2771:78;2844:4;2835:6;2771:78;:::i;:::-;2763:86;;2543:313;;;;:::o;2862:77::-;2899:7;2928:5;2917:16;;2862:77;;;:::o;2945:122::-;3018:24;3036:5;3018:24;:::i;:::-;3011:5;3008:35;2998:63;;3057:1;3054;3047:12;2998:63;2945:122;:::o;3073:139::-;3119:5;3157:6;3144:20;3135:29;;3173:33;3200:5;3173:33;:::i;:::-;3073:139;;;;:::o;3218:329::-;3277:6;3326:2;3314:9;3305:7;3301:23;3297:32;3294:119;;;3332:79;;:::i;:::-;3294:119;3452:1;3477:53;3522:7;3513:6;3502:9;3498:22;3477:53;:::i;:::-;3467:63;;3423:117;3218:329;;;;:::o;3553:126::-;3590:7;3630:42;3623:5;3619:54;3608:65;;3553:126;;;:::o;3685:96::-;3722:7;3751:24;3769:5;3751:24;:::i;:::-;3740:35;;3685:96;;;:::o;3787:118::-;3874:24;3892:5;3874:24;:::i;:::-;3869:3;3862:37;3787:118;;:::o;3911:222::-;4004:4;4042:2;4031:9;4027:18;4019:26;;4055:71;4123:1;4112:9;4108:17;4099:6;4055:71;:::i;:::-;3911:222;;;;:::o;4139:122::-;4212:24;4230:5;4212:24;:::i;:::-;4205:5;4202:35;4192:63;;4251:1;4248;4241:12;4192:63;4139:122;:::o;4267:139::-;4313:5;4351:6;4338:20;4329:29;;4367:33;4394:5;4367:33;:::i;:::-;4267:139;;;;:::o;4412:474::-;4480:6;4488;4537:2;4525:9;4516:7;4512:23;4508:32;4505:119;;;4543:79;;:::i;:::-;4505:119;4663:1;4688:53;4733:7;4724:6;4713:9;4709:22;4688:53;:::i;:::-;4678:63;;4634:117;4790:2;4816:53;4861:7;4852:6;4841:9;4837:22;4816:53;:::i;:::-;4806:63;;4761:118;4412:474;;;;;:::o;4892:619::-;4969:6;4977;4985;5034:2;5022:9;5013:7;5009:23;5005:32;5002:119;;;5040:79;;:::i;:::-;5002:119;5160:1;5185:53;5230:7;5221:6;5210:9;5206:22;5185:53;:::i;:::-;5175:63;;5131:117;5287:2;5313:53;5358:7;5349:6;5338:9;5334:22;5313:53;:::i;:::-;5303:63;;5258:118;5415:2;5441:53;5486:7;5477:6;5466:9;5462:22;5441:53;:::i;:::-;5431:63;;5386:118;4892:619;;;;;:::o;5517:329::-;5576:6;5625:2;5613:9;5604:7;5600:23;5596:32;5593:119;;;5631:79;;:::i;:::-;5593:119;5751:1;5776:53;5821:7;5812:6;5801:9;5797:22;5776:53;:::i;:::-;5766:63;;5722:117;5517:329;;;;:::o;5852:118::-;5939:24;5957:5;5939:24;:::i;:::-;5934:3;5927:37;5852:118;;:::o;5976:222::-;6069:4;6107:2;6096:9;6092:18;6084:26;;6120:71;6188:1;6177:9;6173:17;6164:6;6120:71;:::i;:::-;5976:222;;;;:::o;6204:116::-;6274:21;6289:5;6274:21;:::i;:::-;6267:5;6264:32;6254:60;;6310:1;6307;6300:12;6254:60;6204:116;:::o;6326:133::-;6369:5;6407:6;6394:20;6385:29;;6423:30;6447:5;6423:30;:::i;:::-;6326:133;;;;:::o;6465:468::-;6530:6;6538;6587:2;6575:9;6566:7;6562:23;6558:32;6555:119;;;6593:79;;:::i;:::-;6555:119;6713:1;6738:53;6783:7;6774:6;6763:9;6759:22;6738:53;:::i;:::-;6728:63;;6684:117;6840:2;6866:50;6908:7;6899:6;6888:9;6884:22;6866:50;:::i;:::-;6856:60;;6811:115;6465:468;;;;;:::o;6939:117::-;7048:1;7045;7038:12;7062:117;7171:1;7168;7161:12;7185:180;7233:77;7230:1;7223:88;7330:4;7327:1;7320:15;7354:4;7351:1;7344:15;7371:281;7454:27;7476:4;7454:27;:::i;:::-;7446:6;7442:40;7584:6;7572:10;7569:22;7548:18;7536:10;7533:34;7530:62;7527:88;;;7595:18;;:::i;:::-;7527:88;7635:10;7631:2;7624:22;7414:238;7371:281;;:::o;7658:129::-;7692:6;7719:20;;:::i;:::-;7709:30;;7748:33;7776:4;7768:6;7748:33;:::i;:::-;7658:129;;;:::o;7793:307::-;7854:4;7944:18;7936:6;7933:30;7930:56;;;7966:18;;:::i;:::-;7930:56;8004:29;8026:6;8004:29;:::i;:::-;7996:37;;8088:4;8082;8078:15;8070:23;;7793:307;;;:::o;8106:148::-;8204:6;8199:3;8194;8181:30;8245:1;8236:6;8231:3;8227:16;8220:27;8106:148;;;:::o;8260:423::-;8337:5;8362:65;8378:48;8419:6;8378:48;:::i;:::-;8362:65;:::i;:::-;8353:74;;8450:6;8443:5;8436:21;8488:4;8481:5;8477:16;8526:3;8517:6;8512:3;8508:16;8505:25;8502:112;;;8533:79;;:::i;:::-;8502:112;8623:54;8670:6;8665:3;8660;8623:54;:::i;:::-;8343:340;8260:423;;;;;:::o;8702:338::-;8757:5;8806:3;8799:4;8791:6;8787:17;8783:27;8773:122;;8814:79;;:::i;:::-;8773:122;8931:6;8918:20;8956:78;9030:3;9022:6;9015:4;9007:6;9003:17;8956:78;:::i;:::-;8947:87;;8763:277;8702:338;;;;:::o;9046:943::-;9141:6;9149;9157;9165;9214:3;9202:9;9193:7;9189:23;9185:33;9182:120;;;9221:79;;:::i;:::-;9182:120;9341:1;9366:53;9411:7;9402:6;9391:9;9387:22;9366:53;:::i;:::-;9356:63;;9312:117;9468:2;9494:53;9539:7;9530:6;9519:9;9515:22;9494:53;:::i;:::-;9484:63;;9439:118;9596:2;9622:53;9667:7;9658:6;9647:9;9643:22;9622:53;:::i;:::-;9612:63;;9567:118;9752:2;9741:9;9737:18;9724:32;9783:18;9775:6;9772:30;9769:117;;;9805:79;;:::i;:::-;9769:117;9910:62;9964:7;9955:6;9944:9;9940:22;9910:62;:::i;:::-;9900:72;;9695:287;9046:943;;;;;;;:::o;9995:474::-;10063:6;10071;10120:2;10108:9;10099:7;10095:23;10091:32;10088:119;;;10126:79;;:::i;:::-;10088:119;10246:1;10271:53;10316:7;10307:6;10296:9;10292:22;10271:53;:::i;:::-;10261:63;;10217:117;10373:2;10399:53;10444:7;10435:6;10424:9;10420:22;10399:53;:::i;:::-;10389:63;;10344:118;9995:474;;;;;:::o;10475:180::-;10523:77;10520:1;10513:88;10620:4;10617:1;10610:15;10644:4;10641:1;10634:15;10661:320;10705:6;10742:1;10736:4;10732:12;10722:22;;10789:1;10783:4;10779:12;10810:18;10800:81;;10866:4;10858:6;10854:17;10844:27;;10800:81;10928:2;10920:6;10917:14;10897:18;10894:38;10891:84;;10947:18;;:::i;:::-;10891:84;10712:269;10661:320;;;:::o;10987:220::-;11127:34;11123:1;11115:6;11111:14;11104:58;11196:3;11191:2;11183:6;11179:15;11172:28;10987:220;:::o;11213:366::-;11355:3;11376:67;11440:2;11435:3;11376:67;:::i;:::-;11369:74;;11452:93;11541:3;11452:93;:::i;:::-;11570:2;11565:3;11561:12;11554:19;;11213:366;;;:::o;11585:419::-;11751:4;11789:2;11778:9;11774:18;11766:26;;11838:9;11832:4;11828:20;11824:1;11813:9;11809:17;11802:47;11866:131;11992:4;11866:131;:::i;:::-;11858:139;;11585:419;;;:::o;12010:248::-;12150:34;12146:1;12138:6;12134:14;12127:58;12219:31;12214:2;12206:6;12202:15;12195:56;12010:248;:::o;12264:366::-;12406:3;12427:67;12491:2;12486:3;12427:67;:::i;:::-;12420:74;;12503:93;12592:3;12503:93;:::i;:::-;12621:2;12616:3;12612:12;12605:19;;12264:366;;;:::o;12636:419::-;12802:4;12840:2;12829:9;12825:18;12817:26;;12889:9;12883:4;12879:20;12875:1;12864:9;12860:17;12853:47;12917:131;13043:4;12917:131;:::i;:::-;12909:139;;12636:419;;;:::o;13061:232::-;13201:34;13197:1;13189:6;13185:14;13178:58;13270:15;13265:2;13257:6;13253:15;13246:40;13061:232;:::o;13299:366::-;13441:3;13462:67;13526:2;13521:3;13462:67;:::i;:::-;13455:74;;13538:93;13627:3;13538:93;:::i;:::-;13656:2;13651:3;13647:12;13640:19;;13299:366;;;:::o;13671:419::-;13837:4;13875:2;13864:9;13860:18;13852:26;;13924:9;13918:4;13914:20;13910:1;13899:9;13895:17;13888:47;13952:131;14078:4;13952:131;:::i;:::-;13944:139;;13671:419;;;:::o;14096:174::-;14236:26;14232:1;14224:6;14220:14;14213:50;14096:174;:::o;14276:366::-;14418:3;14439:67;14503:2;14498:3;14439:67;:::i;:::-;14432:74;;14515:93;14604:3;14515:93;:::i;:::-;14633:2;14628:3;14624:12;14617:19;;14276:366;;;:::o;14648:419::-;14814:4;14852:2;14841:9;14837:18;14829:26;;14901:9;14895:4;14891:20;14887:1;14876:9;14872:17;14865:47;14929:131;15055:4;14929:131;:::i;:::-;14921:139;;14648:419;;;:::o;15073:228::-;15213:34;15209:1;15201:6;15197:14;15190:58;15282:11;15277:2;15269:6;15265:15;15258:36;15073:228;:::o;15307:366::-;15449:3;15470:67;15534:2;15529:3;15470:67;:::i;:::-;15463:74;;15546:93;15635:3;15546:93;:::i;:::-;15664:2;15659:3;15655:12;15648:19;;15307:366;;;:::o;15679:419::-;15845:4;15883:2;15872:9;15868:18;15860:26;;15932:9;15926:4;15922:20;15918:1;15907:9;15903:17;15896:47;15960:131;16086:4;15960:131;:::i;:::-;15952:139;;15679:419;;;:::o;16104:148::-;16206:11;16243:3;16228:18;;16104:148;;;;:::o;16258:390::-;16364:3;16392:39;16425:5;16392:39;:::i;:::-;16447:89;16529:6;16524:3;16447:89;:::i;:::-;16440:96;;16545:65;16603:6;16598:3;16591:4;16584:5;16580:16;16545:65;:::i;:::-;16635:6;16630:3;16626:16;16619:23;;16368:280;16258:390;;;;:::o;16654:435::-;16834:3;16856:95;16947:3;16938:6;16856:95;:::i;:::-;16849:102;;16968:95;17059:3;17050:6;16968:95;:::i;:::-;16961:102;;17080:3;17073:10;;16654:435;;;;;:::o;17095:224::-;17235:34;17231:1;17223:6;17219:14;17212:58;17304:7;17299:2;17291:6;17287:15;17280:32;17095:224;:::o;17325:366::-;17467:3;17488:67;17552:2;17547:3;17488:67;:::i;:::-;17481:74;;17564:93;17653:3;17564:93;:::i;:::-;17682:2;17677:3;17673:12;17666:19;;17325:366;;;:::o;17697:419::-;17863:4;17901:2;17890:9;17886:18;17878:26;;17950:9;17944:4;17940:20;17936:1;17925:9;17921:17;17914:47;17978:131;18104:4;17978:131;:::i;:::-;17970:139;;17697:419;;;:::o;18122:223::-;18262:34;18258:1;18250:6;18246:14;18239:58;18331:6;18326:2;18318:6;18314:15;18307:31;18122:223;:::o;18351:366::-;18493:3;18514:67;18578:2;18573:3;18514:67;:::i;:::-;18507:74;;18590:93;18679:3;18590:93;:::i;:::-;18708:2;18703:3;18699:12;18692:19;;18351:366;;;:::o;18723:419::-;18889:4;18927:2;18916:9;18912:18;18904:26;;18976:9;18970:4;18966:20;18962:1;18951:9;18947:17;18940:47;19004:131;19130:4;19004:131;:::i;:::-;18996:139;;18723:419;;;:::o;19148:175::-;19288:27;19284:1;19276:6;19272:14;19265:51;19148:175;:::o;19329:366::-;19471:3;19492:67;19556:2;19551:3;19492:67;:::i;:::-;19485:74;;19568:93;19657:3;19568:93;:::i;:::-;19686:2;19681:3;19677:12;19670:19;;19329:366;;;:::o;19701:419::-;19867:4;19905:2;19894:9;19890:18;19882:26;;19954:9;19948:4;19944:20;19940:1;19929:9;19925:17;19918:47;19982:131;20108:4;19982:131;:::i;:::-;19974:139;;19701:419;;;:::o;20126:237::-;20266:34;20262:1;20254:6;20250:14;20243:58;20335:20;20330:2;20322:6;20318:15;20311:45;20126:237;:::o;20369:366::-;20511:3;20532:67;20596:2;20591:3;20532:67;:::i;:::-;20525:74;;20608:93;20697:3;20608:93;:::i;:::-;20726:2;20721:3;20717:12;20710:19;;20369:366;;;:::o;20741:419::-;20907:4;20945:2;20934:9;20930:18;20922:26;;20994:9;20988:4;20984:20;20980:1;20969:9;20965:17;20958:47;21022:131;21148:4;21022:131;:::i;:::-;21014:139;;20741:419;;;:::o;21166:180::-;21214:77;21211:1;21204:88;21311:4;21308:1;21301:15;21335:4;21332:1;21325:15;21352:98;21403:6;21437:5;21431:12;21421:22;;21352:98;;;:::o;21456:168::-;21539:11;21573:6;21568:3;21561:19;21613:4;21608:3;21604:14;21589:29;;21456:168;;;;:::o;21630:373::-;21716:3;21744:38;21776:5;21744:38;:::i;:::-;21798:70;21861:6;21856:3;21798:70;:::i;:::-;21791:77;;21877:65;21935:6;21930:3;21923:4;21916:5;21912:16;21877:65;:::i;:::-;21967:29;21989:6;21967:29;:::i;:::-;21962:3;21958:39;21951:46;;21720:283;21630:373;;;;:::o;22009:640::-;22204:4;22242:3;22231:9;22227:19;22219:27;;22256:71;22324:1;22313:9;22309:17;22300:6;22256:71;:::i;:::-;22337:72;22405:2;22394:9;22390:18;22381:6;22337:72;:::i;:::-;22419;22487:2;22476:9;22472:18;22463:6;22419:72;:::i;:::-;22538:9;22532:4;22528:20;22523:2;22512:9;22508:18;22501:48;22566:76;22637:4;22628:6;22566:76;:::i;:::-;22558:84;;22009:640;;;;;;;:::o;22655:141::-;22711:5;22742:6;22736:13;22727:22;;22758:32;22784:5;22758:32;:::i;:::-;22655:141;;;;:::o;22802:349::-;22871:6;22920:2;22908:9;22899:7;22895:23;22891:32;22888:119;;;22926:79;;:::i;:::-;22888:119;23046:1;23071:63;23126:7;23117:6;23106:9;23102:22;23071:63;:::i;:::-;23061:73;;23017:127;22802:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1696000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2921","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3022","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3459","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"17","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":240,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":242,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":246,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":250,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":254,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":260,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/common/ERC2981.sol":{"ERC2981":{"abi":[{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_salePrice","type":"uint256"}],"name":"royaltyInfo","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._","kind":"dev","methods":{"royaltyInfo(uint256,uint256)":{"details":"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"royaltyInfo(uint256,uint256)":"2a55205a","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/common/ERC2981.sol\":\"ERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1319,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"_defaultRoyaltyInfo","offset":0,"slot":"0","type":"t_struct(RoyaltyInfo)1316_storage"},{"astId":1324,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"_tokenRoyaltyInfo","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(RoyaltyInfo)1316_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_uint256,t_struct(RoyaltyInfo)1316_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC2981.RoyaltyInfo)","numberOfBytes":"32","value":"t_struct(RoyaltyInfo)1316_storage"},"t_struct(RoyaltyInfo)1316_storage":{"encoding":"inplace","label":"struct ERC2981.RoyaltyInfo","members":[{"astId":1313,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"receiver","offset":0,"slot":"0","type":"t_address"},{"astId":1315,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"royaltyFraction","offset":20,"slot":"0","type":"t_uint96"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052986aeb73a356e68de8807792eecf970af09b4fbde6abdf7dc5974ee741abcf64736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SWAP9 PUSH11 0xEB73A356E68DE8807792EE 0xCF SWAP8 EXP CREATE SWAP12 0x4F 0xBD 0xE6 0xAB 0xDF PUSH30 0xC5974EE741ABCF64736F6C634300081B0033000000000000000000000000 ","sourceMap":"194:8964:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052986aeb73a356e68de8807792eecf970af09b4fbde6abdf7dc5974ee741abcf64736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SWAP9 PUSH11 0xEB73A356E68DE8807792EE 0xCF SWAP8 EXP CREATE SWAP12 0x4F 0xBD 0xE6 0xAB 0xDF PUSH30 0xC5974EE741ABCF64736F6C634300081B0033000000000000000000000000 ","sourceMap":"194:8964:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f56b70a696c4620b3a99dcbe1bd18a43f5306eb3587e074412734fec2cd376d864736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 PUSH12 0x70A696C4620B3A99DCBE1BD1 DUP11 NUMBER CREATE2 ADDRESS PUSH15 0xB3587E074412734FEC2CD376D86473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"188:2065:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f56b70a696c4620b3a99dcbe1bd18a43f5306eb3587e074412734fec2cd376d864736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 PUSH12 0x70A696C4620B3A99DCBE1BD1 DUP11 NUMBER CREATE2 ADDRESS PUSH15 0xB3587E074412734FEC2CD376D86473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"188:2065:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220faf7514ed0f57e289d66121321025a302d948f2bd4bcef39e3d091349c3714d664736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL 0xF7 MLOAD 0x4E 0xD0 CREATE2 PUSH31 0x289D66121321025A302D948F2BD4BCEF39E3D091349C3714D664736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"802:8493:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220faf7514ed0f57e289d66121321025a302d948f2bd4bcef39e3d091349c3714d664736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL 0xF7 MLOAD 0x4E 0xD0 CREATE2 PUSH31 0x289D66121321025A302D948F2BD4BCEF39E3D091349C3714D664736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"802:8493:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004d51bea48eb0ef178af178d3a9edadb57d5899b8b8a7885b18acba6321eb88964736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV 0xD5 SHL 0xEA BASEFEE 0xEB 0xE CALL PUSH25 0xAF178D3A9EDADB57D5899B8B8A7885B18ACBA6321EB8896473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"202:12302:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004d51bea48eb0ef178af178d3a9edadb57d5899b8b8a7885b18acba6321eb88964736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV 0xD5 SHL 0xEA BASEFEE 0xEB 0xE CALL PUSH25 0xAF178D3A9EDADB57D5899B8B8A7885B18ACBA6321EB8896473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"202:12302:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/BitMaps.sol":{"BitMaps":{"abi":[],"devdoc":{"details":"Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential. Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a025a3fb9d0f3e8b548b35b0f07be84e4a76403af35fb0962255dd6c5b8cf0f64736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x25A3FB9D0F3E8B548B35B 0xF SMOD 0xBE DUP5 0xE4 0xA7 PUSH5 0x3AF35FB09 PUSH3 0x255DD6 0xC5 0xB8 0xCF 0xF PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"405:1184:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a025a3fb9d0f3e8b548b35b0f07be84e4a76403af35fb0962255dd6c5b8cf0f64736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x25A3FB9D0F3E8B548B35B 0xF SMOD 0xBE DUP5 0xE4 0xA7 PUSH5 0x3AF35FB09 PUSH3 0x255DD6 0xC5 0xB8 0xCF 0xF PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"405:1184:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"get(struct BitMaps.BitMap storage pointer,uint256)":"infinite","set(struct BitMaps.BitMap storage pointer,uint256)":"infinite","setTo(struct BitMaps.BitMap storage pointer,uint256,bool)":"infinite","unset(struct BitMaps.BitMap storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential. Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":\"BitMaps\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xbe43faa7ef7ac3c588d91a2f457fb90f4dc0cf9972b0eb8d9bdfa7d136f25df5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/NFT1.sol":{"NFT1":{"abi":[{"inputs":[{"internalType":"string","name":"baseURI","type":"string"},{"internalType":"bytes32","name":"merkleRoot_","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FundsWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"nftOwner","type":"address"}],"name":"Minted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DISCOUNTED_MINTING_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTING_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROYALTY_FEE_NUMERATOR","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mintWithDiscount","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_salePrice","type":"uint256"}],"name":"royaltyInfo","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"feeNumerator","type":"uint96"}],"name":"setTokenRoyalty","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenIdCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"salesPrice","type":"uint256"}],"name":"transferFromWithRoyalties","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"An ERC721 contract with added functionality for minting, discounts using Merkle proofs, and royalties (ERC2981).      Includes features like time-limited discounts, withdrawal of funds, and token transfers with royalty payments.      Based on OpenZeppelin's ERC721, Ownable2Step, and ERC2981 standards.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"params":{"baseURI":"The base URI for token metadata.","merkleRoot_":"The Merkle root used for airdrop/discount verification."}},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"mint()":{"details":"Requires sending 0.1 ETH. Only mints if the supply limit hasn't been reached."},"mintWithDiscount(bytes32[],uint256,uint256)":{"details":"Requires sending 0.05 ETH for the discounted mint price.","params":{"amount":"The number of tokens to mint.","index":"The index in the Merkle tree.","proof":"The Merkle proof of eligibility for the discount."}},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"royaltyInfo(uint256,uint256)":{"details":"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"setBaseURI(string)":{"params":{"baseURI":"The new base URI."}},"setTokenRoyalty(uint256,address,uint96)":{"params":{"feeNumerator":"The royalty percentage, represented as a numerator out of 10,000.","receiver":"The address that should receive the royalty.","tokenId":"The ID of the token."}},"supportsInterface(bytes4)":{"params":{"interfaceId":"The interface identifier."},"returns":{"_0":"Whether the contract supports the specified interface."}},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"returns":{"_0":"The total supply of tokens."}},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferFromWithRoyalties(address,address,uint256,uint256)":{"details":"Ensures that the royalty payment is made before the transfer.","params":{"from":"The address sending the NFT.","salesPrice":"The sale price of the NFT.","to":"The address receiving the NFT.","tokenId":"The ID of the token being transferred."}},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."},"withdrawFunds()":{"details":"Only callable by the owner of the contract. Emits a FundsWithdrawn event."}},"title":"NFT1","version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_277":{"entryPoint":null,"id":277,"parameterSlots":2,"returnSlots":0},"@_3649":{"entryPoint":null,"id":3649,"parameterSlots":2,"returnSlots":0},"@_feeDenominator_1407":{"entryPoint":785,"id":1407,"parameterSlots":0,"returnSlots":1},"@_msgSender_1842":{"entryPoint":276,"id":1842,"parameterSlots":0,"returnSlots":1},"@_setDefaultRoyalty_1441":{"entryPoint":319,"id":1441,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":795,"id":111,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_172":{"entryPoint":730,"id":172,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_3920":{"entryPoint":284,"id":3920,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1254,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":1399,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_bytes32_fromMemory":{"entryPoint":1420,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack":{"entryPoint":2363,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack":{"entryPoint":2471,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2398,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2506,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":1136,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":993,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":1163,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1619,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1512,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2267,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1916,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_bytes32":{"entryPoint":1366,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1751,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1881,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":1771,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":2057,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1212,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1640,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1570,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":2029,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":1087,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":1761,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1999,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":1523,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1040,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1805,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1013,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1018,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1008,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1003,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1023,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":1656,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1986,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1857,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d":{"entryPoint":2284,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff":{"entryPoint":2430,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1669,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1815,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":1376,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1852,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:10948:17","nodeType":"YulBlock","src":"0:10948:17","statements":[{"body":{"nativeSrc":"47:35:17","nodeType":"YulBlock","src":"47:35:17","statements":[{"nativeSrc":"57:19:17","nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:17","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:17","nodeType":"YulIdentifier","src":"67:5:17"},"nativeSrc":"67:9:17","nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:17","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:17","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nativeSrc":"177:28:17","nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:17","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:17","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:17","nodeType":"YulIdentifier","src":"187:6:17"},"nativeSrc":"187:12:17","nodeType":"YulFunctionCall","src":"187:12:17"},"nativeSrc":"187:12:17","nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:17","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nativeSrc":"300:28:17","nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:17","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:17","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:17","nodeType":"YulIdentifier","src":"310:6:17"},"nativeSrc":"310:12:17","nodeType":"YulFunctionCall","src":"310:12:17"},"nativeSrc":"310:12:17","nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:17","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nativeSrc":"423:28:17","nodeType":"YulBlock","src":"423:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"440:1:17","nodeType":"YulLiteral","src":"440:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"443:1:17","nodeType":"YulLiteral","src":"443:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"433:6:17","nodeType":"YulIdentifier","src":"433:6:17"},"nativeSrc":"433:12:17","nodeType":"YulFunctionCall","src":"433:12:17"},"nativeSrc":"433:12:17","nodeType":"YulExpressionStatement","src":"433:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"334:117:17","nodeType":"YulFunctionDefinition","src":"334:117:17"},{"body":{"nativeSrc":"546:28:17","nodeType":"YulBlock","src":"546:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"563:1:17","nodeType":"YulLiteral","src":"563:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"566:1:17","nodeType":"YulLiteral","src":"566:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"556:6:17","nodeType":"YulIdentifier","src":"556:6:17"},"nativeSrc":"556:12:17","nodeType":"YulFunctionCall","src":"556:12:17"},"nativeSrc":"556:12:17","nodeType":"YulExpressionStatement","src":"556:12:17"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"457:117:17","nodeType":"YulFunctionDefinition","src":"457:117:17"},{"body":{"nativeSrc":"628:54:17","nodeType":"YulBlock","src":"628:54:17","statements":[{"nativeSrc":"638:38:17","nodeType":"YulAssignment","src":"638:38:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"656:5:17","nodeType":"YulIdentifier","src":"656:5:17"},{"kind":"number","nativeSrc":"663:2:17","nodeType":"YulLiteral","src":"663:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"652:3:17","nodeType":"YulIdentifier","src":"652:3:17"},"nativeSrc":"652:14:17","nodeType":"YulFunctionCall","src":"652:14:17"},{"arguments":[{"kind":"number","nativeSrc":"672:2:17","nodeType":"YulLiteral","src":"672:2:17","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"668:3:17","nodeType":"YulIdentifier","src":"668:3:17"},"nativeSrc":"668:7:17","nodeType":"YulFunctionCall","src":"668:7:17"}],"functionName":{"name":"and","nativeSrc":"648:3:17","nodeType":"YulIdentifier","src":"648:3:17"},"nativeSrc":"648:28:17","nodeType":"YulFunctionCall","src":"648:28:17"},"variableNames":[{"name":"result","nativeSrc":"638:6:17","nodeType":"YulIdentifier","src":"638:6:17"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"580:102:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"611:5:17","nodeType":"YulTypedName","src":"611:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"621:6:17","nodeType":"YulTypedName","src":"621:6:17","type":""}],"src":"580:102:17"},{"body":{"nativeSrc":"716:152:17","nodeType":"YulBlock","src":"716:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"733:1:17","nodeType":"YulLiteral","src":"733:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"736:77:17","nodeType":"YulLiteral","src":"736:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"726:6:17","nodeType":"YulIdentifier","src":"726:6:17"},"nativeSrc":"726:88:17","nodeType":"YulFunctionCall","src":"726:88:17"},"nativeSrc":"726:88:17","nodeType":"YulExpressionStatement","src":"726:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"830:1:17","nodeType":"YulLiteral","src":"830:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"833:4:17","nodeType":"YulLiteral","src":"833:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"823:6:17","nodeType":"YulIdentifier","src":"823:6:17"},"nativeSrc":"823:15:17","nodeType":"YulFunctionCall","src":"823:15:17"},"nativeSrc":"823:15:17","nodeType":"YulExpressionStatement","src":"823:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"854:1:17","nodeType":"YulLiteral","src":"854:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"857:4:17","nodeType":"YulLiteral","src":"857:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"847:6:17","nodeType":"YulIdentifier","src":"847:6:17"},"nativeSrc":"847:15:17","nodeType":"YulFunctionCall","src":"847:15:17"},"nativeSrc":"847:15:17","nodeType":"YulExpressionStatement","src":"847:15:17"}]},"name":"panic_error_0x41","nativeSrc":"688:180:17","nodeType":"YulFunctionDefinition","src":"688:180:17"},{"body":{"nativeSrc":"917:238:17","nodeType":"YulBlock","src":"917:238:17","statements":[{"nativeSrc":"927:58:17","nodeType":"YulVariableDeclaration","src":"927:58:17","value":{"arguments":[{"name":"memPtr","nativeSrc":"949:6:17","nodeType":"YulIdentifier","src":"949:6:17"},{"arguments":[{"name":"size","nativeSrc":"979:4:17","nodeType":"YulIdentifier","src":"979:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"957:21:17","nodeType":"YulIdentifier","src":"957:21:17"},"nativeSrc":"957:27:17","nodeType":"YulFunctionCall","src":"957:27:17"}],"functionName":{"name":"add","nativeSrc":"945:3:17","nodeType":"YulIdentifier","src":"945:3:17"},"nativeSrc":"945:40:17","nodeType":"YulFunctionCall","src":"945:40:17"},"variables":[{"name":"newFreePtr","nativeSrc":"931:10:17","nodeType":"YulTypedName","src":"931:10:17","type":""}]},{"body":{"nativeSrc":"1096:22:17","nodeType":"YulBlock","src":"1096:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1098:16:17","nodeType":"YulIdentifier","src":"1098:16:17"},"nativeSrc":"1098:18:17","nodeType":"YulFunctionCall","src":"1098:18:17"},"nativeSrc":"1098:18:17","nodeType":"YulExpressionStatement","src":"1098:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1039:10:17","nodeType":"YulIdentifier","src":"1039:10:17"},{"kind":"number","nativeSrc":"1051:18:17","nodeType":"YulLiteral","src":"1051:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1036:2:17","nodeType":"YulIdentifier","src":"1036:2:17"},"nativeSrc":"1036:34:17","nodeType":"YulFunctionCall","src":"1036:34:17"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1075:10:17","nodeType":"YulIdentifier","src":"1075:10:17"},{"name":"memPtr","nativeSrc":"1087:6:17","nodeType":"YulIdentifier","src":"1087:6:17"}],"functionName":{"name":"lt","nativeSrc":"1072:2:17","nodeType":"YulIdentifier","src":"1072:2:17"},"nativeSrc":"1072:22:17","nodeType":"YulFunctionCall","src":"1072:22:17"}],"functionName":{"name":"or","nativeSrc":"1033:2:17","nodeType":"YulIdentifier","src":"1033:2:17"},"nativeSrc":"1033:62:17","nodeType":"YulFunctionCall","src":"1033:62:17"},"nativeSrc":"1030:88:17","nodeType":"YulIf","src":"1030:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1134:2:17","nodeType":"YulLiteral","src":"1134:2:17","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1138:10:17","nodeType":"YulIdentifier","src":"1138:10:17"}],"functionName":{"name":"mstore","nativeSrc":"1127:6:17","nodeType":"YulIdentifier","src":"1127:6:17"},"nativeSrc":"1127:22:17","nodeType":"YulFunctionCall","src":"1127:22:17"},"nativeSrc":"1127:22:17","nodeType":"YulExpressionStatement","src":"1127:22:17"}]},"name":"finalize_allocation","nativeSrc":"874:281:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"903:6:17","nodeType":"YulTypedName","src":"903:6:17","type":""},{"name":"size","nativeSrc":"911:4:17","nodeType":"YulTypedName","src":"911:4:17","type":""}],"src":"874:281:17"},{"body":{"nativeSrc":"1202:88:17","nodeType":"YulBlock","src":"1202:88:17","statements":[{"nativeSrc":"1212:30:17","nodeType":"YulAssignment","src":"1212:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1222:18:17","nodeType":"YulIdentifier","src":"1222:18:17"},"nativeSrc":"1222:20:17","nodeType":"YulFunctionCall","src":"1222:20:17"},"variableNames":[{"name":"memPtr","nativeSrc":"1212:6:17","nodeType":"YulIdentifier","src":"1212:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1271:6:17","nodeType":"YulIdentifier","src":"1271:6:17"},{"name":"size","nativeSrc":"1279:4:17","nodeType":"YulIdentifier","src":"1279:4:17"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1251:19:17","nodeType":"YulIdentifier","src":"1251:19:17"},"nativeSrc":"1251:33:17","nodeType":"YulFunctionCall","src":"1251:33:17"},"nativeSrc":"1251:33:17","nodeType":"YulExpressionStatement","src":"1251:33:17"}]},"name":"allocate_memory","nativeSrc":"1161:129:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1186:4:17","nodeType":"YulTypedName","src":"1186:4:17","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1195:6:17","nodeType":"YulTypedName","src":"1195:6:17","type":""}],"src":"1161:129:17"},{"body":{"nativeSrc":"1363:241:17","nodeType":"YulBlock","src":"1363:241:17","statements":[{"body":{"nativeSrc":"1468:22:17","nodeType":"YulBlock","src":"1468:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1470:16:17","nodeType":"YulIdentifier","src":"1470:16:17"},"nativeSrc":"1470:18:17","nodeType":"YulFunctionCall","src":"1470:18:17"},"nativeSrc":"1470:18:17","nodeType":"YulExpressionStatement","src":"1470:18:17"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1440:6:17","nodeType":"YulIdentifier","src":"1440:6:17"},{"kind":"number","nativeSrc":"1448:18:17","nodeType":"YulLiteral","src":"1448:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1437:2:17","nodeType":"YulIdentifier","src":"1437:2:17"},"nativeSrc":"1437:30:17","nodeType":"YulFunctionCall","src":"1437:30:17"},"nativeSrc":"1434:56:17","nodeType":"YulIf","src":"1434:56:17"},{"nativeSrc":"1500:37:17","nodeType":"YulAssignment","src":"1500:37:17","value":{"arguments":[{"name":"length","nativeSrc":"1530:6:17","nodeType":"YulIdentifier","src":"1530:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1508:21:17","nodeType":"YulIdentifier","src":"1508:21:17"},"nativeSrc":"1508:29:17","nodeType":"YulFunctionCall","src":"1508:29:17"},"variableNames":[{"name":"size","nativeSrc":"1500:4:17","nodeType":"YulIdentifier","src":"1500:4:17"}]},{"nativeSrc":"1574:23:17","nodeType":"YulAssignment","src":"1574:23:17","value":{"arguments":[{"name":"size","nativeSrc":"1586:4:17","nodeType":"YulIdentifier","src":"1586:4:17"},{"kind":"number","nativeSrc":"1592:4:17","nodeType":"YulLiteral","src":"1592:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1582:3:17","nodeType":"YulIdentifier","src":"1582:3:17"},"nativeSrc":"1582:15:17","nodeType":"YulFunctionCall","src":"1582:15:17"},"variableNames":[{"name":"size","nativeSrc":"1574:4:17","nodeType":"YulIdentifier","src":"1574:4:17"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1296:308:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1347:6:17","nodeType":"YulTypedName","src":"1347:6:17","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1358:4:17","nodeType":"YulTypedName","src":"1358:4:17","type":""}],"src":"1296:308:17"},{"body":{"nativeSrc":"1672:186:17","nodeType":"YulBlock","src":"1672:186:17","statements":[{"nativeSrc":"1683:10:17","nodeType":"YulVariableDeclaration","src":"1683:10:17","value":{"kind":"number","nativeSrc":"1692:1:17","nodeType":"YulLiteral","src":"1692:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1687:1:17","nodeType":"YulTypedName","src":"1687:1:17","type":""}]},{"body":{"nativeSrc":"1752:63:17","nodeType":"YulBlock","src":"1752:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1777:3:17","nodeType":"YulIdentifier","src":"1777:3:17"},{"name":"i","nativeSrc":"1782:1:17","nodeType":"YulIdentifier","src":"1782:1:17"}],"functionName":{"name":"add","nativeSrc":"1773:3:17","nodeType":"YulIdentifier","src":"1773:3:17"},"nativeSrc":"1773:11:17","nodeType":"YulFunctionCall","src":"1773:11:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1796:3:17","nodeType":"YulIdentifier","src":"1796:3:17"},{"name":"i","nativeSrc":"1801:1:17","nodeType":"YulIdentifier","src":"1801:1:17"}],"functionName":{"name":"add","nativeSrc":"1792:3:17","nodeType":"YulIdentifier","src":"1792:3:17"},"nativeSrc":"1792:11:17","nodeType":"YulFunctionCall","src":"1792:11:17"}],"functionName":{"name":"mload","nativeSrc":"1786:5:17","nodeType":"YulIdentifier","src":"1786:5:17"},"nativeSrc":"1786:18:17","nodeType":"YulFunctionCall","src":"1786:18:17"}],"functionName":{"name":"mstore","nativeSrc":"1766:6:17","nodeType":"YulIdentifier","src":"1766:6:17"},"nativeSrc":"1766:39:17","nodeType":"YulFunctionCall","src":"1766:39:17"},"nativeSrc":"1766:39:17","nodeType":"YulExpressionStatement","src":"1766:39:17"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1713:1:17","nodeType":"YulIdentifier","src":"1713:1:17"},{"name":"length","nativeSrc":"1716:6:17","nodeType":"YulIdentifier","src":"1716:6:17"}],"functionName":{"name":"lt","nativeSrc":"1710:2:17","nodeType":"YulIdentifier","src":"1710:2:17"},"nativeSrc":"1710:13:17","nodeType":"YulFunctionCall","src":"1710:13:17"},"nativeSrc":"1702:113:17","nodeType":"YulForLoop","post":{"nativeSrc":"1724:19:17","nodeType":"YulBlock","src":"1724:19:17","statements":[{"nativeSrc":"1726:15:17","nodeType":"YulAssignment","src":"1726:15:17","value":{"arguments":[{"name":"i","nativeSrc":"1735:1:17","nodeType":"YulIdentifier","src":"1735:1:17"},{"kind":"number","nativeSrc":"1738:2:17","nodeType":"YulLiteral","src":"1738:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1731:3:17","nodeType":"YulIdentifier","src":"1731:3:17"},"nativeSrc":"1731:10:17","nodeType":"YulFunctionCall","src":"1731:10:17"},"variableNames":[{"name":"i","nativeSrc":"1726:1:17","nodeType":"YulIdentifier","src":"1726:1:17"}]}]},"pre":{"nativeSrc":"1706:3:17","nodeType":"YulBlock","src":"1706:3:17","statements":[]},"src":"1702:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1835:3:17","nodeType":"YulIdentifier","src":"1835:3:17"},{"name":"length","nativeSrc":"1840:6:17","nodeType":"YulIdentifier","src":"1840:6:17"}],"functionName":{"name":"add","nativeSrc":"1831:3:17","nodeType":"YulIdentifier","src":"1831:3:17"},"nativeSrc":"1831:16:17","nodeType":"YulFunctionCall","src":"1831:16:17"},{"kind":"number","nativeSrc":"1849:1:17","nodeType":"YulLiteral","src":"1849:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1824:6:17","nodeType":"YulIdentifier","src":"1824:6:17"},"nativeSrc":"1824:27:17","nodeType":"YulFunctionCall","src":"1824:27:17"},"nativeSrc":"1824:27:17","nodeType":"YulExpressionStatement","src":"1824:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1610:248:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1654:3:17","nodeType":"YulTypedName","src":"1654:3:17","type":""},{"name":"dst","nativeSrc":"1659:3:17","nodeType":"YulTypedName","src":"1659:3:17","type":""},{"name":"length","nativeSrc":"1664:6:17","nodeType":"YulTypedName","src":"1664:6:17","type":""}],"src":"1610:248:17"},{"body":{"nativeSrc":"1959:339:17","nodeType":"YulBlock","src":"1959:339:17","statements":[{"nativeSrc":"1969:75:17","nodeType":"YulAssignment","src":"1969:75:17","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2036:6:17","nodeType":"YulIdentifier","src":"2036:6:17"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1994:41:17","nodeType":"YulIdentifier","src":"1994:41:17"},"nativeSrc":"1994:49:17","nodeType":"YulFunctionCall","src":"1994:49:17"}],"functionName":{"name":"allocate_memory","nativeSrc":"1978:15:17","nodeType":"YulIdentifier","src":"1978:15:17"},"nativeSrc":"1978:66:17","nodeType":"YulFunctionCall","src":"1978:66:17"},"variableNames":[{"name":"array","nativeSrc":"1969:5:17","nodeType":"YulIdentifier","src":"1969:5:17"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2060:5:17","nodeType":"YulIdentifier","src":"2060:5:17"},{"name":"length","nativeSrc":"2067:6:17","nodeType":"YulIdentifier","src":"2067:6:17"}],"functionName":{"name":"mstore","nativeSrc":"2053:6:17","nodeType":"YulIdentifier","src":"2053:6:17"},"nativeSrc":"2053:21:17","nodeType":"YulFunctionCall","src":"2053:21:17"},"nativeSrc":"2053:21:17","nodeType":"YulExpressionStatement","src":"2053:21:17"},{"nativeSrc":"2083:27:17","nodeType":"YulVariableDeclaration","src":"2083:27:17","value":{"arguments":[{"name":"array","nativeSrc":"2098:5:17","nodeType":"YulIdentifier","src":"2098:5:17"},{"kind":"number","nativeSrc":"2105:4:17","nodeType":"YulLiteral","src":"2105:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2094:3:17","nodeType":"YulIdentifier","src":"2094:3:17"},"nativeSrc":"2094:16:17","nodeType":"YulFunctionCall","src":"2094:16:17"},"variables":[{"name":"dst","nativeSrc":"2087:3:17","nodeType":"YulTypedName","src":"2087:3:17","type":""}]},{"body":{"nativeSrc":"2148:83:17","nodeType":"YulBlock","src":"2148:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"2150:77:17","nodeType":"YulIdentifier","src":"2150:77:17"},"nativeSrc":"2150:79:17","nodeType":"YulFunctionCall","src":"2150:79:17"},"nativeSrc":"2150:79:17","nodeType":"YulExpressionStatement","src":"2150:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2129:3:17","nodeType":"YulIdentifier","src":"2129:3:17"},{"name":"length","nativeSrc":"2134:6:17","nodeType":"YulIdentifier","src":"2134:6:17"}],"functionName":{"name":"add","nativeSrc":"2125:3:17","nodeType":"YulIdentifier","src":"2125:3:17"},"nativeSrc":"2125:16:17","nodeType":"YulFunctionCall","src":"2125:16:17"},{"name":"end","nativeSrc":"2143:3:17","nodeType":"YulIdentifier","src":"2143:3:17"}],"functionName":{"name":"gt","nativeSrc":"2122:2:17","nodeType":"YulIdentifier","src":"2122:2:17"},"nativeSrc":"2122:25:17","nodeType":"YulFunctionCall","src":"2122:25:17"},"nativeSrc":"2119:112:17","nodeType":"YulIf","src":"2119:112:17"},{"expression":{"arguments":[{"name":"src","nativeSrc":"2275:3:17","nodeType":"YulIdentifier","src":"2275:3:17"},{"name":"dst","nativeSrc":"2280:3:17","nodeType":"YulIdentifier","src":"2280:3:17"},{"name":"length","nativeSrc":"2285:6:17","nodeType":"YulIdentifier","src":"2285:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2240:34:17","nodeType":"YulIdentifier","src":"2240:34:17"},"nativeSrc":"2240:52:17","nodeType":"YulFunctionCall","src":"2240:52:17"},"nativeSrc":"2240:52:17","nodeType":"YulExpressionStatement","src":"2240:52:17"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"1864:434:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1932:3:17","nodeType":"YulTypedName","src":"1932:3:17","type":""},{"name":"length","nativeSrc":"1937:6:17","nodeType":"YulTypedName","src":"1937:6:17","type":""},{"name":"end","nativeSrc":"1945:3:17","nodeType":"YulTypedName","src":"1945:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1953:5:17","nodeType":"YulTypedName","src":"1953:5:17","type":""}],"src":"1864:434:17"},{"body":{"nativeSrc":"2391:282:17","nodeType":"YulBlock","src":"2391:282:17","statements":[{"body":{"nativeSrc":"2440:83:17","nodeType":"YulBlock","src":"2440:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2442:77:17","nodeType":"YulIdentifier","src":"2442:77:17"},"nativeSrc":"2442:79:17","nodeType":"YulFunctionCall","src":"2442:79:17"},"nativeSrc":"2442:79:17","nodeType":"YulExpressionStatement","src":"2442:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2419:6:17","nodeType":"YulIdentifier","src":"2419:6:17"},{"kind":"number","nativeSrc":"2427:4:17","nodeType":"YulLiteral","src":"2427:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2415:3:17","nodeType":"YulIdentifier","src":"2415:3:17"},"nativeSrc":"2415:17:17","nodeType":"YulFunctionCall","src":"2415:17:17"},{"name":"end","nativeSrc":"2434:3:17","nodeType":"YulIdentifier","src":"2434:3:17"}],"functionName":{"name":"slt","nativeSrc":"2411:3:17","nodeType":"YulIdentifier","src":"2411:3:17"},"nativeSrc":"2411:27:17","nodeType":"YulFunctionCall","src":"2411:27:17"}],"functionName":{"name":"iszero","nativeSrc":"2404:6:17","nodeType":"YulIdentifier","src":"2404:6:17"},"nativeSrc":"2404:35:17","nodeType":"YulFunctionCall","src":"2404:35:17"},"nativeSrc":"2401:122:17","nodeType":"YulIf","src":"2401:122:17"},{"nativeSrc":"2532:27:17","nodeType":"YulVariableDeclaration","src":"2532:27:17","value":{"arguments":[{"name":"offset","nativeSrc":"2552:6:17","nodeType":"YulIdentifier","src":"2552:6:17"}],"functionName":{"name":"mload","nativeSrc":"2546:5:17","nodeType":"YulIdentifier","src":"2546:5:17"},"nativeSrc":"2546:13:17","nodeType":"YulFunctionCall","src":"2546:13:17"},"variables":[{"name":"length","nativeSrc":"2536:6:17","nodeType":"YulTypedName","src":"2536:6:17","type":""}]},{"nativeSrc":"2568:99:17","nodeType":"YulAssignment","src":"2568:99:17","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2640:6:17","nodeType":"YulIdentifier","src":"2640:6:17"},{"kind":"number","nativeSrc":"2648:4:17","nodeType":"YulLiteral","src":"2648:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2636:3:17","nodeType":"YulIdentifier","src":"2636:3:17"},"nativeSrc":"2636:17:17","nodeType":"YulFunctionCall","src":"2636:17:17"},{"name":"length","nativeSrc":"2655:6:17","nodeType":"YulIdentifier","src":"2655:6:17"},{"name":"end","nativeSrc":"2663:3:17","nodeType":"YulIdentifier","src":"2663:3:17"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"2577:58:17","nodeType":"YulIdentifier","src":"2577:58:17"},"nativeSrc":"2577:90:17","nodeType":"YulFunctionCall","src":"2577:90:17"},"variableNames":[{"name":"array","nativeSrc":"2568:5:17","nodeType":"YulIdentifier","src":"2568:5:17"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"2318:355:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2369:6:17","nodeType":"YulTypedName","src":"2369:6:17","type":""},{"name":"end","nativeSrc":"2377:3:17","nodeType":"YulTypedName","src":"2377:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2385:5:17","nodeType":"YulTypedName","src":"2385:5:17","type":""}],"src":"2318:355:17"},{"body":{"nativeSrc":"2724:32:17","nodeType":"YulBlock","src":"2724:32:17","statements":[{"nativeSrc":"2734:16:17","nodeType":"YulAssignment","src":"2734:16:17","value":{"name":"value","nativeSrc":"2745:5:17","nodeType":"YulIdentifier","src":"2745:5:17"},"variableNames":[{"name":"cleaned","nativeSrc":"2734:7:17","nodeType":"YulIdentifier","src":"2734:7:17"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"2679:77:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2706:5:17","nodeType":"YulTypedName","src":"2706:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2716:7:17","nodeType":"YulTypedName","src":"2716:7:17","type":""}],"src":"2679:77:17"},{"body":{"nativeSrc":"2805:79:17","nodeType":"YulBlock","src":"2805:79:17","statements":[{"body":{"nativeSrc":"2862:16:17","nodeType":"YulBlock","src":"2862:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2871:1:17","nodeType":"YulLiteral","src":"2871:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"2874:1:17","nodeType":"YulLiteral","src":"2874:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2864:6:17","nodeType":"YulIdentifier","src":"2864:6:17"},"nativeSrc":"2864:12:17","nodeType":"YulFunctionCall","src":"2864:12:17"},"nativeSrc":"2864:12:17","nodeType":"YulExpressionStatement","src":"2864:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2828:5:17","nodeType":"YulIdentifier","src":"2828:5:17"},{"arguments":[{"name":"value","nativeSrc":"2853:5:17","nodeType":"YulIdentifier","src":"2853:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"2835:17:17","nodeType":"YulIdentifier","src":"2835:17:17"},"nativeSrc":"2835:24:17","nodeType":"YulFunctionCall","src":"2835:24:17"}],"functionName":{"name":"eq","nativeSrc":"2825:2:17","nodeType":"YulIdentifier","src":"2825:2:17"},"nativeSrc":"2825:35:17","nodeType":"YulFunctionCall","src":"2825:35:17"}],"functionName":{"name":"iszero","nativeSrc":"2818:6:17","nodeType":"YulIdentifier","src":"2818:6:17"},"nativeSrc":"2818:43:17","nodeType":"YulFunctionCall","src":"2818:43:17"},"nativeSrc":"2815:63:17","nodeType":"YulIf","src":"2815:63:17"}]},"name":"validator_revert_t_bytes32","nativeSrc":"2762:122:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2798:5:17","nodeType":"YulTypedName","src":"2798:5:17","type":""}],"src":"2762:122:17"},{"body":{"nativeSrc":"2953:80:17","nodeType":"YulBlock","src":"2953:80:17","statements":[{"nativeSrc":"2963:22:17","nodeType":"YulAssignment","src":"2963:22:17","value":{"arguments":[{"name":"offset","nativeSrc":"2978:6:17","nodeType":"YulIdentifier","src":"2978:6:17"}],"functionName":{"name":"mload","nativeSrc":"2972:5:17","nodeType":"YulIdentifier","src":"2972:5:17"},"nativeSrc":"2972:13:17","nodeType":"YulFunctionCall","src":"2972:13:17"},"variableNames":[{"name":"value","nativeSrc":"2963:5:17","nodeType":"YulIdentifier","src":"2963:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3021:5:17","nodeType":"YulIdentifier","src":"3021:5:17"}],"functionName":{"name":"validator_revert_t_bytes32","nativeSrc":"2994:26:17","nodeType":"YulIdentifier","src":"2994:26:17"},"nativeSrc":"2994:33:17","nodeType":"YulFunctionCall","src":"2994:33:17"},"nativeSrc":"2994:33:17","nodeType":"YulExpressionStatement","src":"2994:33:17"}]},"name":"abi_decode_t_bytes32_fromMemory","nativeSrc":"2890:143:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2931:6:17","nodeType":"YulTypedName","src":"2931:6:17","type":""},{"name":"end","nativeSrc":"2939:3:17","nodeType":"YulTypedName","src":"2939:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2947:5:17","nodeType":"YulTypedName","src":"2947:5:17","type":""}],"src":"2890:143:17"},{"body":{"nativeSrc":"3143:576:17","nodeType":"YulBlock","src":"3143:576:17","statements":[{"body":{"nativeSrc":"3189:83:17","nodeType":"YulBlock","src":"3189:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3191:77:17","nodeType":"YulIdentifier","src":"3191:77:17"},"nativeSrc":"3191:79:17","nodeType":"YulFunctionCall","src":"3191:79:17"},"nativeSrc":"3191:79:17","nodeType":"YulExpressionStatement","src":"3191:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3164:7:17","nodeType":"YulIdentifier","src":"3164:7:17"},{"name":"headStart","nativeSrc":"3173:9:17","nodeType":"YulIdentifier","src":"3173:9:17"}],"functionName":{"name":"sub","nativeSrc":"3160:3:17","nodeType":"YulIdentifier","src":"3160:3:17"},"nativeSrc":"3160:23:17","nodeType":"YulFunctionCall","src":"3160:23:17"},{"kind":"number","nativeSrc":"3185:2:17","nodeType":"YulLiteral","src":"3185:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3156:3:17","nodeType":"YulIdentifier","src":"3156:3:17"},"nativeSrc":"3156:32:17","nodeType":"YulFunctionCall","src":"3156:32:17"},"nativeSrc":"3153:119:17","nodeType":"YulIf","src":"3153:119:17"},{"nativeSrc":"3282:291:17","nodeType":"YulBlock","src":"3282:291:17","statements":[{"nativeSrc":"3297:38:17","nodeType":"YulVariableDeclaration","src":"3297:38:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3321:9:17","nodeType":"YulIdentifier","src":"3321:9:17"},{"kind":"number","nativeSrc":"3332:1:17","nodeType":"YulLiteral","src":"3332:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3317:3:17","nodeType":"YulIdentifier","src":"3317:3:17"},"nativeSrc":"3317:17:17","nodeType":"YulFunctionCall","src":"3317:17:17"}],"functionName":{"name":"mload","nativeSrc":"3311:5:17","nodeType":"YulIdentifier","src":"3311:5:17"},"nativeSrc":"3311:24:17","nodeType":"YulFunctionCall","src":"3311:24:17"},"variables":[{"name":"offset","nativeSrc":"3301:6:17","nodeType":"YulTypedName","src":"3301:6:17","type":""}]},{"body":{"nativeSrc":"3382:83:17","nodeType":"YulBlock","src":"3382:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3384:77:17","nodeType":"YulIdentifier","src":"3384:77:17"},"nativeSrc":"3384:79:17","nodeType":"YulFunctionCall","src":"3384:79:17"},"nativeSrc":"3384:79:17","nodeType":"YulExpressionStatement","src":"3384:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3354:6:17","nodeType":"YulIdentifier","src":"3354:6:17"},{"kind":"number","nativeSrc":"3362:18:17","nodeType":"YulLiteral","src":"3362:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3351:2:17","nodeType":"YulIdentifier","src":"3351:2:17"},"nativeSrc":"3351:30:17","nodeType":"YulFunctionCall","src":"3351:30:17"},"nativeSrc":"3348:117:17","nodeType":"YulIf","src":"3348:117:17"},{"nativeSrc":"3479:84:17","nodeType":"YulAssignment","src":"3479:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3535:9:17","nodeType":"YulIdentifier","src":"3535:9:17"},{"name":"offset","nativeSrc":"3546:6:17","nodeType":"YulIdentifier","src":"3546:6:17"}],"functionName":{"name":"add","nativeSrc":"3531:3:17","nodeType":"YulIdentifier","src":"3531:3:17"},"nativeSrc":"3531:22:17","nodeType":"YulFunctionCall","src":"3531:22:17"},{"name":"dataEnd","nativeSrc":"3555:7:17","nodeType":"YulIdentifier","src":"3555:7:17"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3489:41:17","nodeType":"YulIdentifier","src":"3489:41:17"},"nativeSrc":"3489:74:17","nodeType":"YulFunctionCall","src":"3489:74:17"},"variableNames":[{"name":"value0","nativeSrc":"3479:6:17","nodeType":"YulIdentifier","src":"3479:6:17"}]}]},{"nativeSrc":"3583:129:17","nodeType":"YulBlock","src":"3583:129:17","statements":[{"nativeSrc":"3598:16:17","nodeType":"YulVariableDeclaration","src":"3598:16:17","value":{"kind":"number","nativeSrc":"3612:2:17","nodeType":"YulLiteral","src":"3612:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"3602:6:17","nodeType":"YulTypedName","src":"3602:6:17","type":""}]},{"nativeSrc":"3628:74:17","nodeType":"YulAssignment","src":"3628:74:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3674:9:17","nodeType":"YulIdentifier","src":"3674:9:17"},{"name":"offset","nativeSrc":"3685:6:17","nodeType":"YulIdentifier","src":"3685:6:17"}],"functionName":{"name":"add","nativeSrc":"3670:3:17","nodeType":"YulIdentifier","src":"3670:3:17"},"nativeSrc":"3670:22:17","nodeType":"YulFunctionCall","src":"3670:22:17"},{"name":"dataEnd","nativeSrc":"3694:7:17","nodeType":"YulIdentifier","src":"3694:7:17"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nativeSrc":"3638:31:17","nodeType":"YulIdentifier","src":"3638:31:17"},"nativeSrc":"3638:64:17","nodeType":"YulFunctionCall","src":"3638:64:17"},"variableNames":[{"name":"value1","nativeSrc":"3628:6:17","nodeType":"YulIdentifier","src":"3628:6:17"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_bytes32_fromMemory","nativeSrc":"3039:680:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3105:9:17","nodeType":"YulTypedName","src":"3105:9:17","type":""},{"name":"dataEnd","nativeSrc":"3116:7:17","nodeType":"YulTypedName","src":"3116:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3128:6:17","nodeType":"YulTypedName","src":"3128:6:17","type":""},{"name":"value1","nativeSrc":"3136:6:17","nodeType":"YulTypedName","src":"3136:6:17","type":""}],"src":"3039:680:17"},{"body":{"nativeSrc":"3784:40:17","nodeType":"YulBlock","src":"3784:40:17","statements":[{"nativeSrc":"3795:22:17","nodeType":"YulAssignment","src":"3795:22:17","value":{"arguments":[{"name":"value","nativeSrc":"3811:5:17","nodeType":"YulIdentifier","src":"3811:5:17"}],"functionName":{"name":"mload","nativeSrc":"3805:5:17","nodeType":"YulIdentifier","src":"3805:5:17"},"nativeSrc":"3805:12:17","nodeType":"YulFunctionCall","src":"3805:12:17"},"variableNames":[{"name":"length","nativeSrc":"3795:6:17","nodeType":"YulIdentifier","src":"3795:6:17"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"3725:99:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3767:5:17","nodeType":"YulTypedName","src":"3767:5:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"3777:6:17","nodeType":"YulTypedName","src":"3777:6:17","type":""}],"src":"3725:99:17"},{"body":{"nativeSrc":"3858:152:17","nodeType":"YulBlock","src":"3858:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3875:1:17","nodeType":"YulLiteral","src":"3875:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"3878:77:17","nodeType":"YulLiteral","src":"3878:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3868:6:17","nodeType":"YulIdentifier","src":"3868:6:17"},"nativeSrc":"3868:88:17","nodeType":"YulFunctionCall","src":"3868:88:17"},"nativeSrc":"3868:88:17","nodeType":"YulExpressionStatement","src":"3868:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3972:1:17","nodeType":"YulLiteral","src":"3972:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"3975:4:17","nodeType":"YulLiteral","src":"3975:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"3965:6:17","nodeType":"YulIdentifier","src":"3965:6:17"},"nativeSrc":"3965:15:17","nodeType":"YulFunctionCall","src":"3965:15:17"},"nativeSrc":"3965:15:17","nodeType":"YulExpressionStatement","src":"3965:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3996:1:17","nodeType":"YulLiteral","src":"3996:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"3999:4:17","nodeType":"YulLiteral","src":"3999:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3989:6:17","nodeType":"YulIdentifier","src":"3989:6:17"},"nativeSrc":"3989:15:17","nodeType":"YulFunctionCall","src":"3989:15:17"},"nativeSrc":"3989:15:17","nodeType":"YulExpressionStatement","src":"3989:15:17"}]},"name":"panic_error_0x22","nativeSrc":"3830:180:17","nodeType":"YulFunctionDefinition","src":"3830:180:17"},{"body":{"nativeSrc":"4067:269:17","nodeType":"YulBlock","src":"4067:269:17","statements":[{"nativeSrc":"4077:22:17","nodeType":"YulAssignment","src":"4077:22:17","value":{"arguments":[{"name":"data","nativeSrc":"4091:4:17","nodeType":"YulIdentifier","src":"4091:4:17"},{"kind":"number","nativeSrc":"4097:1:17","nodeType":"YulLiteral","src":"4097:1:17","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"4087:3:17","nodeType":"YulIdentifier","src":"4087:3:17"},"nativeSrc":"4087:12:17","nodeType":"YulFunctionCall","src":"4087:12:17"},"variableNames":[{"name":"length","nativeSrc":"4077:6:17","nodeType":"YulIdentifier","src":"4077:6:17"}]},{"nativeSrc":"4108:38:17","nodeType":"YulVariableDeclaration","src":"4108:38:17","value":{"arguments":[{"name":"data","nativeSrc":"4138:4:17","nodeType":"YulIdentifier","src":"4138:4:17"},{"kind":"number","nativeSrc":"4144:1:17","nodeType":"YulLiteral","src":"4144:1:17","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"4134:3:17","nodeType":"YulIdentifier","src":"4134:3:17"},"nativeSrc":"4134:12:17","nodeType":"YulFunctionCall","src":"4134:12:17"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"4112:18:17","nodeType":"YulTypedName","src":"4112:18:17","type":""}]},{"body":{"nativeSrc":"4185:51:17","nodeType":"YulBlock","src":"4185:51:17","statements":[{"nativeSrc":"4199:27:17","nodeType":"YulAssignment","src":"4199:27:17","value":{"arguments":[{"name":"length","nativeSrc":"4213:6:17","nodeType":"YulIdentifier","src":"4213:6:17"},{"kind":"number","nativeSrc":"4221:4:17","nodeType":"YulLiteral","src":"4221:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"4209:3:17","nodeType":"YulIdentifier","src":"4209:3:17"},"nativeSrc":"4209:17:17","nodeType":"YulFunctionCall","src":"4209:17:17"},"variableNames":[{"name":"length","nativeSrc":"4199:6:17","nodeType":"YulIdentifier","src":"4199:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"4165:18:17","nodeType":"YulIdentifier","src":"4165:18:17"}],"functionName":{"name":"iszero","nativeSrc":"4158:6:17","nodeType":"YulIdentifier","src":"4158:6:17"},"nativeSrc":"4158:26:17","nodeType":"YulFunctionCall","src":"4158:26:17"},"nativeSrc":"4155:81:17","nodeType":"YulIf","src":"4155:81:17"},{"body":{"nativeSrc":"4288:42:17","nodeType":"YulBlock","src":"4288:42:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"4302:16:17","nodeType":"YulIdentifier","src":"4302:16:17"},"nativeSrc":"4302:18:17","nodeType":"YulFunctionCall","src":"4302:18:17"},"nativeSrc":"4302:18:17","nodeType":"YulExpressionStatement","src":"4302:18:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"4252:18:17","nodeType":"YulIdentifier","src":"4252:18:17"},{"arguments":[{"name":"length","nativeSrc":"4275:6:17","nodeType":"YulIdentifier","src":"4275:6:17"},{"kind":"number","nativeSrc":"4283:2:17","nodeType":"YulLiteral","src":"4283:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"4272:2:17","nodeType":"YulIdentifier","src":"4272:2:17"},"nativeSrc":"4272:14:17","nodeType":"YulFunctionCall","src":"4272:14:17"}],"functionName":{"name":"eq","nativeSrc":"4249:2:17","nodeType":"YulIdentifier","src":"4249:2:17"},"nativeSrc":"4249:38:17","nodeType":"YulFunctionCall","src":"4249:38:17"},"nativeSrc":"4246:84:17","nodeType":"YulIf","src":"4246:84:17"}]},"name":"extract_byte_array_length","nativeSrc":"4016:320:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"4051:4:17","nodeType":"YulTypedName","src":"4051:4:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"4060:6:17","nodeType":"YulTypedName","src":"4060:6:17","type":""}],"src":"4016:320:17"},{"body":{"nativeSrc":"4396:87:17","nodeType":"YulBlock","src":"4396:87:17","statements":[{"nativeSrc":"4406:11:17","nodeType":"YulAssignment","src":"4406:11:17","value":{"name":"ptr","nativeSrc":"4414:3:17","nodeType":"YulIdentifier","src":"4414:3:17"},"variableNames":[{"name":"data","nativeSrc":"4406:4:17","nodeType":"YulIdentifier","src":"4406:4:17"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4434:1:17","nodeType":"YulLiteral","src":"4434:1:17","type":"","value":"0"},{"name":"ptr","nativeSrc":"4437:3:17","nodeType":"YulIdentifier","src":"4437:3:17"}],"functionName":{"name":"mstore","nativeSrc":"4427:6:17","nodeType":"YulIdentifier","src":"4427:6:17"},"nativeSrc":"4427:14:17","nodeType":"YulFunctionCall","src":"4427:14:17"},"nativeSrc":"4427:14:17","nodeType":"YulExpressionStatement","src":"4427:14:17"},{"nativeSrc":"4450:26:17","nodeType":"YulAssignment","src":"4450:26:17","value":{"arguments":[{"kind":"number","nativeSrc":"4468:1:17","nodeType":"YulLiteral","src":"4468:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"4471:4:17","nodeType":"YulLiteral","src":"4471:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"4458:9:17","nodeType":"YulIdentifier","src":"4458:9:17"},"nativeSrc":"4458:18:17","nodeType":"YulFunctionCall","src":"4458:18:17"},"variableNames":[{"name":"data","nativeSrc":"4450:4:17","nodeType":"YulIdentifier","src":"4450:4:17"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"4342:141:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"4383:3:17","nodeType":"YulTypedName","src":"4383:3:17","type":""}],"returnVariables":[{"name":"data","nativeSrc":"4391:4:17","nodeType":"YulTypedName","src":"4391:4:17","type":""}],"src":"4342:141:17"},{"body":{"nativeSrc":"4533:49:17","nodeType":"YulBlock","src":"4533:49:17","statements":[{"nativeSrc":"4543:33:17","nodeType":"YulAssignment","src":"4543:33:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4561:5:17","nodeType":"YulIdentifier","src":"4561:5:17"},{"kind":"number","nativeSrc":"4568:2:17","nodeType":"YulLiteral","src":"4568:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"4557:3:17","nodeType":"YulIdentifier","src":"4557:3:17"},"nativeSrc":"4557:14:17","nodeType":"YulFunctionCall","src":"4557:14:17"},{"kind":"number","nativeSrc":"4573:2:17","nodeType":"YulLiteral","src":"4573:2:17","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"4553:3:17","nodeType":"YulIdentifier","src":"4553:3:17"},"nativeSrc":"4553:23:17","nodeType":"YulFunctionCall","src":"4553:23:17"},"variableNames":[{"name":"result","nativeSrc":"4543:6:17","nodeType":"YulIdentifier","src":"4543:6:17"}]}]},"name":"divide_by_32_ceil","nativeSrc":"4489:93:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4516:5:17","nodeType":"YulTypedName","src":"4516:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4526:6:17","nodeType":"YulTypedName","src":"4526:6:17","type":""}],"src":"4489:93:17"},{"body":{"nativeSrc":"4641:54:17","nodeType":"YulBlock","src":"4641:54:17","statements":[{"nativeSrc":"4651:37:17","nodeType":"YulAssignment","src":"4651:37:17","value":{"arguments":[{"name":"bits","nativeSrc":"4676:4:17","nodeType":"YulIdentifier","src":"4676:4:17"},{"name":"value","nativeSrc":"4682:5:17","nodeType":"YulIdentifier","src":"4682:5:17"}],"functionName":{"name":"shl","nativeSrc":"4672:3:17","nodeType":"YulIdentifier","src":"4672:3:17"},"nativeSrc":"4672:16:17","nodeType":"YulFunctionCall","src":"4672:16:17"},"variableNames":[{"name":"newValue","nativeSrc":"4651:8:17","nodeType":"YulIdentifier","src":"4651:8:17"}]}]},"name":"shift_left_dynamic","nativeSrc":"4588:107:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"4616:4:17","nodeType":"YulTypedName","src":"4616:4:17","type":""},{"name":"value","nativeSrc":"4622:5:17","nodeType":"YulTypedName","src":"4622:5:17","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"4632:8:17","nodeType":"YulTypedName","src":"4632:8:17","type":""}],"src":"4588:107:17"},{"body":{"nativeSrc":"4777:317:17","nodeType":"YulBlock","src":"4777:317:17","statements":[{"nativeSrc":"4787:35:17","nodeType":"YulVariableDeclaration","src":"4787:35:17","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"4808:10:17","nodeType":"YulIdentifier","src":"4808:10:17"},{"kind":"number","nativeSrc":"4820:1:17","nodeType":"YulLiteral","src":"4820:1:17","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"4804:3:17","nodeType":"YulIdentifier","src":"4804:3:17"},"nativeSrc":"4804:18:17","nodeType":"YulFunctionCall","src":"4804:18:17"},"variables":[{"name":"shiftBits","nativeSrc":"4791:9:17","nodeType":"YulTypedName","src":"4791:9:17","type":""}]},{"nativeSrc":"4831:109:17","nodeType":"YulVariableDeclaration","src":"4831:109:17","value":{"arguments":[{"name":"shiftBits","nativeSrc":"4862:9:17","nodeType":"YulIdentifier","src":"4862:9:17"},{"kind":"number","nativeSrc":"4873:66:17","nodeType":"YulLiteral","src":"4873:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"4843:18:17","nodeType":"YulIdentifier","src":"4843:18:17"},"nativeSrc":"4843:97:17","nodeType":"YulFunctionCall","src":"4843:97:17"},"variables":[{"name":"mask","nativeSrc":"4835:4:17","nodeType":"YulTypedName","src":"4835:4:17","type":""}]},{"nativeSrc":"4949:51:17","nodeType":"YulAssignment","src":"4949:51:17","value":{"arguments":[{"name":"shiftBits","nativeSrc":"4980:9:17","nodeType":"YulIdentifier","src":"4980:9:17"},{"name":"toInsert","nativeSrc":"4991:8:17","nodeType":"YulIdentifier","src":"4991:8:17"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"4961:18:17","nodeType":"YulIdentifier","src":"4961:18:17"},"nativeSrc":"4961:39:17","nodeType":"YulFunctionCall","src":"4961:39:17"},"variableNames":[{"name":"toInsert","nativeSrc":"4949:8:17","nodeType":"YulIdentifier","src":"4949:8:17"}]},{"nativeSrc":"5009:30:17","nodeType":"YulAssignment","src":"5009:30:17","value":{"arguments":[{"name":"value","nativeSrc":"5022:5:17","nodeType":"YulIdentifier","src":"5022:5:17"},{"arguments":[{"name":"mask","nativeSrc":"5033:4:17","nodeType":"YulIdentifier","src":"5033:4:17"}],"functionName":{"name":"not","nativeSrc":"5029:3:17","nodeType":"YulIdentifier","src":"5029:3:17"},"nativeSrc":"5029:9:17","nodeType":"YulFunctionCall","src":"5029:9:17"}],"functionName":{"name":"and","nativeSrc":"5018:3:17","nodeType":"YulIdentifier","src":"5018:3:17"},"nativeSrc":"5018:21:17","nodeType":"YulFunctionCall","src":"5018:21:17"},"variableNames":[{"name":"value","nativeSrc":"5009:5:17","nodeType":"YulIdentifier","src":"5009:5:17"}]},{"nativeSrc":"5048:40:17","nodeType":"YulAssignment","src":"5048:40:17","value":{"arguments":[{"name":"value","nativeSrc":"5061:5:17","nodeType":"YulIdentifier","src":"5061:5:17"},{"arguments":[{"name":"toInsert","nativeSrc":"5072:8:17","nodeType":"YulIdentifier","src":"5072:8:17"},{"name":"mask","nativeSrc":"5082:4:17","nodeType":"YulIdentifier","src":"5082:4:17"}],"functionName":{"name":"and","nativeSrc":"5068:3:17","nodeType":"YulIdentifier","src":"5068:3:17"},"nativeSrc":"5068:19:17","nodeType":"YulFunctionCall","src":"5068:19:17"}],"functionName":{"name":"or","nativeSrc":"5058:2:17","nodeType":"YulIdentifier","src":"5058:2:17"},"nativeSrc":"5058:30:17","nodeType":"YulFunctionCall","src":"5058:30:17"},"variableNames":[{"name":"result","nativeSrc":"5048:6:17","nodeType":"YulIdentifier","src":"5048:6:17"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"4701:393:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4738:5:17","nodeType":"YulTypedName","src":"4738:5:17","type":""},{"name":"shiftBytes","nativeSrc":"4745:10:17","nodeType":"YulTypedName","src":"4745:10:17","type":""},{"name":"toInsert","nativeSrc":"4757:8:17","nodeType":"YulTypedName","src":"4757:8:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4770:6:17","nodeType":"YulTypedName","src":"4770:6:17","type":""}],"src":"4701:393:17"},{"body":{"nativeSrc":"5145:32:17","nodeType":"YulBlock","src":"5145:32:17","statements":[{"nativeSrc":"5155:16:17","nodeType":"YulAssignment","src":"5155:16:17","value":{"name":"value","nativeSrc":"5166:5:17","nodeType":"YulIdentifier","src":"5166:5:17"},"variableNames":[{"name":"cleaned","nativeSrc":"5155:7:17","nodeType":"YulIdentifier","src":"5155:7:17"}]}]},"name":"cleanup_t_uint256","nativeSrc":"5100:77:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5127:5:17","nodeType":"YulTypedName","src":"5127:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5137:7:17","nodeType":"YulTypedName","src":"5137:7:17","type":""}],"src":"5100:77:17"},{"body":{"nativeSrc":"5215:28:17","nodeType":"YulBlock","src":"5215:28:17","statements":[{"nativeSrc":"5225:12:17","nodeType":"YulAssignment","src":"5225:12:17","value":{"name":"value","nativeSrc":"5232:5:17","nodeType":"YulIdentifier","src":"5232:5:17"},"variableNames":[{"name":"ret","nativeSrc":"5225:3:17","nodeType":"YulIdentifier","src":"5225:3:17"}]}]},"name":"identity","nativeSrc":"5183:60:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5201:5:17","nodeType":"YulTypedName","src":"5201:5:17","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5211:3:17","nodeType":"YulTypedName","src":"5211:3:17","type":""}],"src":"5183:60:17"},{"body":{"nativeSrc":"5309:82:17","nodeType":"YulBlock","src":"5309:82:17","statements":[{"nativeSrc":"5319:66:17","nodeType":"YulAssignment","src":"5319:66:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5377:5:17","nodeType":"YulIdentifier","src":"5377:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5359:17:17","nodeType":"YulIdentifier","src":"5359:17:17"},"nativeSrc":"5359:24:17","nodeType":"YulFunctionCall","src":"5359:24:17"}],"functionName":{"name":"identity","nativeSrc":"5350:8:17","nodeType":"YulIdentifier","src":"5350:8:17"},"nativeSrc":"5350:34:17","nodeType":"YulFunctionCall","src":"5350:34:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5332:17:17","nodeType":"YulIdentifier","src":"5332:17:17"},"nativeSrc":"5332:53:17","nodeType":"YulFunctionCall","src":"5332:53:17"},"variableNames":[{"name":"converted","nativeSrc":"5319:9:17","nodeType":"YulIdentifier","src":"5319:9:17"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"5249:142:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5289:5:17","nodeType":"YulTypedName","src":"5289:5:17","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"5299:9:17","nodeType":"YulTypedName","src":"5299:9:17","type":""}],"src":"5249:142:17"},{"body":{"nativeSrc":"5444:28:17","nodeType":"YulBlock","src":"5444:28:17","statements":[{"nativeSrc":"5454:12:17","nodeType":"YulAssignment","src":"5454:12:17","value":{"name":"value","nativeSrc":"5461:5:17","nodeType":"YulIdentifier","src":"5461:5:17"},"variableNames":[{"name":"ret","nativeSrc":"5454:3:17","nodeType":"YulIdentifier","src":"5454:3:17"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"5397:75:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5430:5:17","nodeType":"YulTypedName","src":"5430:5:17","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5440:3:17","nodeType":"YulTypedName","src":"5440:3:17","type":""}],"src":"5397:75:17"},{"body":{"nativeSrc":"5554:193:17","nodeType":"YulBlock","src":"5554:193:17","statements":[{"nativeSrc":"5564:63:17","nodeType":"YulVariableDeclaration","src":"5564:63:17","value":{"arguments":[{"name":"value_0","nativeSrc":"5619:7:17","nodeType":"YulIdentifier","src":"5619:7:17"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"5588:30:17","nodeType":"YulIdentifier","src":"5588:30:17"},"nativeSrc":"5588:39:17","nodeType":"YulFunctionCall","src":"5588:39:17"},"variables":[{"name":"convertedValue_0","nativeSrc":"5568:16:17","nodeType":"YulTypedName","src":"5568:16:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5643:4:17","nodeType":"YulIdentifier","src":"5643:4:17"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"5683:4:17","nodeType":"YulIdentifier","src":"5683:4:17"}],"functionName":{"name":"sload","nativeSrc":"5677:5:17","nodeType":"YulIdentifier","src":"5677:5:17"},"nativeSrc":"5677:11:17","nodeType":"YulFunctionCall","src":"5677:11:17"},{"name":"offset","nativeSrc":"5690:6:17","nodeType":"YulIdentifier","src":"5690:6:17"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"5722:16:17","nodeType":"YulIdentifier","src":"5722:16:17"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"5698:23:17","nodeType":"YulIdentifier","src":"5698:23:17"},"nativeSrc":"5698:41:17","nodeType":"YulFunctionCall","src":"5698:41:17"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"5649:27:17","nodeType":"YulIdentifier","src":"5649:27:17"},"nativeSrc":"5649:91:17","nodeType":"YulFunctionCall","src":"5649:91:17"}],"functionName":{"name":"sstore","nativeSrc":"5636:6:17","nodeType":"YulIdentifier","src":"5636:6:17"},"nativeSrc":"5636:105:17","nodeType":"YulFunctionCall","src":"5636:105:17"},"nativeSrc":"5636:105:17","nodeType":"YulExpressionStatement","src":"5636:105:17"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"5478:269:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5531:4:17","nodeType":"YulTypedName","src":"5531:4:17","type":""},{"name":"offset","nativeSrc":"5537:6:17","nodeType":"YulTypedName","src":"5537:6:17","type":""},{"name":"value_0","nativeSrc":"5545:7:17","nodeType":"YulTypedName","src":"5545:7:17","type":""}],"src":"5478:269:17"},{"body":{"nativeSrc":"5802:24:17","nodeType":"YulBlock","src":"5802:24:17","statements":[{"nativeSrc":"5812:8:17","nodeType":"YulAssignment","src":"5812:8:17","value":{"kind":"number","nativeSrc":"5819:1:17","nodeType":"YulLiteral","src":"5819:1:17","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"5812:3:17","nodeType":"YulIdentifier","src":"5812:3:17"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"5753:73:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"5798:3:17","nodeType":"YulTypedName","src":"5798:3:17","type":""}],"src":"5753:73:17"},{"body":{"nativeSrc":"5885:136:17","nodeType":"YulBlock","src":"5885:136:17","statements":[{"nativeSrc":"5895:46:17","nodeType":"YulVariableDeclaration","src":"5895:46:17","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"5909:30:17","nodeType":"YulIdentifier","src":"5909:30:17"},"nativeSrc":"5909:32:17","nodeType":"YulFunctionCall","src":"5909:32:17"},"variables":[{"name":"zero_0","nativeSrc":"5899:6:17","nodeType":"YulTypedName","src":"5899:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5994:4:17","nodeType":"YulIdentifier","src":"5994:4:17"},{"name":"offset","nativeSrc":"6000:6:17","nodeType":"YulIdentifier","src":"6000:6:17"},{"name":"zero_0","nativeSrc":"6008:6:17","nodeType":"YulIdentifier","src":"6008:6:17"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"5950:43:17","nodeType":"YulIdentifier","src":"5950:43:17"},"nativeSrc":"5950:65:17","nodeType":"YulFunctionCall","src":"5950:65:17"},"nativeSrc":"5950:65:17","nodeType":"YulExpressionStatement","src":"5950:65:17"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"5832:189:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5871:4:17","nodeType":"YulTypedName","src":"5871:4:17","type":""},{"name":"offset","nativeSrc":"5877:6:17","nodeType":"YulTypedName","src":"5877:6:17","type":""}],"src":"5832:189:17"},{"body":{"nativeSrc":"6077:136:17","nodeType":"YulBlock","src":"6077:136:17","statements":[{"body":{"nativeSrc":"6144:63:17","nodeType":"YulBlock","src":"6144:63:17","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"6188:5:17","nodeType":"YulIdentifier","src":"6188:5:17"},{"kind":"number","nativeSrc":"6195:1:17","nodeType":"YulLiteral","src":"6195:1:17","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"6158:29:17","nodeType":"YulIdentifier","src":"6158:29:17"},"nativeSrc":"6158:39:17","nodeType":"YulFunctionCall","src":"6158:39:17"},"nativeSrc":"6158:39:17","nodeType":"YulExpressionStatement","src":"6158:39:17"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"6097:5:17","nodeType":"YulIdentifier","src":"6097:5:17"},{"name":"end","nativeSrc":"6104:3:17","nodeType":"YulIdentifier","src":"6104:3:17"}],"functionName":{"name":"lt","nativeSrc":"6094:2:17","nodeType":"YulIdentifier","src":"6094:2:17"},"nativeSrc":"6094:14:17","nodeType":"YulFunctionCall","src":"6094:14:17"},"nativeSrc":"6087:120:17","nodeType":"YulForLoop","post":{"nativeSrc":"6109:26:17","nodeType":"YulBlock","src":"6109:26:17","statements":[{"nativeSrc":"6111:22:17","nodeType":"YulAssignment","src":"6111:22:17","value":{"arguments":[{"name":"start","nativeSrc":"6124:5:17","nodeType":"YulIdentifier","src":"6124:5:17"},{"kind":"number","nativeSrc":"6131:1:17","nodeType":"YulLiteral","src":"6131:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6120:3:17","nodeType":"YulIdentifier","src":"6120:3:17"},"nativeSrc":"6120:13:17","nodeType":"YulFunctionCall","src":"6120:13:17"},"variableNames":[{"name":"start","nativeSrc":"6111:5:17","nodeType":"YulIdentifier","src":"6111:5:17"}]}]},"pre":{"nativeSrc":"6091:2:17","nodeType":"YulBlock","src":"6091:2:17","statements":[]},"src":"6087:120:17"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"6027:186:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6065:5:17","nodeType":"YulTypedName","src":"6065:5:17","type":""},{"name":"end","nativeSrc":"6072:3:17","nodeType":"YulTypedName","src":"6072:3:17","type":""}],"src":"6027:186:17"},{"body":{"nativeSrc":"6298:464:17","nodeType":"YulBlock","src":"6298:464:17","statements":[{"body":{"nativeSrc":"6324:431:17","nodeType":"YulBlock","src":"6324:431:17","statements":[{"nativeSrc":"6338:54:17","nodeType":"YulVariableDeclaration","src":"6338:54:17","value":{"arguments":[{"name":"array","nativeSrc":"6386:5:17","nodeType":"YulIdentifier","src":"6386:5:17"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"6354:31:17","nodeType":"YulIdentifier","src":"6354:31:17"},"nativeSrc":"6354:38:17","nodeType":"YulFunctionCall","src":"6354:38:17"},"variables":[{"name":"dataArea","nativeSrc":"6342:8:17","nodeType":"YulTypedName","src":"6342:8:17","type":""}]},{"nativeSrc":"6405:63:17","nodeType":"YulVariableDeclaration","src":"6405:63:17","value":{"arguments":[{"name":"dataArea","nativeSrc":"6428:8:17","nodeType":"YulIdentifier","src":"6428:8:17"},{"arguments":[{"name":"startIndex","nativeSrc":"6456:10:17","nodeType":"YulIdentifier","src":"6456:10:17"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"6438:17:17","nodeType":"YulIdentifier","src":"6438:17:17"},"nativeSrc":"6438:29:17","nodeType":"YulFunctionCall","src":"6438:29:17"}],"functionName":{"name":"add","nativeSrc":"6424:3:17","nodeType":"YulIdentifier","src":"6424:3:17"},"nativeSrc":"6424:44:17","nodeType":"YulFunctionCall","src":"6424:44:17"},"variables":[{"name":"deleteStart","nativeSrc":"6409:11:17","nodeType":"YulTypedName","src":"6409:11:17","type":""}]},{"body":{"nativeSrc":"6625:27:17","nodeType":"YulBlock","src":"6625:27:17","statements":[{"nativeSrc":"6627:23:17","nodeType":"YulAssignment","src":"6627:23:17","value":{"name":"dataArea","nativeSrc":"6642:8:17","nodeType":"YulIdentifier","src":"6642:8:17"},"variableNames":[{"name":"deleteStart","nativeSrc":"6627:11:17","nodeType":"YulIdentifier","src":"6627:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"6609:10:17","nodeType":"YulIdentifier","src":"6609:10:17"},{"kind":"number","nativeSrc":"6621:2:17","nodeType":"YulLiteral","src":"6621:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"6606:2:17","nodeType":"YulIdentifier","src":"6606:2:17"},"nativeSrc":"6606:18:17","nodeType":"YulFunctionCall","src":"6606:18:17"},"nativeSrc":"6603:49:17","nodeType":"YulIf","src":"6603:49:17"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"6694:11:17","nodeType":"YulIdentifier","src":"6694:11:17"},{"arguments":[{"name":"dataArea","nativeSrc":"6711:8:17","nodeType":"YulIdentifier","src":"6711:8:17"},{"arguments":[{"name":"len","nativeSrc":"6739:3:17","nodeType":"YulIdentifier","src":"6739:3:17"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"6721:17:17","nodeType":"YulIdentifier","src":"6721:17:17"},"nativeSrc":"6721:22:17","nodeType":"YulFunctionCall","src":"6721:22:17"}],"functionName":{"name":"add","nativeSrc":"6707:3:17","nodeType":"YulIdentifier","src":"6707:3:17"},"nativeSrc":"6707:37:17","nodeType":"YulFunctionCall","src":"6707:37:17"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"6665:28:17","nodeType":"YulIdentifier","src":"6665:28:17"},"nativeSrc":"6665:80:17","nodeType":"YulFunctionCall","src":"6665:80:17"},"nativeSrc":"6665:80:17","nodeType":"YulExpressionStatement","src":"6665:80:17"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"6315:3:17","nodeType":"YulIdentifier","src":"6315:3:17"},{"kind":"number","nativeSrc":"6320:2:17","nodeType":"YulLiteral","src":"6320:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"6312:2:17","nodeType":"YulIdentifier","src":"6312:2:17"},"nativeSrc":"6312:11:17","nodeType":"YulFunctionCall","src":"6312:11:17"},"nativeSrc":"6309:446:17","nodeType":"YulIf","src":"6309:446:17"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"6219:543:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"6274:5:17","nodeType":"YulTypedName","src":"6274:5:17","type":""},{"name":"len","nativeSrc":"6281:3:17","nodeType":"YulTypedName","src":"6281:3:17","type":""},{"name":"startIndex","nativeSrc":"6286:10:17","nodeType":"YulTypedName","src":"6286:10:17","type":""}],"src":"6219:543:17"},{"body":{"nativeSrc":"6831:54:17","nodeType":"YulBlock","src":"6831:54:17","statements":[{"nativeSrc":"6841:37:17","nodeType":"YulAssignment","src":"6841:37:17","value":{"arguments":[{"name":"bits","nativeSrc":"6866:4:17","nodeType":"YulIdentifier","src":"6866:4:17"},{"name":"value","nativeSrc":"6872:5:17","nodeType":"YulIdentifier","src":"6872:5:17"}],"functionName":{"name":"shr","nativeSrc":"6862:3:17","nodeType":"YulIdentifier","src":"6862:3:17"},"nativeSrc":"6862:16:17","nodeType":"YulFunctionCall","src":"6862:16:17"},"variableNames":[{"name":"newValue","nativeSrc":"6841:8:17","nodeType":"YulIdentifier","src":"6841:8:17"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"6768:117:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"6806:4:17","nodeType":"YulTypedName","src":"6806:4:17","type":""},{"name":"value","nativeSrc":"6812:5:17","nodeType":"YulTypedName","src":"6812:5:17","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"6822:8:17","nodeType":"YulTypedName","src":"6822:8:17","type":""}],"src":"6768:117:17"},{"body":{"nativeSrc":"6942:118:17","nodeType":"YulBlock","src":"6942:118:17","statements":[{"nativeSrc":"6952:68:17","nodeType":"YulVariableDeclaration","src":"6952:68:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7001:1:17","nodeType":"YulLiteral","src":"7001:1:17","type":"","value":"8"},{"name":"bytes","nativeSrc":"7004:5:17","nodeType":"YulIdentifier","src":"7004:5:17"}],"functionName":{"name":"mul","nativeSrc":"6997:3:17","nodeType":"YulIdentifier","src":"6997:3:17"},"nativeSrc":"6997:13:17","nodeType":"YulFunctionCall","src":"6997:13:17"},{"arguments":[{"kind":"number","nativeSrc":"7016:1:17","nodeType":"YulLiteral","src":"7016:1:17","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"7012:3:17","nodeType":"YulIdentifier","src":"7012:3:17"},"nativeSrc":"7012:6:17","nodeType":"YulFunctionCall","src":"7012:6:17"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"6968:28:17","nodeType":"YulIdentifier","src":"6968:28:17"},"nativeSrc":"6968:51:17","nodeType":"YulFunctionCall","src":"6968:51:17"}],"functionName":{"name":"not","nativeSrc":"6964:3:17","nodeType":"YulIdentifier","src":"6964:3:17"},"nativeSrc":"6964:56:17","nodeType":"YulFunctionCall","src":"6964:56:17"},"variables":[{"name":"mask","nativeSrc":"6956:4:17","nodeType":"YulTypedName","src":"6956:4:17","type":""}]},{"nativeSrc":"7029:25:17","nodeType":"YulAssignment","src":"7029:25:17","value":{"arguments":[{"name":"data","nativeSrc":"7043:4:17","nodeType":"YulIdentifier","src":"7043:4:17"},{"name":"mask","nativeSrc":"7049:4:17","nodeType":"YulIdentifier","src":"7049:4:17"}],"functionName":{"name":"and","nativeSrc":"7039:3:17","nodeType":"YulIdentifier","src":"7039:3:17"},"nativeSrc":"7039:15:17","nodeType":"YulFunctionCall","src":"7039:15:17"},"variableNames":[{"name":"result","nativeSrc":"7029:6:17","nodeType":"YulIdentifier","src":"7029:6:17"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"6891:169:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"6919:4:17","nodeType":"YulTypedName","src":"6919:4:17","type":""},{"name":"bytes","nativeSrc":"6925:5:17","nodeType":"YulTypedName","src":"6925:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"6935:6:17","nodeType":"YulTypedName","src":"6935:6:17","type":""}],"src":"6891:169:17"},{"body":{"nativeSrc":"7146:214:17","nodeType":"YulBlock","src":"7146:214:17","statements":[{"nativeSrc":"7279:37:17","nodeType":"YulAssignment","src":"7279:37:17","value":{"arguments":[{"name":"data","nativeSrc":"7306:4:17","nodeType":"YulIdentifier","src":"7306:4:17"},{"name":"len","nativeSrc":"7312:3:17","nodeType":"YulIdentifier","src":"7312:3:17"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"7287:18:17","nodeType":"YulIdentifier","src":"7287:18:17"},"nativeSrc":"7287:29:17","nodeType":"YulFunctionCall","src":"7287:29:17"},"variableNames":[{"name":"data","nativeSrc":"7279:4:17","nodeType":"YulIdentifier","src":"7279:4:17"}]},{"nativeSrc":"7325:29:17","nodeType":"YulAssignment","src":"7325:29:17","value":{"arguments":[{"name":"data","nativeSrc":"7336:4:17","nodeType":"YulIdentifier","src":"7336:4:17"},{"arguments":[{"kind":"number","nativeSrc":"7346:1:17","nodeType":"YulLiteral","src":"7346:1:17","type":"","value":"2"},{"name":"len","nativeSrc":"7349:3:17","nodeType":"YulIdentifier","src":"7349:3:17"}],"functionName":{"name":"mul","nativeSrc":"7342:3:17","nodeType":"YulIdentifier","src":"7342:3:17"},"nativeSrc":"7342:11:17","nodeType":"YulFunctionCall","src":"7342:11:17"}],"functionName":{"name":"or","nativeSrc":"7333:2:17","nodeType":"YulIdentifier","src":"7333:2:17"},"nativeSrc":"7333:21:17","nodeType":"YulFunctionCall","src":"7333:21:17"},"variableNames":[{"name":"used","nativeSrc":"7325:4:17","nodeType":"YulIdentifier","src":"7325:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"7065:295:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7127:4:17","nodeType":"YulTypedName","src":"7127:4:17","type":""},{"name":"len","nativeSrc":"7133:3:17","nodeType":"YulTypedName","src":"7133:3:17","type":""}],"returnVariables":[{"name":"used","nativeSrc":"7141:4:17","nodeType":"YulTypedName","src":"7141:4:17","type":""}],"src":"7065:295:17"},{"body":{"nativeSrc":"7457:1303:17","nodeType":"YulBlock","src":"7457:1303:17","statements":[{"nativeSrc":"7468:51:17","nodeType":"YulVariableDeclaration","src":"7468:51:17","value":{"arguments":[{"name":"src","nativeSrc":"7515:3:17","nodeType":"YulIdentifier","src":"7515:3:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"7482:32:17","nodeType":"YulIdentifier","src":"7482:32:17"},"nativeSrc":"7482:37:17","nodeType":"YulFunctionCall","src":"7482:37:17"},"variables":[{"name":"newLen","nativeSrc":"7472:6:17","nodeType":"YulTypedName","src":"7472:6:17","type":""}]},{"body":{"nativeSrc":"7604:22:17","nodeType":"YulBlock","src":"7604:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7606:16:17","nodeType":"YulIdentifier","src":"7606:16:17"},"nativeSrc":"7606:18:17","nodeType":"YulFunctionCall","src":"7606:18:17"},"nativeSrc":"7606:18:17","nodeType":"YulExpressionStatement","src":"7606:18:17"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"7576:6:17","nodeType":"YulIdentifier","src":"7576:6:17"},{"kind":"number","nativeSrc":"7584:18:17","nodeType":"YulLiteral","src":"7584:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7573:2:17","nodeType":"YulIdentifier","src":"7573:2:17"},"nativeSrc":"7573:30:17","nodeType":"YulFunctionCall","src":"7573:30:17"},"nativeSrc":"7570:56:17","nodeType":"YulIf","src":"7570:56:17"},{"nativeSrc":"7636:52:17","nodeType":"YulVariableDeclaration","src":"7636:52:17","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"7682:4:17","nodeType":"YulIdentifier","src":"7682:4:17"}],"functionName":{"name":"sload","nativeSrc":"7676:5:17","nodeType":"YulIdentifier","src":"7676:5:17"},"nativeSrc":"7676:11:17","nodeType":"YulFunctionCall","src":"7676:11:17"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"7650:25:17","nodeType":"YulIdentifier","src":"7650:25:17"},"nativeSrc":"7650:38:17","nodeType":"YulFunctionCall","src":"7650:38:17"},"variables":[{"name":"oldLen","nativeSrc":"7640:6:17","nodeType":"YulTypedName","src":"7640:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"7781:4:17","nodeType":"YulIdentifier","src":"7781:4:17"},{"name":"oldLen","nativeSrc":"7787:6:17","nodeType":"YulIdentifier","src":"7787:6:17"},{"name":"newLen","nativeSrc":"7795:6:17","nodeType":"YulIdentifier","src":"7795:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"7735:45:17","nodeType":"YulIdentifier","src":"7735:45:17"},"nativeSrc":"7735:67:17","nodeType":"YulFunctionCall","src":"7735:67:17"},"nativeSrc":"7735:67:17","nodeType":"YulExpressionStatement","src":"7735:67:17"},{"nativeSrc":"7812:18:17","nodeType":"YulVariableDeclaration","src":"7812:18:17","value":{"kind":"number","nativeSrc":"7829:1:17","nodeType":"YulLiteral","src":"7829:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"7816:9:17","nodeType":"YulTypedName","src":"7816:9:17","type":""}]},{"nativeSrc":"7840:17:17","nodeType":"YulAssignment","src":"7840:17:17","value":{"kind":"number","nativeSrc":"7853:4:17","nodeType":"YulLiteral","src":"7853:4:17","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"7840:9:17","nodeType":"YulIdentifier","src":"7840:9:17"}]},{"cases":[{"body":{"nativeSrc":"7904:611:17","nodeType":"YulBlock","src":"7904:611:17","statements":[{"nativeSrc":"7918:37:17","nodeType":"YulVariableDeclaration","src":"7918:37:17","value":{"arguments":[{"name":"newLen","nativeSrc":"7937:6:17","nodeType":"YulIdentifier","src":"7937:6:17"},{"arguments":[{"kind":"number","nativeSrc":"7949:4:17","nodeType":"YulLiteral","src":"7949:4:17","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"7945:3:17","nodeType":"YulIdentifier","src":"7945:3:17"},"nativeSrc":"7945:9:17","nodeType":"YulFunctionCall","src":"7945:9:17"}],"functionName":{"name":"and","nativeSrc":"7933:3:17","nodeType":"YulIdentifier","src":"7933:3:17"},"nativeSrc":"7933:22:17","nodeType":"YulFunctionCall","src":"7933:22:17"},"variables":[{"name":"loopEnd","nativeSrc":"7922:7:17","nodeType":"YulTypedName","src":"7922:7:17","type":""}]},{"nativeSrc":"7969:51:17","nodeType":"YulVariableDeclaration","src":"7969:51:17","value":{"arguments":[{"name":"slot","nativeSrc":"8015:4:17","nodeType":"YulIdentifier","src":"8015:4:17"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"7983:31:17","nodeType":"YulIdentifier","src":"7983:31:17"},"nativeSrc":"7983:37:17","nodeType":"YulFunctionCall","src":"7983:37:17"},"variables":[{"name":"dstPtr","nativeSrc":"7973:6:17","nodeType":"YulTypedName","src":"7973:6:17","type":""}]},{"nativeSrc":"8033:10:17","nodeType":"YulVariableDeclaration","src":"8033:10:17","value":{"kind":"number","nativeSrc":"8042:1:17","nodeType":"YulLiteral","src":"8042:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"8037:1:17","nodeType":"YulTypedName","src":"8037:1:17","type":""}]},{"body":{"nativeSrc":"8101:163:17","nodeType":"YulBlock","src":"8101:163:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"8126:6:17","nodeType":"YulIdentifier","src":"8126:6:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8144:3:17","nodeType":"YulIdentifier","src":"8144:3:17"},{"name":"srcOffset","nativeSrc":"8149:9:17","nodeType":"YulIdentifier","src":"8149:9:17"}],"functionName":{"name":"add","nativeSrc":"8140:3:17","nodeType":"YulIdentifier","src":"8140:3:17"},"nativeSrc":"8140:19:17","nodeType":"YulFunctionCall","src":"8140:19:17"}],"functionName":{"name":"mload","nativeSrc":"8134:5:17","nodeType":"YulIdentifier","src":"8134:5:17"},"nativeSrc":"8134:26:17","nodeType":"YulFunctionCall","src":"8134:26:17"}],"functionName":{"name":"sstore","nativeSrc":"8119:6:17","nodeType":"YulIdentifier","src":"8119:6:17"},"nativeSrc":"8119:42:17","nodeType":"YulFunctionCall","src":"8119:42:17"},"nativeSrc":"8119:42:17","nodeType":"YulExpressionStatement","src":"8119:42:17"},{"nativeSrc":"8178:24:17","nodeType":"YulAssignment","src":"8178:24:17","value":{"arguments":[{"name":"dstPtr","nativeSrc":"8192:6:17","nodeType":"YulIdentifier","src":"8192:6:17"},{"kind":"number","nativeSrc":"8200:1:17","nodeType":"YulLiteral","src":"8200:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8188:3:17","nodeType":"YulIdentifier","src":"8188:3:17"},"nativeSrc":"8188:14:17","nodeType":"YulFunctionCall","src":"8188:14:17"},"variableNames":[{"name":"dstPtr","nativeSrc":"8178:6:17","nodeType":"YulIdentifier","src":"8178:6:17"}]},{"nativeSrc":"8219:31:17","nodeType":"YulAssignment","src":"8219:31:17","value":{"arguments":[{"name":"srcOffset","nativeSrc":"8236:9:17","nodeType":"YulIdentifier","src":"8236:9:17"},{"kind":"number","nativeSrc":"8247:2:17","nodeType":"YulLiteral","src":"8247:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8232:3:17","nodeType":"YulIdentifier","src":"8232:3:17"},"nativeSrc":"8232:18:17","nodeType":"YulFunctionCall","src":"8232:18:17"},"variableNames":[{"name":"srcOffset","nativeSrc":"8219:9:17","nodeType":"YulIdentifier","src":"8219:9:17"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"8067:1:17","nodeType":"YulIdentifier","src":"8067:1:17"},{"name":"loopEnd","nativeSrc":"8070:7:17","nodeType":"YulIdentifier","src":"8070:7:17"}],"functionName":{"name":"lt","nativeSrc":"8064:2:17","nodeType":"YulIdentifier","src":"8064:2:17"},"nativeSrc":"8064:14:17","nodeType":"YulFunctionCall","src":"8064:14:17"},"nativeSrc":"8056:208:17","nodeType":"YulForLoop","post":{"nativeSrc":"8079:21:17","nodeType":"YulBlock","src":"8079:21:17","statements":[{"nativeSrc":"8081:17:17","nodeType":"YulAssignment","src":"8081:17:17","value":{"arguments":[{"name":"i","nativeSrc":"8090:1:17","nodeType":"YulIdentifier","src":"8090:1:17"},{"kind":"number","nativeSrc":"8093:4:17","nodeType":"YulLiteral","src":"8093:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8086:3:17","nodeType":"YulIdentifier","src":"8086:3:17"},"nativeSrc":"8086:12:17","nodeType":"YulFunctionCall","src":"8086:12:17"},"variableNames":[{"name":"i","nativeSrc":"8081:1:17","nodeType":"YulIdentifier","src":"8081:1:17"}]}]},"pre":{"nativeSrc":"8060:3:17","nodeType":"YulBlock","src":"8060:3:17","statements":[]},"src":"8056:208:17"},{"body":{"nativeSrc":"8300:156:17","nodeType":"YulBlock","src":"8300:156:17","statements":[{"nativeSrc":"8318:43:17","nodeType":"YulVariableDeclaration","src":"8318:43:17","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8345:3:17","nodeType":"YulIdentifier","src":"8345:3:17"},{"name":"srcOffset","nativeSrc":"8350:9:17","nodeType":"YulIdentifier","src":"8350:9:17"}],"functionName":{"name":"add","nativeSrc":"8341:3:17","nodeType":"YulIdentifier","src":"8341:3:17"},"nativeSrc":"8341:19:17","nodeType":"YulFunctionCall","src":"8341:19:17"}],"functionName":{"name":"mload","nativeSrc":"8335:5:17","nodeType":"YulIdentifier","src":"8335:5:17"},"nativeSrc":"8335:26:17","nodeType":"YulFunctionCall","src":"8335:26:17"},"variables":[{"name":"lastValue","nativeSrc":"8322:9:17","nodeType":"YulTypedName","src":"8322:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"8385:6:17","nodeType":"YulIdentifier","src":"8385:6:17"},{"arguments":[{"name":"lastValue","nativeSrc":"8412:9:17","nodeType":"YulIdentifier","src":"8412:9:17"},{"arguments":[{"name":"newLen","nativeSrc":"8427:6:17","nodeType":"YulIdentifier","src":"8427:6:17"},{"kind":"number","nativeSrc":"8435:4:17","nodeType":"YulLiteral","src":"8435:4:17","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"8423:3:17","nodeType":"YulIdentifier","src":"8423:3:17"},"nativeSrc":"8423:17:17","nodeType":"YulFunctionCall","src":"8423:17:17"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"8393:18:17","nodeType":"YulIdentifier","src":"8393:18:17"},"nativeSrc":"8393:48:17","nodeType":"YulFunctionCall","src":"8393:48:17"}],"functionName":{"name":"sstore","nativeSrc":"8378:6:17","nodeType":"YulIdentifier","src":"8378:6:17"},"nativeSrc":"8378:64:17","nodeType":"YulFunctionCall","src":"8378:64:17"},"nativeSrc":"8378:64:17","nodeType":"YulExpressionStatement","src":"8378:64:17"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"8283:7:17","nodeType":"YulIdentifier","src":"8283:7:17"},{"name":"newLen","nativeSrc":"8292:6:17","nodeType":"YulIdentifier","src":"8292:6:17"}],"functionName":{"name":"lt","nativeSrc":"8280:2:17","nodeType":"YulIdentifier","src":"8280:2:17"},"nativeSrc":"8280:19:17","nodeType":"YulFunctionCall","src":"8280:19:17"},"nativeSrc":"8277:179:17","nodeType":"YulIf","src":"8277:179:17"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8476:4:17","nodeType":"YulIdentifier","src":"8476:4:17"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"8490:6:17","nodeType":"YulIdentifier","src":"8490:6:17"},{"kind":"number","nativeSrc":"8498:1:17","nodeType":"YulLiteral","src":"8498:1:17","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"8486:3:17","nodeType":"YulIdentifier","src":"8486:3:17"},"nativeSrc":"8486:14:17","nodeType":"YulFunctionCall","src":"8486:14:17"},{"kind":"number","nativeSrc":"8502:1:17","nodeType":"YulLiteral","src":"8502:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8482:3:17","nodeType":"YulIdentifier","src":"8482:3:17"},"nativeSrc":"8482:22:17","nodeType":"YulFunctionCall","src":"8482:22:17"}],"functionName":{"name":"sstore","nativeSrc":"8469:6:17","nodeType":"YulIdentifier","src":"8469:6:17"},"nativeSrc":"8469:36:17","nodeType":"YulFunctionCall","src":"8469:36:17"},"nativeSrc":"8469:36:17","nodeType":"YulExpressionStatement","src":"8469:36:17"}]},"nativeSrc":"7897:618:17","nodeType":"YulCase","src":"7897:618:17","value":{"kind":"number","nativeSrc":"7902:1:17","nodeType":"YulLiteral","src":"7902:1:17","type":"","value":"1"}},{"body":{"nativeSrc":"8532:222:17","nodeType":"YulBlock","src":"8532:222:17","statements":[{"nativeSrc":"8546:14:17","nodeType":"YulVariableDeclaration","src":"8546:14:17","value":{"kind":"number","nativeSrc":"8559:1:17","nodeType":"YulLiteral","src":"8559:1:17","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"8550:5:17","nodeType":"YulTypedName","src":"8550:5:17","type":""}]},{"body":{"nativeSrc":"8583:67:17","nodeType":"YulBlock","src":"8583:67:17","statements":[{"nativeSrc":"8601:35:17","nodeType":"YulAssignment","src":"8601:35:17","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8620:3:17","nodeType":"YulIdentifier","src":"8620:3:17"},{"name":"srcOffset","nativeSrc":"8625:9:17","nodeType":"YulIdentifier","src":"8625:9:17"}],"functionName":{"name":"add","nativeSrc":"8616:3:17","nodeType":"YulIdentifier","src":"8616:3:17"},"nativeSrc":"8616:19:17","nodeType":"YulFunctionCall","src":"8616:19:17"}],"functionName":{"name":"mload","nativeSrc":"8610:5:17","nodeType":"YulIdentifier","src":"8610:5:17"},"nativeSrc":"8610:26:17","nodeType":"YulFunctionCall","src":"8610:26:17"},"variableNames":[{"name":"value","nativeSrc":"8601:5:17","nodeType":"YulIdentifier","src":"8601:5:17"}]}]},"condition":{"name":"newLen","nativeSrc":"8576:6:17","nodeType":"YulIdentifier","src":"8576:6:17"},"nativeSrc":"8573:77:17","nodeType":"YulIf","src":"8573:77:17"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8670:4:17","nodeType":"YulIdentifier","src":"8670:4:17"},{"arguments":[{"name":"value","nativeSrc":"8729:5:17","nodeType":"YulIdentifier","src":"8729:5:17"},{"name":"newLen","nativeSrc":"8736:6:17","nodeType":"YulIdentifier","src":"8736:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"8676:52:17","nodeType":"YulIdentifier","src":"8676:52:17"},"nativeSrc":"8676:67:17","nodeType":"YulFunctionCall","src":"8676:67:17"}],"functionName":{"name":"sstore","nativeSrc":"8663:6:17","nodeType":"YulIdentifier","src":"8663:6:17"},"nativeSrc":"8663:81:17","nodeType":"YulFunctionCall","src":"8663:81:17"},"nativeSrc":"8663:81:17","nodeType":"YulExpressionStatement","src":"8663:81:17"}]},"nativeSrc":"8524:230:17","nodeType":"YulCase","src":"8524:230:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"7877:6:17","nodeType":"YulIdentifier","src":"7877:6:17"},{"kind":"number","nativeSrc":"7885:2:17","nodeType":"YulLiteral","src":"7885:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"7874:2:17","nodeType":"YulIdentifier","src":"7874:2:17"},"nativeSrc":"7874:14:17","nodeType":"YulFunctionCall","src":"7874:14:17"},"nativeSrc":"7867:887:17","nodeType":"YulSwitch","src":"7867:887:17"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"7365:1395:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"7446:4:17","nodeType":"YulTypedName","src":"7446:4:17","type":""},{"name":"src","nativeSrc":"7452:3:17","nodeType":"YulTypedName","src":"7452:3:17","type":""}],"src":"7365:1395:17"},{"body":{"nativeSrc":"8862:73:17","nodeType":"YulBlock","src":"8862:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8879:3:17","nodeType":"YulIdentifier","src":"8879:3:17"},{"name":"length","nativeSrc":"8884:6:17","nodeType":"YulIdentifier","src":"8884:6:17"}],"functionName":{"name":"mstore","nativeSrc":"8872:6:17","nodeType":"YulIdentifier","src":"8872:6:17"},"nativeSrc":"8872:19:17","nodeType":"YulFunctionCall","src":"8872:19:17"},"nativeSrc":"8872:19:17","nodeType":"YulExpressionStatement","src":"8872:19:17"},{"nativeSrc":"8900:29:17","nodeType":"YulAssignment","src":"8900:29:17","value":{"arguments":[{"name":"pos","nativeSrc":"8919:3:17","nodeType":"YulIdentifier","src":"8919:3:17"},{"kind":"number","nativeSrc":"8924:4:17","nodeType":"YulLiteral","src":"8924:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8915:3:17","nodeType":"YulIdentifier","src":"8915:3:17"},"nativeSrc":"8915:14:17","nodeType":"YulFunctionCall","src":"8915:14:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"8900:11:17","nodeType":"YulIdentifier","src":"8900:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"8766:169:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8834:3:17","nodeType":"YulTypedName","src":"8834:3:17","type":""},{"name":"length","nativeSrc":"8839:6:17","nodeType":"YulTypedName","src":"8839:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"8850:11:17","nodeType":"YulTypedName","src":"8850:11:17","type":""}],"src":"8766:169:17"},{"body":{"nativeSrc":"9047:123:17","nodeType":"YulBlock","src":"9047:123:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"9069:6:17","nodeType":"YulIdentifier","src":"9069:6:17"},{"kind":"number","nativeSrc":"9077:1:17","nodeType":"YulLiteral","src":"9077:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"9065:3:17","nodeType":"YulIdentifier","src":"9065:3:17"},"nativeSrc":"9065:14:17","nodeType":"YulFunctionCall","src":"9065:14:17"},{"hexValue":"455243323938313a20726f79616c7479206665652077696c6c20657863656564","kind":"string","nativeSrc":"9081:34:17","nodeType":"YulLiteral","src":"9081:34:17","type":"","value":"ERC2981: royalty fee will exceed"}],"functionName":{"name":"mstore","nativeSrc":"9058:6:17","nodeType":"YulIdentifier","src":"9058:6:17"},"nativeSrc":"9058:58:17","nodeType":"YulFunctionCall","src":"9058:58:17"},"nativeSrc":"9058:58:17","nodeType":"YulExpressionStatement","src":"9058:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"9137:6:17","nodeType":"YulIdentifier","src":"9137:6:17"},{"kind":"number","nativeSrc":"9145:2:17","nodeType":"YulLiteral","src":"9145:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9133:3:17","nodeType":"YulIdentifier","src":"9133:3:17"},"nativeSrc":"9133:15:17","nodeType":"YulFunctionCall","src":"9133:15:17"},{"hexValue":"2073616c655072696365","kind":"string","nativeSrc":"9150:12:17","nodeType":"YulLiteral","src":"9150:12:17","type":"","value":" salePrice"}],"functionName":{"name":"mstore","nativeSrc":"9126:6:17","nodeType":"YulIdentifier","src":"9126:6:17"},"nativeSrc":"9126:37:17","nodeType":"YulFunctionCall","src":"9126:37:17"},"nativeSrc":"9126:37:17","nodeType":"YulExpressionStatement","src":"9126:37:17"}]},"name":"store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","nativeSrc":"8941:229:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"9039:6:17","nodeType":"YulTypedName","src":"9039:6:17","type":""}],"src":"8941:229:17"},{"body":{"nativeSrc":"9322:220:17","nodeType":"YulBlock","src":"9322:220:17","statements":[{"nativeSrc":"9332:74:17","nodeType":"YulAssignment","src":"9332:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"9398:3:17","nodeType":"YulIdentifier","src":"9398:3:17"},{"kind":"number","nativeSrc":"9403:2:17","nodeType":"YulLiteral","src":"9403:2:17","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"9339:58:17","nodeType":"YulIdentifier","src":"9339:58:17"},"nativeSrc":"9339:67:17","nodeType":"YulFunctionCall","src":"9339:67:17"},"variableNames":[{"name":"pos","nativeSrc":"9332:3:17","nodeType":"YulIdentifier","src":"9332:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"9504:3:17","nodeType":"YulIdentifier","src":"9504:3:17"}],"functionName":{"name":"store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","nativeSrc":"9415:88:17","nodeType":"YulIdentifier","src":"9415:88:17"},"nativeSrc":"9415:93:17","nodeType":"YulFunctionCall","src":"9415:93:17"},"nativeSrc":"9415:93:17","nodeType":"YulExpressionStatement","src":"9415:93:17"},{"nativeSrc":"9517:19:17","nodeType":"YulAssignment","src":"9517:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"9528:3:17","nodeType":"YulIdentifier","src":"9528:3:17"},{"kind":"number","nativeSrc":"9533:2:17","nodeType":"YulLiteral","src":"9533:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9524:3:17","nodeType":"YulIdentifier","src":"9524:3:17"},"nativeSrc":"9524:12:17","nodeType":"YulFunctionCall","src":"9524:12:17"},"variableNames":[{"name":"end","nativeSrc":"9517:3:17","nodeType":"YulIdentifier","src":"9517:3:17"}]}]},"name":"abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack","nativeSrc":"9176:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9310:3:17","nodeType":"YulTypedName","src":"9310:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9318:3:17","nodeType":"YulTypedName","src":"9318:3:17","type":""}],"src":"9176:366:17"},{"body":{"nativeSrc":"9719:248:17","nodeType":"YulBlock","src":"9719:248:17","statements":[{"nativeSrc":"9729:26:17","nodeType":"YulAssignment","src":"9729:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"9741:9:17","nodeType":"YulIdentifier","src":"9741:9:17"},{"kind":"number","nativeSrc":"9752:2:17","nodeType":"YulLiteral","src":"9752:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9737:3:17","nodeType":"YulIdentifier","src":"9737:3:17"},"nativeSrc":"9737:18:17","nodeType":"YulFunctionCall","src":"9737:18:17"},"variableNames":[{"name":"tail","nativeSrc":"9729:4:17","nodeType":"YulIdentifier","src":"9729:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9776:9:17","nodeType":"YulIdentifier","src":"9776:9:17"},{"kind":"number","nativeSrc":"9787:1:17","nodeType":"YulLiteral","src":"9787:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"9772:3:17","nodeType":"YulIdentifier","src":"9772:3:17"},"nativeSrc":"9772:17:17","nodeType":"YulFunctionCall","src":"9772:17:17"},{"arguments":[{"name":"tail","nativeSrc":"9795:4:17","nodeType":"YulIdentifier","src":"9795:4:17"},{"name":"headStart","nativeSrc":"9801:9:17","nodeType":"YulIdentifier","src":"9801:9:17"}],"functionName":{"name":"sub","nativeSrc":"9791:3:17","nodeType":"YulIdentifier","src":"9791:3:17"},"nativeSrc":"9791:20:17","nodeType":"YulFunctionCall","src":"9791:20:17"}],"functionName":{"name":"mstore","nativeSrc":"9765:6:17","nodeType":"YulIdentifier","src":"9765:6:17"},"nativeSrc":"9765:47:17","nodeType":"YulFunctionCall","src":"9765:47:17"},"nativeSrc":"9765:47:17","nodeType":"YulExpressionStatement","src":"9765:47:17"},{"nativeSrc":"9821:139:17","nodeType":"YulAssignment","src":"9821:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"9955:4:17","nodeType":"YulIdentifier","src":"9955:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack","nativeSrc":"9829:124:17","nodeType":"YulIdentifier","src":"9829:124:17"},"nativeSrc":"9829:131:17","nodeType":"YulFunctionCall","src":"9829:131:17"},"variableNames":[{"name":"tail","nativeSrc":"9821:4:17","nodeType":"YulIdentifier","src":"9821:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9548:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9699:9:17","nodeType":"YulTypedName","src":"9699:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9714:4:17","nodeType":"YulTypedName","src":"9714:4:17","type":""}],"src":"9548:419:17"},{"body":{"nativeSrc":"10079:69:17","nodeType":"YulBlock","src":"10079:69:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"10101:6:17","nodeType":"YulIdentifier","src":"10101:6:17"},{"kind":"number","nativeSrc":"10109:1:17","nodeType":"YulLiteral","src":"10109:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10097:3:17","nodeType":"YulIdentifier","src":"10097:3:17"},"nativeSrc":"10097:14:17","nodeType":"YulFunctionCall","src":"10097:14:17"},{"hexValue":"455243323938313a20696e76616c6964207265636569766572","kind":"string","nativeSrc":"10113:27:17","nodeType":"YulLiteral","src":"10113:27:17","type":"","value":"ERC2981: invalid receiver"}],"functionName":{"name":"mstore","nativeSrc":"10090:6:17","nodeType":"YulIdentifier","src":"10090:6:17"},"nativeSrc":"10090:51:17","nodeType":"YulFunctionCall","src":"10090:51:17"},"nativeSrc":"10090:51:17","nodeType":"YulExpressionStatement","src":"10090:51:17"}]},"name":"store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff","nativeSrc":"9973:175:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"10071:6:17","nodeType":"YulTypedName","src":"10071:6:17","type":""}],"src":"9973:175:17"},{"body":{"nativeSrc":"10300:220:17","nodeType":"YulBlock","src":"10300:220:17","statements":[{"nativeSrc":"10310:74:17","nodeType":"YulAssignment","src":"10310:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"10376:3:17","nodeType":"YulIdentifier","src":"10376:3:17"},{"kind":"number","nativeSrc":"10381:2:17","nodeType":"YulLiteral","src":"10381:2:17","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"10317:58:17","nodeType":"YulIdentifier","src":"10317:58:17"},"nativeSrc":"10317:67:17","nodeType":"YulFunctionCall","src":"10317:67:17"},"variableNames":[{"name":"pos","nativeSrc":"10310:3:17","nodeType":"YulIdentifier","src":"10310:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"10482:3:17","nodeType":"YulIdentifier","src":"10482:3:17"}],"functionName":{"name":"store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff","nativeSrc":"10393:88:17","nodeType":"YulIdentifier","src":"10393:88:17"},"nativeSrc":"10393:93:17","nodeType":"YulFunctionCall","src":"10393:93:17"},"nativeSrc":"10393:93:17","nodeType":"YulExpressionStatement","src":"10393:93:17"},{"nativeSrc":"10495:19:17","nodeType":"YulAssignment","src":"10495:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"10506:3:17","nodeType":"YulIdentifier","src":"10506:3:17"},{"kind":"number","nativeSrc":"10511:2:17","nodeType":"YulLiteral","src":"10511:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10502:3:17","nodeType":"YulIdentifier","src":"10502:3:17"},"nativeSrc":"10502:12:17","nodeType":"YulFunctionCall","src":"10502:12:17"},"variableNames":[{"name":"end","nativeSrc":"10495:3:17","nodeType":"YulIdentifier","src":"10495:3:17"}]}]},"name":"abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack","nativeSrc":"10154:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10288:3:17","nodeType":"YulTypedName","src":"10288:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10296:3:17","nodeType":"YulTypedName","src":"10296:3:17","type":""}],"src":"10154:366:17"},{"body":{"nativeSrc":"10697:248:17","nodeType":"YulBlock","src":"10697:248:17","statements":[{"nativeSrc":"10707:26:17","nodeType":"YulAssignment","src":"10707:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"10719:9:17","nodeType":"YulIdentifier","src":"10719:9:17"},{"kind":"number","nativeSrc":"10730:2:17","nodeType":"YulLiteral","src":"10730:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10715:3:17","nodeType":"YulIdentifier","src":"10715:3:17"},"nativeSrc":"10715:18:17","nodeType":"YulFunctionCall","src":"10715:18:17"},"variableNames":[{"name":"tail","nativeSrc":"10707:4:17","nodeType":"YulIdentifier","src":"10707:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10754:9:17","nodeType":"YulIdentifier","src":"10754:9:17"},{"kind":"number","nativeSrc":"10765:1:17","nodeType":"YulLiteral","src":"10765:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10750:3:17","nodeType":"YulIdentifier","src":"10750:3:17"},"nativeSrc":"10750:17:17","nodeType":"YulFunctionCall","src":"10750:17:17"},{"arguments":[{"name":"tail","nativeSrc":"10773:4:17","nodeType":"YulIdentifier","src":"10773:4:17"},{"name":"headStart","nativeSrc":"10779:9:17","nodeType":"YulIdentifier","src":"10779:9:17"}],"functionName":{"name":"sub","nativeSrc":"10769:3:17","nodeType":"YulIdentifier","src":"10769:3:17"},"nativeSrc":"10769:20:17","nodeType":"YulFunctionCall","src":"10769:20:17"}],"functionName":{"name":"mstore","nativeSrc":"10743:6:17","nodeType":"YulIdentifier","src":"10743:6:17"},"nativeSrc":"10743:47:17","nodeType":"YulFunctionCall","src":"10743:47:17"},"nativeSrc":"10743:47:17","nodeType":"YulExpressionStatement","src":"10743:47:17"},{"nativeSrc":"10799:139:17","nodeType":"YulAssignment","src":"10799:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"10933:4:17","nodeType":"YulIdentifier","src":"10933:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack","nativeSrc":"10807:124:17","nodeType":"YulIdentifier","src":"10807:124:17"},"nativeSrc":"10807:131:17","nodeType":"YulFunctionCall","src":"10807:131:17"},"variableNames":[{"name":"tail","nativeSrc":"10799:4:17","nodeType":"YulIdentifier","src":"10799:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10526:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10677:9:17","nodeType":"YulTypedName","src":"10677:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10692:4:17","nodeType":"YulTypedName","src":"10692:4:17","type":""}],"src":"10526:419:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_bytes32_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC2981: royalty fee will exceed\")\n\n        mstore(add(memPtr, 32), \" salePrice\")\n\n    }\n\n    function abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC2981: invalid receiver\")\n\n    }\n\n    function abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x523C CODESIZE SUB DUP1 PUSH2 0x523C DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x58C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E46543100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E46543100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x809 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x809 JUMP JUMPDEST POP POP POP PUSH2 0xDC PUSH2 0xD1 PUSH2 0x114 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x11C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 PUSH1 0xB SWAP1 DUP2 PUSH2 0xEB SWAP2 SWAP1 PUSH2 0x809 JUMP JUMPDEST POP DUP1 PUSH1 0x80 DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0xA DUP2 SWAP1 SSTORE POP PUSH2 0x10D CALLER PUSH1 0xFA PUSH2 0x13F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH2 0x9EA JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12B DUP2 PUSH2 0x2DA PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x13C DUP2 PUSH1 0xFA PUSH2 0x13F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x14D PUSH2 0x311 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A2 SWAP1 PUSH2 0x95E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x21A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x211 SWAP1 PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x30E DUP2 PUSH2 0x31B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x448 DUP3 PUSH2 0x3FF JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x467 JUMPI PUSH2 0x466 PUSH2 0x410 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47A PUSH2 0x3E1 JUMP JUMPDEST SWAP1 POP PUSH2 0x486 DUP3 DUP3 PUSH2 0x43F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4A6 JUMPI PUSH2 0x4A5 PUSH2 0x410 JUMP JUMPDEST JUMPDEST PUSH2 0x4AF DUP3 PUSH2 0x3FF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4DA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F9 PUSH2 0x4F4 DUP5 PUSH2 0x48B JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x515 JUMPI PUSH2 0x514 PUSH2 0x3FA JUMP JUMPDEST JUMPDEST PUSH2 0x520 DUP5 DUP3 DUP6 PUSH2 0x4BC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x53D JUMPI PUSH2 0x53C PUSH2 0x3F5 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x54D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x4E6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x569 DUP2 PUSH2 0x556 JUMP JUMPDEST DUP2 EQ PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x586 DUP2 PUSH2 0x560 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5A3 JUMPI PUSH2 0x5A2 PUSH2 0x3EB JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5C1 JUMPI PUSH2 0x5C0 PUSH2 0x3F0 JUMP JUMPDEST JUMPDEST PUSH2 0x5CD DUP6 DUP3 DUP7 ADD PUSH2 0x528 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x5DE DUP6 DUP3 DUP7 ADD PUSH2 0x577 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x63A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x64D JUMPI PUSH2 0x64C PUSH2 0x5F3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x6B5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x678 JUMP JUMPDEST PUSH2 0x6BF DUP7 DUP4 PUSH2 0x678 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x706 PUSH2 0x701 PUSH2 0x6FC DUP5 PUSH2 0x6D7 JUMP JUMPDEST PUSH2 0x6E1 JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x720 DUP4 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x734 PUSH2 0x72C DUP3 PUSH2 0x70D JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x685 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x754 DUP2 DUP5 DUP5 PUSH2 0x717 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x778 JUMPI PUSH2 0x76D PUSH1 0x0 DUP3 PUSH2 0x741 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x75A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x7BD JUMPI PUSH2 0x78E DUP2 PUSH2 0x653 JUMP JUMPDEST PUSH2 0x797 DUP5 PUSH2 0x668 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x7A6 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x7BA PUSH2 0x7B2 DUP6 PUSH2 0x668 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x759 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E0 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x7C2 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F9 DUP4 DUP4 PUSH2 0x7CF JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x812 DUP3 PUSH2 0x5E8 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x82B JUMPI PUSH2 0x82A PUSH2 0x410 JUMP JUMPDEST JUMPDEST PUSH2 0x835 DUP3 SLOAD PUSH2 0x622 JUMP JUMPDEST PUSH2 0x840 DUP3 DUP3 DUP6 PUSH2 0x77C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x873 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x861 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x86B DUP6 DUP3 PUSH2 0x7ED JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x881 DUP7 PUSH2 0x653 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8A9 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x884 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x8C6 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x8C2 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x7CF JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x948 PUSH1 0x2A DUP4 PUSH2 0x8DB JUMP JUMPDEST SWAP2 POP PUSH2 0x953 DUP3 PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x977 DUP2 PUSH2 0x93B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B4 PUSH1 0x19 DUP4 PUSH2 0x8DB JUMP JUMPDEST SWAP2 POP PUSH2 0x9BF DUP3 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x9E3 DUP2 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x4830 PUSH2 0xA0C PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xE61 ADD MSTORE PUSH2 0x1BE2 ADD MSTORE PUSH2 0x4830 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5944C753 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0x98BDF6F5 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x6AB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x713 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x98BDF6F5 EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5F1 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0xC7499348 EQ PUSH2 0x643 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x559 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x570 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x59B JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x5944C753 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x63D9D166 EQ PUSH2 0x4DA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x505 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x24600FC3 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3DB JUMPI DUP1 PUSH4 0x47B13D8A EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x55850FE6 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x44B JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x3B0 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0xAB7039E GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xAB7039E EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x307 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x28D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x73C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x2D27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x74E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x2DD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x272 SWAP2 SWAP1 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0x7E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x284 SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x826 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x2F1F JUMP JUMPDEST PUSH2 0x93D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DA PUSH2 0xA69 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FE SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0x2FB0 JUMP JUMPDEST PUSH2 0xAC7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x345 PUSH2 0xB27 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x36E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x369 SWAP2 SWAP1 PUSH2 0x3003 JUMP JUMPDEST PUSH2 0xC75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37C SWAP3 SWAP2 SWAP1 PUSH2 0x3043 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A7 SWAP2 SWAP1 PUSH2 0x3085 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C5 PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D2 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x2FB0 JUMP JUMPDEST PUSH2 0xE89 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x3105 JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x442 SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x472 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x46D SWAP2 SWAP1 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0xFC3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x496 SWAP2 SWAP1 PUSH2 0x3360 JUMP JUMPDEST PUSH2 0xFDE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BF SWAP2 SWAP1 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0xFF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D1 SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EF PUSH2 0x107C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FC SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x527 SWAP2 SWAP1 PUSH2 0x33B3 JUMP JUMPDEST PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x539 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x557 PUSH2 0x113F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x56E PUSH2 0x1153 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x585 PUSH2 0x11E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B0 PUSH2 0x120A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0x2DD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DB PUSH2 0x129C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5E8 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x618 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x613 SWAP2 SWAP1 PUSH2 0x340C JUMP JUMPDEST PUSH2 0x12A2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x63C SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH2 0x12B8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x658 PUSH2 0x131A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x665 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x695 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x690 SWAP2 SWAP1 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0x1325 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6A2 SWAP2 SWAP1 PUSH2 0x2DD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C0 PUSH2 0x138D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6CD SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6F8 SWAP2 SWAP1 PUSH2 0x3570 JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70A SWAP2 SWAP1 PUSH2 0x2D27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x73A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x33B3 JUMP JUMPDEST PUSH2 0x144B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x747 DUP3 PUSH2 0x14F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x75D SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x789 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7EB DUP3 PUSH2 0x1572 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x831 DUP3 PUSH2 0xFF6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x898 SWAP1 PUSH2 0x3682 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8C0 PUSH2 0x15BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8EF JUMPI POP PUSH2 0x8EE DUP2 PUSH2 0x8E9 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST JUMPDEST PUSH2 0x92E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x925 SWAP1 PUSH2 0x3714 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x938 DUP4 DUP4 PUSH2 0x15C5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x949 DUP4 DUP4 PUSH2 0xC75 JUMP JUMPDEST SWAP2 POP POP DUP1 CALLVALUE LT ISZERO PUSH2 0x98F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x986 SWAP1 PUSH2 0x3780 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x99A DUP6 DUP6 DUP6 PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLVALUE PUSH2 0x9A8 SWAP2 SWAP1 PUSH2 0x37CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xA61 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x9D9 SWAP1 PUSH2 0x3834 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x3895 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0x16345785D8A0000 CALLVALUE EQ PUSH2 0xAB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAAA SWAP1 PUSH2 0x3901 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xABB PUSH2 0x167E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xAD8 PUSH2 0xAD2 PUSH2 0x15BD JUMP JUMPDEST DUP3 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0xB17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB0E SWAP1 PUSH2 0x3993 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB22 DUP4 DUP4 DUP4 PUSH2 0x17CA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB2F PUSH2 0x1AC3 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB6E SWAP1 PUSH2 0x39FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xB9D SWAP1 PUSH2 0x3834 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC1A SWAP1 PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEAFF4B37086828766AD3268786972C0CD24259D4C87A80F9D3963A3C3D999B0D DUP4 PUSH1 0x40 MLOAD PUSH2 0xC69 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE0A JUMPI PUSH1 0x8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0xE14 PUSH2 0x1B41 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0xE40 SWAP2 SWAP1 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0xE4A SWAP2 SWAP1 PUSH2 0x3AFC JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD DUP2 SWAP4 POP SWAP4 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0xEA4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 CALLVALUE EQ PUSH2 0xEF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE9 SWAP1 PUSH2 0x3B79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEFD PUSH1 0xC DUP4 PUSH2 0x1B4B JUMP JUMPDEST ISZERO PUSH2 0xF3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF34 SWAP1 PUSH2 0x3BE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF8A DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP4 DUP4 CALLER PUSH2 0x1B87 JUMP JUMPDEST PUSH2 0xF97 PUSH1 0xC DUP4 PUSH1 0x1 PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFB7 JUMPI PUSH2 0xFAA PUSH2 0x167E JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xF9A JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFA DUP2 JUMP JUMPDEST PUSH2 0xFCB PUSH2 0x1AC3 JUMP JUMPDEST DUP1 PUSH1 0xB SWAP1 DUP2 PUSH2 0xFDA SWAP2 SWAP1 PUSH2 0x3DB1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFE6 PUSH2 0x1AC3 JUMP JUMPDEST PUSH2 0xFF1 DUP4 DUP4 DUP4 PUSH2 0x1C72 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1002 DUP4 PUSH2 0x1E19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1073 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x106A SWAP1 PUSH2 0x3ECF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0x16345785D8A0000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10EF SWAP1 PUSH2 0x3F61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1147 PUSH2 0x1AC3 JUMP JUMPDEST PUSH2 0x1151 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x115D PUSH2 0x15BD JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x117E PUSH2 0x138D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11CB SWAP1 PUSH2 0x3FF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11DD DUP2 PUSH2 0x1E56 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x1219 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1245 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1292 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1267 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1292 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1275 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x12B4 PUSH2 0x12AD PUSH2 0x15BD JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1E6D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x12C9 PUSH2 0x12C3 PUSH2 0x15BD JUMP JUMPDEST DUP4 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x1308 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12FF SWAP1 PUSH2 0x3993 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1314 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1FD9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1330 DUP3 PUSH2 0x1572 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x133A PUSH2 0x2035 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x135A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1385 JUMP JUMPDEST DUP1 PUSH2 0x1364 DUP5 PUSH2 0x20C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1375 SWAP3 SWAP2 SWAP1 PUSH2 0x404F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1453 PUSH2 0x1AC3 JUMP JUMPDEST DUP1 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14B3 PUSH2 0x11E0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2A55205A00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x156B JUMPI POP PUSH2 0x156A DUP3 PUSH2 0x2195 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x157B DUP2 PUSH2 0x2277 JUMP JUMPDEST PUSH2 0x15BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B1 SWAP1 PUSH2 0x3ECF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1638 DUP4 PUSH2 0xFF6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xA SLOAD LT PUSH2 0x16C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16BB SWAP1 PUSH2 0x40E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x16DE SWAP2 SWAP1 PUSH2 0x4105 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x16EF CALLER DUP3 PUSH2 0x22B8 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x90DDEDD5A25821BBA11FBB98DE02EC1F75C1BE90AE147D6450CE873E7B78B5D8 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1741 DUP4 PUSH2 0xFF6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1783 JUMPI POP PUSH2 0x1782 DUP2 DUP6 PUSH2 0x13B7 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x17C1 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17A9 DUP5 PUSH2 0x7E0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17EA DUP3 PUSH2 0xFF6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1840 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1837 SWAP1 PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x18AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18A6 SWAP1 PUSH2 0x423D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18BC DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22D6 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18DC DUP3 PUSH2 0xFF6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1932 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1929 SWAP1 PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1ABE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22DC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1ACB PUSH2 0x15BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AE9 PUSH2 0x11E0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B36 SWAP1 PUSH2 0x42A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 DUP4 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP5 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD AND EQ ISZERO SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B9E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x42C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BC4 SWAP2 SWAP1 PUSH2 0x4321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x1C07 DUP6 PUSH32 0x0 DUP4 PUSH2 0x22E2 JUMP JUMPDEST PUSH2 0x1C46 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3D SWAP1 PUSH2 0x4388 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C62 JUMPI PUSH2 0x1C5D DUP4 DUP4 PUSH2 0x22F9 JUMP JUMPDEST PUSH2 0x1C6D JUMP JUMPDEST PUSH2 0x1C6C DUP4 DUP4 PUSH2 0x2337 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C7A PUSH2 0x1B41 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1CD8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CCF SWAP1 PUSH2 0x441A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3E SWAP1 PUSH2 0x4486 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E5F DUP2 PUSH2 0x2376 JUMP JUMPDEST PUSH2 0x1E6A DUP2 PUSH1 0xFA PUSH2 0x23A7 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED2 SWAP1 PUSH2 0x44F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1FCC SWAP2 SWAP1 PUSH2 0x2D27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1FE4 DUP5 DUP5 DUP5 PUSH2 0x17CA JUMP JUMPDEST PUSH2 0x1FF0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x253C JUMP JUMPDEST PUSH2 0x202F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2026 SWAP1 PUSH2 0x4584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0x2044 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2070 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20BD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2092 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20BD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20A0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x20D6 DUP5 PUSH2 0x26C3 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20F5 JUMPI PUSH2 0x20F4 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2127 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x218A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x217E JUMPI PUSH2 0x217D PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2135 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x2260 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x2270 JUMPI POP PUSH2 0x226F DUP3 PUSH2 0x2816 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2299 DUP4 PUSH2 0x1E19 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22D2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2880 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x22EF DUP6 DUP5 PUSH2 0x28DB JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP4 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD OR SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP4 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP DUP1 NOT DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD AND SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x23A4 DUP2 PUSH2 0x292B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x23AF PUSH2 0x1B41 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x240D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2404 SWAP1 PUSH2 0x441A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x247C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2473 SWAP1 PUSH2 0x45F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x255D DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x29F1 JUMP JUMPDEST ISZERO PUSH2 0x26B6 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2586 PUSH2 0x15BD JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4665 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x25E4 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25E1 SWAP2 SWAP1 PUSH2 0x46C6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2666 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2614 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2619 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x265E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2655 SWAP1 PUSH2 0x4584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x26BB JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2721 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2717 JUMPI PUSH2 0x2716 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x275E JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2754 JUMPI PUSH2 0x2753 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x278D JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2783 JUMPI PUSH2 0x2782 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x27B6 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x27AC JUMPI PUSH2 0x27AB PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x27DB JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x27D1 JUMPI PUSH2 0x27D0 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x27FE JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x27F4 JUMPI PUSH2 0x27F3 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x280D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x288A DUP4 DUP4 PUSH2 0x2A14 JUMP JUMPDEST PUSH2 0x2897 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x253C JUMP JUMPDEST PUSH2 0x28D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28CD SWAP1 PUSH2 0x4584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2920 JUMPI PUSH2 0x2911 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2904 JUMPI PUSH2 0x2903 PUSH2 0x46F3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2C31 JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x28E4 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2A83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A7A SWAP1 PUSH2 0x476E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2A8C DUP2 PUSH2 0x2277 JUMP JUMPDEST ISZERO PUSH2 0x2ACC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC3 SWAP1 PUSH2 0x47DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2ADA PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22D6 JUMP JUMPDEST PUSH2 0x2AE3 DUP2 PUSH2 0x2277 JUMP JUMPDEST ISZERO PUSH2 0x2B23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B1A SWAP1 PUSH2 0x47DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2C2D PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22DC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2C49 JUMPI PUSH2 0x2C44 DUP3 DUP5 PUSH2 0x2C5C JUMP JUMPDEST PUSH2 0x2C54 JUMP JUMPDEST PUSH2 0x2C53 DUP4 DUP4 PUSH2 0x2C5C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CBC DUP2 PUSH2 0x2C87 JUMP JUMPDEST DUP2 EQ PUSH2 0x2CC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2CD9 DUP2 PUSH2 0x2CB3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF5 JUMPI PUSH2 0x2CF4 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D03 DUP5 DUP3 DUP6 ADD PUSH2 0x2CCA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D21 DUP2 PUSH2 0x2D0C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D3C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D7C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2D61 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DA4 DUP3 PUSH2 0x2D42 JUMP JUMPDEST PUSH2 0x2DAE DUP2 DUP6 PUSH2 0x2D4D JUMP JUMPDEST SWAP4 POP PUSH2 0x2DBE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D5E JUMP JUMPDEST PUSH2 0x2DC7 DUP2 PUSH2 0x2D88 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DEC DUP2 DUP5 PUSH2 0x2D99 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E07 DUP2 PUSH2 0x2DF4 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2E24 DUP2 PUSH2 0x2DFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E40 JUMPI PUSH2 0x2E3F PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E4E DUP5 DUP3 DUP6 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E82 DUP3 PUSH2 0x2E57 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E92 DUP2 PUSH2 0x2E77 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EAD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2EBC DUP2 PUSH2 0x2E77 JUMP JUMPDEST DUP2 EQ PUSH2 0x2EC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2ED9 DUP2 PUSH2 0x2EB3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2EF6 JUMPI PUSH2 0x2EF5 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F04 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F15 DUP6 DUP3 DUP7 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2F39 JUMPI PUSH2 0x2F38 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F47 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2F58 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2F69 DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x2F7A DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x2F8F DUP2 PUSH2 0x2DF4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2FAA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F86 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FC9 JUMPI PUSH2 0x2FC8 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FD7 DUP7 DUP3 DUP8 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2FE8 DUP7 DUP3 DUP8 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2FF9 DUP7 DUP3 DUP8 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x301A JUMPI PUSH2 0x3019 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3028 DUP6 DUP3 DUP7 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3039 DUP6 DUP3 DUP7 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3058 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x3065 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F86 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x307F DUP2 PUSH2 0x306C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x309A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3076 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x30C5 JUMPI PUSH2 0x30C4 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30E2 JUMPI PUSH2 0x30E1 PUSH2 0x30A5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x30FE JUMPI PUSH2 0x30FD PUSH2 0x30AA JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x311F JUMPI PUSH2 0x311E PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x313D JUMPI PUSH2 0x313C PUSH2 0x2C82 JUMP JUMPDEST JUMPDEST PUSH2 0x3149 DUP8 DUP3 DUP9 ADD PUSH2 0x30AF JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 PUSH2 0x315C DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x316D DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x319A DUP2 PUSH2 0x3179 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x31B5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3191 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x31F8 DUP3 PUSH2 0x2D88 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3217 JUMPI PUSH2 0x3216 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x322A PUSH2 0x2C73 JUMP JUMPDEST SWAP1 POP PUSH2 0x3236 DUP3 DUP3 PUSH2 0x31EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3256 JUMPI PUSH2 0x3255 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH2 0x325F DUP3 PUSH2 0x2D88 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328E PUSH2 0x3289 DUP5 PUSH2 0x323B JUMP JUMPDEST PUSH2 0x3220 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x32AA JUMPI PUSH2 0x32A9 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x32B5 DUP5 DUP3 DUP6 PUSH2 0x326C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x32D2 JUMPI PUSH2 0x32D1 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x32E2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x327B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3301 JUMPI PUSH2 0x3300 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x331F JUMPI PUSH2 0x331E PUSH2 0x2C82 JUMP JUMPDEST JUMPDEST PUSH2 0x332B DUP5 DUP3 DUP6 ADD PUSH2 0x32BD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x333D DUP2 PUSH2 0x3179 JUMP JUMPDEST DUP2 EQ PUSH2 0x3348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x335A DUP2 PUSH2 0x3334 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3379 JUMPI PUSH2 0x3378 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3387 DUP7 DUP3 DUP8 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3398 DUP7 DUP3 DUP8 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x33A9 DUP7 DUP3 DUP8 ADD PUSH2 0x334B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33C9 JUMPI PUSH2 0x33C8 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33D7 DUP5 DUP3 DUP6 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x33E9 DUP2 PUSH2 0x2D0C JUMP JUMPDEST DUP2 EQ PUSH2 0x33F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3406 DUP2 PUSH2 0x33E0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3423 JUMPI PUSH2 0x3422 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3431 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3442 DUP6 DUP3 DUP7 ADD PUSH2 0x33F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3467 JUMPI PUSH2 0x3466 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH2 0x3470 DUP3 PUSH2 0x2D88 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3490 PUSH2 0x348B DUP5 PUSH2 0x344C JUMP JUMPDEST PUSH2 0x3220 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x34AC JUMPI PUSH2 0x34AB PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x34B7 DUP5 DUP3 DUP6 PUSH2 0x326C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x34D4 JUMPI PUSH2 0x34D3 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x34E4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x347D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3507 JUMPI PUSH2 0x3506 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3515 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3526 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3537 DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3558 JUMPI PUSH2 0x3557 PUSH2 0x2C82 JUMP JUMPDEST JUMPDEST PUSH2 0x3564 DUP8 DUP3 DUP9 ADD PUSH2 0x34BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3587 JUMPI PUSH2 0x3586 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3595 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x35A6 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x35F7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x360A JUMPI PUSH2 0x3609 PUSH2 0x35B0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x366C PUSH1 0x21 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3677 DUP3 PUSH2 0x3610 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x369B DUP2 PUSH2 0x365F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36FE PUSH1 0x3D DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3709 DUP3 PUSH2 0x36A2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x372D DUP2 PUSH2 0x36F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420726F79616C747920616D6F756E740000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x376A PUSH1 0x1B DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3775 DUP3 PUSH2 0x3734 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3799 DUP2 PUSH2 0x375D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x37DA DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x37E5 DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x37FD JUMPI PUSH2 0x37FC PUSH2 0x37A0 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x381E PUSH1 0x0 DUP4 PUSH2 0x3803 JUMP JUMPDEST SWAP2 POP PUSH2 0x3829 DUP3 PUSH2 0x380E JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x383F DUP3 PUSH2 0x3811 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526566756E64206661696C656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x387F PUSH1 0xD DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x388A DUP3 PUSH2 0x3849 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x38AE DUP2 PUSH2 0x3872 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x77726F6E6720616D6F756E742C2073656E6420302E3120455448000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38EB PUSH1 0x1A DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x38F6 DUP3 PUSH2 0x38B5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x391A DUP2 PUSH2 0x38DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397D PUSH1 0x2D DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3988 DUP3 PUSH2 0x3921 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39AC DUP2 PUSH2 0x3970 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F2066756E647320746F207769746864726177000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39E9 PUSH1 0x14 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x39F4 DUP3 PUSH2 0x39B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A18 DUP2 PUSH2 0x39DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x66756E64207472616E73666572206661696C6564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A55 PUSH1 0x14 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3A60 DUP3 PUSH2 0x3A1F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A84 DUP2 PUSH2 0x3A48 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A96 DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AA1 DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3AAF DUP2 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x3AC6 JUMPI PUSH2 0x3AC5 PUSH2 0x37A0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B07 DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B12 DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3B22 JUMPI PUSH2 0x3B21 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x77726F6E6720616D6F756E742C2073656E6420302E3035204554480000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B63 PUSH1 0x1B DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3B6E DUP3 PUSH2 0x3B2D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B92 DUP2 PUSH2 0x3B56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x446973636F756E7420616C726561647920636C61696D65640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCF PUSH1 0x18 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3BDA DUP3 PUSH2 0x3B99 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BFE DUP2 PUSH2 0x3BC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3C67 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3C2A JUMP JUMPDEST PUSH2 0x3C71 DUP7 DUP4 PUSH2 0x3C2A JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CAE PUSH2 0x3CA9 PUSH2 0x3CA4 DUP5 PUSH2 0x2DF4 JUMP JUMPDEST PUSH2 0x3C89 JUMP JUMPDEST PUSH2 0x2DF4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CC8 DUP4 PUSH2 0x3C93 JUMP JUMPDEST PUSH2 0x3CDC PUSH2 0x3CD4 DUP3 PUSH2 0x3CB5 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3C37 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3CF1 PUSH2 0x3CE4 JUMP JUMPDEST PUSH2 0x3CFC DUP2 DUP5 DUP5 PUSH2 0x3CBF JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D20 JUMPI PUSH2 0x3D15 PUSH1 0x0 DUP3 PUSH2 0x3CE9 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3D02 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3D65 JUMPI PUSH2 0x3D36 DUP2 PUSH2 0x3C05 JUMP JUMPDEST PUSH2 0x3D3F DUP5 PUSH2 0x3C1A JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3D4E JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3D62 PUSH2 0x3D5A DUP6 PUSH2 0x3C1A JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3D01 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D88 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3D6A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DA1 DUP4 DUP4 PUSH2 0x3D77 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3DBA DUP3 PUSH2 0x2D42 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DD3 JUMPI PUSH2 0x3DD2 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH2 0x3DDD DUP3 SLOAD PUSH2 0x35DF JUMP JUMPDEST PUSH2 0x3DE8 DUP3 DUP3 DUP6 PUSH2 0x3D24 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3E1B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3E09 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3E13 DUP6 DUP3 PUSH2 0x3D95 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3E7B JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3E29 DUP7 PUSH2 0x3C05 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3E51 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3E2C JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3E6E JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3E6A PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3D77 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EB9 PUSH1 0x18 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3EC4 DUP3 PUSH2 0x3E83 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3EE8 DUP2 PUSH2 0x3EAC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4B PUSH1 0x29 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3F56 DUP3 PUSH2 0x3EEF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F7A DUP2 PUSH2 0x3F3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E6577206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FDD PUSH1 0x29 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3FE8 DUP3 PUSH2 0x3F81 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x400C DUP2 PUSH2 0x3FD0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4029 DUP3 PUSH2 0x2D42 JUMP JUMPDEST PUSH2 0x4033 DUP2 DUP6 PUSH2 0x4013 JUMP JUMPDEST SWAP4 POP PUSH2 0x4043 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D5E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x405B DUP3 DUP6 PUSH2 0x401E JUMP JUMPDEST SWAP2 POP PUSH2 0x4067 DUP3 DUP5 PUSH2 0x401E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x74686520737570706C79206C696D6974206F6620313030302069732072656163 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6865640000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40CF PUSH1 0x23 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x40DA DUP3 PUSH2 0x4073 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x40FE DUP2 PUSH2 0x40C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4110 DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x411B DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x4133 JUMPI PUSH2 0x4132 PUSH2 0x37A0 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4195 PUSH1 0x25 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x41A0 DUP3 PUSH2 0x4139 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x41C4 DUP2 PUSH2 0x4188 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4227 PUSH1 0x24 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x4232 DUP3 PUSH2 0x41CB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4256 DUP2 PUSH2 0x421A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4293 PUSH1 0x20 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x429E DUP3 PUSH2 0x425D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42C2 DUP2 PUSH2 0x4286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x42DE PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x42EB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2F86 JUMP JUMPDEST PUSH2 0x42F8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F86 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x431B PUSH2 0x4316 DUP3 PUSH2 0x306C JUMP JUMPDEST PUSH2 0x4300 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x432D DUP3 DUP5 PUSH2 0x430A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E76616C69642070726F6F6600000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4372 PUSH1 0xD DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x437D DUP3 PUSH2 0x433C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43A1 DUP2 PUSH2 0x4365 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4404 PUSH1 0x2A DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x440F DUP3 PUSH2 0x43A8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4433 DUP2 PUSH2 0x43F7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4470 PUSH1 0x1B DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x447B DUP3 PUSH2 0x443A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x449F DUP2 PUSH2 0x4463 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44DC PUSH1 0x19 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x44E7 DUP3 PUSH2 0x44A6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x450B DUP2 PUSH2 0x44CF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x456E PUSH1 0x32 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x4579 DUP3 PUSH2 0x4512 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x459D DUP2 PUSH2 0x4561 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45DA PUSH1 0x19 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x45E5 DUP3 PUSH2 0x45A4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4609 DUP2 PUSH2 0x45CD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4637 DUP3 PUSH2 0x4610 JUMP JUMPDEST PUSH2 0x4641 DUP2 DUP6 PUSH2 0x461B JUMP JUMPDEST SWAP4 POP PUSH2 0x4651 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D5E JUMP JUMPDEST PUSH2 0x465A DUP2 PUSH2 0x2D88 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x467A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x4687 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x4694 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2F86 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x46A6 DUP2 DUP5 PUSH2 0x462C JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x46C0 DUP2 PUSH2 0x2CB3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x46DC JUMPI PUSH2 0x46DB PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46EA DUP5 DUP3 DUP6 ADD PUSH2 0x46B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4758 PUSH1 0x20 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x4763 DUP3 PUSH2 0x4722 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4787 DUP2 PUSH2 0x474B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47C4 PUSH1 0x1C DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x47CF DUP3 PUSH2 0x478E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x47F3 DUP2 PUSH2 0x47B7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 CALLDATACOPY DUP14 NUMBER 0xBE EXP 0x2C PUSH9 0xA65D7B7001C390D78C POP 0x4E JUMPDEST TIMESTAMP 0xEC EXTCODECOPY 0xE9 PUSH25 0x5E6ED0E12E862964736F6C634300081B003300000000000000 ","sourceMap":"786:6541:16:-:0;;;1629:294;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1733:7:16::1;1718:12;:22;;;;;;:::i;:::-;;1763:11;1750:24;;;;::::0;::::1;1801:1;1784:14;:18;;;;1812:53;1831:10;933:3;1812:18;;;:53;;:::i;:::-;1629:294:::0;;786:6541;;640:96:9;693:7;719:10;712:17;;640:96;:::o;6130:224:16:-;6204:34;6229:8;6204:24;;;:34;;:::i;:::-;6248:51;6267:8;933:3;6248:18;;;:51;;:::i;:::-;6130:224;:::o;2734:327:7:-;2852:17;:15;;;:17;;:::i;:::-;2836:33;;:12;:33;;;;2828:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;2954:1;2934:22;;:8;:22;;;2926:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;3019:35;;;;;;;;3031:8;3019:35;;;;;;3041:12;3019:35;;;;;2997:19;:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2734:327;;:::o;1501:153:1:-;1590:13;;1583:20;;;;;;;;;;;1613:34;1638:8;1613:24;;;:34;;:::i;:::-;1501:153;:::o;2378:95:7:-;2436:6;2461:5;2454:12;;2378:95;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:248::-;1692:1;1702:113;1716:6;1713:1;1710:13;1702:113;;;1801:1;1796:3;1792:11;1786:18;1782:1;1777:3;1773:11;1766:39;1738:2;1735:1;1731:10;1726:15;;1702:113;;;1849:1;1840:6;1835:3;1831:16;1824:27;1672:186;1610:248;;;:::o;1864:434::-;1953:5;1978:66;1994:49;2036:6;1994:49;:::i;:::-;1978:66;:::i;:::-;1969:75;;2067:6;2060:5;2053:21;2105:4;2098:5;2094:16;2143:3;2134:6;2129:3;2125:16;2122:25;2119:112;;;2150:79;;:::i;:::-;2119:112;2240:52;2285:6;2280:3;2275;2240:52;:::i;:::-;1959:339;1864:434;;;;;:::o;2318:355::-;2385:5;2434:3;2427:4;2419:6;2415:17;2411:27;2401:122;;2442:79;;:::i;:::-;2401:122;2552:6;2546:13;2577:90;2663:3;2655:6;2648:4;2640:6;2636:17;2577:90;:::i;:::-;2568:99;;2391:282;2318:355;;;;:::o;2679:77::-;2716:7;2745:5;2734:16;;2679:77;;;:::o;2762:122::-;2835:24;2853:5;2835:24;:::i;:::-;2828:5;2825:35;2815:63;;2874:1;2871;2864:12;2815:63;2762:122;:::o;2890:143::-;2947:5;2978:6;2972:13;2963:22;;2994:33;3021:5;2994:33;:::i;:::-;2890:143;;;;:::o;3039:680::-;3128:6;3136;3185:2;3173:9;3164:7;3160:23;3156:32;3153:119;;;3191:79;;:::i;:::-;3153:119;3332:1;3321:9;3317:17;3311:24;3362:18;3354:6;3351:30;3348:117;;;3384:79;;:::i;:::-;3348:117;3489:74;3555:7;3546:6;3535:9;3531:22;3489:74;:::i;:::-;3479:84;;3282:291;3612:2;3638:64;3694:7;3685:6;3674:9;3670:22;3638:64;:::i;:::-;3628:74;;3583:129;3039:680;;;;;:::o;3725:99::-;3777:6;3811:5;3805:12;3795:22;;3725:99;;;:::o;3830:180::-;3878:77;3875:1;3868:88;3975:4;3972:1;3965:15;3999:4;3996:1;3989:15;4016:320;4060:6;4097:1;4091:4;4087:12;4077:22;;4144:1;4138:4;4134:12;4165:18;4155:81;;4221:4;4213:6;4209:17;4199:27;;4155:81;4283:2;4275:6;4272:14;4252:18;4249:38;4246:84;;4302:18;;:::i;:::-;4246:84;4067:269;4016:320;;;:::o;4342:141::-;4391:4;4414:3;4406:11;;4437:3;4434:1;4427:14;4471:4;4468:1;4458:18;4450:26;;4342:141;;;:::o;4489:93::-;4526:6;4573:2;4568;4561:5;4557:14;4553:23;4543:33;;4489:93;;;:::o;4588:107::-;4632:8;4682:5;4676:4;4672:16;4651:37;;4588:107;;;;:::o;4701:393::-;4770:6;4820:1;4808:10;4804:18;4843:97;4873:66;4862:9;4843:97;:::i;:::-;4961:39;4991:8;4980:9;4961:39;:::i;:::-;4949:51;;5033:4;5029:9;5022:5;5018:21;5009:30;;5082:4;5072:8;5068:19;5061:5;5058:30;5048:40;;4777:317;;4701:393;;;;;:::o;5100:77::-;5137:7;5166:5;5155:16;;5100:77;;;:::o;5183:60::-;5211:3;5232:5;5225:12;;5183:60;;;:::o;5249:142::-;5299:9;5332:53;5350:34;5359:24;5377:5;5359:24;:::i;:::-;5350:34;:::i;:::-;5332:53;:::i;:::-;5319:66;;5249:142;;;:::o;5397:75::-;5440:3;5461:5;5454:12;;5397:75;;;:::o;5478:269::-;5588:39;5619:7;5588:39;:::i;:::-;5649:91;5698:41;5722:16;5698:41;:::i;:::-;5690:6;5683:4;5677:11;5649:91;:::i;:::-;5643:4;5636:105;5554:193;5478:269;;;:::o;5753:73::-;5798:3;5753:73;:::o;5832:189::-;5909:32;;:::i;:::-;5950:65;6008:6;6000;5994:4;5950:65;:::i;:::-;5885:136;5832:189;;:::o;6027:186::-;6087:120;6104:3;6097:5;6094:14;6087:120;;;6158:39;6195:1;6188:5;6158:39;:::i;:::-;6131:1;6124:5;6120:13;6111:22;;6087:120;;;6027:186;;:::o;6219:543::-;6320:2;6315:3;6312:11;6309:446;;;6354:38;6386:5;6354:38;:::i;:::-;6438:29;6456:10;6438:29;:::i;:::-;6428:8;6424:44;6621:2;6609:10;6606:18;6603:49;;;6642:8;6627:23;;6603:49;6665:80;6721:22;6739:3;6721:22;:::i;:::-;6711:8;6707:37;6694:11;6665:80;:::i;:::-;6324:431;;6309:446;6219:543;;;:::o;6768:117::-;6822:8;6872:5;6866:4;6862:16;6841:37;;6768:117;;;;:::o;6891:169::-;6935:6;6968:51;7016:1;7012:6;7004:5;7001:1;6997:13;6968:51;:::i;:::-;6964:56;7049:4;7043;7039:15;7029:25;;6942:118;6891:169;;;;:::o;7065:295::-;7141:4;7287:29;7312:3;7306:4;7287:29;:::i;:::-;7279:37;;7349:3;7346:1;7342:11;7336:4;7333:21;7325:29;;7065:295;;;;:::o;7365:1395::-;7482:37;7515:3;7482:37;:::i;:::-;7584:18;7576:6;7573:30;7570:56;;;7606:18;;:::i;:::-;7570:56;7650:38;7682:4;7676:11;7650:38;:::i;:::-;7735:67;7795:6;7787;7781:4;7735:67;:::i;:::-;7829:1;7853:4;7840:17;;7885:2;7877:6;7874:14;7902:1;7897:618;;;;8559:1;8576:6;8573:77;;;8625:9;8620:3;8616:19;8610:26;8601:35;;8573:77;8676:67;8736:6;8729:5;8676:67;:::i;:::-;8670:4;8663:81;8532:222;7867:887;;7897:618;7949:4;7945:9;7937:6;7933:22;7983:37;8015:4;7983:37;:::i;:::-;8042:1;8056:208;8070:7;8067:1;8064:14;8056:208;;;8149:9;8144:3;8140:19;8134:26;8126:6;8119:42;8200:1;8192:6;8188:14;8178:24;;8247:2;8236:9;8232:18;8219:31;;8093:4;8090:1;8086:12;8081:17;;8056:208;;;8292:6;8283:7;8280:19;8277:179;;;8350:9;8345:3;8341:19;8335:26;8393:48;8435:4;8427:6;8423:17;8412:9;8393:48;:::i;:::-;8385:6;8378:64;8300:156;8277:179;8502:1;8498;8490:6;8486:14;8482:22;8476:4;8469:36;7904:611;;;7867:887;;7457:1303;;;7365:1395;;:::o;8766:169::-;8850:11;8884:6;8879:3;8872:19;8924:4;8919:3;8915:14;8900:29;;8766:169;;;;:::o;8941:229::-;9081:34;9077:1;9069:6;9065:14;9058:58;9150:12;9145:2;9137:6;9133:15;9126:37;8941:229;:::o;9176:366::-;9318:3;9339:67;9403:2;9398:3;9339:67;:::i;:::-;9332:74;;9415:93;9504:3;9415:93;:::i;:::-;9533:2;9528:3;9524:12;9517:19;;9176:366;;;:::o;9548:419::-;9714:4;9752:2;9741:9;9737:18;9729:26;;9801:9;9795:4;9791:20;9787:1;9776:9;9772:17;9765:47;9829:131;9955:4;9829:131;:::i;:::-;9821:139;;9548:419;;;:::o;9973:175::-;10113:27;10109:1;10101:6;10097:14;10090:51;9973:175;:::o;10154:366::-;10296:3;10317:67;10381:2;10376:3;10317:67;:::i;:::-;10310:74;;10393:93;10482:3;10393:93;:::i;:::-;10511:2;10506:3;10502:12;10495:19;;10154:366;;;:::o;10526:419::-;10692:4;10730:2;10719:9;10715:18;10707:26;;10779:9;10773:4;10769:20;10765:1;10754:9;10750:17;10743:47;10807:131;10933:4;10807:131;:::i;:::-;10799:139;;10526:419;;;:::o;786:6541:16:-;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DISCOUNTED_MINTING_PRICE_3599":{"entryPoint":4890,"id":3599,"parameterSlots":0,"returnSlots":0},"@MAX_SUPPLY_3590":{"entryPoint":3715,"id":3590,"parameterSlots":0,"returnSlots":0},"@MINTING_PRICE_3596":{"entryPoint":4220,"id":3596,"parameterSlots":0,"returnSlots":0},"@ROYALTY_FEE_NUMERATOR_3593":{"entryPoint":4030,"id":3593,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1125":{"entryPoint":8924,"id":1125,"parameterSlots":4,"returnSlots":0},"@_approve_991":{"entryPoint":5573,"id":991,"parameterSlots":2,"returnSlots":0},"@_baseURI_3875":{"entryPoint":8245,"id":3875,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1112":{"entryPoint":8918,"id":1112,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1099":{"entryPoint":9532,"id":1099,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":6851,"id":54,"parameterSlots":0,"returnSlots":0},"@_efficientHash_2528":{"entryPoint":11356,"id":2528,"parameterSlots":2,"returnSlots":1},"@_exists_660":{"entryPoint":8823,"id":660,"parameterSlots":1,"returnSlots":1},"@_feeDenominator_1407":{"entryPoint":6977,"id":1407,"parameterSlots":0,"returnSlots":1},"@_hashPair_2517":{"entryPoint":11313,"id":2517,"parameterSlots":2,"returnSlots":1},"@_isApprovedOrOwner_694":{"entryPoint":5941,"id":694,"parameterSlots":2,"returnSlots":1},"@_mint_3992":{"entryPoint":5758,"id":3992,"parameterSlots":0,"returnSlots":0},"@_mint_815":{"entryPoint":10772,"id":815,"parameterSlots":2,"returnSlots":0},"@_msgSender_1842":{"entryPoint":5565,"id":1842,"parameterSlots":0,"returnSlots":1},"@_ownerOf_642":{"entryPoint":7705,"id":642,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1037":{"entryPoint":5490,"id":1037,"parameterSlots":1,"returnSlots":0},"@_safeMint_709":{"entryPoint":8888,"id":709,"parameterSlots":2,"returnSlots":0},"@_safeMint_738":{"entryPoint":10368,"id":738,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_629":{"entryPoint":8153,"id":629,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1023":{"entryPoint":7789,"id":1023,"parameterSlots":3,"returnSlots":0},"@_setDefaultRoyalty_1441":{"entryPoint":9127,"id":1441,"parameterSlots":2,"returnSlots":0},"@_setTokenRoyalty_1487":{"entryPoint":7282,"id":1487,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":10539,"id":111,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_172":{"entryPoint":9078,"id":172,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_3920":{"entryPoint":7766,"id":3920,"parameterSlots":1,"returnSlots":0},"@_transfer_967":{"entryPoint":6090,"id":967,"parameterSlots":3,"returnSlots":0},"@_verifyProof_3961":{"entryPoint":7047,"id":3961,"parameterSlots":4,"returnSlots":0},"@acceptOwnership_194":{"entryPoint":4435,"id":194,"parameterSlots":0,"returnSlots":0},"@approve_471":{"entryPoint":2086,"id":471,"parameterSlots":2,"returnSlots":0},"@balanceOf_332":{"entryPoint":4232,"id":332,"parameterSlots":1,"returnSlots":1},"@getApproved_489":{"entryPoint":2016,"id":489,"parameterSlots":1,"returnSlots":1},"@get_3474":{"entryPoint":6987,"id":3474,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_524":{"entryPoint":5047,"id":524,"parameterSlots":2,"returnSlots":1},"@isContract_1518":{"entryPoint":10737,"id":1518,"parameterSlots":1,"returnSlots":1},"@log10_3267":{"entryPoint":9923,"id":3267,"parameterSlots":1,"returnSlots":1},"@merkleRoot_3603":{"entryPoint":3679,"id":3603,"parameterSlots":0,"returnSlots":0},"@mintWithDiscount_3852":{"entryPoint":3753,"id":3852,"parameterSlots":4,"returnSlots":0},"@mint_3791":{"entryPoint":2665,"id":3791,"parameterSlots":0,"returnSlots":0},"@name_370":{"entryPoint":1870,"id":370,"parameterSlots":0,"returnSlots":1},"@ownerOf_360":{"entryPoint":4086,"id":360,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":4576,"id":40,"parameterSlots":0,"returnSlots":1},"@pendingOwner_135":{"entryPoint":5005,"id":135,"parameterSlots":0,"returnSlots":1},"@processProof_2112":{"entryPoint":10459,"id":2112,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":4415,"id":68,"parameterSlots":0,"returnSlots":0},"@royaltyInfo_1398":{"entryPoint":3189,"id":1398,"parameterSlots":2,"returnSlots":2},"@safeTransferFrom_570":{"entryPoint":3721,"id":570,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_600":{"entryPoint":4792,"id":600,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_506":{"entryPoint":4770,"id":506,"parameterSlots":2,"returnSlots":0},"@setBaseURI_3865":{"entryPoint":4035,"id":3865,"parameterSlots":1,"returnSlots":0},"@setTo_3500":{"entryPoint":7245,"id":3500,"parameterSlots":3,"returnSlots":0},"@setTokenRoyalty_3775":{"entryPoint":4062,"id":3775,"parameterSlots":3,"returnSlots":0},"@set_3533":{"entryPoint":8953,"id":3533,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1348":{"entryPoint":5368,"id":1348,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2552":{"entryPoint":10262,"id":2552,"parameterSlots":1,"returnSlots":1},"@supportsInterface_308":{"entryPoint":8597,"id":308,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3901":{"entryPoint":1852,"id":3901,"parameterSlots":1,"returnSlots":1},"@symbol_380":{"entryPoint":4618,"id":380,"parameterSlots":0,"returnSlots":1},"@toString_1910":{"entryPoint":8391,"id":1910,"parameterSlots":1,"returnSlots":1},"@tokenIdCounter_3601":{"entryPoint":4764,"id":3601,"parameterSlots":0,"returnSlots":0},"@tokenURI_419":{"entryPoint":4901,"id":419,"parameterSlots":1,"returnSlots":1},"@totalSupply_3884":{"entryPoint":2749,"id":3884,"parameterSlots":0,"returnSlots":1},"@transferFromWithRoyalties_3756":{"entryPoint":2365,"id":3756,"parameterSlots":4,"returnSlots":0},"@transferFrom_551":{"entryPoint":2759,"id":551,"parameterSlots":3,"returnSlots":0},"@transferOwnership_155":{"entryPoint":5195,"id":155,"parameterSlots":1,"returnSlots":0},"@unset_3567":{"entryPoint":9015,"id":3567,"parameterSlots":2,"returnSlots":0},"@verify_2051":{"entryPoint":8930,"id":2051,"parameterSlots":3,"returnSlots":1},"@withdrawFunds_3695":{"entryPoint":2855,"id":3695,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":13437,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":12923,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":11978,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":12463,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bool":{"entryPoint":13303,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":11466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":18097,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":13503,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":12989,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":11797,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":13131,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":13235,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":13680,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12208,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":13549,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256":{"entryPoint":12063,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":13324,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":11999,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_uint256t_uint256":{"entryPoint":12549,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":11487,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":18118,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":13035,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":11818,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_uint96":{"entryPoint":13152,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":12291,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":11913,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11544,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":12406,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":17162,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":17964,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11673,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16414,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":14704,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":17761,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc_to_t_string_memory_ptr_fromStack":{"entryPoint":16336,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":16776,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":18359,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e_to_t_string_memory_ptr_fromStack":{"entryPoint":14558,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":16922,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":17615,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad_to_t_string_memory_ptr_fromStack":{"entryPoint":14173,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864_to_t_string_memory_ptr_fromStack":{"entryPoint":16578,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":16190,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":18251,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e_to_t_string_memory_ptr_fromStack":{"entryPoint":14450,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":17030,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":16044,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":13919,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a_to_t_string_memory_ptr_fromStack":{"entryPoint":15190,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2_to_t_string_memory_ptr_fromStack":{"entryPoint":15298,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14353,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":14065,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d_to_t_string_memory_ptr_fromStack":{"entryPoint":14920,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084_to_t_string_memory_ptr_fromStack":{"entryPoint":17507,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639_to_t_string_memory_ptr_fromStack":{"entryPoint":17253,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack":{"entryPoint":17399,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932_to_t_string_memory_ptr_fromStack":{"entryPoint":14812,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack":{"entryPoint":17869,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":12166,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96_fromStack":{"entryPoint":12689,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":17185,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16463,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14388,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":11928,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18021,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12355,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":17097,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11559,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":12421,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11730,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14739,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17796,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16371,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16811,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18394,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14593,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16957,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17650,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14208,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16613,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16225,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18286,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14485,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17065,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16079,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13954,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15225,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15333,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14100,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14955,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17542,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17288,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17434,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14847,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17904,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":12181,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed":{"entryPoint":12704,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":12832,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":11379,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":13388,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":12859,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":15365,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":17936,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":11586,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":17947,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14339,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":11597,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16403,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":16645,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":15100,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":14987,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":14287,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":15652,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":11895,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11532,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":12396,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":11399,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":11863,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":11764,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":12665,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":15617,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":15507,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":15793,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":12908,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":11614,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":15386,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13791,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":15765,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":12783,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":15497,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":17152,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":15735,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":14240,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":15053,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":13744,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":18163,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":12736,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":15541,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":12453,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":12448,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":12458,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":12731,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":11394,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":11389,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11656,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":15402,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":15722,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":15593,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":14625,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":17682,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc":{"entryPoint":16257,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":16697,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":18318,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e":{"entryPoint":14517,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":16843,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":17574,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad":{"entryPoint":14132,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864":{"entryPoint":16499,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":16111,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":18210,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e":{"entryPoint":14409,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":16989,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":16003,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":13840,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a":{"entryPoint":15149,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2":{"entryPoint":15257,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":14350,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":13986,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d":{"entryPoint":14879,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084":{"entryPoint":17466,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639":{"entryPoint":17212,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d":{"entryPoint":17320,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932":{"entryPoint":14771,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff":{"entryPoint":17828,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":15415,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":15551,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":11955,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":13280,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":11443,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":11774,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":13108,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":15588,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:53370:17","nodeType":"YulBlock","src":"0:53370:17","statements":[{"body":{"nativeSrc":"47:35:17","nodeType":"YulBlock","src":"47:35:17","statements":[{"nativeSrc":"57:19:17","nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:17","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:17","nodeType":"YulIdentifier","src":"67:5:17"},"nativeSrc":"67:9:17","nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:17","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:17","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nativeSrc":"177:28:17","nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:17","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:17","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:17","nodeType":"YulIdentifier","src":"187:6:17"},"nativeSrc":"187:12:17","nodeType":"YulFunctionCall","src":"187:12:17"},"nativeSrc":"187:12:17","nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:17","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nativeSrc":"300:28:17","nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:17","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:17","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:17","nodeType":"YulIdentifier","src":"310:6:17"},"nativeSrc":"310:12:17","nodeType":"YulFunctionCall","src":"310:12:17"},"nativeSrc":"310:12:17","nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:17","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nativeSrc":"378:105:17","nodeType":"YulBlock","src":"378:105:17","statements":[{"nativeSrc":"388:89:17","nodeType":"YulAssignment","src":"388:89:17","value":{"arguments":[{"name":"value","nativeSrc":"403:5:17","nodeType":"YulIdentifier","src":"403:5:17"},{"kind":"number","nativeSrc":"410:66:17","nodeType":"YulLiteral","src":"410:66:17","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:17","nodeType":"YulIdentifier","src":"399:3:17"},"nativeSrc":"399:78:17","nodeType":"YulFunctionCall","src":"399:78:17"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:17","nodeType":"YulIdentifier","src":"388:7:17"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:17","nodeType":"YulTypedName","src":"360:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:17","nodeType":"YulTypedName","src":"370:7:17","type":""}],"src":"334:149:17"},{"body":{"nativeSrc":"531:78:17","nodeType":"YulBlock","src":"531:78:17","statements":[{"body":{"nativeSrc":"587:16:17","nodeType":"YulBlock","src":"587:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:17","nodeType":"YulLiteral","src":"596:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:17","nodeType":"YulLiteral","src":"599:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:17","nodeType":"YulIdentifier","src":"589:6:17"},"nativeSrc":"589:12:17","nodeType":"YulFunctionCall","src":"589:12:17"},"nativeSrc":"589:12:17","nodeType":"YulExpressionStatement","src":"589:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:17","nodeType":"YulIdentifier","src":"554:5:17"},{"arguments":[{"name":"value","nativeSrc":"578:5:17","nodeType":"YulIdentifier","src":"578:5:17"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:17","nodeType":"YulIdentifier","src":"561:16:17"},"nativeSrc":"561:23:17","nodeType":"YulFunctionCall","src":"561:23:17"}],"functionName":{"name":"eq","nativeSrc":"551:2:17","nodeType":"YulIdentifier","src":"551:2:17"},"nativeSrc":"551:34:17","nodeType":"YulFunctionCall","src":"551:34:17"}],"functionName":{"name":"iszero","nativeSrc":"544:6:17","nodeType":"YulIdentifier","src":"544:6:17"},"nativeSrc":"544:42:17","nodeType":"YulFunctionCall","src":"544:42:17"},"nativeSrc":"541:62:17","nodeType":"YulIf","src":"541:62:17"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:17","nodeType":"YulTypedName","src":"524:5:17","type":""}],"src":"489:120:17"},{"body":{"nativeSrc":"666:86:17","nodeType":"YulBlock","src":"666:86:17","statements":[{"nativeSrc":"676:29:17","nodeType":"YulAssignment","src":"676:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:17","nodeType":"YulIdentifier","src":"698:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:17","nodeType":"YulIdentifier","src":"685:12:17"},"nativeSrc":"685:20:17","nodeType":"YulFunctionCall","src":"685:20:17"},"variableNames":[{"name":"value","nativeSrc":"676:5:17","nodeType":"YulIdentifier","src":"676:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:17","nodeType":"YulIdentifier","src":"740:5:17"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:17","nodeType":"YulIdentifier","src":"714:25:17"},"nativeSrc":"714:32:17","nodeType":"YulFunctionCall","src":"714:32:17"},"nativeSrc":"714:32:17","nodeType":"YulExpressionStatement","src":"714:32:17"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:17","nodeType":"YulTypedName","src":"644:6:17","type":""},{"name":"end","nativeSrc":"652:3:17","nodeType":"YulTypedName","src":"652:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:17","nodeType":"YulTypedName","src":"660:5:17","type":""}],"src":"615:137:17"},{"body":{"nativeSrc":"823:262:17","nodeType":"YulBlock","src":"823:262:17","statements":[{"body":{"nativeSrc":"869:83:17","nodeType":"YulBlock","src":"869:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:17","nodeType":"YulIdentifier","src":"871:77:17"},"nativeSrc":"871:79:17","nodeType":"YulFunctionCall","src":"871:79:17"},"nativeSrc":"871:79:17","nodeType":"YulExpressionStatement","src":"871:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:17","nodeType":"YulIdentifier","src":"844:7:17"},{"name":"headStart","nativeSrc":"853:9:17","nodeType":"YulIdentifier","src":"853:9:17"}],"functionName":{"name":"sub","nativeSrc":"840:3:17","nodeType":"YulIdentifier","src":"840:3:17"},"nativeSrc":"840:23:17","nodeType":"YulFunctionCall","src":"840:23:17"},{"kind":"number","nativeSrc":"865:2:17","nodeType":"YulLiteral","src":"865:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:17","nodeType":"YulIdentifier","src":"836:3:17"},"nativeSrc":"836:32:17","nodeType":"YulFunctionCall","src":"836:32:17"},"nativeSrc":"833:119:17","nodeType":"YulIf","src":"833:119:17"},{"nativeSrc":"962:116:17","nodeType":"YulBlock","src":"962:116:17","statements":[{"nativeSrc":"977:15:17","nodeType":"YulVariableDeclaration","src":"977:15:17","value":{"kind":"number","nativeSrc":"991:1:17","nodeType":"YulLiteral","src":"991:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:17","nodeType":"YulTypedName","src":"981:6:17","type":""}]},{"nativeSrc":"1006:62:17","nodeType":"YulAssignment","src":"1006:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:17","nodeType":"YulIdentifier","src":"1040:9:17"},{"name":"offset","nativeSrc":"1051:6:17","nodeType":"YulIdentifier","src":"1051:6:17"}],"functionName":{"name":"add","nativeSrc":"1036:3:17","nodeType":"YulIdentifier","src":"1036:3:17"},"nativeSrc":"1036:22:17","nodeType":"YulFunctionCall","src":"1036:22:17"},{"name":"dataEnd","nativeSrc":"1060:7:17","nodeType":"YulIdentifier","src":"1060:7:17"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:17","nodeType":"YulIdentifier","src":"1016:19:17"},"nativeSrc":"1016:52:17","nodeType":"YulFunctionCall","src":"1016:52:17"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:17","nodeType":"YulIdentifier","src":"1006:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:17","nodeType":"YulTypedName","src":"793:9:17","type":""},{"name":"dataEnd","nativeSrc":"804:7:17","nodeType":"YulTypedName","src":"804:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:17","nodeType":"YulTypedName","src":"816:6:17","type":""}],"src":"758:327:17"},{"body":{"nativeSrc":"1133:48:17","nodeType":"YulBlock","src":"1133:48:17","statements":[{"nativeSrc":"1143:32:17","nodeType":"YulAssignment","src":"1143:32:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:17","nodeType":"YulIdentifier","src":"1168:5:17"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:17","nodeType":"YulIdentifier","src":"1161:6:17"},"nativeSrc":"1161:13:17","nodeType":"YulFunctionCall","src":"1161:13:17"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:17","nodeType":"YulIdentifier","src":"1154:6:17"},"nativeSrc":"1154:21:17","nodeType":"YulFunctionCall","src":"1154:21:17"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:17","nodeType":"YulIdentifier","src":"1143:7:17"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:17","nodeType":"YulTypedName","src":"1115:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:17","nodeType":"YulTypedName","src":"1125:7:17","type":""}],"src":"1091:90:17"},{"body":{"nativeSrc":"1246:50:17","nodeType":"YulBlock","src":"1246:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:17","nodeType":"YulIdentifier","src":"1263:3:17"},{"arguments":[{"name":"value","nativeSrc":"1283:5:17","nodeType":"YulIdentifier","src":"1283:5:17"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:17","nodeType":"YulIdentifier","src":"1268:14:17"},"nativeSrc":"1268:21:17","nodeType":"YulFunctionCall","src":"1268:21:17"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:17","nodeType":"YulIdentifier","src":"1256:6:17"},"nativeSrc":"1256:34:17","nodeType":"YulFunctionCall","src":"1256:34:17"},"nativeSrc":"1256:34:17","nodeType":"YulExpressionStatement","src":"1256:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:17","nodeType":"YulTypedName","src":"1234:5:17","type":""},{"name":"pos","nativeSrc":"1241:3:17","nodeType":"YulTypedName","src":"1241:3:17","type":""}],"src":"1187:109:17"},{"body":{"nativeSrc":"1394:118:17","nodeType":"YulBlock","src":"1394:118:17","statements":[{"nativeSrc":"1404:26:17","nodeType":"YulAssignment","src":"1404:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:17","nodeType":"YulIdentifier","src":"1416:9:17"},{"kind":"number","nativeSrc":"1427:2:17","nodeType":"YulLiteral","src":"1427:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:17","nodeType":"YulIdentifier","src":"1412:3:17"},"nativeSrc":"1412:18:17","nodeType":"YulFunctionCall","src":"1412:18:17"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:17","nodeType":"YulIdentifier","src":"1404:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:17","nodeType":"YulIdentifier","src":"1478:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:17","nodeType":"YulIdentifier","src":"1491:9:17"},{"kind":"number","nativeSrc":"1502:1:17","nodeType":"YulLiteral","src":"1502:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:17","nodeType":"YulIdentifier","src":"1487:3:17"},"nativeSrc":"1487:17:17","nodeType":"YulFunctionCall","src":"1487:17:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:17","nodeType":"YulIdentifier","src":"1440:37:17"},"nativeSrc":"1440:65:17","nodeType":"YulFunctionCall","src":"1440:65:17"},"nativeSrc":"1440:65:17","nodeType":"YulExpressionStatement","src":"1440:65:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:17","nodeType":"YulTypedName","src":"1366:9:17","type":""},{"name":"value0","nativeSrc":"1378:6:17","nodeType":"YulTypedName","src":"1378:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:17","nodeType":"YulTypedName","src":"1389:4:17","type":""}],"src":"1302:210:17"},{"body":{"nativeSrc":"1577:40:17","nodeType":"YulBlock","src":"1577:40:17","statements":[{"nativeSrc":"1588:22:17","nodeType":"YulAssignment","src":"1588:22:17","value":{"arguments":[{"name":"value","nativeSrc":"1604:5:17","nodeType":"YulIdentifier","src":"1604:5:17"}],"functionName":{"name":"mload","nativeSrc":"1598:5:17","nodeType":"YulIdentifier","src":"1598:5:17"},"nativeSrc":"1598:12:17","nodeType":"YulFunctionCall","src":"1598:12:17"},"variableNames":[{"name":"length","nativeSrc":"1588:6:17","nodeType":"YulIdentifier","src":"1588:6:17"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1518:99:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1560:5:17","nodeType":"YulTypedName","src":"1560:5:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1570:6:17","nodeType":"YulTypedName","src":"1570:6:17","type":""}],"src":"1518:99:17"},{"body":{"nativeSrc":"1719:73:17","nodeType":"YulBlock","src":"1719:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1736:3:17","nodeType":"YulIdentifier","src":"1736:3:17"},{"name":"length","nativeSrc":"1741:6:17","nodeType":"YulIdentifier","src":"1741:6:17"}],"functionName":{"name":"mstore","nativeSrc":"1729:6:17","nodeType":"YulIdentifier","src":"1729:6:17"},"nativeSrc":"1729:19:17","nodeType":"YulFunctionCall","src":"1729:19:17"},"nativeSrc":"1729:19:17","nodeType":"YulExpressionStatement","src":"1729:19:17"},{"nativeSrc":"1757:29:17","nodeType":"YulAssignment","src":"1757:29:17","value":{"arguments":[{"name":"pos","nativeSrc":"1776:3:17","nodeType":"YulIdentifier","src":"1776:3:17"},{"kind":"number","nativeSrc":"1781:4:17","nodeType":"YulLiteral","src":"1781:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1772:3:17","nodeType":"YulIdentifier","src":"1772:3:17"},"nativeSrc":"1772:14:17","nodeType":"YulFunctionCall","src":"1772:14:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"1757:11:17","nodeType":"YulIdentifier","src":"1757:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1623:169:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:17","nodeType":"YulTypedName","src":"1691:3:17","type":""},{"name":"length","nativeSrc":"1696:6:17","nodeType":"YulTypedName","src":"1696:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1707:11:17","nodeType":"YulTypedName","src":"1707:11:17","type":""}],"src":"1623:169:17"},{"body":{"nativeSrc":"1860:186:17","nodeType":"YulBlock","src":"1860:186:17","statements":[{"nativeSrc":"1871:10:17","nodeType":"YulVariableDeclaration","src":"1871:10:17","value":{"kind":"number","nativeSrc":"1880:1:17","nodeType":"YulLiteral","src":"1880:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1875:1:17","nodeType":"YulTypedName","src":"1875:1:17","type":""}]},{"body":{"nativeSrc":"1940:63:17","nodeType":"YulBlock","src":"1940:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1965:3:17","nodeType":"YulIdentifier","src":"1965:3:17"},{"name":"i","nativeSrc":"1970:1:17","nodeType":"YulIdentifier","src":"1970:1:17"}],"functionName":{"name":"add","nativeSrc":"1961:3:17","nodeType":"YulIdentifier","src":"1961:3:17"},"nativeSrc":"1961:11:17","nodeType":"YulFunctionCall","src":"1961:11:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1984:3:17","nodeType":"YulIdentifier","src":"1984:3:17"},{"name":"i","nativeSrc":"1989:1:17","nodeType":"YulIdentifier","src":"1989:1:17"}],"functionName":{"name":"add","nativeSrc":"1980:3:17","nodeType":"YulIdentifier","src":"1980:3:17"},"nativeSrc":"1980:11:17","nodeType":"YulFunctionCall","src":"1980:11:17"}],"functionName":{"name":"mload","nativeSrc":"1974:5:17","nodeType":"YulIdentifier","src":"1974:5:17"},"nativeSrc":"1974:18:17","nodeType":"YulFunctionCall","src":"1974:18:17"}],"functionName":{"name":"mstore","nativeSrc":"1954:6:17","nodeType":"YulIdentifier","src":"1954:6:17"},"nativeSrc":"1954:39:17","nodeType":"YulFunctionCall","src":"1954:39:17"},"nativeSrc":"1954:39:17","nodeType":"YulExpressionStatement","src":"1954:39:17"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1901:1:17","nodeType":"YulIdentifier","src":"1901:1:17"},{"name":"length","nativeSrc":"1904:6:17","nodeType":"YulIdentifier","src":"1904:6:17"}],"functionName":{"name":"lt","nativeSrc":"1898:2:17","nodeType":"YulIdentifier","src":"1898:2:17"},"nativeSrc":"1898:13:17","nodeType":"YulFunctionCall","src":"1898:13:17"},"nativeSrc":"1890:113:17","nodeType":"YulForLoop","post":{"nativeSrc":"1912:19:17","nodeType":"YulBlock","src":"1912:19:17","statements":[{"nativeSrc":"1914:15:17","nodeType":"YulAssignment","src":"1914:15:17","value":{"arguments":[{"name":"i","nativeSrc":"1923:1:17","nodeType":"YulIdentifier","src":"1923:1:17"},{"kind":"number","nativeSrc":"1926:2:17","nodeType":"YulLiteral","src":"1926:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1919:3:17","nodeType":"YulIdentifier","src":"1919:3:17"},"nativeSrc":"1919:10:17","nodeType":"YulFunctionCall","src":"1919:10:17"},"variableNames":[{"name":"i","nativeSrc":"1914:1:17","nodeType":"YulIdentifier","src":"1914:1:17"}]}]},"pre":{"nativeSrc":"1894:3:17","nodeType":"YulBlock","src":"1894:3:17","statements":[]},"src":"1890:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2023:3:17","nodeType":"YulIdentifier","src":"2023:3:17"},{"name":"length","nativeSrc":"2028:6:17","nodeType":"YulIdentifier","src":"2028:6:17"}],"functionName":{"name":"add","nativeSrc":"2019:3:17","nodeType":"YulIdentifier","src":"2019:3:17"},"nativeSrc":"2019:16:17","nodeType":"YulFunctionCall","src":"2019:16:17"},{"kind":"number","nativeSrc":"2037:1:17","nodeType":"YulLiteral","src":"2037:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2012:6:17","nodeType":"YulIdentifier","src":"2012:6:17"},"nativeSrc":"2012:27:17","nodeType":"YulFunctionCall","src":"2012:27:17"},"nativeSrc":"2012:27:17","nodeType":"YulExpressionStatement","src":"2012:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1798:248:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1842:3:17","nodeType":"YulTypedName","src":"1842:3:17","type":""},{"name":"dst","nativeSrc":"1847:3:17","nodeType":"YulTypedName","src":"1847:3:17","type":""},{"name":"length","nativeSrc":"1852:6:17","nodeType":"YulTypedName","src":"1852:6:17","type":""}],"src":"1798:248:17"},{"body":{"nativeSrc":"2100:54:17","nodeType":"YulBlock","src":"2100:54:17","statements":[{"nativeSrc":"2110:38:17","nodeType":"YulAssignment","src":"2110:38:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2128:5:17","nodeType":"YulIdentifier","src":"2128:5:17"},{"kind":"number","nativeSrc":"2135:2:17","nodeType":"YulLiteral","src":"2135:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2124:3:17","nodeType":"YulIdentifier","src":"2124:3:17"},"nativeSrc":"2124:14:17","nodeType":"YulFunctionCall","src":"2124:14:17"},{"arguments":[{"kind":"number","nativeSrc":"2144:2:17","nodeType":"YulLiteral","src":"2144:2:17","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2140:3:17","nodeType":"YulIdentifier","src":"2140:3:17"},"nativeSrc":"2140:7:17","nodeType":"YulFunctionCall","src":"2140:7:17"}],"functionName":{"name":"and","nativeSrc":"2120:3:17","nodeType":"YulIdentifier","src":"2120:3:17"},"nativeSrc":"2120:28:17","nodeType":"YulFunctionCall","src":"2120:28:17"},"variableNames":[{"name":"result","nativeSrc":"2110:6:17","nodeType":"YulIdentifier","src":"2110:6:17"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"2052:102:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2083:5:17","nodeType":"YulTypedName","src":"2083:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2093:6:17","nodeType":"YulTypedName","src":"2093:6:17","type":""}],"src":"2052:102:17"},{"body":{"nativeSrc":"2252:285:17","nodeType":"YulBlock","src":"2252:285:17","statements":[{"nativeSrc":"2262:53:17","nodeType":"YulVariableDeclaration","src":"2262:53:17","value":{"arguments":[{"name":"value","nativeSrc":"2309:5:17","nodeType":"YulIdentifier","src":"2309:5:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"2276:32:17","nodeType":"YulIdentifier","src":"2276:32:17"},"nativeSrc":"2276:39:17","nodeType":"YulFunctionCall","src":"2276:39:17"},"variables":[{"name":"length","nativeSrc":"2266:6:17","nodeType":"YulTypedName","src":"2266:6:17","type":""}]},{"nativeSrc":"2324:78:17","nodeType":"YulAssignment","src":"2324:78:17","value":{"arguments":[{"name":"pos","nativeSrc":"2390:3:17","nodeType":"YulIdentifier","src":"2390:3:17"},{"name":"length","nativeSrc":"2395:6:17","nodeType":"YulIdentifier","src":"2395:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2331:58:17","nodeType":"YulIdentifier","src":"2331:58:17"},"nativeSrc":"2331:71:17","nodeType":"YulFunctionCall","src":"2331:71:17"},"variableNames":[{"name":"pos","nativeSrc":"2324:3:17","nodeType":"YulIdentifier","src":"2324:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2450:5:17","nodeType":"YulIdentifier","src":"2450:5:17"},{"kind":"number","nativeSrc":"2457:4:17","nodeType":"YulLiteral","src":"2457:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2446:3:17","nodeType":"YulIdentifier","src":"2446:3:17"},"nativeSrc":"2446:16:17","nodeType":"YulFunctionCall","src":"2446:16:17"},{"name":"pos","nativeSrc":"2464:3:17","nodeType":"YulIdentifier","src":"2464:3:17"},{"name":"length","nativeSrc":"2469:6:17","nodeType":"YulIdentifier","src":"2469:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2411:34:17","nodeType":"YulIdentifier","src":"2411:34:17"},"nativeSrc":"2411:65:17","nodeType":"YulFunctionCall","src":"2411:65:17"},"nativeSrc":"2411:65:17","nodeType":"YulExpressionStatement","src":"2411:65:17"},{"nativeSrc":"2485:46:17","nodeType":"YulAssignment","src":"2485:46:17","value":{"arguments":[{"name":"pos","nativeSrc":"2496:3:17","nodeType":"YulIdentifier","src":"2496:3:17"},{"arguments":[{"name":"length","nativeSrc":"2523:6:17","nodeType":"YulIdentifier","src":"2523:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2501:21:17","nodeType":"YulIdentifier","src":"2501:21:17"},"nativeSrc":"2501:29:17","nodeType":"YulFunctionCall","src":"2501:29:17"}],"functionName":{"name":"add","nativeSrc":"2492:3:17","nodeType":"YulIdentifier","src":"2492:3:17"},"nativeSrc":"2492:39:17","nodeType":"YulFunctionCall","src":"2492:39:17"},"variableNames":[{"name":"end","nativeSrc":"2485:3:17","nodeType":"YulIdentifier","src":"2485:3:17"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2160:377:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2233:5:17","nodeType":"YulTypedName","src":"2233:5:17","type":""},{"name":"pos","nativeSrc":"2240:3:17","nodeType":"YulTypedName","src":"2240:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2248:3:17","nodeType":"YulTypedName","src":"2248:3:17","type":""}],"src":"2160:377:17"},{"body":{"nativeSrc":"2661:195:17","nodeType":"YulBlock","src":"2661:195:17","statements":[{"nativeSrc":"2671:26:17","nodeType":"YulAssignment","src":"2671:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"2683:9:17","nodeType":"YulIdentifier","src":"2683:9:17"},{"kind":"number","nativeSrc":"2694:2:17","nodeType":"YulLiteral","src":"2694:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2679:3:17","nodeType":"YulIdentifier","src":"2679:3:17"},"nativeSrc":"2679:18:17","nodeType":"YulFunctionCall","src":"2679:18:17"},"variableNames":[{"name":"tail","nativeSrc":"2671:4:17","nodeType":"YulIdentifier","src":"2671:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2718:9:17","nodeType":"YulIdentifier","src":"2718:9:17"},{"kind":"number","nativeSrc":"2729:1:17","nodeType":"YulLiteral","src":"2729:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2714:3:17","nodeType":"YulIdentifier","src":"2714:3:17"},"nativeSrc":"2714:17:17","nodeType":"YulFunctionCall","src":"2714:17:17"},{"arguments":[{"name":"tail","nativeSrc":"2737:4:17","nodeType":"YulIdentifier","src":"2737:4:17"},{"name":"headStart","nativeSrc":"2743:9:17","nodeType":"YulIdentifier","src":"2743:9:17"}],"functionName":{"name":"sub","nativeSrc":"2733:3:17","nodeType":"YulIdentifier","src":"2733:3:17"},"nativeSrc":"2733:20:17","nodeType":"YulFunctionCall","src":"2733:20:17"}],"functionName":{"name":"mstore","nativeSrc":"2707:6:17","nodeType":"YulIdentifier","src":"2707:6:17"},"nativeSrc":"2707:47:17","nodeType":"YulFunctionCall","src":"2707:47:17"},"nativeSrc":"2707:47:17","nodeType":"YulExpressionStatement","src":"2707:47:17"},{"nativeSrc":"2763:86:17","nodeType":"YulAssignment","src":"2763:86:17","value":{"arguments":[{"name":"value0","nativeSrc":"2835:6:17","nodeType":"YulIdentifier","src":"2835:6:17"},{"name":"tail","nativeSrc":"2844:4:17","nodeType":"YulIdentifier","src":"2844:4:17"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2771:63:17","nodeType":"YulIdentifier","src":"2771:63:17"},"nativeSrc":"2771:78:17","nodeType":"YulFunctionCall","src":"2771:78:17"},"variableNames":[{"name":"tail","nativeSrc":"2763:4:17","nodeType":"YulIdentifier","src":"2763:4:17"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2543:313:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2633:9:17","nodeType":"YulTypedName","src":"2633:9:17","type":""},{"name":"value0","nativeSrc":"2645:6:17","nodeType":"YulTypedName","src":"2645:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2656:4:17","nodeType":"YulTypedName","src":"2656:4:17","type":""}],"src":"2543:313:17"},{"body":{"nativeSrc":"2907:32:17","nodeType":"YulBlock","src":"2907:32:17","statements":[{"nativeSrc":"2917:16:17","nodeType":"YulAssignment","src":"2917:16:17","value":{"name":"value","nativeSrc":"2928:5:17","nodeType":"YulIdentifier","src":"2928:5:17"},"variableNames":[{"name":"cleaned","nativeSrc":"2917:7:17","nodeType":"YulIdentifier","src":"2917:7:17"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2862:77:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2889:5:17","nodeType":"YulTypedName","src":"2889:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2899:7:17","nodeType":"YulTypedName","src":"2899:7:17","type":""}],"src":"2862:77:17"},{"body":{"nativeSrc":"2988:79:17","nodeType":"YulBlock","src":"2988:79:17","statements":[{"body":{"nativeSrc":"3045:16:17","nodeType":"YulBlock","src":"3045:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3054:1:17","nodeType":"YulLiteral","src":"3054:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"3057:1:17","nodeType":"YulLiteral","src":"3057:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3047:6:17","nodeType":"YulIdentifier","src":"3047:6:17"},"nativeSrc":"3047:12:17","nodeType":"YulFunctionCall","src":"3047:12:17"},"nativeSrc":"3047:12:17","nodeType":"YulExpressionStatement","src":"3047:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3011:5:17","nodeType":"YulIdentifier","src":"3011:5:17"},{"arguments":[{"name":"value","nativeSrc":"3036:5:17","nodeType":"YulIdentifier","src":"3036:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3018:17:17","nodeType":"YulIdentifier","src":"3018:17:17"},"nativeSrc":"3018:24:17","nodeType":"YulFunctionCall","src":"3018:24:17"}],"functionName":{"name":"eq","nativeSrc":"3008:2:17","nodeType":"YulIdentifier","src":"3008:2:17"},"nativeSrc":"3008:35:17","nodeType":"YulFunctionCall","src":"3008:35:17"}],"functionName":{"name":"iszero","nativeSrc":"3001:6:17","nodeType":"YulIdentifier","src":"3001:6:17"},"nativeSrc":"3001:43:17","nodeType":"YulFunctionCall","src":"3001:43:17"},"nativeSrc":"2998:63:17","nodeType":"YulIf","src":"2998:63:17"}]},"name":"validator_revert_t_uint256","nativeSrc":"2945:122:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2981:5:17","nodeType":"YulTypedName","src":"2981:5:17","type":""}],"src":"2945:122:17"},{"body":{"nativeSrc":"3125:87:17","nodeType":"YulBlock","src":"3125:87:17","statements":[{"nativeSrc":"3135:29:17","nodeType":"YulAssignment","src":"3135:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"3157:6:17","nodeType":"YulIdentifier","src":"3157:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"3144:12:17","nodeType":"YulIdentifier","src":"3144:12:17"},"nativeSrc":"3144:20:17","nodeType":"YulFunctionCall","src":"3144:20:17"},"variableNames":[{"name":"value","nativeSrc":"3135:5:17","nodeType":"YulIdentifier","src":"3135:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3200:5:17","nodeType":"YulIdentifier","src":"3200:5:17"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3173:26:17","nodeType":"YulIdentifier","src":"3173:26:17"},"nativeSrc":"3173:33:17","nodeType":"YulFunctionCall","src":"3173:33:17"},"nativeSrc":"3173:33:17","nodeType":"YulExpressionStatement","src":"3173:33:17"}]},"name":"abi_decode_t_uint256","nativeSrc":"3073:139:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3103:6:17","nodeType":"YulTypedName","src":"3103:6:17","type":""},{"name":"end","nativeSrc":"3111:3:17","nodeType":"YulTypedName","src":"3111:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3119:5:17","nodeType":"YulTypedName","src":"3119:5:17","type":""}],"src":"3073:139:17"},{"body":{"nativeSrc":"3284:263:17","nodeType":"YulBlock","src":"3284:263:17","statements":[{"body":{"nativeSrc":"3330:83:17","nodeType":"YulBlock","src":"3330:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3332:77:17","nodeType":"YulIdentifier","src":"3332:77:17"},"nativeSrc":"3332:79:17","nodeType":"YulFunctionCall","src":"3332:79:17"},"nativeSrc":"3332:79:17","nodeType":"YulExpressionStatement","src":"3332:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3305:7:17","nodeType":"YulIdentifier","src":"3305:7:17"},{"name":"headStart","nativeSrc":"3314:9:17","nodeType":"YulIdentifier","src":"3314:9:17"}],"functionName":{"name":"sub","nativeSrc":"3301:3:17","nodeType":"YulIdentifier","src":"3301:3:17"},"nativeSrc":"3301:23:17","nodeType":"YulFunctionCall","src":"3301:23:17"},{"kind":"number","nativeSrc":"3326:2:17","nodeType":"YulLiteral","src":"3326:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3297:3:17","nodeType":"YulIdentifier","src":"3297:3:17"},"nativeSrc":"3297:32:17","nodeType":"YulFunctionCall","src":"3297:32:17"},"nativeSrc":"3294:119:17","nodeType":"YulIf","src":"3294:119:17"},{"nativeSrc":"3423:117:17","nodeType":"YulBlock","src":"3423:117:17","statements":[{"nativeSrc":"3438:15:17","nodeType":"YulVariableDeclaration","src":"3438:15:17","value":{"kind":"number","nativeSrc":"3452:1:17","nodeType":"YulLiteral","src":"3452:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3442:6:17","nodeType":"YulTypedName","src":"3442:6:17","type":""}]},{"nativeSrc":"3467:63:17","nodeType":"YulAssignment","src":"3467:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3502:9:17","nodeType":"YulIdentifier","src":"3502:9:17"},{"name":"offset","nativeSrc":"3513:6:17","nodeType":"YulIdentifier","src":"3513:6:17"}],"functionName":{"name":"add","nativeSrc":"3498:3:17","nodeType":"YulIdentifier","src":"3498:3:17"},"nativeSrc":"3498:22:17","nodeType":"YulFunctionCall","src":"3498:22:17"},{"name":"dataEnd","nativeSrc":"3522:7:17","nodeType":"YulIdentifier","src":"3522:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3477:20:17","nodeType":"YulIdentifier","src":"3477:20:17"},"nativeSrc":"3477:53:17","nodeType":"YulFunctionCall","src":"3477:53:17"},"variableNames":[{"name":"value0","nativeSrc":"3467:6:17","nodeType":"YulIdentifier","src":"3467:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3218:329:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3254:9:17","nodeType":"YulTypedName","src":"3254:9:17","type":""},{"name":"dataEnd","nativeSrc":"3265:7:17","nodeType":"YulTypedName","src":"3265:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3277:6:17","nodeType":"YulTypedName","src":"3277:6:17","type":""}],"src":"3218:329:17"},{"body":{"nativeSrc":"3598:81:17","nodeType":"YulBlock","src":"3598:81:17","statements":[{"nativeSrc":"3608:65:17","nodeType":"YulAssignment","src":"3608:65:17","value":{"arguments":[{"name":"value","nativeSrc":"3623:5:17","nodeType":"YulIdentifier","src":"3623:5:17"},{"kind":"number","nativeSrc":"3630:42:17","nodeType":"YulLiteral","src":"3630:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3619:3:17","nodeType":"YulIdentifier","src":"3619:3:17"},"nativeSrc":"3619:54:17","nodeType":"YulFunctionCall","src":"3619:54:17"},"variableNames":[{"name":"cleaned","nativeSrc":"3608:7:17","nodeType":"YulIdentifier","src":"3608:7:17"}]}]},"name":"cleanup_t_uint160","nativeSrc":"3553:126:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:17","nodeType":"YulTypedName","src":"3580:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3590:7:17","nodeType":"YulTypedName","src":"3590:7:17","type":""}],"src":"3553:126:17"},{"body":{"nativeSrc":"3730:51:17","nodeType":"YulBlock","src":"3730:51:17","statements":[{"nativeSrc":"3740:35:17","nodeType":"YulAssignment","src":"3740:35:17","value":{"arguments":[{"name":"value","nativeSrc":"3769:5:17","nodeType":"YulIdentifier","src":"3769:5:17"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3751:17:17","nodeType":"YulIdentifier","src":"3751:17:17"},"nativeSrc":"3751:24:17","nodeType":"YulFunctionCall","src":"3751:24:17"},"variableNames":[{"name":"cleaned","nativeSrc":"3740:7:17","nodeType":"YulIdentifier","src":"3740:7:17"}]}]},"name":"cleanup_t_address","nativeSrc":"3685:96:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3712:5:17","nodeType":"YulTypedName","src":"3712:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3722:7:17","nodeType":"YulTypedName","src":"3722:7:17","type":""}],"src":"3685:96:17"},{"body":{"nativeSrc":"3852:53:17","nodeType":"YulBlock","src":"3852:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3869:3:17","nodeType":"YulIdentifier","src":"3869:3:17"},{"arguments":[{"name":"value","nativeSrc":"3892:5:17","nodeType":"YulIdentifier","src":"3892:5:17"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"3874:17:17","nodeType":"YulIdentifier","src":"3874:17:17"},"nativeSrc":"3874:24:17","nodeType":"YulFunctionCall","src":"3874:24:17"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:17","nodeType":"YulIdentifier","src":"3862:6:17"},"nativeSrc":"3862:37:17","nodeType":"YulFunctionCall","src":"3862:37:17"},"nativeSrc":"3862:37:17","nodeType":"YulExpressionStatement","src":"3862:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"3787:118:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3840:5:17","nodeType":"YulTypedName","src":"3840:5:17","type":""},{"name":"pos","nativeSrc":"3847:3:17","nodeType":"YulTypedName","src":"3847:3:17","type":""}],"src":"3787:118:17"},{"body":{"nativeSrc":"4009:124:17","nodeType":"YulBlock","src":"4009:124:17","statements":[{"nativeSrc":"4019:26:17","nodeType":"YulAssignment","src":"4019:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"4031:9:17","nodeType":"YulIdentifier","src":"4031:9:17"},{"kind":"number","nativeSrc":"4042:2:17","nodeType":"YulLiteral","src":"4042:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4027:3:17","nodeType":"YulIdentifier","src":"4027:3:17"},"nativeSrc":"4027:18:17","nodeType":"YulFunctionCall","src":"4027:18:17"},"variableNames":[{"name":"tail","nativeSrc":"4019:4:17","nodeType":"YulIdentifier","src":"4019:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4099:6:17","nodeType":"YulIdentifier","src":"4099:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"4112:9:17","nodeType":"YulIdentifier","src":"4112:9:17"},{"kind":"number","nativeSrc":"4123:1:17","nodeType":"YulLiteral","src":"4123:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4108:3:17","nodeType":"YulIdentifier","src":"4108:3:17"},"nativeSrc":"4108:17:17","nodeType":"YulFunctionCall","src":"4108:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4055:43:17","nodeType":"YulIdentifier","src":"4055:43:17"},"nativeSrc":"4055:71:17","nodeType":"YulFunctionCall","src":"4055:71:17"},"nativeSrc":"4055:71:17","nodeType":"YulExpressionStatement","src":"4055:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3911:222:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3981:9:17","nodeType":"YulTypedName","src":"3981:9:17","type":""},{"name":"value0","nativeSrc":"3993:6:17","nodeType":"YulTypedName","src":"3993:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4004:4:17","nodeType":"YulTypedName","src":"4004:4:17","type":""}],"src":"3911:222:17"},{"body":{"nativeSrc":"4182:79:17","nodeType":"YulBlock","src":"4182:79:17","statements":[{"body":{"nativeSrc":"4239:16:17","nodeType":"YulBlock","src":"4239:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4248:1:17","nodeType":"YulLiteral","src":"4248:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"4251:1:17","nodeType":"YulLiteral","src":"4251:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4241:6:17","nodeType":"YulIdentifier","src":"4241:6:17"},"nativeSrc":"4241:12:17","nodeType":"YulFunctionCall","src":"4241:12:17"},"nativeSrc":"4241:12:17","nodeType":"YulExpressionStatement","src":"4241:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4205:5:17","nodeType":"YulIdentifier","src":"4205:5:17"},{"arguments":[{"name":"value","nativeSrc":"4230:5:17","nodeType":"YulIdentifier","src":"4230:5:17"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4212:17:17","nodeType":"YulIdentifier","src":"4212:17:17"},"nativeSrc":"4212:24:17","nodeType":"YulFunctionCall","src":"4212:24:17"}],"functionName":{"name":"eq","nativeSrc":"4202:2:17","nodeType":"YulIdentifier","src":"4202:2:17"},"nativeSrc":"4202:35:17","nodeType":"YulFunctionCall","src":"4202:35:17"}],"functionName":{"name":"iszero","nativeSrc":"4195:6:17","nodeType":"YulIdentifier","src":"4195:6:17"},"nativeSrc":"4195:43:17","nodeType":"YulFunctionCall","src":"4195:43:17"},"nativeSrc":"4192:63:17","nodeType":"YulIf","src":"4192:63:17"}]},"name":"validator_revert_t_address","nativeSrc":"4139:122:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4175:5:17","nodeType":"YulTypedName","src":"4175:5:17","type":""}],"src":"4139:122:17"},{"body":{"nativeSrc":"4319:87:17","nodeType":"YulBlock","src":"4319:87:17","statements":[{"nativeSrc":"4329:29:17","nodeType":"YulAssignment","src":"4329:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"4351:6:17","nodeType":"YulIdentifier","src":"4351:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"4338:12:17","nodeType":"YulIdentifier","src":"4338:12:17"},"nativeSrc":"4338:20:17","nodeType":"YulFunctionCall","src":"4338:20:17"},"variableNames":[{"name":"value","nativeSrc":"4329:5:17","nodeType":"YulIdentifier","src":"4329:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4394:5:17","nodeType":"YulIdentifier","src":"4394:5:17"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4367:26:17","nodeType":"YulIdentifier","src":"4367:26:17"},"nativeSrc":"4367:33:17","nodeType":"YulFunctionCall","src":"4367:33:17"},"nativeSrc":"4367:33:17","nodeType":"YulExpressionStatement","src":"4367:33:17"}]},"name":"abi_decode_t_address","nativeSrc":"4267:139:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4297:6:17","nodeType":"YulTypedName","src":"4297:6:17","type":""},{"name":"end","nativeSrc":"4305:3:17","nodeType":"YulTypedName","src":"4305:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4313:5:17","nodeType":"YulTypedName","src":"4313:5:17","type":""}],"src":"4267:139:17"},{"body":{"nativeSrc":"4495:391:17","nodeType":"YulBlock","src":"4495:391:17","statements":[{"body":{"nativeSrc":"4541:83:17","nodeType":"YulBlock","src":"4541:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4543:77:17","nodeType":"YulIdentifier","src":"4543:77:17"},"nativeSrc":"4543:79:17","nodeType":"YulFunctionCall","src":"4543:79:17"},"nativeSrc":"4543:79:17","nodeType":"YulExpressionStatement","src":"4543:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4516:7:17","nodeType":"YulIdentifier","src":"4516:7:17"},{"name":"headStart","nativeSrc":"4525:9:17","nodeType":"YulIdentifier","src":"4525:9:17"}],"functionName":{"name":"sub","nativeSrc":"4512:3:17","nodeType":"YulIdentifier","src":"4512:3:17"},"nativeSrc":"4512:23:17","nodeType":"YulFunctionCall","src":"4512:23:17"},{"kind":"number","nativeSrc":"4537:2:17","nodeType":"YulLiteral","src":"4537:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4508:3:17","nodeType":"YulIdentifier","src":"4508:3:17"},"nativeSrc":"4508:32:17","nodeType":"YulFunctionCall","src":"4508:32:17"},"nativeSrc":"4505:119:17","nodeType":"YulIf","src":"4505:119:17"},{"nativeSrc":"4634:117:17","nodeType":"YulBlock","src":"4634:117:17","statements":[{"nativeSrc":"4649:15:17","nodeType":"YulVariableDeclaration","src":"4649:15:17","value":{"kind":"number","nativeSrc":"4663:1:17","nodeType":"YulLiteral","src":"4663:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4653:6:17","nodeType":"YulTypedName","src":"4653:6:17","type":""}]},{"nativeSrc":"4678:63:17","nodeType":"YulAssignment","src":"4678:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4713:9:17","nodeType":"YulIdentifier","src":"4713:9:17"},{"name":"offset","nativeSrc":"4724:6:17","nodeType":"YulIdentifier","src":"4724:6:17"}],"functionName":{"name":"add","nativeSrc":"4709:3:17","nodeType":"YulIdentifier","src":"4709:3:17"},"nativeSrc":"4709:22:17","nodeType":"YulFunctionCall","src":"4709:22:17"},{"name":"dataEnd","nativeSrc":"4733:7:17","nodeType":"YulIdentifier","src":"4733:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4688:20:17","nodeType":"YulIdentifier","src":"4688:20:17"},"nativeSrc":"4688:53:17","nodeType":"YulFunctionCall","src":"4688:53:17"},"variableNames":[{"name":"value0","nativeSrc":"4678:6:17","nodeType":"YulIdentifier","src":"4678:6:17"}]}]},{"nativeSrc":"4761:118:17","nodeType":"YulBlock","src":"4761:118:17","statements":[{"nativeSrc":"4776:16:17","nodeType":"YulVariableDeclaration","src":"4776:16:17","value":{"kind":"number","nativeSrc":"4790:2:17","nodeType":"YulLiteral","src":"4790:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4780:6:17","nodeType":"YulTypedName","src":"4780:6:17","type":""}]},{"nativeSrc":"4806:63:17","nodeType":"YulAssignment","src":"4806:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4841:9:17","nodeType":"YulIdentifier","src":"4841:9:17"},{"name":"offset","nativeSrc":"4852:6:17","nodeType":"YulIdentifier","src":"4852:6:17"}],"functionName":{"name":"add","nativeSrc":"4837:3:17","nodeType":"YulIdentifier","src":"4837:3:17"},"nativeSrc":"4837:22:17","nodeType":"YulFunctionCall","src":"4837:22:17"},{"name":"dataEnd","nativeSrc":"4861:7:17","nodeType":"YulIdentifier","src":"4861:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4816:20:17","nodeType":"YulIdentifier","src":"4816:20:17"},"nativeSrc":"4816:53:17","nodeType":"YulFunctionCall","src":"4816:53:17"},"variableNames":[{"name":"value1","nativeSrc":"4806:6:17","nodeType":"YulIdentifier","src":"4806:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4412:474:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4457:9:17","nodeType":"YulTypedName","src":"4457:9:17","type":""},{"name":"dataEnd","nativeSrc":"4468:7:17","nodeType":"YulTypedName","src":"4468:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4480:6:17","nodeType":"YulTypedName","src":"4480:6:17","type":""},{"name":"value1","nativeSrc":"4488:6:17","nodeType":"YulTypedName","src":"4488:6:17","type":""}],"src":"4412:474:17"},{"body":{"nativeSrc":"5009:648:17","nodeType":"YulBlock","src":"5009:648:17","statements":[{"body":{"nativeSrc":"5056:83:17","nodeType":"YulBlock","src":"5056:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5058:77:17","nodeType":"YulIdentifier","src":"5058:77:17"},"nativeSrc":"5058:79:17","nodeType":"YulFunctionCall","src":"5058:79:17"},"nativeSrc":"5058:79:17","nodeType":"YulExpressionStatement","src":"5058:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5030:7:17","nodeType":"YulIdentifier","src":"5030:7:17"},{"name":"headStart","nativeSrc":"5039:9:17","nodeType":"YulIdentifier","src":"5039:9:17"}],"functionName":{"name":"sub","nativeSrc":"5026:3:17","nodeType":"YulIdentifier","src":"5026:3:17"},"nativeSrc":"5026:23:17","nodeType":"YulFunctionCall","src":"5026:23:17"},{"kind":"number","nativeSrc":"5051:3:17","nodeType":"YulLiteral","src":"5051:3:17","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"5022:3:17","nodeType":"YulIdentifier","src":"5022:3:17"},"nativeSrc":"5022:33:17","nodeType":"YulFunctionCall","src":"5022:33:17"},"nativeSrc":"5019:120:17","nodeType":"YulIf","src":"5019:120:17"},{"nativeSrc":"5149:117:17","nodeType":"YulBlock","src":"5149:117:17","statements":[{"nativeSrc":"5164:15:17","nodeType":"YulVariableDeclaration","src":"5164:15:17","value":{"kind":"number","nativeSrc":"5178:1:17","nodeType":"YulLiteral","src":"5178:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5168:6:17","nodeType":"YulTypedName","src":"5168:6:17","type":""}]},{"nativeSrc":"5193:63:17","nodeType":"YulAssignment","src":"5193:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5228:9:17","nodeType":"YulIdentifier","src":"5228:9:17"},{"name":"offset","nativeSrc":"5239:6:17","nodeType":"YulIdentifier","src":"5239:6:17"}],"functionName":{"name":"add","nativeSrc":"5224:3:17","nodeType":"YulIdentifier","src":"5224:3:17"},"nativeSrc":"5224:22:17","nodeType":"YulFunctionCall","src":"5224:22:17"},{"name":"dataEnd","nativeSrc":"5248:7:17","nodeType":"YulIdentifier","src":"5248:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5203:20:17","nodeType":"YulIdentifier","src":"5203:20:17"},"nativeSrc":"5203:53:17","nodeType":"YulFunctionCall","src":"5203:53:17"},"variableNames":[{"name":"value0","nativeSrc":"5193:6:17","nodeType":"YulIdentifier","src":"5193:6:17"}]}]},{"nativeSrc":"5276:118:17","nodeType":"YulBlock","src":"5276:118:17","statements":[{"nativeSrc":"5291:16:17","nodeType":"YulVariableDeclaration","src":"5291:16:17","value":{"kind":"number","nativeSrc":"5305:2:17","nodeType":"YulLiteral","src":"5305:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5295:6:17","nodeType":"YulTypedName","src":"5295:6:17","type":""}]},{"nativeSrc":"5321:63:17","nodeType":"YulAssignment","src":"5321:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5356:9:17","nodeType":"YulIdentifier","src":"5356:9:17"},{"name":"offset","nativeSrc":"5367:6:17","nodeType":"YulIdentifier","src":"5367:6:17"}],"functionName":{"name":"add","nativeSrc":"5352:3:17","nodeType":"YulIdentifier","src":"5352:3:17"},"nativeSrc":"5352:22:17","nodeType":"YulFunctionCall","src":"5352:22:17"},{"name":"dataEnd","nativeSrc":"5376:7:17","nodeType":"YulIdentifier","src":"5376:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5331:20:17","nodeType":"YulIdentifier","src":"5331:20:17"},"nativeSrc":"5331:53:17","nodeType":"YulFunctionCall","src":"5331:53:17"},"variableNames":[{"name":"value1","nativeSrc":"5321:6:17","nodeType":"YulIdentifier","src":"5321:6:17"}]}]},{"nativeSrc":"5404:118:17","nodeType":"YulBlock","src":"5404:118:17","statements":[{"nativeSrc":"5419:16:17","nodeType":"YulVariableDeclaration","src":"5419:16:17","value":{"kind":"number","nativeSrc":"5433:2:17","nodeType":"YulLiteral","src":"5433:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"5423:6:17","nodeType":"YulTypedName","src":"5423:6:17","type":""}]},{"nativeSrc":"5449:63:17","nodeType":"YulAssignment","src":"5449:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5484:9:17","nodeType":"YulIdentifier","src":"5484:9:17"},{"name":"offset","nativeSrc":"5495:6:17","nodeType":"YulIdentifier","src":"5495:6:17"}],"functionName":{"name":"add","nativeSrc":"5480:3:17","nodeType":"YulIdentifier","src":"5480:3:17"},"nativeSrc":"5480:22:17","nodeType":"YulFunctionCall","src":"5480:22:17"},{"name":"dataEnd","nativeSrc":"5504:7:17","nodeType":"YulIdentifier","src":"5504:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5459:20:17","nodeType":"YulIdentifier","src":"5459:20:17"},"nativeSrc":"5459:53:17","nodeType":"YulFunctionCall","src":"5459:53:17"},"variableNames":[{"name":"value2","nativeSrc":"5449:6:17","nodeType":"YulIdentifier","src":"5449:6:17"}]}]},{"nativeSrc":"5532:118:17","nodeType":"YulBlock","src":"5532:118:17","statements":[{"nativeSrc":"5547:16:17","nodeType":"YulVariableDeclaration","src":"5547:16:17","value":{"kind":"number","nativeSrc":"5561:2:17","nodeType":"YulLiteral","src":"5561:2:17","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"5551:6:17","nodeType":"YulTypedName","src":"5551:6:17","type":""}]},{"nativeSrc":"5577:63:17","nodeType":"YulAssignment","src":"5577:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5612:9:17","nodeType":"YulIdentifier","src":"5612:9:17"},{"name":"offset","nativeSrc":"5623:6:17","nodeType":"YulIdentifier","src":"5623:6:17"}],"functionName":{"name":"add","nativeSrc":"5608:3:17","nodeType":"YulIdentifier","src":"5608:3:17"},"nativeSrc":"5608:22:17","nodeType":"YulFunctionCall","src":"5608:22:17"},{"name":"dataEnd","nativeSrc":"5632:7:17","nodeType":"YulIdentifier","src":"5632:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5587:20:17","nodeType":"YulIdentifier","src":"5587:20:17"},"nativeSrc":"5587:53:17","nodeType":"YulFunctionCall","src":"5587:53:17"},"variableNames":[{"name":"value3","nativeSrc":"5577:6:17","nodeType":"YulIdentifier","src":"5577:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256","nativeSrc":"4892:765:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4955:9:17","nodeType":"YulTypedName","src":"4955:9:17","type":""},{"name":"dataEnd","nativeSrc":"4966:7:17","nodeType":"YulTypedName","src":"4966:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4978:6:17","nodeType":"YulTypedName","src":"4978:6:17","type":""},{"name":"value1","nativeSrc":"4986:6:17","nodeType":"YulTypedName","src":"4986:6:17","type":""},{"name":"value2","nativeSrc":"4994:6:17","nodeType":"YulTypedName","src":"4994:6:17","type":""},{"name":"value3","nativeSrc":"5002:6:17","nodeType":"YulTypedName","src":"5002:6:17","type":""}],"src":"4892:765:17"},{"body":{"nativeSrc":"5728:53:17","nodeType":"YulBlock","src":"5728:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5745:3:17","nodeType":"YulIdentifier","src":"5745:3:17"},{"arguments":[{"name":"value","nativeSrc":"5768:5:17","nodeType":"YulIdentifier","src":"5768:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5750:17:17","nodeType":"YulIdentifier","src":"5750:17:17"},"nativeSrc":"5750:24:17","nodeType":"YulFunctionCall","src":"5750:24:17"}],"functionName":{"name":"mstore","nativeSrc":"5738:6:17","nodeType":"YulIdentifier","src":"5738:6:17"},"nativeSrc":"5738:37:17","nodeType":"YulFunctionCall","src":"5738:37:17"},"nativeSrc":"5738:37:17","nodeType":"YulExpressionStatement","src":"5738:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"5663:118:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5716:5:17","nodeType":"YulTypedName","src":"5716:5:17","type":""},{"name":"pos","nativeSrc":"5723:3:17","nodeType":"YulTypedName","src":"5723:3:17","type":""}],"src":"5663:118:17"},{"body":{"nativeSrc":"5885:124:17","nodeType":"YulBlock","src":"5885:124:17","statements":[{"nativeSrc":"5895:26:17","nodeType":"YulAssignment","src":"5895:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"5907:9:17","nodeType":"YulIdentifier","src":"5907:9:17"},{"kind":"number","nativeSrc":"5918:2:17","nodeType":"YulLiteral","src":"5918:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5903:3:17","nodeType":"YulIdentifier","src":"5903:3:17"},"nativeSrc":"5903:18:17","nodeType":"YulFunctionCall","src":"5903:18:17"},"variableNames":[{"name":"tail","nativeSrc":"5895:4:17","nodeType":"YulIdentifier","src":"5895:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"5975:6:17","nodeType":"YulIdentifier","src":"5975:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"5988:9:17","nodeType":"YulIdentifier","src":"5988:9:17"},{"kind":"number","nativeSrc":"5999:1:17","nodeType":"YulLiteral","src":"5999:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5984:3:17","nodeType":"YulIdentifier","src":"5984:3:17"},"nativeSrc":"5984:17:17","nodeType":"YulFunctionCall","src":"5984:17:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"5931:43:17","nodeType":"YulIdentifier","src":"5931:43:17"},"nativeSrc":"5931:71:17","nodeType":"YulFunctionCall","src":"5931:71:17"},"nativeSrc":"5931:71:17","nodeType":"YulExpressionStatement","src":"5931:71:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5787:222:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5857:9:17","nodeType":"YulTypedName","src":"5857:9:17","type":""},{"name":"value0","nativeSrc":"5869:6:17","nodeType":"YulTypedName","src":"5869:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5880:4:17","nodeType":"YulTypedName","src":"5880:4:17","type":""}],"src":"5787:222:17"},{"body":{"nativeSrc":"6115:519:17","nodeType":"YulBlock","src":"6115:519:17","statements":[{"body":{"nativeSrc":"6161:83:17","nodeType":"YulBlock","src":"6161:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"6163:77:17","nodeType":"YulIdentifier","src":"6163:77:17"},"nativeSrc":"6163:79:17","nodeType":"YulFunctionCall","src":"6163:79:17"},"nativeSrc":"6163:79:17","nodeType":"YulExpressionStatement","src":"6163:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6136:7:17","nodeType":"YulIdentifier","src":"6136:7:17"},{"name":"headStart","nativeSrc":"6145:9:17","nodeType":"YulIdentifier","src":"6145:9:17"}],"functionName":{"name":"sub","nativeSrc":"6132:3:17","nodeType":"YulIdentifier","src":"6132:3:17"},"nativeSrc":"6132:23:17","nodeType":"YulFunctionCall","src":"6132:23:17"},{"kind":"number","nativeSrc":"6157:2:17","nodeType":"YulLiteral","src":"6157:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6128:3:17","nodeType":"YulIdentifier","src":"6128:3:17"},"nativeSrc":"6128:32:17","nodeType":"YulFunctionCall","src":"6128:32:17"},"nativeSrc":"6125:119:17","nodeType":"YulIf","src":"6125:119:17"},{"nativeSrc":"6254:117:17","nodeType":"YulBlock","src":"6254:117:17","statements":[{"nativeSrc":"6269:15:17","nodeType":"YulVariableDeclaration","src":"6269:15:17","value":{"kind":"number","nativeSrc":"6283:1:17","nodeType":"YulLiteral","src":"6283:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"6273:6:17","nodeType":"YulTypedName","src":"6273:6:17","type":""}]},{"nativeSrc":"6298:63:17","nodeType":"YulAssignment","src":"6298:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6333:9:17","nodeType":"YulIdentifier","src":"6333:9:17"},{"name":"offset","nativeSrc":"6344:6:17","nodeType":"YulIdentifier","src":"6344:6:17"}],"functionName":{"name":"add","nativeSrc":"6329:3:17","nodeType":"YulIdentifier","src":"6329:3:17"},"nativeSrc":"6329:22:17","nodeType":"YulFunctionCall","src":"6329:22:17"},{"name":"dataEnd","nativeSrc":"6353:7:17","nodeType":"YulIdentifier","src":"6353:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6308:20:17","nodeType":"YulIdentifier","src":"6308:20:17"},"nativeSrc":"6308:53:17","nodeType":"YulFunctionCall","src":"6308:53:17"},"variableNames":[{"name":"value0","nativeSrc":"6298:6:17","nodeType":"YulIdentifier","src":"6298:6:17"}]}]},{"nativeSrc":"6381:118:17","nodeType":"YulBlock","src":"6381:118:17","statements":[{"nativeSrc":"6396:16:17","nodeType":"YulVariableDeclaration","src":"6396:16:17","value":{"kind":"number","nativeSrc":"6410:2:17","nodeType":"YulLiteral","src":"6410:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"6400:6:17","nodeType":"YulTypedName","src":"6400:6:17","type":""}]},{"nativeSrc":"6426:63:17","nodeType":"YulAssignment","src":"6426:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6461:9:17","nodeType":"YulIdentifier","src":"6461:9:17"},{"name":"offset","nativeSrc":"6472:6:17","nodeType":"YulIdentifier","src":"6472:6:17"}],"functionName":{"name":"add","nativeSrc":"6457:3:17","nodeType":"YulIdentifier","src":"6457:3:17"},"nativeSrc":"6457:22:17","nodeType":"YulFunctionCall","src":"6457:22:17"},{"name":"dataEnd","nativeSrc":"6481:7:17","nodeType":"YulIdentifier","src":"6481:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6436:20:17","nodeType":"YulIdentifier","src":"6436:20:17"},"nativeSrc":"6436:53:17","nodeType":"YulFunctionCall","src":"6436:53:17"},"variableNames":[{"name":"value1","nativeSrc":"6426:6:17","nodeType":"YulIdentifier","src":"6426:6:17"}]}]},{"nativeSrc":"6509:118:17","nodeType":"YulBlock","src":"6509:118:17","statements":[{"nativeSrc":"6524:16:17","nodeType":"YulVariableDeclaration","src":"6524:16:17","value":{"kind":"number","nativeSrc":"6538:2:17","nodeType":"YulLiteral","src":"6538:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"6528:6:17","nodeType":"YulTypedName","src":"6528:6:17","type":""}]},{"nativeSrc":"6554:63:17","nodeType":"YulAssignment","src":"6554:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6589:9:17","nodeType":"YulIdentifier","src":"6589:9:17"},{"name":"offset","nativeSrc":"6600:6:17","nodeType":"YulIdentifier","src":"6600:6:17"}],"functionName":{"name":"add","nativeSrc":"6585:3:17","nodeType":"YulIdentifier","src":"6585:3:17"},"nativeSrc":"6585:22:17","nodeType":"YulFunctionCall","src":"6585:22:17"},{"name":"dataEnd","nativeSrc":"6609:7:17","nodeType":"YulIdentifier","src":"6609:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"6564:20:17","nodeType":"YulIdentifier","src":"6564:20:17"},"nativeSrc":"6564:53:17","nodeType":"YulFunctionCall","src":"6564:53:17"},"variableNames":[{"name":"value2","nativeSrc":"6554:6:17","nodeType":"YulIdentifier","src":"6554:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"6015:619:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6069:9:17","nodeType":"YulTypedName","src":"6069:9:17","type":""},{"name":"dataEnd","nativeSrc":"6080:7:17","nodeType":"YulTypedName","src":"6080:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6092:6:17","nodeType":"YulTypedName","src":"6092:6:17","type":""},{"name":"value1","nativeSrc":"6100:6:17","nodeType":"YulTypedName","src":"6100:6:17","type":""},{"name":"value2","nativeSrc":"6108:6:17","nodeType":"YulTypedName","src":"6108:6:17","type":""}],"src":"6015:619:17"},{"body":{"nativeSrc":"6723:391:17","nodeType":"YulBlock","src":"6723:391:17","statements":[{"body":{"nativeSrc":"6769:83:17","nodeType":"YulBlock","src":"6769:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"6771:77:17","nodeType":"YulIdentifier","src":"6771:77:17"},"nativeSrc":"6771:79:17","nodeType":"YulFunctionCall","src":"6771:79:17"},"nativeSrc":"6771:79:17","nodeType":"YulExpressionStatement","src":"6771:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6744:7:17","nodeType":"YulIdentifier","src":"6744:7:17"},{"name":"headStart","nativeSrc":"6753:9:17","nodeType":"YulIdentifier","src":"6753:9:17"}],"functionName":{"name":"sub","nativeSrc":"6740:3:17","nodeType":"YulIdentifier","src":"6740:3:17"},"nativeSrc":"6740:23:17","nodeType":"YulFunctionCall","src":"6740:23:17"},{"kind":"number","nativeSrc":"6765:2:17","nodeType":"YulLiteral","src":"6765:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6736:3:17","nodeType":"YulIdentifier","src":"6736:3:17"},"nativeSrc":"6736:32:17","nodeType":"YulFunctionCall","src":"6736:32:17"},"nativeSrc":"6733:119:17","nodeType":"YulIf","src":"6733:119:17"},{"nativeSrc":"6862:117:17","nodeType":"YulBlock","src":"6862:117:17","statements":[{"nativeSrc":"6877:15:17","nodeType":"YulVariableDeclaration","src":"6877:15:17","value":{"kind":"number","nativeSrc":"6891:1:17","nodeType":"YulLiteral","src":"6891:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"6881:6:17","nodeType":"YulTypedName","src":"6881:6:17","type":""}]},{"nativeSrc":"6906:63:17","nodeType":"YulAssignment","src":"6906:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6941:9:17","nodeType":"YulIdentifier","src":"6941:9:17"},{"name":"offset","nativeSrc":"6952:6:17","nodeType":"YulIdentifier","src":"6952:6:17"}],"functionName":{"name":"add","nativeSrc":"6937:3:17","nodeType":"YulIdentifier","src":"6937:3:17"},"nativeSrc":"6937:22:17","nodeType":"YulFunctionCall","src":"6937:22:17"},{"name":"dataEnd","nativeSrc":"6961:7:17","nodeType":"YulIdentifier","src":"6961:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"6916:20:17","nodeType":"YulIdentifier","src":"6916:20:17"},"nativeSrc":"6916:53:17","nodeType":"YulFunctionCall","src":"6916:53:17"},"variableNames":[{"name":"value0","nativeSrc":"6906:6:17","nodeType":"YulIdentifier","src":"6906:6:17"}]}]},{"nativeSrc":"6989:118:17","nodeType":"YulBlock","src":"6989:118:17","statements":[{"nativeSrc":"7004:16:17","nodeType":"YulVariableDeclaration","src":"7004:16:17","value":{"kind":"number","nativeSrc":"7018:2:17","nodeType":"YulLiteral","src":"7018:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"7008:6:17","nodeType":"YulTypedName","src":"7008:6:17","type":""}]},{"nativeSrc":"7034:63:17","nodeType":"YulAssignment","src":"7034:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7069:9:17","nodeType":"YulIdentifier","src":"7069:9:17"},{"name":"offset","nativeSrc":"7080:6:17","nodeType":"YulIdentifier","src":"7080:6:17"}],"functionName":{"name":"add","nativeSrc":"7065:3:17","nodeType":"YulIdentifier","src":"7065:3:17"},"nativeSrc":"7065:22:17","nodeType":"YulFunctionCall","src":"7065:22:17"},{"name":"dataEnd","nativeSrc":"7089:7:17","nodeType":"YulIdentifier","src":"7089:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"7044:20:17","nodeType":"YulIdentifier","src":"7044:20:17"},"nativeSrc":"7044:53:17","nodeType":"YulFunctionCall","src":"7044:53:17"},"variableNames":[{"name":"value1","nativeSrc":"7034:6:17","nodeType":"YulIdentifier","src":"7034:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"6640:474:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6685:9:17","nodeType":"YulTypedName","src":"6685:9:17","type":""},{"name":"dataEnd","nativeSrc":"6696:7:17","nodeType":"YulTypedName","src":"6696:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6708:6:17","nodeType":"YulTypedName","src":"6708:6:17","type":""},{"name":"value1","nativeSrc":"6716:6:17","nodeType":"YulTypedName","src":"6716:6:17","type":""}],"src":"6640:474:17"},{"body":{"nativeSrc":"7246:206:17","nodeType":"YulBlock","src":"7246:206:17","statements":[{"nativeSrc":"7256:26:17","nodeType":"YulAssignment","src":"7256:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"7268:9:17","nodeType":"YulIdentifier","src":"7268:9:17"},{"kind":"number","nativeSrc":"7279:2:17","nodeType":"YulLiteral","src":"7279:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7264:3:17","nodeType":"YulIdentifier","src":"7264:3:17"},"nativeSrc":"7264:18:17","nodeType":"YulFunctionCall","src":"7264:18:17"},"variableNames":[{"name":"tail","nativeSrc":"7256:4:17","nodeType":"YulIdentifier","src":"7256:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"7336:6:17","nodeType":"YulIdentifier","src":"7336:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"7349:9:17","nodeType":"YulIdentifier","src":"7349:9:17"},{"kind":"number","nativeSrc":"7360:1:17","nodeType":"YulLiteral","src":"7360:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7345:3:17","nodeType":"YulIdentifier","src":"7345:3:17"},"nativeSrc":"7345:17:17","nodeType":"YulFunctionCall","src":"7345:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"7292:43:17","nodeType":"YulIdentifier","src":"7292:43:17"},"nativeSrc":"7292:71:17","nodeType":"YulFunctionCall","src":"7292:71:17"},"nativeSrc":"7292:71:17","nodeType":"YulExpressionStatement","src":"7292:71:17"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"7417:6:17","nodeType":"YulIdentifier","src":"7417:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"7430:9:17","nodeType":"YulIdentifier","src":"7430:9:17"},{"kind":"number","nativeSrc":"7441:2:17","nodeType":"YulLiteral","src":"7441:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7426:3:17","nodeType":"YulIdentifier","src":"7426:3:17"},"nativeSrc":"7426:18:17","nodeType":"YulFunctionCall","src":"7426:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"7373:43:17","nodeType":"YulIdentifier","src":"7373:43:17"},"nativeSrc":"7373:72:17","nodeType":"YulFunctionCall","src":"7373:72:17"},"nativeSrc":"7373:72:17","nodeType":"YulExpressionStatement","src":"7373:72:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7120:332:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7210:9:17","nodeType":"YulTypedName","src":"7210:9:17","type":""},{"name":"value1","nativeSrc":"7222:6:17","nodeType":"YulTypedName","src":"7222:6:17","type":""},{"name":"value0","nativeSrc":"7230:6:17","nodeType":"YulTypedName","src":"7230:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7241:4:17","nodeType":"YulTypedName","src":"7241:4:17","type":""}],"src":"7120:332:17"},{"body":{"nativeSrc":"7503:32:17","nodeType":"YulBlock","src":"7503:32:17","statements":[{"nativeSrc":"7513:16:17","nodeType":"YulAssignment","src":"7513:16:17","value":{"name":"value","nativeSrc":"7524:5:17","nodeType":"YulIdentifier","src":"7524:5:17"},"variableNames":[{"name":"cleaned","nativeSrc":"7513:7:17","nodeType":"YulIdentifier","src":"7513:7:17"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"7458:77:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7485:5:17","nodeType":"YulTypedName","src":"7485:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"7495:7:17","nodeType":"YulTypedName","src":"7495:7:17","type":""}],"src":"7458:77:17"},{"body":{"nativeSrc":"7606:53:17","nodeType":"YulBlock","src":"7606:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7623:3:17","nodeType":"YulIdentifier","src":"7623:3:17"},{"arguments":[{"name":"value","nativeSrc":"7646:5:17","nodeType":"YulIdentifier","src":"7646:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"7628:17:17","nodeType":"YulIdentifier","src":"7628:17:17"},"nativeSrc":"7628:24:17","nodeType":"YulFunctionCall","src":"7628:24:17"}],"functionName":{"name":"mstore","nativeSrc":"7616:6:17","nodeType":"YulIdentifier","src":"7616:6:17"},"nativeSrc":"7616:37:17","nodeType":"YulFunctionCall","src":"7616:37:17"},"nativeSrc":"7616:37:17","nodeType":"YulExpressionStatement","src":"7616:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"7541:118:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7594:5:17","nodeType":"YulTypedName","src":"7594:5:17","type":""},{"name":"pos","nativeSrc":"7601:3:17","nodeType":"YulTypedName","src":"7601:3:17","type":""}],"src":"7541:118:17"},{"body":{"nativeSrc":"7763:124:17","nodeType":"YulBlock","src":"7763:124:17","statements":[{"nativeSrc":"7773:26:17","nodeType":"YulAssignment","src":"7773:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"7785:9:17","nodeType":"YulIdentifier","src":"7785:9:17"},{"kind":"number","nativeSrc":"7796:2:17","nodeType":"YulLiteral","src":"7796:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7781:3:17","nodeType":"YulIdentifier","src":"7781:3:17"},"nativeSrc":"7781:18:17","nodeType":"YulFunctionCall","src":"7781:18:17"},"variableNames":[{"name":"tail","nativeSrc":"7773:4:17","nodeType":"YulIdentifier","src":"7773:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"7853:6:17","nodeType":"YulIdentifier","src":"7853:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"7866:9:17","nodeType":"YulIdentifier","src":"7866:9:17"},{"kind":"number","nativeSrc":"7877:1:17","nodeType":"YulLiteral","src":"7877:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7862:3:17","nodeType":"YulIdentifier","src":"7862:3:17"},"nativeSrc":"7862:17:17","nodeType":"YulFunctionCall","src":"7862:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"7809:43:17","nodeType":"YulIdentifier","src":"7809:43:17"},"nativeSrc":"7809:71:17","nodeType":"YulFunctionCall","src":"7809:71:17"},"nativeSrc":"7809:71:17","nodeType":"YulExpressionStatement","src":"7809:71:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7665:222:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7735:9:17","nodeType":"YulTypedName","src":"7735:9:17","type":""},{"name":"value0","nativeSrc":"7747:6:17","nodeType":"YulTypedName","src":"7747:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7758:4:17","nodeType":"YulTypedName","src":"7758:4:17","type":""}],"src":"7665:222:17"},{"body":{"nativeSrc":"7982:28:17","nodeType":"YulBlock","src":"7982:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7999:1:17","nodeType":"YulLiteral","src":"7999:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"8002:1:17","nodeType":"YulLiteral","src":"8002:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7992:6:17","nodeType":"YulIdentifier","src":"7992:6:17"},"nativeSrc":"7992:12:17","nodeType":"YulFunctionCall","src":"7992:12:17"},"nativeSrc":"7992:12:17","nodeType":"YulExpressionStatement","src":"7992:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"7893:117:17","nodeType":"YulFunctionDefinition","src":"7893:117:17"},{"body":{"nativeSrc":"8105:28:17","nodeType":"YulBlock","src":"8105:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8122:1:17","nodeType":"YulLiteral","src":"8122:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"8125:1:17","nodeType":"YulLiteral","src":"8125:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8115:6:17","nodeType":"YulIdentifier","src":"8115:6:17"},"nativeSrc":"8115:12:17","nodeType":"YulFunctionCall","src":"8115:12:17"},"nativeSrc":"8115:12:17","nodeType":"YulExpressionStatement","src":"8115:12:17"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"8016:117:17","nodeType":"YulFunctionDefinition","src":"8016:117:17"},{"body":{"nativeSrc":"8228:28:17","nodeType":"YulBlock","src":"8228:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8245:1:17","nodeType":"YulLiteral","src":"8245:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"8248:1:17","nodeType":"YulLiteral","src":"8248:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8238:6:17","nodeType":"YulIdentifier","src":"8238:6:17"},"nativeSrc":"8238:12:17","nodeType":"YulFunctionCall","src":"8238:12:17"},"nativeSrc":"8238:12:17","nodeType":"YulExpressionStatement","src":"8238:12:17"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"8139:117:17","nodeType":"YulFunctionDefinition","src":"8139:117:17"},{"body":{"nativeSrc":"8369:478:17","nodeType":"YulBlock","src":"8369:478:17","statements":[{"body":{"nativeSrc":"8418:83:17","nodeType":"YulBlock","src":"8418:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"8420:77:17","nodeType":"YulIdentifier","src":"8420:77:17"},"nativeSrc":"8420:79:17","nodeType":"YulFunctionCall","src":"8420:79:17"},"nativeSrc":"8420:79:17","nodeType":"YulExpressionStatement","src":"8420:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8397:6:17","nodeType":"YulIdentifier","src":"8397:6:17"},{"kind":"number","nativeSrc":"8405:4:17","nodeType":"YulLiteral","src":"8405:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8393:3:17","nodeType":"YulIdentifier","src":"8393:3:17"},"nativeSrc":"8393:17:17","nodeType":"YulFunctionCall","src":"8393:17:17"},{"name":"end","nativeSrc":"8412:3:17","nodeType":"YulIdentifier","src":"8412:3:17"}],"functionName":{"name":"slt","nativeSrc":"8389:3:17","nodeType":"YulIdentifier","src":"8389:3:17"},"nativeSrc":"8389:27:17","nodeType":"YulFunctionCall","src":"8389:27:17"}],"functionName":{"name":"iszero","nativeSrc":"8382:6:17","nodeType":"YulIdentifier","src":"8382:6:17"},"nativeSrc":"8382:35:17","nodeType":"YulFunctionCall","src":"8382:35:17"},"nativeSrc":"8379:122:17","nodeType":"YulIf","src":"8379:122:17"},{"nativeSrc":"8510:30:17","nodeType":"YulAssignment","src":"8510:30:17","value":{"arguments":[{"name":"offset","nativeSrc":"8533:6:17","nodeType":"YulIdentifier","src":"8533:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"8520:12:17","nodeType":"YulIdentifier","src":"8520:12:17"},"nativeSrc":"8520:20:17","nodeType":"YulFunctionCall","src":"8520:20:17"},"variableNames":[{"name":"length","nativeSrc":"8510:6:17","nodeType":"YulIdentifier","src":"8510:6:17"}]},{"body":{"nativeSrc":"8583:83:17","nodeType":"YulBlock","src":"8583:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"8585:77:17","nodeType":"YulIdentifier","src":"8585:77:17"},"nativeSrc":"8585:79:17","nodeType":"YulFunctionCall","src":"8585:79:17"},"nativeSrc":"8585:79:17","nodeType":"YulExpressionStatement","src":"8585:79:17"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"8555:6:17","nodeType":"YulIdentifier","src":"8555:6:17"},{"kind":"number","nativeSrc":"8563:18:17","nodeType":"YulLiteral","src":"8563:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8552:2:17","nodeType":"YulIdentifier","src":"8552:2:17"},"nativeSrc":"8552:30:17","nodeType":"YulFunctionCall","src":"8552:30:17"},"nativeSrc":"8549:117:17","nodeType":"YulIf","src":"8549:117:17"},{"nativeSrc":"8675:29:17","nodeType":"YulAssignment","src":"8675:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"8691:6:17","nodeType":"YulIdentifier","src":"8691:6:17"},{"kind":"number","nativeSrc":"8699:4:17","nodeType":"YulLiteral","src":"8699:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8687:3:17","nodeType":"YulIdentifier","src":"8687:3:17"},"nativeSrc":"8687:17:17","nodeType":"YulFunctionCall","src":"8687:17:17"},"variableNames":[{"name":"arrayPos","nativeSrc":"8675:8:17","nodeType":"YulIdentifier","src":"8675:8:17"}]},{"body":{"nativeSrc":"8758:83:17","nodeType":"YulBlock","src":"8758:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"8760:77:17","nodeType":"YulIdentifier","src":"8760:77:17"},"nativeSrc":"8760:79:17","nodeType":"YulFunctionCall","src":"8760:79:17"},"nativeSrc":"8760:79:17","nodeType":"YulExpressionStatement","src":"8760:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nativeSrc":"8723:8:17","nodeType":"YulIdentifier","src":"8723:8:17"},{"arguments":[{"name":"length","nativeSrc":"8737:6:17","nodeType":"YulIdentifier","src":"8737:6:17"},{"kind":"number","nativeSrc":"8745:4:17","nodeType":"YulLiteral","src":"8745:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"8733:3:17","nodeType":"YulIdentifier","src":"8733:3:17"},"nativeSrc":"8733:17:17","nodeType":"YulFunctionCall","src":"8733:17:17"}],"functionName":{"name":"add","nativeSrc":"8719:3:17","nodeType":"YulIdentifier","src":"8719:3:17"},"nativeSrc":"8719:32:17","nodeType":"YulFunctionCall","src":"8719:32:17"},{"name":"end","nativeSrc":"8753:3:17","nodeType":"YulIdentifier","src":"8753:3:17"}],"functionName":{"name":"gt","nativeSrc":"8716:2:17","nodeType":"YulIdentifier","src":"8716:2:17"},"nativeSrc":"8716:41:17","nodeType":"YulFunctionCall","src":"8716:41:17"},"nativeSrc":"8713:128:17","nodeType":"YulIf","src":"8713:128:17"}]},"name":"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"8279:568:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8336:6:17","nodeType":"YulTypedName","src":"8336:6:17","type":""},{"name":"end","nativeSrc":"8344:3:17","nodeType":"YulTypedName","src":"8344:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"8352:8:17","nodeType":"YulTypedName","src":"8352:8:17","type":""},{"name":"length","nativeSrc":"8362:6:17","nodeType":"YulTypedName","src":"8362:6:17","type":""}],"src":"8279:568:17"},{"body":{"nativeSrc":"8988:714:17","nodeType":"YulBlock","src":"8988:714:17","statements":[{"body":{"nativeSrc":"9034:83:17","nodeType":"YulBlock","src":"9034:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"9036:77:17","nodeType":"YulIdentifier","src":"9036:77:17"},"nativeSrc":"9036:79:17","nodeType":"YulFunctionCall","src":"9036:79:17"},"nativeSrc":"9036:79:17","nodeType":"YulExpressionStatement","src":"9036:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9009:7:17","nodeType":"YulIdentifier","src":"9009:7:17"},{"name":"headStart","nativeSrc":"9018:9:17","nodeType":"YulIdentifier","src":"9018:9:17"}],"functionName":{"name":"sub","nativeSrc":"9005:3:17","nodeType":"YulIdentifier","src":"9005:3:17"},"nativeSrc":"9005:23:17","nodeType":"YulFunctionCall","src":"9005:23:17"},{"kind":"number","nativeSrc":"9030:2:17","nodeType":"YulLiteral","src":"9030:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"9001:3:17","nodeType":"YulIdentifier","src":"9001:3:17"},"nativeSrc":"9001:32:17","nodeType":"YulFunctionCall","src":"9001:32:17"},"nativeSrc":"8998:119:17","nodeType":"YulIf","src":"8998:119:17"},{"nativeSrc":"9127:312:17","nodeType":"YulBlock","src":"9127:312:17","statements":[{"nativeSrc":"9142:45:17","nodeType":"YulVariableDeclaration","src":"9142:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9173:9:17","nodeType":"YulIdentifier","src":"9173:9:17"},{"kind":"number","nativeSrc":"9184:1:17","nodeType":"YulLiteral","src":"9184:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"9169:3:17","nodeType":"YulIdentifier","src":"9169:3:17"},"nativeSrc":"9169:17:17","nodeType":"YulFunctionCall","src":"9169:17:17"}],"functionName":{"name":"calldataload","nativeSrc":"9156:12:17","nodeType":"YulIdentifier","src":"9156:12:17"},"nativeSrc":"9156:31:17","nodeType":"YulFunctionCall","src":"9156:31:17"},"variables":[{"name":"offset","nativeSrc":"9146:6:17","nodeType":"YulTypedName","src":"9146:6:17","type":""}]},{"body":{"nativeSrc":"9234:83:17","nodeType":"YulBlock","src":"9234:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"9236:77:17","nodeType":"YulIdentifier","src":"9236:77:17"},"nativeSrc":"9236:79:17","nodeType":"YulFunctionCall","src":"9236:79:17"},"nativeSrc":"9236:79:17","nodeType":"YulExpressionStatement","src":"9236:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9206:6:17","nodeType":"YulIdentifier","src":"9206:6:17"},{"kind":"number","nativeSrc":"9214:18:17","nodeType":"YulLiteral","src":"9214:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9203:2:17","nodeType":"YulIdentifier","src":"9203:2:17"},"nativeSrc":"9203:30:17","nodeType":"YulFunctionCall","src":"9203:30:17"},"nativeSrc":"9200:117:17","nodeType":"YulIf","src":"9200:117:17"},{"nativeSrc":"9331:98:17","nodeType":"YulAssignment","src":"9331:98:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9401:9:17","nodeType":"YulIdentifier","src":"9401:9:17"},{"name":"offset","nativeSrc":"9412:6:17","nodeType":"YulIdentifier","src":"9412:6:17"}],"functionName":{"name":"add","nativeSrc":"9397:3:17","nodeType":"YulIdentifier","src":"9397:3:17"},"nativeSrc":"9397:22:17","nodeType":"YulFunctionCall","src":"9397:22:17"},{"name":"dataEnd","nativeSrc":"9421:7:17","nodeType":"YulIdentifier","src":"9421:7:17"}],"functionName":{"name":"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"9349:47:17","nodeType":"YulIdentifier","src":"9349:47:17"},"nativeSrc":"9349:80:17","nodeType":"YulFunctionCall","src":"9349:80:17"},"variableNames":[{"name":"value0","nativeSrc":"9331:6:17","nodeType":"YulIdentifier","src":"9331:6:17"},{"name":"value1","nativeSrc":"9339:6:17","nodeType":"YulIdentifier","src":"9339:6:17"}]}]},{"nativeSrc":"9449:118:17","nodeType":"YulBlock","src":"9449:118:17","statements":[{"nativeSrc":"9464:16:17","nodeType":"YulVariableDeclaration","src":"9464:16:17","value":{"kind":"number","nativeSrc":"9478:2:17","nodeType":"YulLiteral","src":"9478:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"9468:6:17","nodeType":"YulTypedName","src":"9468:6:17","type":""}]},{"nativeSrc":"9494:63:17","nodeType":"YulAssignment","src":"9494:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9529:9:17","nodeType":"YulIdentifier","src":"9529:9:17"},{"name":"offset","nativeSrc":"9540:6:17","nodeType":"YulIdentifier","src":"9540:6:17"}],"functionName":{"name":"add","nativeSrc":"9525:3:17","nodeType":"YulIdentifier","src":"9525:3:17"},"nativeSrc":"9525:22:17","nodeType":"YulFunctionCall","src":"9525:22:17"},{"name":"dataEnd","nativeSrc":"9549:7:17","nodeType":"YulIdentifier","src":"9549:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"9504:20:17","nodeType":"YulIdentifier","src":"9504:20:17"},"nativeSrc":"9504:53:17","nodeType":"YulFunctionCall","src":"9504:53:17"},"variableNames":[{"name":"value2","nativeSrc":"9494:6:17","nodeType":"YulIdentifier","src":"9494:6:17"}]}]},{"nativeSrc":"9577:118:17","nodeType":"YulBlock","src":"9577:118:17","statements":[{"nativeSrc":"9592:16:17","nodeType":"YulVariableDeclaration","src":"9592:16:17","value":{"kind":"number","nativeSrc":"9606:2:17","nodeType":"YulLiteral","src":"9606:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"9596:6:17","nodeType":"YulTypedName","src":"9596:6:17","type":""}]},{"nativeSrc":"9622:63:17","nodeType":"YulAssignment","src":"9622:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9657:9:17","nodeType":"YulIdentifier","src":"9657:9:17"},{"name":"offset","nativeSrc":"9668:6:17","nodeType":"YulIdentifier","src":"9668:6:17"}],"functionName":{"name":"add","nativeSrc":"9653:3:17","nodeType":"YulIdentifier","src":"9653:3:17"},"nativeSrc":"9653:22:17","nodeType":"YulFunctionCall","src":"9653:22:17"},{"name":"dataEnd","nativeSrc":"9677:7:17","nodeType":"YulIdentifier","src":"9677:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"9632:20:17","nodeType":"YulIdentifier","src":"9632:20:17"},"nativeSrc":"9632:53:17","nodeType":"YulFunctionCall","src":"9632:53:17"},"variableNames":[{"name":"value3","nativeSrc":"9622:6:17","nodeType":"YulIdentifier","src":"9622:6:17"}]}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_uint256t_uint256","nativeSrc":"8853:849:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8934:9:17","nodeType":"YulTypedName","src":"8934:9:17","type":""},{"name":"dataEnd","nativeSrc":"8945:7:17","nodeType":"YulTypedName","src":"8945:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8957:6:17","nodeType":"YulTypedName","src":"8957:6:17","type":""},{"name":"value1","nativeSrc":"8965:6:17","nodeType":"YulTypedName","src":"8965:6:17","type":""},{"name":"value2","nativeSrc":"8973:6:17","nodeType":"YulTypedName","src":"8973:6:17","type":""},{"name":"value3","nativeSrc":"8981:6:17","nodeType":"YulTypedName","src":"8981:6:17","type":""}],"src":"8853:849:17"},{"body":{"nativeSrc":"9752:65:17","nodeType":"YulBlock","src":"9752:65:17","statements":[{"nativeSrc":"9762:49:17","nodeType":"YulAssignment","src":"9762:49:17","value":{"arguments":[{"name":"value","nativeSrc":"9777:5:17","nodeType":"YulIdentifier","src":"9777:5:17"},{"kind":"number","nativeSrc":"9784:26:17","nodeType":"YulLiteral","src":"9784:26:17","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9773:3:17","nodeType":"YulIdentifier","src":"9773:3:17"},"nativeSrc":"9773:38:17","nodeType":"YulFunctionCall","src":"9773:38:17"},"variableNames":[{"name":"cleaned","nativeSrc":"9762:7:17","nodeType":"YulIdentifier","src":"9762:7:17"}]}]},"name":"cleanup_t_uint96","nativeSrc":"9708:109:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9734:5:17","nodeType":"YulTypedName","src":"9734:5:17","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"9744:7:17","nodeType":"YulTypedName","src":"9744:7:17","type":""}],"src":"9708:109:17"},{"body":{"nativeSrc":"9886:52:17","nodeType":"YulBlock","src":"9886:52:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9903:3:17","nodeType":"YulIdentifier","src":"9903:3:17"},{"arguments":[{"name":"value","nativeSrc":"9925:5:17","nodeType":"YulIdentifier","src":"9925:5:17"}],"functionName":{"name":"cleanup_t_uint96","nativeSrc":"9908:16:17","nodeType":"YulIdentifier","src":"9908:16:17"},"nativeSrc":"9908:23:17","nodeType":"YulFunctionCall","src":"9908:23:17"}],"functionName":{"name":"mstore","nativeSrc":"9896:6:17","nodeType":"YulIdentifier","src":"9896:6:17"},"nativeSrc":"9896:36:17","nodeType":"YulFunctionCall","src":"9896:36:17"},"nativeSrc":"9896:36:17","nodeType":"YulExpressionStatement","src":"9896:36:17"}]},"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nativeSrc":"9823:115:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9874:5:17","nodeType":"YulTypedName","src":"9874:5:17","type":""},{"name":"pos","nativeSrc":"9881:3:17","nodeType":"YulTypedName","src":"9881:3:17","type":""}],"src":"9823:115:17"},{"body":{"nativeSrc":"10040:122:17","nodeType":"YulBlock","src":"10040:122:17","statements":[{"nativeSrc":"10050:26:17","nodeType":"YulAssignment","src":"10050:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"10062:9:17","nodeType":"YulIdentifier","src":"10062:9:17"},{"kind":"number","nativeSrc":"10073:2:17","nodeType":"YulLiteral","src":"10073:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10058:3:17","nodeType":"YulIdentifier","src":"10058:3:17"},"nativeSrc":"10058:18:17","nodeType":"YulFunctionCall","src":"10058:18:17"},"variableNames":[{"name":"tail","nativeSrc":"10050:4:17","nodeType":"YulIdentifier","src":"10050:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"10128:6:17","nodeType":"YulIdentifier","src":"10128:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"10141:9:17","nodeType":"YulIdentifier","src":"10141:9:17"},{"kind":"number","nativeSrc":"10152:1:17","nodeType":"YulLiteral","src":"10152:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10137:3:17","nodeType":"YulIdentifier","src":"10137:3:17"},"nativeSrc":"10137:17:17","nodeType":"YulFunctionCall","src":"10137:17:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nativeSrc":"10086:41:17","nodeType":"YulIdentifier","src":"10086:41:17"},"nativeSrc":"10086:69:17","nodeType":"YulFunctionCall","src":"10086:69:17"},"nativeSrc":"10086:69:17","nodeType":"YulExpressionStatement","src":"10086:69:17"}]},"name":"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed","nativeSrc":"9944:218:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10012:9:17","nodeType":"YulTypedName","src":"10012:9:17","type":""},{"name":"value0","nativeSrc":"10024:6:17","nodeType":"YulTypedName","src":"10024:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10035:4:17","nodeType":"YulTypedName","src":"10035:4:17","type":""}],"src":"9944:218:17"},{"body":{"nativeSrc":"10257:28:17","nodeType":"YulBlock","src":"10257:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10274:1:17","nodeType":"YulLiteral","src":"10274:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"10277:1:17","nodeType":"YulLiteral","src":"10277:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10267:6:17","nodeType":"YulIdentifier","src":"10267:6:17"},"nativeSrc":"10267:12:17","nodeType":"YulFunctionCall","src":"10267:12:17"},"nativeSrc":"10267:12:17","nodeType":"YulExpressionStatement","src":"10267:12:17"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"10168:117:17","nodeType":"YulFunctionDefinition","src":"10168:117:17"},{"body":{"nativeSrc":"10319:152:17","nodeType":"YulBlock","src":"10319:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10336:1:17","nodeType":"YulLiteral","src":"10336:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"10339:77:17","nodeType":"YulLiteral","src":"10339:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10329:6:17","nodeType":"YulIdentifier","src":"10329:6:17"},"nativeSrc":"10329:88:17","nodeType":"YulFunctionCall","src":"10329:88:17"},"nativeSrc":"10329:88:17","nodeType":"YulExpressionStatement","src":"10329:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10433:1:17","nodeType":"YulLiteral","src":"10433:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"10436:4:17","nodeType":"YulLiteral","src":"10436:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"10426:6:17","nodeType":"YulIdentifier","src":"10426:6:17"},"nativeSrc":"10426:15:17","nodeType":"YulFunctionCall","src":"10426:15:17"},"nativeSrc":"10426:15:17","nodeType":"YulExpressionStatement","src":"10426:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10457:1:17","nodeType":"YulLiteral","src":"10457:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"10460:4:17","nodeType":"YulLiteral","src":"10460:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10450:6:17","nodeType":"YulIdentifier","src":"10450:6:17"},"nativeSrc":"10450:15:17","nodeType":"YulFunctionCall","src":"10450:15:17"},"nativeSrc":"10450:15:17","nodeType":"YulExpressionStatement","src":"10450:15:17"}]},"name":"panic_error_0x41","nativeSrc":"10291:180:17","nodeType":"YulFunctionDefinition","src":"10291:180:17"},{"body":{"nativeSrc":"10520:238:17","nodeType":"YulBlock","src":"10520:238:17","statements":[{"nativeSrc":"10530:58:17","nodeType":"YulVariableDeclaration","src":"10530:58:17","value":{"arguments":[{"name":"memPtr","nativeSrc":"10552:6:17","nodeType":"YulIdentifier","src":"10552:6:17"},{"arguments":[{"name":"size","nativeSrc":"10582:4:17","nodeType":"YulIdentifier","src":"10582:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"10560:21:17","nodeType":"YulIdentifier","src":"10560:21:17"},"nativeSrc":"10560:27:17","nodeType":"YulFunctionCall","src":"10560:27:17"}],"functionName":{"name":"add","nativeSrc":"10548:3:17","nodeType":"YulIdentifier","src":"10548:3:17"},"nativeSrc":"10548:40:17","nodeType":"YulFunctionCall","src":"10548:40:17"},"variables":[{"name":"newFreePtr","nativeSrc":"10534:10:17","nodeType":"YulTypedName","src":"10534:10:17","type":""}]},{"body":{"nativeSrc":"10699:22:17","nodeType":"YulBlock","src":"10699:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"10701:16:17","nodeType":"YulIdentifier","src":"10701:16:17"},"nativeSrc":"10701:18:17","nodeType":"YulFunctionCall","src":"10701:18:17"},"nativeSrc":"10701:18:17","nodeType":"YulExpressionStatement","src":"10701:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"10642:10:17","nodeType":"YulIdentifier","src":"10642:10:17"},{"kind":"number","nativeSrc":"10654:18:17","nodeType":"YulLiteral","src":"10654:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10639:2:17","nodeType":"YulIdentifier","src":"10639:2:17"},"nativeSrc":"10639:34:17","nodeType":"YulFunctionCall","src":"10639:34:17"},{"arguments":[{"name":"newFreePtr","nativeSrc":"10678:10:17","nodeType":"YulIdentifier","src":"10678:10:17"},{"name":"memPtr","nativeSrc":"10690:6:17","nodeType":"YulIdentifier","src":"10690:6:17"}],"functionName":{"name":"lt","nativeSrc":"10675:2:17","nodeType":"YulIdentifier","src":"10675:2:17"},"nativeSrc":"10675:22:17","nodeType":"YulFunctionCall","src":"10675:22:17"}],"functionName":{"name":"or","nativeSrc":"10636:2:17","nodeType":"YulIdentifier","src":"10636:2:17"},"nativeSrc":"10636:62:17","nodeType":"YulFunctionCall","src":"10636:62:17"},"nativeSrc":"10633:88:17","nodeType":"YulIf","src":"10633:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10737:2:17","nodeType":"YulLiteral","src":"10737:2:17","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"10741:10:17","nodeType":"YulIdentifier","src":"10741:10:17"}],"functionName":{"name":"mstore","nativeSrc":"10730:6:17","nodeType":"YulIdentifier","src":"10730:6:17"},"nativeSrc":"10730:22:17","nodeType":"YulFunctionCall","src":"10730:22:17"},"nativeSrc":"10730:22:17","nodeType":"YulExpressionStatement","src":"10730:22:17"}]},"name":"finalize_allocation","nativeSrc":"10477:281:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"10506:6:17","nodeType":"YulTypedName","src":"10506:6:17","type":""},{"name":"size","nativeSrc":"10514:4:17","nodeType":"YulTypedName","src":"10514:4:17","type":""}],"src":"10477:281:17"},{"body":{"nativeSrc":"10805:88:17","nodeType":"YulBlock","src":"10805:88:17","statements":[{"nativeSrc":"10815:30:17","nodeType":"YulAssignment","src":"10815:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"10825:18:17","nodeType":"YulIdentifier","src":"10825:18:17"},"nativeSrc":"10825:20:17","nodeType":"YulFunctionCall","src":"10825:20:17"},"variableNames":[{"name":"memPtr","nativeSrc":"10815:6:17","nodeType":"YulIdentifier","src":"10815:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"10874:6:17","nodeType":"YulIdentifier","src":"10874:6:17"},{"name":"size","nativeSrc":"10882:4:17","nodeType":"YulIdentifier","src":"10882:4:17"}],"functionName":{"name":"finalize_allocation","nativeSrc":"10854:19:17","nodeType":"YulIdentifier","src":"10854:19:17"},"nativeSrc":"10854:33:17","nodeType":"YulFunctionCall","src":"10854:33:17"},"nativeSrc":"10854:33:17","nodeType":"YulExpressionStatement","src":"10854:33:17"}]},"name":"allocate_memory","nativeSrc":"10764:129:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"10789:4:17","nodeType":"YulTypedName","src":"10789:4:17","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"10798:6:17","nodeType":"YulTypedName","src":"10798:6:17","type":""}],"src":"10764:129:17"},{"body":{"nativeSrc":"10966:241:17","nodeType":"YulBlock","src":"10966:241:17","statements":[{"body":{"nativeSrc":"11071:22:17","nodeType":"YulBlock","src":"11071:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"11073:16:17","nodeType":"YulIdentifier","src":"11073:16:17"},"nativeSrc":"11073:18:17","nodeType":"YulFunctionCall","src":"11073:18:17"},"nativeSrc":"11073:18:17","nodeType":"YulExpressionStatement","src":"11073:18:17"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"11043:6:17","nodeType":"YulIdentifier","src":"11043:6:17"},{"kind":"number","nativeSrc":"11051:18:17","nodeType":"YulLiteral","src":"11051:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11040:2:17","nodeType":"YulIdentifier","src":"11040:2:17"},"nativeSrc":"11040:30:17","nodeType":"YulFunctionCall","src":"11040:30:17"},"nativeSrc":"11037:56:17","nodeType":"YulIf","src":"11037:56:17"},{"nativeSrc":"11103:37:17","nodeType":"YulAssignment","src":"11103:37:17","value":{"arguments":[{"name":"length","nativeSrc":"11133:6:17","nodeType":"YulIdentifier","src":"11133:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"11111:21:17","nodeType":"YulIdentifier","src":"11111:21:17"},"nativeSrc":"11111:29:17","nodeType":"YulFunctionCall","src":"11111:29:17"},"variableNames":[{"name":"size","nativeSrc":"11103:4:17","nodeType":"YulIdentifier","src":"11103:4:17"}]},{"nativeSrc":"11177:23:17","nodeType":"YulAssignment","src":"11177:23:17","value":{"arguments":[{"name":"size","nativeSrc":"11189:4:17","nodeType":"YulIdentifier","src":"11189:4:17"},{"kind":"number","nativeSrc":"11195:4:17","nodeType":"YulLiteral","src":"11195:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11185:3:17","nodeType":"YulIdentifier","src":"11185:3:17"},"nativeSrc":"11185:15:17","nodeType":"YulFunctionCall","src":"11185:15:17"},"variableNames":[{"name":"size","nativeSrc":"11177:4:17","nodeType":"YulIdentifier","src":"11177:4:17"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"10899:308:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"10950:6:17","nodeType":"YulTypedName","src":"10950:6:17","type":""}],"returnVariables":[{"name":"size","nativeSrc":"10961:4:17","nodeType":"YulTypedName","src":"10961:4:17","type":""}],"src":"10899:308:17"},{"body":{"nativeSrc":"11277:84:17","nodeType":"YulBlock","src":"11277:84:17","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"11301:3:17","nodeType":"YulIdentifier","src":"11301:3:17"},{"name":"src","nativeSrc":"11306:3:17","nodeType":"YulIdentifier","src":"11306:3:17"},{"name":"length","nativeSrc":"11311:6:17","nodeType":"YulIdentifier","src":"11311:6:17"}],"functionName":{"name":"calldatacopy","nativeSrc":"11288:12:17","nodeType":"YulIdentifier","src":"11288:12:17"},"nativeSrc":"11288:30:17","nodeType":"YulFunctionCall","src":"11288:30:17"},"nativeSrc":"11288:30:17","nodeType":"YulExpressionStatement","src":"11288:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"11338:3:17","nodeType":"YulIdentifier","src":"11338:3:17"},{"name":"length","nativeSrc":"11343:6:17","nodeType":"YulIdentifier","src":"11343:6:17"}],"functionName":{"name":"add","nativeSrc":"11334:3:17","nodeType":"YulIdentifier","src":"11334:3:17"},"nativeSrc":"11334:16:17","nodeType":"YulFunctionCall","src":"11334:16:17"},{"kind":"number","nativeSrc":"11352:1:17","nodeType":"YulLiteral","src":"11352:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"11327:6:17","nodeType":"YulIdentifier","src":"11327:6:17"},"nativeSrc":"11327:27:17","nodeType":"YulFunctionCall","src":"11327:27:17"},"nativeSrc":"11327:27:17","nodeType":"YulExpressionStatement","src":"11327:27:17"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"11213:148:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"11259:3:17","nodeType":"YulTypedName","src":"11259:3:17","type":""},{"name":"dst","nativeSrc":"11264:3:17","nodeType":"YulTypedName","src":"11264:3:17","type":""},{"name":"length","nativeSrc":"11269:6:17","nodeType":"YulTypedName","src":"11269:6:17","type":""}],"src":"11213:148:17"},{"body":{"nativeSrc":"11451:341:17","nodeType":"YulBlock","src":"11451:341:17","statements":[{"nativeSrc":"11461:75:17","nodeType":"YulAssignment","src":"11461:75:17","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"11528:6:17","nodeType":"YulIdentifier","src":"11528:6:17"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"11486:41:17","nodeType":"YulIdentifier","src":"11486:41:17"},"nativeSrc":"11486:49:17","nodeType":"YulFunctionCall","src":"11486:49:17"}],"functionName":{"name":"allocate_memory","nativeSrc":"11470:15:17","nodeType":"YulIdentifier","src":"11470:15:17"},"nativeSrc":"11470:66:17","nodeType":"YulFunctionCall","src":"11470:66:17"},"variableNames":[{"name":"array","nativeSrc":"11461:5:17","nodeType":"YulIdentifier","src":"11461:5:17"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"11552:5:17","nodeType":"YulIdentifier","src":"11552:5:17"},{"name":"length","nativeSrc":"11559:6:17","nodeType":"YulIdentifier","src":"11559:6:17"}],"functionName":{"name":"mstore","nativeSrc":"11545:6:17","nodeType":"YulIdentifier","src":"11545:6:17"},"nativeSrc":"11545:21:17","nodeType":"YulFunctionCall","src":"11545:21:17"},"nativeSrc":"11545:21:17","nodeType":"YulExpressionStatement","src":"11545:21:17"},{"nativeSrc":"11575:27:17","nodeType":"YulVariableDeclaration","src":"11575:27:17","value":{"arguments":[{"name":"array","nativeSrc":"11590:5:17","nodeType":"YulIdentifier","src":"11590:5:17"},{"kind":"number","nativeSrc":"11597:4:17","nodeType":"YulLiteral","src":"11597:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11586:3:17","nodeType":"YulIdentifier","src":"11586:3:17"},"nativeSrc":"11586:16:17","nodeType":"YulFunctionCall","src":"11586:16:17"},"variables":[{"name":"dst","nativeSrc":"11579:3:17","nodeType":"YulTypedName","src":"11579:3:17","type":""}]},{"body":{"nativeSrc":"11640:83:17","nodeType":"YulBlock","src":"11640:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"11642:77:17","nodeType":"YulIdentifier","src":"11642:77:17"},"nativeSrc":"11642:79:17","nodeType":"YulFunctionCall","src":"11642:79:17"},"nativeSrc":"11642:79:17","nodeType":"YulExpressionStatement","src":"11642:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"11621:3:17","nodeType":"YulIdentifier","src":"11621:3:17"},{"name":"length","nativeSrc":"11626:6:17","nodeType":"YulIdentifier","src":"11626:6:17"}],"functionName":{"name":"add","nativeSrc":"11617:3:17","nodeType":"YulIdentifier","src":"11617:3:17"},"nativeSrc":"11617:16:17","nodeType":"YulFunctionCall","src":"11617:16:17"},{"name":"end","nativeSrc":"11635:3:17","nodeType":"YulIdentifier","src":"11635:3:17"}],"functionName":{"name":"gt","nativeSrc":"11614:2:17","nodeType":"YulIdentifier","src":"11614:2:17"},"nativeSrc":"11614:25:17","nodeType":"YulFunctionCall","src":"11614:25:17"},"nativeSrc":"11611:112:17","nodeType":"YulIf","src":"11611:112:17"},{"expression":{"arguments":[{"name":"src","nativeSrc":"11769:3:17","nodeType":"YulIdentifier","src":"11769:3:17"},{"name":"dst","nativeSrc":"11774:3:17","nodeType":"YulIdentifier","src":"11774:3:17"},{"name":"length","nativeSrc":"11779:6:17","nodeType":"YulIdentifier","src":"11779:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"11732:36:17","nodeType":"YulIdentifier","src":"11732:36:17"},"nativeSrc":"11732:54:17","nodeType":"YulFunctionCall","src":"11732:54:17"},"nativeSrc":"11732:54:17","nodeType":"YulExpressionStatement","src":"11732:54:17"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"11367:425:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"11424:3:17","nodeType":"YulTypedName","src":"11424:3:17","type":""},{"name":"length","nativeSrc":"11429:6:17","nodeType":"YulTypedName","src":"11429:6:17","type":""},{"name":"end","nativeSrc":"11437:3:17","nodeType":"YulTypedName","src":"11437:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"11445:5:17","nodeType":"YulTypedName","src":"11445:5:17","type":""}],"src":"11367:425:17"},{"body":{"nativeSrc":"11874:278:17","nodeType":"YulBlock","src":"11874:278:17","statements":[{"body":{"nativeSrc":"11923:83:17","nodeType":"YulBlock","src":"11923:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"11925:77:17","nodeType":"YulIdentifier","src":"11925:77:17"},"nativeSrc":"11925:79:17","nodeType":"YulFunctionCall","src":"11925:79:17"},"nativeSrc":"11925:79:17","nodeType":"YulExpressionStatement","src":"11925:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"11902:6:17","nodeType":"YulIdentifier","src":"11902:6:17"},{"kind":"number","nativeSrc":"11910:4:17","nodeType":"YulLiteral","src":"11910:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"11898:3:17","nodeType":"YulIdentifier","src":"11898:3:17"},"nativeSrc":"11898:17:17","nodeType":"YulFunctionCall","src":"11898:17:17"},{"name":"end","nativeSrc":"11917:3:17","nodeType":"YulIdentifier","src":"11917:3:17"}],"functionName":{"name":"slt","nativeSrc":"11894:3:17","nodeType":"YulIdentifier","src":"11894:3:17"},"nativeSrc":"11894:27:17","nodeType":"YulFunctionCall","src":"11894:27:17"}],"functionName":{"name":"iszero","nativeSrc":"11887:6:17","nodeType":"YulIdentifier","src":"11887:6:17"},"nativeSrc":"11887:35:17","nodeType":"YulFunctionCall","src":"11887:35:17"},"nativeSrc":"11884:122:17","nodeType":"YulIf","src":"11884:122:17"},{"nativeSrc":"12015:34:17","nodeType":"YulVariableDeclaration","src":"12015:34:17","value":{"arguments":[{"name":"offset","nativeSrc":"12042:6:17","nodeType":"YulIdentifier","src":"12042:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"12029:12:17","nodeType":"YulIdentifier","src":"12029:12:17"},"nativeSrc":"12029:20:17","nodeType":"YulFunctionCall","src":"12029:20:17"},"variables":[{"name":"length","nativeSrc":"12019:6:17","nodeType":"YulTypedName","src":"12019:6:17","type":""}]},{"nativeSrc":"12058:88:17","nodeType":"YulAssignment","src":"12058:88:17","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"12119:6:17","nodeType":"YulIdentifier","src":"12119:6:17"},{"kind":"number","nativeSrc":"12127:4:17","nodeType":"YulLiteral","src":"12127:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"12115:3:17","nodeType":"YulIdentifier","src":"12115:3:17"},"nativeSrc":"12115:17:17","nodeType":"YulFunctionCall","src":"12115:17:17"},{"name":"length","nativeSrc":"12134:6:17","nodeType":"YulIdentifier","src":"12134:6:17"},{"name":"end","nativeSrc":"12142:3:17","nodeType":"YulIdentifier","src":"12142:3:17"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"12067:47:17","nodeType":"YulIdentifier","src":"12067:47:17"},"nativeSrc":"12067:79:17","nodeType":"YulFunctionCall","src":"12067:79:17"},"variableNames":[{"name":"array","nativeSrc":"12058:5:17","nodeType":"YulIdentifier","src":"12058:5:17"}]}]},"name":"abi_decode_t_string_memory_ptr","nativeSrc":"11812:340:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"11852:6:17","nodeType":"YulTypedName","src":"11852:6:17","type":""},{"name":"end","nativeSrc":"11860:3:17","nodeType":"YulTypedName","src":"11860:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"11868:5:17","nodeType":"YulTypedName","src":"11868:5:17","type":""}],"src":"11812:340:17"},{"body":{"nativeSrc":"12234:433:17","nodeType":"YulBlock","src":"12234:433:17","statements":[{"body":{"nativeSrc":"12280:83:17","nodeType":"YulBlock","src":"12280:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"12282:77:17","nodeType":"YulIdentifier","src":"12282:77:17"},"nativeSrc":"12282:79:17","nodeType":"YulFunctionCall","src":"12282:79:17"},"nativeSrc":"12282:79:17","nodeType":"YulExpressionStatement","src":"12282:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12255:7:17","nodeType":"YulIdentifier","src":"12255:7:17"},{"name":"headStart","nativeSrc":"12264:9:17","nodeType":"YulIdentifier","src":"12264:9:17"}],"functionName":{"name":"sub","nativeSrc":"12251:3:17","nodeType":"YulIdentifier","src":"12251:3:17"},"nativeSrc":"12251:23:17","nodeType":"YulFunctionCall","src":"12251:23:17"},{"kind":"number","nativeSrc":"12276:2:17","nodeType":"YulLiteral","src":"12276:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12247:3:17","nodeType":"YulIdentifier","src":"12247:3:17"},"nativeSrc":"12247:32:17","nodeType":"YulFunctionCall","src":"12247:32:17"},"nativeSrc":"12244:119:17","nodeType":"YulIf","src":"12244:119:17"},{"nativeSrc":"12373:287:17","nodeType":"YulBlock","src":"12373:287:17","statements":[{"nativeSrc":"12388:45:17","nodeType":"YulVariableDeclaration","src":"12388:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12419:9:17","nodeType":"YulIdentifier","src":"12419:9:17"},{"kind":"number","nativeSrc":"12430:1:17","nodeType":"YulLiteral","src":"12430:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12415:3:17","nodeType":"YulIdentifier","src":"12415:3:17"},"nativeSrc":"12415:17:17","nodeType":"YulFunctionCall","src":"12415:17:17"}],"functionName":{"name":"calldataload","nativeSrc":"12402:12:17","nodeType":"YulIdentifier","src":"12402:12:17"},"nativeSrc":"12402:31:17","nodeType":"YulFunctionCall","src":"12402:31:17"},"variables":[{"name":"offset","nativeSrc":"12392:6:17","nodeType":"YulTypedName","src":"12392:6:17","type":""}]},{"body":{"nativeSrc":"12480:83:17","nodeType":"YulBlock","src":"12480:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"12482:77:17","nodeType":"YulIdentifier","src":"12482:77:17"},"nativeSrc":"12482:79:17","nodeType":"YulFunctionCall","src":"12482:79:17"},"nativeSrc":"12482:79:17","nodeType":"YulExpressionStatement","src":"12482:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"12452:6:17","nodeType":"YulIdentifier","src":"12452:6:17"},{"kind":"number","nativeSrc":"12460:18:17","nodeType":"YulLiteral","src":"12460:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"12449:2:17","nodeType":"YulIdentifier","src":"12449:2:17"},"nativeSrc":"12449:30:17","nodeType":"YulFunctionCall","src":"12449:30:17"},"nativeSrc":"12446:117:17","nodeType":"YulIf","src":"12446:117:17"},{"nativeSrc":"12577:73:17","nodeType":"YulAssignment","src":"12577:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12622:9:17","nodeType":"YulIdentifier","src":"12622:9:17"},{"name":"offset","nativeSrc":"12633:6:17","nodeType":"YulIdentifier","src":"12633:6:17"}],"functionName":{"name":"add","nativeSrc":"12618:3:17","nodeType":"YulIdentifier","src":"12618:3:17"},"nativeSrc":"12618:22:17","nodeType":"YulFunctionCall","src":"12618:22:17"},{"name":"dataEnd","nativeSrc":"12642:7:17","nodeType":"YulIdentifier","src":"12642:7:17"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"12587:30:17","nodeType":"YulIdentifier","src":"12587:30:17"},"nativeSrc":"12587:63:17","nodeType":"YulFunctionCall","src":"12587:63:17"},"variableNames":[{"name":"value0","nativeSrc":"12577:6:17","nodeType":"YulIdentifier","src":"12577:6:17"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nativeSrc":"12158:509:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12204:9:17","nodeType":"YulTypedName","src":"12204:9:17","type":""},{"name":"dataEnd","nativeSrc":"12215:7:17","nodeType":"YulTypedName","src":"12215:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12227:6:17","nodeType":"YulTypedName","src":"12227:6:17","type":""}],"src":"12158:509:17"},{"body":{"nativeSrc":"12715:78:17","nodeType":"YulBlock","src":"12715:78:17","statements":[{"body":{"nativeSrc":"12771:16:17","nodeType":"YulBlock","src":"12771:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12780:1:17","nodeType":"YulLiteral","src":"12780:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"12783:1:17","nodeType":"YulLiteral","src":"12783:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12773:6:17","nodeType":"YulIdentifier","src":"12773:6:17"},"nativeSrc":"12773:12:17","nodeType":"YulFunctionCall","src":"12773:12:17"},"nativeSrc":"12773:12:17","nodeType":"YulExpressionStatement","src":"12773:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"12738:5:17","nodeType":"YulIdentifier","src":"12738:5:17"},{"arguments":[{"name":"value","nativeSrc":"12762:5:17","nodeType":"YulIdentifier","src":"12762:5:17"}],"functionName":{"name":"cleanup_t_uint96","nativeSrc":"12745:16:17","nodeType":"YulIdentifier","src":"12745:16:17"},"nativeSrc":"12745:23:17","nodeType":"YulFunctionCall","src":"12745:23:17"}],"functionName":{"name":"eq","nativeSrc":"12735:2:17","nodeType":"YulIdentifier","src":"12735:2:17"},"nativeSrc":"12735:34:17","nodeType":"YulFunctionCall","src":"12735:34:17"}],"functionName":{"name":"iszero","nativeSrc":"12728:6:17","nodeType":"YulIdentifier","src":"12728:6:17"},"nativeSrc":"12728:42:17","nodeType":"YulFunctionCall","src":"12728:42:17"},"nativeSrc":"12725:62:17","nodeType":"YulIf","src":"12725:62:17"}]},"name":"validator_revert_t_uint96","nativeSrc":"12673:120:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12708:5:17","nodeType":"YulTypedName","src":"12708:5:17","type":""}],"src":"12673:120:17"},{"body":{"nativeSrc":"12850:86:17","nodeType":"YulBlock","src":"12850:86:17","statements":[{"nativeSrc":"12860:29:17","nodeType":"YulAssignment","src":"12860:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"12882:6:17","nodeType":"YulIdentifier","src":"12882:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"12869:12:17","nodeType":"YulIdentifier","src":"12869:12:17"},"nativeSrc":"12869:20:17","nodeType":"YulFunctionCall","src":"12869:20:17"},"variableNames":[{"name":"value","nativeSrc":"12860:5:17","nodeType":"YulIdentifier","src":"12860:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12924:5:17","nodeType":"YulIdentifier","src":"12924:5:17"}],"functionName":{"name":"validator_revert_t_uint96","nativeSrc":"12898:25:17","nodeType":"YulIdentifier","src":"12898:25:17"},"nativeSrc":"12898:32:17","nodeType":"YulFunctionCall","src":"12898:32:17"},"nativeSrc":"12898:32:17","nodeType":"YulExpressionStatement","src":"12898:32:17"}]},"name":"abi_decode_t_uint96","nativeSrc":"12799:137:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"12828:6:17","nodeType":"YulTypedName","src":"12828:6:17","type":""},{"name":"end","nativeSrc":"12836:3:17","nodeType":"YulTypedName","src":"12836:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"12844:5:17","nodeType":"YulTypedName","src":"12844:5:17","type":""}],"src":"12799:137:17"},{"body":{"nativeSrc":"13041:518:17","nodeType":"YulBlock","src":"13041:518:17","statements":[{"body":{"nativeSrc":"13087:83:17","nodeType":"YulBlock","src":"13087:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"13089:77:17","nodeType":"YulIdentifier","src":"13089:77:17"},"nativeSrc":"13089:79:17","nodeType":"YulFunctionCall","src":"13089:79:17"},"nativeSrc":"13089:79:17","nodeType":"YulExpressionStatement","src":"13089:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13062:7:17","nodeType":"YulIdentifier","src":"13062:7:17"},{"name":"headStart","nativeSrc":"13071:9:17","nodeType":"YulIdentifier","src":"13071:9:17"}],"functionName":{"name":"sub","nativeSrc":"13058:3:17","nodeType":"YulIdentifier","src":"13058:3:17"},"nativeSrc":"13058:23:17","nodeType":"YulFunctionCall","src":"13058:23:17"},{"kind":"number","nativeSrc":"13083:2:17","nodeType":"YulLiteral","src":"13083:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"13054:3:17","nodeType":"YulIdentifier","src":"13054:3:17"},"nativeSrc":"13054:32:17","nodeType":"YulFunctionCall","src":"13054:32:17"},"nativeSrc":"13051:119:17","nodeType":"YulIf","src":"13051:119:17"},{"nativeSrc":"13180:117:17","nodeType":"YulBlock","src":"13180:117:17","statements":[{"nativeSrc":"13195:15:17","nodeType":"YulVariableDeclaration","src":"13195:15:17","value":{"kind":"number","nativeSrc":"13209:1:17","nodeType":"YulLiteral","src":"13209:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"13199:6:17","nodeType":"YulTypedName","src":"13199:6:17","type":""}]},{"nativeSrc":"13224:63:17","nodeType":"YulAssignment","src":"13224:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13259:9:17","nodeType":"YulIdentifier","src":"13259:9:17"},{"name":"offset","nativeSrc":"13270:6:17","nodeType":"YulIdentifier","src":"13270:6:17"}],"functionName":{"name":"add","nativeSrc":"13255:3:17","nodeType":"YulIdentifier","src":"13255:3:17"},"nativeSrc":"13255:22:17","nodeType":"YulFunctionCall","src":"13255:22:17"},{"name":"dataEnd","nativeSrc":"13279:7:17","nodeType":"YulIdentifier","src":"13279:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"13234:20:17","nodeType":"YulIdentifier","src":"13234:20:17"},"nativeSrc":"13234:53:17","nodeType":"YulFunctionCall","src":"13234:53:17"},"variableNames":[{"name":"value0","nativeSrc":"13224:6:17","nodeType":"YulIdentifier","src":"13224:6:17"}]}]},{"nativeSrc":"13307:118:17","nodeType":"YulBlock","src":"13307:118:17","statements":[{"nativeSrc":"13322:16:17","nodeType":"YulVariableDeclaration","src":"13322:16:17","value":{"kind":"number","nativeSrc":"13336:2:17","nodeType":"YulLiteral","src":"13336:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"13326:6:17","nodeType":"YulTypedName","src":"13326:6:17","type":""}]},{"nativeSrc":"13352:63:17","nodeType":"YulAssignment","src":"13352:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13387:9:17","nodeType":"YulIdentifier","src":"13387:9:17"},{"name":"offset","nativeSrc":"13398:6:17","nodeType":"YulIdentifier","src":"13398:6:17"}],"functionName":{"name":"add","nativeSrc":"13383:3:17","nodeType":"YulIdentifier","src":"13383:3:17"},"nativeSrc":"13383:22:17","nodeType":"YulFunctionCall","src":"13383:22:17"},{"name":"dataEnd","nativeSrc":"13407:7:17","nodeType":"YulIdentifier","src":"13407:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"13362:20:17","nodeType":"YulIdentifier","src":"13362:20:17"},"nativeSrc":"13362:53:17","nodeType":"YulFunctionCall","src":"13362:53:17"},"variableNames":[{"name":"value1","nativeSrc":"13352:6:17","nodeType":"YulIdentifier","src":"13352:6:17"}]}]},{"nativeSrc":"13435:117:17","nodeType":"YulBlock","src":"13435:117:17","statements":[{"nativeSrc":"13450:16:17","nodeType":"YulVariableDeclaration","src":"13450:16:17","value":{"kind":"number","nativeSrc":"13464:2:17","nodeType":"YulLiteral","src":"13464:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"13454:6:17","nodeType":"YulTypedName","src":"13454:6:17","type":""}]},{"nativeSrc":"13480:62:17","nodeType":"YulAssignment","src":"13480:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13514:9:17","nodeType":"YulIdentifier","src":"13514:9:17"},{"name":"offset","nativeSrc":"13525:6:17","nodeType":"YulIdentifier","src":"13525:6:17"}],"functionName":{"name":"add","nativeSrc":"13510:3:17","nodeType":"YulIdentifier","src":"13510:3:17"},"nativeSrc":"13510:22:17","nodeType":"YulFunctionCall","src":"13510:22:17"},{"name":"dataEnd","nativeSrc":"13534:7:17","nodeType":"YulIdentifier","src":"13534:7:17"}],"functionName":{"name":"abi_decode_t_uint96","nativeSrc":"13490:19:17","nodeType":"YulIdentifier","src":"13490:19:17"},"nativeSrc":"13490:52:17","nodeType":"YulFunctionCall","src":"13490:52:17"},"variableNames":[{"name":"value2","nativeSrc":"13480:6:17","nodeType":"YulIdentifier","src":"13480:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint96","nativeSrc":"12942:617:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12995:9:17","nodeType":"YulTypedName","src":"12995:9:17","type":""},{"name":"dataEnd","nativeSrc":"13006:7:17","nodeType":"YulTypedName","src":"13006:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13018:6:17","nodeType":"YulTypedName","src":"13018:6:17","type":""},{"name":"value1","nativeSrc":"13026:6:17","nodeType":"YulTypedName","src":"13026:6:17","type":""},{"name":"value2","nativeSrc":"13034:6:17","nodeType":"YulTypedName","src":"13034:6:17","type":""}],"src":"12942:617:17"},{"body":{"nativeSrc":"13631:263:17","nodeType":"YulBlock","src":"13631:263:17","statements":[{"body":{"nativeSrc":"13677:83:17","nodeType":"YulBlock","src":"13677:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"13679:77:17","nodeType":"YulIdentifier","src":"13679:77:17"},"nativeSrc":"13679:79:17","nodeType":"YulFunctionCall","src":"13679:79:17"},"nativeSrc":"13679:79:17","nodeType":"YulExpressionStatement","src":"13679:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13652:7:17","nodeType":"YulIdentifier","src":"13652:7:17"},{"name":"headStart","nativeSrc":"13661:9:17","nodeType":"YulIdentifier","src":"13661:9:17"}],"functionName":{"name":"sub","nativeSrc":"13648:3:17","nodeType":"YulIdentifier","src":"13648:3:17"},"nativeSrc":"13648:23:17","nodeType":"YulFunctionCall","src":"13648:23:17"},{"kind":"number","nativeSrc":"13673:2:17","nodeType":"YulLiteral","src":"13673:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"13644:3:17","nodeType":"YulIdentifier","src":"13644:3:17"},"nativeSrc":"13644:32:17","nodeType":"YulFunctionCall","src":"13644:32:17"},"nativeSrc":"13641:119:17","nodeType":"YulIf","src":"13641:119:17"},{"nativeSrc":"13770:117:17","nodeType":"YulBlock","src":"13770:117:17","statements":[{"nativeSrc":"13785:15:17","nodeType":"YulVariableDeclaration","src":"13785:15:17","value":{"kind":"number","nativeSrc":"13799:1:17","nodeType":"YulLiteral","src":"13799:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"13789:6:17","nodeType":"YulTypedName","src":"13789:6:17","type":""}]},{"nativeSrc":"13814:63:17","nodeType":"YulAssignment","src":"13814:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13849:9:17","nodeType":"YulIdentifier","src":"13849:9:17"},{"name":"offset","nativeSrc":"13860:6:17","nodeType":"YulIdentifier","src":"13860:6:17"}],"functionName":{"name":"add","nativeSrc":"13845:3:17","nodeType":"YulIdentifier","src":"13845:3:17"},"nativeSrc":"13845:22:17","nodeType":"YulFunctionCall","src":"13845:22:17"},{"name":"dataEnd","nativeSrc":"13869:7:17","nodeType":"YulIdentifier","src":"13869:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"13824:20:17","nodeType":"YulIdentifier","src":"13824:20:17"},"nativeSrc":"13824:53:17","nodeType":"YulFunctionCall","src":"13824:53:17"},"variableNames":[{"name":"value0","nativeSrc":"13814:6:17","nodeType":"YulIdentifier","src":"13814:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"13565:329:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13601:9:17","nodeType":"YulTypedName","src":"13601:9:17","type":""},{"name":"dataEnd","nativeSrc":"13612:7:17","nodeType":"YulTypedName","src":"13612:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13624:6:17","nodeType":"YulTypedName","src":"13624:6:17","type":""}],"src":"13565:329:17"},{"body":{"nativeSrc":"13940:76:17","nodeType":"YulBlock","src":"13940:76:17","statements":[{"body":{"nativeSrc":"13994:16:17","nodeType":"YulBlock","src":"13994:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14003:1:17","nodeType":"YulLiteral","src":"14003:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"14006:1:17","nodeType":"YulLiteral","src":"14006:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13996:6:17","nodeType":"YulIdentifier","src":"13996:6:17"},"nativeSrc":"13996:12:17","nodeType":"YulFunctionCall","src":"13996:12:17"},"nativeSrc":"13996:12:17","nodeType":"YulExpressionStatement","src":"13996:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13963:5:17","nodeType":"YulIdentifier","src":"13963:5:17"},{"arguments":[{"name":"value","nativeSrc":"13985:5:17","nodeType":"YulIdentifier","src":"13985:5:17"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"13970:14:17","nodeType":"YulIdentifier","src":"13970:14:17"},"nativeSrc":"13970:21:17","nodeType":"YulFunctionCall","src":"13970:21:17"}],"functionName":{"name":"eq","nativeSrc":"13960:2:17","nodeType":"YulIdentifier","src":"13960:2:17"},"nativeSrc":"13960:32:17","nodeType":"YulFunctionCall","src":"13960:32:17"}],"functionName":{"name":"iszero","nativeSrc":"13953:6:17","nodeType":"YulIdentifier","src":"13953:6:17"},"nativeSrc":"13953:40:17","nodeType":"YulFunctionCall","src":"13953:40:17"},"nativeSrc":"13950:60:17","nodeType":"YulIf","src":"13950:60:17"}]},"name":"validator_revert_t_bool","nativeSrc":"13900:116:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"13933:5:17","nodeType":"YulTypedName","src":"13933:5:17","type":""}],"src":"13900:116:17"},{"body":{"nativeSrc":"14071:84:17","nodeType":"YulBlock","src":"14071:84:17","statements":[{"nativeSrc":"14081:29:17","nodeType":"YulAssignment","src":"14081:29:17","value":{"arguments":[{"name":"offset","nativeSrc":"14103:6:17","nodeType":"YulIdentifier","src":"14103:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"14090:12:17","nodeType":"YulIdentifier","src":"14090:12:17"},"nativeSrc":"14090:20:17","nodeType":"YulFunctionCall","src":"14090:20:17"},"variableNames":[{"name":"value","nativeSrc":"14081:5:17","nodeType":"YulIdentifier","src":"14081:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"14143:5:17","nodeType":"YulIdentifier","src":"14143:5:17"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"14119:23:17","nodeType":"YulIdentifier","src":"14119:23:17"},"nativeSrc":"14119:30:17","nodeType":"YulFunctionCall","src":"14119:30:17"},"nativeSrc":"14119:30:17","nodeType":"YulExpressionStatement","src":"14119:30:17"}]},"name":"abi_decode_t_bool","nativeSrc":"14022:133:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"14049:6:17","nodeType":"YulTypedName","src":"14049:6:17","type":""},{"name":"end","nativeSrc":"14057:3:17","nodeType":"YulTypedName","src":"14057:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"14065:5:17","nodeType":"YulTypedName","src":"14065:5:17","type":""}],"src":"14022:133:17"},{"body":{"nativeSrc":"14241:388:17","nodeType":"YulBlock","src":"14241:388:17","statements":[{"body":{"nativeSrc":"14287:83:17","nodeType":"YulBlock","src":"14287:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"14289:77:17","nodeType":"YulIdentifier","src":"14289:77:17"},"nativeSrc":"14289:79:17","nodeType":"YulFunctionCall","src":"14289:79:17"},"nativeSrc":"14289:79:17","nodeType":"YulExpressionStatement","src":"14289:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14262:7:17","nodeType":"YulIdentifier","src":"14262:7:17"},{"name":"headStart","nativeSrc":"14271:9:17","nodeType":"YulIdentifier","src":"14271:9:17"}],"functionName":{"name":"sub","nativeSrc":"14258:3:17","nodeType":"YulIdentifier","src":"14258:3:17"},"nativeSrc":"14258:23:17","nodeType":"YulFunctionCall","src":"14258:23:17"},{"kind":"number","nativeSrc":"14283:2:17","nodeType":"YulLiteral","src":"14283:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"14254:3:17","nodeType":"YulIdentifier","src":"14254:3:17"},"nativeSrc":"14254:32:17","nodeType":"YulFunctionCall","src":"14254:32:17"},"nativeSrc":"14251:119:17","nodeType":"YulIf","src":"14251:119:17"},{"nativeSrc":"14380:117:17","nodeType":"YulBlock","src":"14380:117:17","statements":[{"nativeSrc":"14395:15:17","nodeType":"YulVariableDeclaration","src":"14395:15:17","value":{"kind":"number","nativeSrc":"14409:1:17","nodeType":"YulLiteral","src":"14409:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"14399:6:17","nodeType":"YulTypedName","src":"14399:6:17","type":""}]},{"nativeSrc":"14424:63:17","nodeType":"YulAssignment","src":"14424:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14459:9:17","nodeType":"YulIdentifier","src":"14459:9:17"},{"name":"offset","nativeSrc":"14470:6:17","nodeType":"YulIdentifier","src":"14470:6:17"}],"functionName":{"name":"add","nativeSrc":"14455:3:17","nodeType":"YulIdentifier","src":"14455:3:17"},"nativeSrc":"14455:22:17","nodeType":"YulFunctionCall","src":"14455:22:17"},{"name":"dataEnd","nativeSrc":"14479:7:17","nodeType":"YulIdentifier","src":"14479:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"14434:20:17","nodeType":"YulIdentifier","src":"14434:20:17"},"nativeSrc":"14434:53:17","nodeType":"YulFunctionCall","src":"14434:53:17"},"variableNames":[{"name":"value0","nativeSrc":"14424:6:17","nodeType":"YulIdentifier","src":"14424:6:17"}]}]},{"nativeSrc":"14507:115:17","nodeType":"YulBlock","src":"14507:115:17","statements":[{"nativeSrc":"14522:16:17","nodeType":"YulVariableDeclaration","src":"14522:16:17","value":{"kind":"number","nativeSrc":"14536:2:17","nodeType":"YulLiteral","src":"14536:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"14526:6:17","nodeType":"YulTypedName","src":"14526:6:17","type":""}]},{"nativeSrc":"14552:60:17","nodeType":"YulAssignment","src":"14552:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14584:9:17","nodeType":"YulIdentifier","src":"14584:9:17"},{"name":"offset","nativeSrc":"14595:6:17","nodeType":"YulIdentifier","src":"14595:6:17"}],"functionName":{"name":"add","nativeSrc":"14580:3:17","nodeType":"YulIdentifier","src":"14580:3:17"},"nativeSrc":"14580:22:17","nodeType":"YulFunctionCall","src":"14580:22:17"},{"name":"dataEnd","nativeSrc":"14604:7:17","nodeType":"YulIdentifier","src":"14604:7:17"}],"functionName":{"name":"abi_decode_t_bool","nativeSrc":"14562:17:17","nodeType":"YulIdentifier","src":"14562:17:17"},"nativeSrc":"14562:50:17","nodeType":"YulFunctionCall","src":"14562:50:17"},"variableNames":[{"name":"value1","nativeSrc":"14552:6:17","nodeType":"YulIdentifier","src":"14552:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"14161:468:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14203:9:17","nodeType":"YulTypedName","src":"14203:9:17","type":""},{"name":"dataEnd","nativeSrc":"14214:7:17","nodeType":"YulTypedName","src":"14214:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14226:6:17","nodeType":"YulTypedName","src":"14226:6:17","type":""},{"name":"value1","nativeSrc":"14234:6:17","nodeType":"YulTypedName","src":"14234:6:17","type":""}],"src":"14161:468:17"},{"body":{"nativeSrc":"14701:241:17","nodeType":"YulBlock","src":"14701:241:17","statements":[{"body":{"nativeSrc":"14806:22:17","nodeType":"YulBlock","src":"14806:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"14808:16:17","nodeType":"YulIdentifier","src":"14808:16:17"},"nativeSrc":"14808:18:17","nodeType":"YulFunctionCall","src":"14808:18:17"},"nativeSrc":"14808:18:17","nodeType":"YulExpressionStatement","src":"14808:18:17"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"14778:6:17","nodeType":"YulIdentifier","src":"14778:6:17"},{"kind":"number","nativeSrc":"14786:18:17","nodeType":"YulLiteral","src":"14786:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"14775:2:17","nodeType":"YulIdentifier","src":"14775:2:17"},"nativeSrc":"14775:30:17","nodeType":"YulFunctionCall","src":"14775:30:17"},"nativeSrc":"14772:56:17","nodeType":"YulIf","src":"14772:56:17"},{"nativeSrc":"14838:37:17","nodeType":"YulAssignment","src":"14838:37:17","value":{"arguments":[{"name":"length","nativeSrc":"14868:6:17","nodeType":"YulIdentifier","src":"14868:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"14846:21:17","nodeType":"YulIdentifier","src":"14846:21:17"},"nativeSrc":"14846:29:17","nodeType":"YulFunctionCall","src":"14846:29:17"},"variableNames":[{"name":"size","nativeSrc":"14838:4:17","nodeType":"YulIdentifier","src":"14838:4:17"}]},{"nativeSrc":"14912:23:17","nodeType":"YulAssignment","src":"14912:23:17","value":{"arguments":[{"name":"size","nativeSrc":"14924:4:17","nodeType":"YulIdentifier","src":"14924:4:17"},{"kind":"number","nativeSrc":"14930:4:17","nodeType":"YulLiteral","src":"14930:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14920:3:17","nodeType":"YulIdentifier","src":"14920:3:17"},"nativeSrc":"14920:15:17","nodeType":"YulFunctionCall","src":"14920:15:17"},"variableNames":[{"name":"size","nativeSrc":"14912:4:17","nodeType":"YulIdentifier","src":"14912:4:17"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"14635:307:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"14685:6:17","nodeType":"YulTypedName","src":"14685:6:17","type":""}],"returnVariables":[{"name":"size","nativeSrc":"14696:4:17","nodeType":"YulTypedName","src":"14696:4:17","type":""}],"src":"14635:307:17"},{"body":{"nativeSrc":"15031:340:17","nodeType":"YulBlock","src":"15031:340:17","statements":[{"nativeSrc":"15041:74:17","nodeType":"YulAssignment","src":"15041:74:17","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"15107:6:17","nodeType":"YulIdentifier","src":"15107:6:17"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"15066:40:17","nodeType":"YulIdentifier","src":"15066:40:17"},"nativeSrc":"15066:48:17","nodeType":"YulFunctionCall","src":"15066:48:17"}],"functionName":{"name":"allocate_memory","nativeSrc":"15050:15:17","nodeType":"YulIdentifier","src":"15050:15:17"},"nativeSrc":"15050:65:17","nodeType":"YulFunctionCall","src":"15050:65:17"},"variableNames":[{"name":"array","nativeSrc":"15041:5:17","nodeType":"YulIdentifier","src":"15041:5:17"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"15131:5:17","nodeType":"YulIdentifier","src":"15131:5:17"},{"name":"length","nativeSrc":"15138:6:17","nodeType":"YulIdentifier","src":"15138:6:17"}],"functionName":{"name":"mstore","nativeSrc":"15124:6:17","nodeType":"YulIdentifier","src":"15124:6:17"},"nativeSrc":"15124:21:17","nodeType":"YulFunctionCall","src":"15124:21:17"},"nativeSrc":"15124:21:17","nodeType":"YulExpressionStatement","src":"15124:21:17"},{"nativeSrc":"15154:27:17","nodeType":"YulVariableDeclaration","src":"15154:27:17","value":{"arguments":[{"name":"array","nativeSrc":"15169:5:17","nodeType":"YulIdentifier","src":"15169:5:17"},{"kind":"number","nativeSrc":"15176:4:17","nodeType":"YulLiteral","src":"15176:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15165:3:17","nodeType":"YulIdentifier","src":"15165:3:17"},"nativeSrc":"15165:16:17","nodeType":"YulFunctionCall","src":"15165:16:17"},"variables":[{"name":"dst","nativeSrc":"15158:3:17","nodeType":"YulTypedName","src":"15158:3:17","type":""}]},{"body":{"nativeSrc":"15219:83:17","nodeType":"YulBlock","src":"15219:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"15221:77:17","nodeType":"YulIdentifier","src":"15221:77:17"},"nativeSrc":"15221:79:17","nodeType":"YulFunctionCall","src":"15221:79:17"},"nativeSrc":"15221:79:17","nodeType":"YulExpressionStatement","src":"15221:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"15200:3:17","nodeType":"YulIdentifier","src":"15200:3:17"},{"name":"length","nativeSrc":"15205:6:17","nodeType":"YulIdentifier","src":"15205:6:17"}],"functionName":{"name":"add","nativeSrc":"15196:3:17","nodeType":"YulIdentifier","src":"15196:3:17"},"nativeSrc":"15196:16:17","nodeType":"YulFunctionCall","src":"15196:16:17"},{"name":"end","nativeSrc":"15214:3:17","nodeType":"YulIdentifier","src":"15214:3:17"}],"functionName":{"name":"gt","nativeSrc":"15193:2:17","nodeType":"YulIdentifier","src":"15193:2:17"},"nativeSrc":"15193:25:17","nodeType":"YulFunctionCall","src":"15193:25:17"},"nativeSrc":"15190:112:17","nodeType":"YulIf","src":"15190:112:17"},{"expression":{"arguments":[{"name":"src","nativeSrc":"15348:3:17","nodeType":"YulIdentifier","src":"15348:3:17"},{"name":"dst","nativeSrc":"15353:3:17","nodeType":"YulIdentifier","src":"15353:3:17"},{"name":"length","nativeSrc":"15358:6:17","nodeType":"YulIdentifier","src":"15358:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"15311:36:17","nodeType":"YulIdentifier","src":"15311:36:17"},"nativeSrc":"15311:54:17","nodeType":"YulFunctionCall","src":"15311:54:17"},"nativeSrc":"15311:54:17","nodeType":"YulExpressionStatement","src":"15311:54:17"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"14948:423:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"15004:3:17","nodeType":"YulTypedName","src":"15004:3:17","type":""},{"name":"length","nativeSrc":"15009:6:17","nodeType":"YulTypedName","src":"15009:6:17","type":""},{"name":"end","nativeSrc":"15017:3:17","nodeType":"YulTypedName","src":"15017:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"15025:5:17","nodeType":"YulTypedName","src":"15025:5:17","type":""}],"src":"14948:423:17"},{"body":{"nativeSrc":"15451:277:17","nodeType":"YulBlock","src":"15451:277:17","statements":[{"body":{"nativeSrc":"15500:83:17","nodeType":"YulBlock","src":"15500:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"15502:77:17","nodeType":"YulIdentifier","src":"15502:77:17"},"nativeSrc":"15502:79:17","nodeType":"YulFunctionCall","src":"15502:79:17"},"nativeSrc":"15502:79:17","nodeType":"YulExpressionStatement","src":"15502:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"15479:6:17","nodeType":"YulIdentifier","src":"15479:6:17"},{"kind":"number","nativeSrc":"15487:4:17","nodeType":"YulLiteral","src":"15487:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"15475:3:17","nodeType":"YulIdentifier","src":"15475:3:17"},"nativeSrc":"15475:17:17","nodeType":"YulFunctionCall","src":"15475:17:17"},{"name":"end","nativeSrc":"15494:3:17","nodeType":"YulIdentifier","src":"15494:3:17"}],"functionName":{"name":"slt","nativeSrc":"15471:3:17","nodeType":"YulIdentifier","src":"15471:3:17"},"nativeSrc":"15471:27:17","nodeType":"YulFunctionCall","src":"15471:27:17"}],"functionName":{"name":"iszero","nativeSrc":"15464:6:17","nodeType":"YulIdentifier","src":"15464:6:17"},"nativeSrc":"15464:35:17","nodeType":"YulFunctionCall","src":"15464:35:17"},"nativeSrc":"15461:122:17","nodeType":"YulIf","src":"15461:122:17"},{"nativeSrc":"15592:34:17","nodeType":"YulVariableDeclaration","src":"15592:34:17","value":{"arguments":[{"name":"offset","nativeSrc":"15619:6:17","nodeType":"YulIdentifier","src":"15619:6:17"}],"functionName":{"name":"calldataload","nativeSrc":"15606:12:17","nodeType":"YulIdentifier","src":"15606:12:17"},"nativeSrc":"15606:20:17","nodeType":"YulFunctionCall","src":"15606:20:17"},"variables":[{"name":"length","nativeSrc":"15596:6:17","nodeType":"YulTypedName","src":"15596:6:17","type":""}]},{"nativeSrc":"15635:87:17","nodeType":"YulAssignment","src":"15635:87:17","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"15695:6:17","nodeType":"YulIdentifier","src":"15695:6:17"},{"kind":"number","nativeSrc":"15703:4:17","nodeType":"YulLiteral","src":"15703:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15691:3:17","nodeType":"YulIdentifier","src":"15691:3:17"},"nativeSrc":"15691:17:17","nodeType":"YulFunctionCall","src":"15691:17:17"},{"name":"length","nativeSrc":"15710:6:17","nodeType":"YulIdentifier","src":"15710:6:17"},{"name":"end","nativeSrc":"15718:3:17","nodeType":"YulIdentifier","src":"15718:3:17"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"15644:46:17","nodeType":"YulIdentifier","src":"15644:46:17"},"nativeSrc":"15644:78:17","nodeType":"YulFunctionCall","src":"15644:78:17"},"variableNames":[{"name":"array","nativeSrc":"15635:5:17","nodeType":"YulIdentifier","src":"15635:5:17"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"15390:338:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"15429:6:17","nodeType":"YulTypedName","src":"15429:6:17","type":""},{"name":"end","nativeSrc":"15437:3:17","nodeType":"YulTypedName","src":"15437:3:17","type":""}],"returnVariables":[{"name":"array","nativeSrc":"15445:5:17","nodeType":"YulTypedName","src":"15445:5:17","type":""}],"src":"15390:338:17"},{"body":{"nativeSrc":"15860:817:17","nodeType":"YulBlock","src":"15860:817:17","statements":[{"body":{"nativeSrc":"15907:83:17","nodeType":"YulBlock","src":"15907:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"15909:77:17","nodeType":"YulIdentifier","src":"15909:77:17"},"nativeSrc":"15909:79:17","nodeType":"YulFunctionCall","src":"15909:79:17"},"nativeSrc":"15909:79:17","nodeType":"YulExpressionStatement","src":"15909:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"15881:7:17","nodeType":"YulIdentifier","src":"15881:7:17"},{"name":"headStart","nativeSrc":"15890:9:17","nodeType":"YulIdentifier","src":"15890:9:17"}],"functionName":{"name":"sub","nativeSrc":"15877:3:17","nodeType":"YulIdentifier","src":"15877:3:17"},"nativeSrc":"15877:23:17","nodeType":"YulFunctionCall","src":"15877:23:17"},{"kind":"number","nativeSrc":"15902:3:17","nodeType":"YulLiteral","src":"15902:3:17","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"15873:3:17","nodeType":"YulIdentifier","src":"15873:3:17"},"nativeSrc":"15873:33:17","nodeType":"YulFunctionCall","src":"15873:33:17"},"nativeSrc":"15870:120:17","nodeType":"YulIf","src":"15870:120:17"},{"nativeSrc":"16000:117:17","nodeType":"YulBlock","src":"16000:117:17","statements":[{"nativeSrc":"16015:15:17","nodeType":"YulVariableDeclaration","src":"16015:15:17","value":{"kind":"number","nativeSrc":"16029:1:17","nodeType":"YulLiteral","src":"16029:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"16019:6:17","nodeType":"YulTypedName","src":"16019:6:17","type":""}]},{"nativeSrc":"16044:63:17","nodeType":"YulAssignment","src":"16044:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16079:9:17","nodeType":"YulIdentifier","src":"16079:9:17"},{"name":"offset","nativeSrc":"16090:6:17","nodeType":"YulIdentifier","src":"16090:6:17"}],"functionName":{"name":"add","nativeSrc":"16075:3:17","nodeType":"YulIdentifier","src":"16075:3:17"},"nativeSrc":"16075:22:17","nodeType":"YulFunctionCall","src":"16075:22:17"},{"name":"dataEnd","nativeSrc":"16099:7:17","nodeType":"YulIdentifier","src":"16099:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"16054:20:17","nodeType":"YulIdentifier","src":"16054:20:17"},"nativeSrc":"16054:53:17","nodeType":"YulFunctionCall","src":"16054:53:17"},"variableNames":[{"name":"value0","nativeSrc":"16044:6:17","nodeType":"YulIdentifier","src":"16044:6:17"}]}]},{"nativeSrc":"16127:118:17","nodeType":"YulBlock","src":"16127:118:17","statements":[{"nativeSrc":"16142:16:17","nodeType":"YulVariableDeclaration","src":"16142:16:17","value":{"kind":"number","nativeSrc":"16156:2:17","nodeType":"YulLiteral","src":"16156:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"16146:6:17","nodeType":"YulTypedName","src":"16146:6:17","type":""}]},{"nativeSrc":"16172:63:17","nodeType":"YulAssignment","src":"16172:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16207:9:17","nodeType":"YulIdentifier","src":"16207:9:17"},{"name":"offset","nativeSrc":"16218:6:17","nodeType":"YulIdentifier","src":"16218:6:17"}],"functionName":{"name":"add","nativeSrc":"16203:3:17","nodeType":"YulIdentifier","src":"16203:3:17"},"nativeSrc":"16203:22:17","nodeType":"YulFunctionCall","src":"16203:22:17"},{"name":"dataEnd","nativeSrc":"16227:7:17","nodeType":"YulIdentifier","src":"16227:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"16182:20:17","nodeType":"YulIdentifier","src":"16182:20:17"},"nativeSrc":"16182:53:17","nodeType":"YulFunctionCall","src":"16182:53:17"},"variableNames":[{"name":"value1","nativeSrc":"16172:6:17","nodeType":"YulIdentifier","src":"16172:6:17"}]}]},{"nativeSrc":"16255:118:17","nodeType":"YulBlock","src":"16255:118:17","statements":[{"nativeSrc":"16270:16:17","nodeType":"YulVariableDeclaration","src":"16270:16:17","value":{"kind":"number","nativeSrc":"16284:2:17","nodeType":"YulLiteral","src":"16284:2:17","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"16274:6:17","nodeType":"YulTypedName","src":"16274:6:17","type":""}]},{"nativeSrc":"16300:63:17","nodeType":"YulAssignment","src":"16300:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16335:9:17","nodeType":"YulIdentifier","src":"16335:9:17"},{"name":"offset","nativeSrc":"16346:6:17","nodeType":"YulIdentifier","src":"16346:6:17"}],"functionName":{"name":"add","nativeSrc":"16331:3:17","nodeType":"YulIdentifier","src":"16331:3:17"},"nativeSrc":"16331:22:17","nodeType":"YulFunctionCall","src":"16331:22:17"},{"name":"dataEnd","nativeSrc":"16355:7:17","nodeType":"YulIdentifier","src":"16355:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"16310:20:17","nodeType":"YulIdentifier","src":"16310:20:17"},"nativeSrc":"16310:53:17","nodeType":"YulFunctionCall","src":"16310:53:17"},"variableNames":[{"name":"value2","nativeSrc":"16300:6:17","nodeType":"YulIdentifier","src":"16300:6:17"}]}]},{"nativeSrc":"16383:287:17","nodeType":"YulBlock","src":"16383:287:17","statements":[{"nativeSrc":"16398:46:17","nodeType":"YulVariableDeclaration","src":"16398:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16429:9:17","nodeType":"YulIdentifier","src":"16429:9:17"},{"kind":"number","nativeSrc":"16440:2:17","nodeType":"YulLiteral","src":"16440:2:17","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16425:3:17","nodeType":"YulIdentifier","src":"16425:3:17"},"nativeSrc":"16425:18:17","nodeType":"YulFunctionCall","src":"16425:18:17"}],"functionName":{"name":"calldataload","nativeSrc":"16412:12:17","nodeType":"YulIdentifier","src":"16412:12:17"},"nativeSrc":"16412:32:17","nodeType":"YulFunctionCall","src":"16412:32:17"},"variables":[{"name":"offset","nativeSrc":"16402:6:17","nodeType":"YulTypedName","src":"16402:6:17","type":""}]},{"body":{"nativeSrc":"16491:83:17","nodeType":"YulBlock","src":"16491:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"16493:77:17","nodeType":"YulIdentifier","src":"16493:77:17"},"nativeSrc":"16493:79:17","nodeType":"YulFunctionCall","src":"16493:79:17"},"nativeSrc":"16493:79:17","nodeType":"YulExpressionStatement","src":"16493:79:17"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"16463:6:17","nodeType":"YulIdentifier","src":"16463:6:17"},{"kind":"number","nativeSrc":"16471:18:17","nodeType":"YulLiteral","src":"16471:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"16460:2:17","nodeType":"YulIdentifier","src":"16460:2:17"},"nativeSrc":"16460:30:17","nodeType":"YulFunctionCall","src":"16460:30:17"},"nativeSrc":"16457:117:17","nodeType":"YulIf","src":"16457:117:17"},{"nativeSrc":"16588:72:17","nodeType":"YulAssignment","src":"16588:72:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16632:9:17","nodeType":"YulIdentifier","src":"16632:9:17"},{"name":"offset","nativeSrc":"16643:6:17","nodeType":"YulIdentifier","src":"16643:6:17"}],"functionName":{"name":"add","nativeSrc":"16628:3:17","nodeType":"YulIdentifier","src":"16628:3:17"},"nativeSrc":"16628:22:17","nodeType":"YulFunctionCall","src":"16628:22:17"},{"name":"dataEnd","nativeSrc":"16652:7:17","nodeType":"YulIdentifier","src":"16652:7:17"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"16598:29:17","nodeType":"YulIdentifier","src":"16598:29:17"},"nativeSrc":"16598:62:17","nodeType":"YulFunctionCall","src":"16598:62:17"},"variableNames":[{"name":"value3","nativeSrc":"16588:6:17","nodeType":"YulIdentifier","src":"16588:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"15734:943:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15806:9:17","nodeType":"YulTypedName","src":"15806:9:17","type":""},{"name":"dataEnd","nativeSrc":"15817:7:17","nodeType":"YulTypedName","src":"15817:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"15829:6:17","nodeType":"YulTypedName","src":"15829:6:17","type":""},{"name":"value1","nativeSrc":"15837:6:17","nodeType":"YulTypedName","src":"15837:6:17","type":""},{"name":"value2","nativeSrc":"15845:6:17","nodeType":"YulTypedName","src":"15845:6:17","type":""},{"name":"value3","nativeSrc":"15853:6:17","nodeType":"YulTypedName","src":"15853:6:17","type":""}],"src":"15734:943:17"},{"body":{"nativeSrc":"16766:391:17","nodeType":"YulBlock","src":"16766:391:17","statements":[{"body":{"nativeSrc":"16812:83:17","nodeType":"YulBlock","src":"16812:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"16814:77:17","nodeType":"YulIdentifier","src":"16814:77:17"},"nativeSrc":"16814:79:17","nodeType":"YulFunctionCall","src":"16814:79:17"},"nativeSrc":"16814:79:17","nodeType":"YulExpressionStatement","src":"16814:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"16787:7:17","nodeType":"YulIdentifier","src":"16787:7:17"},{"name":"headStart","nativeSrc":"16796:9:17","nodeType":"YulIdentifier","src":"16796:9:17"}],"functionName":{"name":"sub","nativeSrc":"16783:3:17","nodeType":"YulIdentifier","src":"16783:3:17"},"nativeSrc":"16783:23:17","nodeType":"YulFunctionCall","src":"16783:23:17"},{"kind":"number","nativeSrc":"16808:2:17","nodeType":"YulLiteral","src":"16808:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"16779:3:17","nodeType":"YulIdentifier","src":"16779:3:17"},"nativeSrc":"16779:32:17","nodeType":"YulFunctionCall","src":"16779:32:17"},"nativeSrc":"16776:119:17","nodeType":"YulIf","src":"16776:119:17"},{"nativeSrc":"16905:117:17","nodeType":"YulBlock","src":"16905:117:17","statements":[{"nativeSrc":"16920:15:17","nodeType":"YulVariableDeclaration","src":"16920:15:17","value":{"kind":"number","nativeSrc":"16934:1:17","nodeType":"YulLiteral","src":"16934:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"16924:6:17","nodeType":"YulTypedName","src":"16924:6:17","type":""}]},{"nativeSrc":"16949:63:17","nodeType":"YulAssignment","src":"16949:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16984:9:17","nodeType":"YulIdentifier","src":"16984:9:17"},{"name":"offset","nativeSrc":"16995:6:17","nodeType":"YulIdentifier","src":"16995:6:17"}],"functionName":{"name":"add","nativeSrc":"16980:3:17","nodeType":"YulIdentifier","src":"16980:3:17"},"nativeSrc":"16980:22:17","nodeType":"YulFunctionCall","src":"16980:22:17"},{"name":"dataEnd","nativeSrc":"17004:7:17","nodeType":"YulIdentifier","src":"17004:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"16959:20:17","nodeType":"YulIdentifier","src":"16959:20:17"},"nativeSrc":"16959:53:17","nodeType":"YulFunctionCall","src":"16959:53:17"},"variableNames":[{"name":"value0","nativeSrc":"16949:6:17","nodeType":"YulIdentifier","src":"16949:6:17"}]}]},{"nativeSrc":"17032:118:17","nodeType":"YulBlock","src":"17032:118:17","statements":[{"nativeSrc":"17047:16:17","nodeType":"YulVariableDeclaration","src":"17047:16:17","value":{"kind":"number","nativeSrc":"17061:2:17","nodeType":"YulLiteral","src":"17061:2:17","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"17051:6:17","nodeType":"YulTypedName","src":"17051:6:17","type":""}]},{"nativeSrc":"17077:63:17","nodeType":"YulAssignment","src":"17077:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17112:9:17","nodeType":"YulIdentifier","src":"17112:9:17"},{"name":"offset","nativeSrc":"17123:6:17","nodeType":"YulIdentifier","src":"17123:6:17"}],"functionName":{"name":"add","nativeSrc":"17108:3:17","nodeType":"YulIdentifier","src":"17108:3:17"},"nativeSrc":"17108:22:17","nodeType":"YulFunctionCall","src":"17108:22:17"},{"name":"dataEnd","nativeSrc":"17132:7:17","nodeType":"YulIdentifier","src":"17132:7:17"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"17087:20:17","nodeType":"YulIdentifier","src":"17087:20:17"},"nativeSrc":"17087:53:17","nodeType":"YulFunctionCall","src":"17087:53:17"},"variableNames":[{"name":"value1","nativeSrc":"17077:6:17","nodeType":"YulIdentifier","src":"17077:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"16683:474:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16728:9:17","nodeType":"YulTypedName","src":"16728:9:17","type":""},{"name":"dataEnd","nativeSrc":"16739:7:17","nodeType":"YulTypedName","src":"16739:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"16751:6:17","nodeType":"YulTypedName","src":"16751:6:17","type":""},{"name":"value1","nativeSrc":"16759:6:17","nodeType":"YulTypedName","src":"16759:6:17","type":""}],"src":"16683:474:17"},{"body":{"nativeSrc":"17191:152:17","nodeType":"YulBlock","src":"17191:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17208:1:17","nodeType":"YulLiteral","src":"17208:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"17211:77:17","nodeType":"YulLiteral","src":"17211:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"17201:6:17","nodeType":"YulIdentifier","src":"17201:6:17"},"nativeSrc":"17201:88:17","nodeType":"YulFunctionCall","src":"17201:88:17"},"nativeSrc":"17201:88:17","nodeType":"YulExpressionStatement","src":"17201:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17305:1:17","nodeType":"YulLiteral","src":"17305:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"17308:4:17","nodeType":"YulLiteral","src":"17308:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"17298:6:17","nodeType":"YulIdentifier","src":"17298:6:17"},"nativeSrc":"17298:15:17","nodeType":"YulFunctionCall","src":"17298:15:17"},"nativeSrc":"17298:15:17","nodeType":"YulExpressionStatement","src":"17298:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17329:1:17","nodeType":"YulLiteral","src":"17329:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"17332:4:17","nodeType":"YulLiteral","src":"17332:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"17322:6:17","nodeType":"YulIdentifier","src":"17322:6:17"},"nativeSrc":"17322:15:17","nodeType":"YulFunctionCall","src":"17322:15:17"},"nativeSrc":"17322:15:17","nodeType":"YulExpressionStatement","src":"17322:15:17"}]},"name":"panic_error_0x22","nativeSrc":"17163:180:17","nodeType":"YulFunctionDefinition","src":"17163:180:17"},{"body":{"nativeSrc":"17400:269:17","nodeType":"YulBlock","src":"17400:269:17","statements":[{"nativeSrc":"17410:22:17","nodeType":"YulAssignment","src":"17410:22:17","value":{"arguments":[{"name":"data","nativeSrc":"17424:4:17","nodeType":"YulIdentifier","src":"17424:4:17"},{"kind":"number","nativeSrc":"17430:1:17","nodeType":"YulLiteral","src":"17430:1:17","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"17420:3:17","nodeType":"YulIdentifier","src":"17420:3:17"},"nativeSrc":"17420:12:17","nodeType":"YulFunctionCall","src":"17420:12:17"},"variableNames":[{"name":"length","nativeSrc":"17410:6:17","nodeType":"YulIdentifier","src":"17410:6:17"}]},{"nativeSrc":"17441:38:17","nodeType":"YulVariableDeclaration","src":"17441:38:17","value":{"arguments":[{"name":"data","nativeSrc":"17471:4:17","nodeType":"YulIdentifier","src":"17471:4:17"},{"kind":"number","nativeSrc":"17477:1:17","nodeType":"YulLiteral","src":"17477:1:17","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"17467:3:17","nodeType":"YulIdentifier","src":"17467:3:17"},"nativeSrc":"17467:12:17","nodeType":"YulFunctionCall","src":"17467:12:17"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"17445:18:17","nodeType":"YulTypedName","src":"17445:18:17","type":""}]},{"body":{"nativeSrc":"17518:51:17","nodeType":"YulBlock","src":"17518:51:17","statements":[{"nativeSrc":"17532:27:17","nodeType":"YulAssignment","src":"17532:27:17","value":{"arguments":[{"name":"length","nativeSrc":"17546:6:17","nodeType":"YulIdentifier","src":"17546:6:17"},{"kind":"number","nativeSrc":"17554:4:17","nodeType":"YulLiteral","src":"17554:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"17542:3:17","nodeType":"YulIdentifier","src":"17542:3:17"},"nativeSrc":"17542:17:17","nodeType":"YulFunctionCall","src":"17542:17:17"},"variableNames":[{"name":"length","nativeSrc":"17532:6:17","nodeType":"YulIdentifier","src":"17532:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"17498:18:17","nodeType":"YulIdentifier","src":"17498:18:17"}],"functionName":{"name":"iszero","nativeSrc":"17491:6:17","nodeType":"YulIdentifier","src":"17491:6:17"},"nativeSrc":"17491:26:17","nodeType":"YulFunctionCall","src":"17491:26:17"},"nativeSrc":"17488:81:17","nodeType":"YulIf","src":"17488:81:17"},{"body":{"nativeSrc":"17621:42:17","nodeType":"YulBlock","src":"17621:42:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"17635:16:17","nodeType":"YulIdentifier","src":"17635:16:17"},"nativeSrc":"17635:18:17","nodeType":"YulFunctionCall","src":"17635:18:17"},"nativeSrc":"17635:18:17","nodeType":"YulExpressionStatement","src":"17635:18:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"17585:18:17","nodeType":"YulIdentifier","src":"17585:18:17"},{"arguments":[{"name":"length","nativeSrc":"17608:6:17","nodeType":"YulIdentifier","src":"17608:6:17"},{"kind":"number","nativeSrc":"17616:2:17","nodeType":"YulLiteral","src":"17616:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"17605:2:17","nodeType":"YulIdentifier","src":"17605:2:17"},"nativeSrc":"17605:14:17","nodeType":"YulFunctionCall","src":"17605:14:17"}],"functionName":{"name":"eq","nativeSrc":"17582:2:17","nodeType":"YulIdentifier","src":"17582:2:17"},"nativeSrc":"17582:38:17","nodeType":"YulFunctionCall","src":"17582:38:17"},"nativeSrc":"17579:84:17","nodeType":"YulIf","src":"17579:84:17"}]},"name":"extract_byte_array_length","nativeSrc":"17349:320:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"17384:4:17","nodeType":"YulTypedName","src":"17384:4:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"17393:6:17","nodeType":"YulTypedName","src":"17393:6:17","type":""}],"src":"17349:320:17"},{"body":{"nativeSrc":"17781:114:17","nodeType":"YulBlock","src":"17781:114:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17803:6:17","nodeType":"YulIdentifier","src":"17803:6:17"},{"kind":"number","nativeSrc":"17811:1:17","nodeType":"YulLiteral","src":"17811:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17799:3:17","nodeType":"YulIdentifier","src":"17799:3:17"},"nativeSrc":"17799:14:17","nodeType":"YulFunctionCall","src":"17799:14:17"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nativeSrc":"17815:34:17","nodeType":"YulLiteral","src":"17815:34:17","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nativeSrc":"17792:6:17","nodeType":"YulIdentifier","src":"17792:6:17"},"nativeSrc":"17792:58:17","nodeType":"YulFunctionCall","src":"17792:58:17"},"nativeSrc":"17792:58:17","nodeType":"YulExpressionStatement","src":"17792:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17871:6:17","nodeType":"YulIdentifier","src":"17871:6:17"},{"kind":"number","nativeSrc":"17879:2:17","nodeType":"YulLiteral","src":"17879:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17867:3:17","nodeType":"YulIdentifier","src":"17867:3:17"},"nativeSrc":"17867:15:17","nodeType":"YulFunctionCall","src":"17867:15:17"},{"hexValue":"72","kind":"string","nativeSrc":"17884:3:17","nodeType":"YulLiteral","src":"17884:3:17","type":"","value":"r"}],"functionName":{"name":"mstore","nativeSrc":"17860:6:17","nodeType":"YulIdentifier","src":"17860:6:17"},"nativeSrc":"17860:28:17","nodeType":"YulFunctionCall","src":"17860:28:17"},"nativeSrc":"17860:28:17","nodeType":"YulExpressionStatement","src":"17860:28:17"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"17675:220:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"17773:6:17","nodeType":"YulTypedName","src":"17773:6:17","type":""}],"src":"17675:220:17"},{"body":{"nativeSrc":"18047:220:17","nodeType":"YulBlock","src":"18047:220:17","statements":[{"nativeSrc":"18057:74:17","nodeType":"YulAssignment","src":"18057:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"18123:3:17","nodeType":"YulIdentifier","src":"18123:3:17"},{"kind":"number","nativeSrc":"18128:2:17","nodeType":"YulLiteral","src":"18128:2:17","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"18064:58:17","nodeType":"YulIdentifier","src":"18064:58:17"},"nativeSrc":"18064:67:17","nodeType":"YulFunctionCall","src":"18064:67:17"},"variableNames":[{"name":"pos","nativeSrc":"18057:3:17","nodeType":"YulIdentifier","src":"18057:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"18229:3:17","nodeType":"YulIdentifier","src":"18229:3:17"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"18140:88:17","nodeType":"YulIdentifier","src":"18140:88:17"},"nativeSrc":"18140:93:17","nodeType":"YulFunctionCall","src":"18140:93:17"},"nativeSrc":"18140:93:17","nodeType":"YulExpressionStatement","src":"18140:93:17"},{"nativeSrc":"18242:19:17","nodeType":"YulAssignment","src":"18242:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"18253:3:17","nodeType":"YulIdentifier","src":"18253:3:17"},{"kind":"number","nativeSrc":"18258:2:17","nodeType":"YulLiteral","src":"18258:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18249:3:17","nodeType":"YulIdentifier","src":"18249:3:17"},"nativeSrc":"18249:12:17","nodeType":"YulFunctionCall","src":"18249:12:17"},"variableNames":[{"name":"end","nativeSrc":"18242:3:17","nodeType":"YulIdentifier","src":"18242:3:17"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"17901:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18035:3:17","nodeType":"YulTypedName","src":"18035:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18043:3:17","nodeType":"YulTypedName","src":"18043:3:17","type":""}],"src":"17901:366:17"},{"body":{"nativeSrc":"18444:248:17","nodeType":"YulBlock","src":"18444:248:17","statements":[{"nativeSrc":"18454:26:17","nodeType":"YulAssignment","src":"18454:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"18466:9:17","nodeType":"YulIdentifier","src":"18466:9:17"},{"kind":"number","nativeSrc":"18477:2:17","nodeType":"YulLiteral","src":"18477:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18462:3:17","nodeType":"YulIdentifier","src":"18462:3:17"},"nativeSrc":"18462:18:17","nodeType":"YulFunctionCall","src":"18462:18:17"},"variableNames":[{"name":"tail","nativeSrc":"18454:4:17","nodeType":"YulIdentifier","src":"18454:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18501:9:17","nodeType":"YulIdentifier","src":"18501:9:17"},{"kind":"number","nativeSrc":"18512:1:17","nodeType":"YulLiteral","src":"18512:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18497:3:17","nodeType":"YulIdentifier","src":"18497:3:17"},"nativeSrc":"18497:17:17","nodeType":"YulFunctionCall","src":"18497:17:17"},{"arguments":[{"name":"tail","nativeSrc":"18520:4:17","nodeType":"YulIdentifier","src":"18520:4:17"},{"name":"headStart","nativeSrc":"18526:9:17","nodeType":"YulIdentifier","src":"18526:9:17"}],"functionName":{"name":"sub","nativeSrc":"18516:3:17","nodeType":"YulIdentifier","src":"18516:3:17"},"nativeSrc":"18516:20:17","nodeType":"YulFunctionCall","src":"18516:20:17"}],"functionName":{"name":"mstore","nativeSrc":"18490:6:17","nodeType":"YulIdentifier","src":"18490:6:17"},"nativeSrc":"18490:47:17","nodeType":"YulFunctionCall","src":"18490:47:17"},"nativeSrc":"18490:47:17","nodeType":"YulExpressionStatement","src":"18490:47:17"},{"nativeSrc":"18546:139:17","nodeType":"YulAssignment","src":"18546:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"18680:4:17","nodeType":"YulIdentifier","src":"18680:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"18554:124:17","nodeType":"YulIdentifier","src":"18554:124:17"},"nativeSrc":"18554:131:17","nodeType":"YulFunctionCall","src":"18554:131:17"},"variableNames":[{"name":"tail","nativeSrc":"18546:4:17","nodeType":"YulIdentifier","src":"18546:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18273:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18424:9:17","nodeType":"YulTypedName","src":"18424:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18439:4:17","nodeType":"YulTypedName","src":"18439:4:17","type":""}],"src":"18273:419:17"},{"body":{"nativeSrc":"18804:142:17","nodeType":"YulBlock","src":"18804:142:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18826:6:17","nodeType":"YulIdentifier","src":"18826:6:17"},{"kind":"number","nativeSrc":"18834:1:17","nodeType":"YulLiteral","src":"18834:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18822:3:17","nodeType":"YulIdentifier","src":"18822:3:17"},"nativeSrc":"18822:14:17","nodeType":"YulFunctionCall","src":"18822:14:17"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nativeSrc":"18838:34:17","nodeType":"YulLiteral","src":"18838:34:17","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nativeSrc":"18815:6:17","nodeType":"YulIdentifier","src":"18815:6:17"},"nativeSrc":"18815:58:17","nodeType":"YulFunctionCall","src":"18815:58:17"},"nativeSrc":"18815:58:17","nodeType":"YulExpressionStatement","src":"18815:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18894:6:17","nodeType":"YulIdentifier","src":"18894:6:17"},{"kind":"number","nativeSrc":"18902:2:17","nodeType":"YulLiteral","src":"18902:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18890:3:17","nodeType":"YulIdentifier","src":"18890:3:17"},"nativeSrc":"18890:15:17","nodeType":"YulFunctionCall","src":"18890:15:17"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nativeSrc":"18907:31:17","nodeType":"YulLiteral","src":"18907:31:17","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nativeSrc":"18883:6:17","nodeType":"YulIdentifier","src":"18883:6:17"},"nativeSrc":"18883:56:17","nodeType":"YulFunctionCall","src":"18883:56:17"},"nativeSrc":"18883:56:17","nodeType":"YulExpressionStatement","src":"18883:56:17"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"18698:248:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"18796:6:17","nodeType":"YulTypedName","src":"18796:6:17","type":""}],"src":"18698:248:17"},{"body":{"nativeSrc":"19098:220:17","nodeType":"YulBlock","src":"19098:220:17","statements":[{"nativeSrc":"19108:74:17","nodeType":"YulAssignment","src":"19108:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"19174:3:17","nodeType":"YulIdentifier","src":"19174:3:17"},{"kind":"number","nativeSrc":"19179:2:17","nodeType":"YulLiteral","src":"19179:2:17","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"19115:58:17","nodeType":"YulIdentifier","src":"19115:58:17"},"nativeSrc":"19115:67:17","nodeType":"YulFunctionCall","src":"19115:67:17"},"variableNames":[{"name":"pos","nativeSrc":"19108:3:17","nodeType":"YulIdentifier","src":"19108:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19280:3:17","nodeType":"YulIdentifier","src":"19280:3:17"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"19191:88:17","nodeType":"YulIdentifier","src":"19191:88:17"},"nativeSrc":"19191:93:17","nodeType":"YulFunctionCall","src":"19191:93:17"},"nativeSrc":"19191:93:17","nodeType":"YulExpressionStatement","src":"19191:93:17"},{"nativeSrc":"19293:19:17","nodeType":"YulAssignment","src":"19293:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"19304:3:17","nodeType":"YulIdentifier","src":"19304:3:17"},{"kind":"number","nativeSrc":"19309:2:17","nodeType":"YulLiteral","src":"19309:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19300:3:17","nodeType":"YulIdentifier","src":"19300:3:17"},"nativeSrc":"19300:12:17","nodeType":"YulFunctionCall","src":"19300:12:17"},"variableNames":[{"name":"end","nativeSrc":"19293:3:17","nodeType":"YulIdentifier","src":"19293:3:17"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"18952:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19086:3:17","nodeType":"YulTypedName","src":"19086:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19094:3:17","nodeType":"YulTypedName","src":"19094:3:17","type":""}],"src":"18952:366:17"},{"body":{"nativeSrc":"19495:248:17","nodeType":"YulBlock","src":"19495:248:17","statements":[{"nativeSrc":"19505:26:17","nodeType":"YulAssignment","src":"19505:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"19517:9:17","nodeType":"YulIdentifier","src":"19517:9:17"},{"kind":"number","nativeSrc":"19528:2:17","nodeType":"YulLiteral","src":"19528:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19513:3:17","nodeType":"YulIdentifier","src":"19513:3:17"},"nativeSrc":"19513:18:17","nodeType":"YulFunctionCall","src":"19513:18:17"},"variableNames":[{"name":"tail","nativeSrc":"19505:4:17","nodeType":"YulIdentifier","src":"19505:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19552:9:17","nodeType":"YulIdentifier","src":"19552:9:17"},{"kind":"number","nativeSrc":"19563:1:17","nodeType":"YulLiteral","src":"19563:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19548:3:17","nodeType":"YulIdentifier","src":"19548:3:17"},"nativeSrc":"19548:17:17","nodeType":"YulFunctionCall","src":"19548:17:17"},{"arguments":[{"name":"tail","nativeSrc":"19571:4:17","nodeType":"YulIdentifier","src":"19571:4:17"},{"name":"headStart","nativeSrc":"19577:9:17","nodeType":"YulIdentifier","src":"19577:9:17"}],"functionName":{"name":"sub","nativeSrc":"19567:3:17","nodeType":"YulIdentifier","src":"19567:3:17"},"nativeSrc":"19567:20:17","nodeType":"YulFunctionCall","src":"19567:20:17"}],"functionName":{"name":"mstore","nativeSrc":"19541:6:17","nodeType":"YulIdentifier","src":"19541:6:17"},"nativeSrc":"19541:47:17","nodeType":"YulFunctionCall","src":"19541:47:17"},"nativeSrc":"19541:47:17","nodeType":"YulExpressionStatement","src":"19541:47:17"},{"nativeSrc":"19597:139:17","nodeType":"YulAssignment","src":"19597:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"19731:4:17","nodeType":"YulIdentifier","src":"19731:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"19605:124:17","nodeType":"YulIdentifier","src":"19605:124:17"},"nativeSrc":"19605:131:17","nodeType":"YulFunctionCall","src":"19605:131:17"},"variableNames":[{"name":"tail","nativeSrc":"19597:4:17","nodeType":"YulIdentifier","src":"19597:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19324:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19475:9:17","nodeType":"YulTypedName","src":"19475:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19490:4:17","nodeType":"YulTypedName","src":"19490:4:17","type":""}],"src":"19324:419:17"},{"body":{"nativeSrc":"19855:71:17","nodeType":"YulBlock","src":"19855:71:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"19877:6:17","nodeType":"YulIdentifier","src":"19877:6:17"},{"kind":"number","nativeSrc":"19885:1:17","nodeType":"YulLiteral","src":"19885:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19873:3:17","nodeType":"YulIdentifier","src":"19873:3:17"},"nativeSrc":"19873:14:17","nodeType":"YulFunctionCall","src":"19873:14:17"},{"hexValue":"496e73756666696369656e7420726f79616c747920616d6f756e74","kind":"string","nativeSrc":"19889:29:17","nodeType":"YulLiteral","src":"19889:29:17","type":"","value":"Insufficient royalty amount"}],"functionName":{"name":"mstore","nativeSrc":"19866:6:17","nodeType":"YulIdentifier","src":"19866:6:17"},"nativeSrc":"19866:53:17","nodeType":"YulFunctionCall","src":"19866:53:17"},"nativeSrc":"19866:53:17","nodeType":"YulExpressionStatement","src":"19866:53:17"}]},"name":"store_literal_in_memory_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad","nativeSrc":"19749:177:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"19847:6:17","nodeType":"YulTypedName","src":"19847:6:17","type":""}],"src":"19749:177:17"},{"body":{"nativeSrc":"20078:220:17","nodeType":"YulBlock","src":"20078:220:17","statements":[{"nativeSrc":"20088:74:17","nodeType":"YulAssignment","src":"20088:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"20154:3:17","nodeType":"YulIdentifier","src":"20154:3:17"},{"kind":"number","nativeSrc":"20159:2:17","nodeType":"YulLiteral","src":"20159:2:17","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"20095:58:17","nodeType":"YulIdentifier","src":"20095:58:17"},"nativeSrc":"20095:67:17","nodeType":"YulFunctionCall","src":"20095:67:17"},"variableNames":[{"name":"pos","nativeSrc":"20088:3:17","nodeType":"YulIdentifier","src":"20088:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"20260:3:17","nodeType":"YulIdentifier","src":"20260:3:17"}],"functionName":{"name":"store_literal_in_memory_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad","nativeSrc":"20171:88:17","nodeType":"YulIdentifier","src":"20171:88:17"},"nativeSrc":"20171:93:17","nodeType":"YulFunctionCall","src":"20171:93:17"},"nativeSrc":"20171:93:17","nodeType":"YulExpressionStatement","src":"20171:93:17"},{"nativeSrc":"20273:19:17","nodeType":"YulAssignment","src":"20273:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"20284:3:17","nodeType":"YulIdentifier","src":"20284:3:17"},{"kind":"number","nativeSrc":"20289:2:17","nodeType":"YulLiteral","src":"20289:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20280:3:17","nodeType":"YulIdentifier","src":"20280:3:17"},"nativeSrc":"20280:12:17","nodeType":"YulFunctionCall","src":"20280:12:17"},"variableNames":[{"name":"end","nativeSrc":"20273:3:17","nodeType":"YulIdentifier","src":"20273:3:17"}]}]},"name":"abi_encode_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad_to_t_string_memory_ptr_fromStack","nativeSrc":"19932:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20066:3:17","nodeType":"YulTypedName","src":"20066:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20074:3:17","nodeType":"YulTypedName","src":"20074:3:17","type":""}],"src":"19932:366:17"},{"body":{"nativeSrc":"20475:248:17","nodeType":"YulBlock","src":"20475:248:17","statements":[{"nativeSrc":"20485:26:17","nodeType":"YulAssignment","src":"20485:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"20497:9:17","nodeType":"YulIdentifier","src":"20497:9:17"},{"kind":"number","nativeSrc":"20508:2:17","nodeType":"YulLiteral","src":"20508:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20493:3:17","nodeType":"YulIdentifier","src":"20493:3:17"},"nativeSrc":"20493:18:17","nodeType":"YulFunctionCall","src":"20493:18:17"},"variableNames":[{"name":"tail","nativeSrc":"20485:4:17","nodeType":"YulIdentifier","src":"20485:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20532:9:17","nodeType":"YulIdentifier","src":"20532:9:17"},{"kind":"number","nativeSrc":"20543:1:17","nodeType":"YulLiteral","src":"20543:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20528:3:17","nodeType":"YulIdentifier","src":"20528:3:17"},"nativeSrc":"20528:17:17","nodeType":"YulFunctionCall","src":"20528:17:17"},{"arguments":[{"name":"tail","nativeSrc":"20551:4:17","nodeType":"YulIdentifier","src":"20551:4:17"},{"name":"headStart","nativeSrc":"20557:9:17","nodeType":"YulIdentifier","src":"20557:9:17"}],"functionName":{"name":"sub","nativeSrc":"20547:3:17","nodeType":"YulIdentifier","src":"20547:3:17"},"nativeSrc":"20547:20:17","nodeType":"YulFunctionCall","src":"20547:20:17"}],"functionName":{"name":"mstore","nativeSrc":"20521:6:17","nodeType":"YulIdentifier","src":"20521:6:17"},"nativeSrc":"20521:47:17","nodeType":"YulFunctionCall","src":"20521:47:17"},"nativeSrc":"20521:47:17","nodeType":"YulExpressionStatement","src":"20521:47:17"},{"nativeSrc":"20577:139:17","nodeType":"YulAssignment","src":"20577:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"20711:4:17","nodeType":"YulIdentifier","src":"20711:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad_to_t_string_memory_ptr_fromStack","nativeSrc":"20585:124:17","nodeType":"YulIdentifier","src":"20585:124:17"},"nativeSrc":"20585:131:17","nodeType":"YulFunctionCall","src":"20585:131:17"},"variableNames":[{"name":"tail","nativeSrc":"20577:4:17","nodeType":"YulIdentifier","src":"20577:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20304:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20455:9:17","nodeType":"YulTypedName","src":"20455:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20470:4:17","nodeType":"YulTypedName","src":"20470:4:17","type":""}],"src":"20304:419:17"},{"body":{"nativeSrc":"20757:152:17","nodeType":"YulBlock","src":"20757:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"20774:1:17","nodeType":"YulLiteral","src":"20774:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"20777:77:17","nodeType":"YulLiteral","src":"20777:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"20767:6:17","nodeType":"YulIdentifier","src":"20767:6:17"},"nativeSrc":"20767:88:17","nodeType":"YulFunctionCall","src":"20767:88:17"},"nativeSrc":"20767:88:17","nodeType":"YulExpressionStatement","src":"20767:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20871:1:17","nodeType":"YulLiteral","src":"20871:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"20874:4:17","nodeType":"YulLiteral","src":"20874:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"20864:6:17","nodeType":"YulIdentifier","src":"20864:6:17"},"nativeSrc":"20864:15:17","nodeType":"YulFunctionCall","src":"20864:15:17"},"nativeSrc":"20864:15:17","nodeType":"YulExpressionStatement","src":"20864:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20895:1:17","nodeType":"YulLiteral","src":"20895:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"20898:4:17","nodeType":"YulLiteral","src":"20898:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"20888:6:17","nodeType":"YulIdentifier","src":"20888:6:17"},"nativeSrc":"20888:15:17","nodeType":"YulFunctionCall","src":"20888:15:17"},"nativeSrc":"20888:15:17","nodeType":"YulExpressionStatement","src":"20888:15:17"}]},"name":"panic_error_0x11","nativeSrc":"20729:180:17","nodeType":"YulFunctionDefinition","src":"20729:180:17"},{"body":{"nativeSrc":"20960:149:17","nodeType":"YulBlock","src":"20960:149:17","statements":[{"nativeSrc":"20970:25:17","nodeType":"YulAssignment","src":"20970:25:17","value":{"arguments":[{"name":"x","nativeSrc":"20993:1:17","nodeType":"YulIdentifier","src":"20993:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"20975:17:17","nodeType":"YulIdentifier","src":"20975:17:17"},"nativeSrc":"20975:20:17","nodeType":"YulFunctionCall","src":"20975:20:17"},"variableNames":[{"name":"x","nativeSrc":"20970:1:17","nodeType":"YulIdentifier","src":"20970:1:17"}]},{"nativeSrc":"21004:25:17","nodeType":"YulAssignment","src":"21004:25:17","value":{"arguments":[{"name":"y","nativeSrc":"21027:1:17","nodeType":"YulIdentifier","src":"21027:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"21009:17:17","nodeType":"YulIdentifier","src":"21009:17:17"},"nativeSrc":"21009:20:17","nodeType":"YulFunctionCall","src":"21009:20:17"},"variableNames":[{"name":"y","nativeSrc":"21004:1:17","nodeType":"YulIdentifier","src":"21004:1:17"}]},{"nativeSrc":"21038:17:17","nodeType":"YulAssignment","src":"21038:17:17","value":{"arguments":[{"name":"x","nativeSrc":"21050:1:17","nodeType":"YulIdentifier","src":"21050:1:17"},{"name":"y","nativeSrc":"21053:1:17","nodeType":"YulIdentifier","src":"21053:1:17"}],"functionName":{"name":"sub","nativeSrc":"21046:3:17","nodeType":"YulIdentifier","src":"21046:3:17"},"nativeSrc":"21046:9:17","nodeType":"YulFunctionCall","src":"21046:9:17"},"variableNames":[{"name":"diff","nativeSrc":"21038:4:17","nodeType":"YulIdentifier","src":"21038:4:17"}]},{"body":{"nativeSrc":"21080:22:17","nodeType":"YulBlock","src":"21080:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"21082:16:17","nodeType":"YulIdentifier","src":"21082:16:17"},"nativeSrc":"21082:18:17","nodeType":"YulFunctionCall","src":"21082:18:17"},"nativeSrc":"21082:18:17","nodeType":"YulExpressionStatement","src":"21082:18:17"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"21071:4:17","nodeType":"YulIdentifier","src":"21071:4:17"},{"name":"x","nativeSrc":"21077:1:17","nodeType":"YulIdentifier","src":"21077:1:17"}],"functionName":{"name":"gt","nativeSrc":"21068:2:17","nodeType":"YulIdentifier","src":"21068:2:17"},"nativeSrc":"21068:11:17","nodeType":"YulFunctionCall","src":"21068:11:17"},"nativeSrc":"21065:37:17","nodeType":"YulIf","src":"21065:37:17"}]},"name":"checked_sub_t_uint256","nativeSrc":"20915:194:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"20946:1:17","nodeType":"YulTypedName","src":"20946:1:17","type":""},{"name":"y","nativeSrc":"20949:1:17","nodeType":"YulTypedName","src":"20949:1:17","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"20955:4:17","nodeType":"YulTypedName","src":"20955:4:17","type":""}],"src":"20915:194:17"},{"body":{"nativeSrc":"21228:34:17","nodeType":"YulBlock","src":"21228:34:17","statements":[{"nativeSrc":"21238:18:17","nodeType":"YulAssignment","src":"21238:18:17","value":{"name":"pos","nativeSrc":"21253:3:17","nodeType":"YulIdentifier","src":"21253:3:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"21238:11:17","nodeType":"YulIdentifier","src":"21238:11:17"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21115:147:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21200:3:17","nodeType":"YulTypedName","src":"21200:3:17","type":""},{"name":"length","nativeSrc":"21205:6:17","nodeType":"YulTypedName","src":"21205:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"21216:11:17","nodeType":"YulTypedName","src":"21216:11:17","type":""}],"src":"21115:147:17"},{"body":{"nativeSrc":"21374:8:17","nodeType":"YulBlock","src":"21374:8:17","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nativeSrc":"21268:114:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"21366:6:17","nodeType":"YulTypedName","src":"21366:6:17","type":""}],"src":"21268:114:17"},{"body":{"nativeSrc":"21551:235:17","nodeType":"YulBlock","src":"21551:235:17","statements":[{"nativeSrc":"21561:90:17","nodeType":"YulAssignment","src":"21561:90:17","value":{"arguments":[{"name":"pos","nativeSrc":"21644:3:17","nodeType":"YulIdentifier","src":"21644:3:17"},{"kind":"number","nativeSrc":"21649:1:17","nodeType":"YulLiteral","src":"21649:1:17","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21568:75:17","nodeType":"YulIdentifier","src":"21568:75:17"},"nativeSrc":"21568:83:17","nodeType":"YulFunctionCall","src":"21568:83:17"},"variableNames":[{"name":"pos","nativeSrc":"21561:3:17","nodeType":"YulIdentifier","src":"21561:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"21749:3:17","nodeType":"YulIdentifier","src":"21749:3:17"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nativeSrc":"21660:88:17","nodeType":"YulIdentifier","src":"21660:88:17"},"nativeSrc":"21660:93:17","nodeType":"YulFunctionCall","src":"21660:93:17"},"nativeSrc":"21660:93:17","nodeType":"YulExpressionStatement","src":"21660:93:17"},{"nativeSrc":"21762:18:17","nodeType":"YulAssignment","src":"21762:18:17","value":{"arguments":[{"name":"pos","nativeSrc":"21773:3:17","nodeType":"YulIdentifier","src":"21773:3:17"},{"kind":"number","nativeSrc":"21778:1:17","nodeType":"YulLiteral","src":"21778:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"21769:3:17","nodeType":"YulIdentifier","src":"21769:3:17"},"nativeSrc":"21769:11:17","nodeType":"YulFunctionCall","src":"21769:11:17"},"variableNames":[{"name":"end","nativeSrc":"21762:3:17","nodeType":"YulIdentifier","src":"21762:3:17"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21388:398:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21539:3:17","nodeType":"YulTypedName","src":"21539:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21547:3:17","nodeType":"YulTypedName","src":"21547:3:17","type":""}],"src":"21388:398:17"},{"body":{"nativeSrc":"21980:191:17","nodeType":"YulBlock","src":"21980:191:17","statements":[{"nativeSrc":"21991:154:17","nodeType":"YulAssignment","src":"21991:154:17","value":{"arguments":[{"name":"pos","nativeSrc":"22141:3:17","nodeType":"YulIdentifier","src":"22141:3:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21998:141:17","nodeType":"YulIdentifier","src":"21998:141:17"},"nativeSrc":"21998:147:17","nodeType":"YulFunctionCall","src":"21998:147:17"},"variableNames":[{"name":"pos","nativeSrc":"21991:3:17","nodeType":"YulIdentifier","src":"21991:3:17"}]},{"nativeSrc":"22155:10:17","nodeType":"YulAssignment","src":"22155:10:17","value":{"name":"pos","nativeSrc":"22162:3:17","nodeType":"YulIdentifier","src":"22162:3:17"},"variableNames":[{"name":"end","nativeSrc":"22155:3:17","nodeType":"YulIdentifier","src":"22155:3:17"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"21792:379:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21967:3:17","nodeType":"YulTypedName","src":"21967:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21976:3:17","nodeType":"YulTypedName","src":"21976:3:17","type":""}],"src":"21792:379:17"},{"body":{"nativeSrc":"22283:57:17","nodeType":"YulBlock","src":"22283:57:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"22305:6:17","nodeType":"YulIdentifier","src":"22305:6:17"},{"kind":"number","nativeSrc":"22313:1:17","nodeType":"YulLiteral","src":"22313:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22301:3:17","nodeType":"YulIdentifier","src":"22301:3:17"},"nativeSrc":"22301:14:17","nodeType":"YulFunctionCall","src":"22301:14:17"},{"hexValue":"526566756e64206661696c6564","kind":"string","nativeSrc":"22317:15:17","nodeType":"YulLiteral","src":"22317:15:17","type":"","value":"Refund failed"}],"functionName":{"name":"mstore","nativeSrc":"22294:6:17","nodeType":"YulIdentifier","src":"22294:6:17"},"nativeSrc":"22294:39:17","nodeType":"YulFunctionCall","src":"22294:39:17"},"nativeSrc":"22294:39:17","nodeType":"YulExpressionStatement","src":"22294:39:17"}]},"name":"store_literal_in_memory_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e","nativeSrc":"22177:163:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"22275:6:17","nodeType":"YulTypedName","src":"22275:6:17","type":""}],"src":"22177:163:17"},{"body":{"nativeSrc":"22492:220:17","nodeType":"YulBlock","src":"22492:220:17","statements":[{"nativeSrc":"22502:74:17","nodeType":"YulAssignment","src":"22502:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"22568:3:17","nodeType":"YulIdentifier","src":"22568:3:17"},{"kind":"number","nativeSrc":"22573:2:17","nodeType":"YulLiteral","src":"22573:2:17","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"22509:58:17","nodeType":"YulIdentifier","src":"22509:58:17"},"nativeSrc":"22509:67:17","nodeType":"YulFunctionCall","src":"22509:67:17"},"variableNames":[{"name":"pos","nativeSrc":"22502:3:17","nodeType":"YulIdentifier","src":"22502:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"22674:3:17","nodeType":"YulIdentifier","src":"22674:3:17"}],"functionName":{"name":"store_literal_in_memory_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e","nativeSrc":"22585:88:17","nodeType":"YulIdentifier","src":"22585:88:17"},"nativeSrc":"22585:93:17","nodeType":"YulFunctionCall","src":"22585:93:17"},"nativeSrc":"22585:93:17","nodeType":"YulExpressionStatement","src":"22585:93:17"},{"nativeSrc":"22687:19:17","nodeType":"YulAssignment","src":"22687:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"22698:3:17","nodeType":"YulIdentifier","src":"22698:3:17"},{"kind":"number","nativeSrc":"22703:2:17","nodeType":"YulLiteral","src":"22703:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22694:3:17","nodeType":"YulIdentifier","src":"22694:3:17"},"nativeSrc":"22694:12:17","nodeType":"YulFunctionCall","src":"22694:12:17"},"variableNames":[{"name":"end","nativeSrc":"22687:3:17","nodeType":"YulIdentifier","src":"22687:3:17"}]}]},"name":"abi_encode_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e_to_t_string_memory_ptr_fromStack","nativeSrc":"22346:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"22480:3:17","nodeType":"YulTypedName","src":"22480:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"22488:3:17","nodeType":"YulTypedName","src":"22488:3:17","type":""}],"src":"22346:366:17"},{"body":{"nativeSrc":"22889:248:17","nodeType":"YulBlock","src":"22889:248:17","statements":[{"nativeSrc":"22899:26:17","nodeType":"YulAssignment","src":"22899:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"22911:9:17","nodeType":"YulIdentifier","src":"22911:9:17"},{"kind":"number","nativeSrc":"22922:2:17","nodeType":"YulLiteral","src":"22922:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22907:3:17","nodeType":"YulIdentifier","src":"22907:3:17"},"nativeSrc":"22907:18:17","nodeType":"YulFunctionCall","src":"22907:18:17"},"variableNames":[{"name":"tail","nativeSrc":"22899:4:17","nodeType":"YulIdentifier","src":"22899:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22946:9:17","nodeType":"YulIdentifier","src":"22946:9:17"},{"kind":"number","nativeSrc":"22957:1:17","nodeType":"YulLiteral","src":"22957:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22942:3:17","nodeType":"YulIdentifier","src":"22942:3:17"},"nativeSrc":"22942:17:17","nodeType":"YulFunctionCall","src":"22942:17:17"},{"arguments":[{"name":"tail","nativeSrc":"22965:4:17","nodeType":"YulIdentifier","src":"22965:4:17"},{"name":"headStart","nativeSrc":"22971:9:17","nodeType":"YulIdentifier","src":"22971:9:17"}],"functionName":{"name":"sub","nativeSrc":"22961:3:17","nodeType":"YulIdentifier","src":"22961:3:17"},"nativeSrc":"22961:20:17","nodeType":"YulFunctionCall","src":"22961:20:17"}],"functionName":{"name":"mstore","nativeSrc":"22935:6:17","nodeType":"YulIdentifier","src":"22935:6:17"},"nativeSrc":"22935:47:17","nodeType":"YulFunctionCall","src":"22935:47:17"},"nativeSrc":"22935:47:17","nodeType":"YulExpressionStatement","src":"22935:47:17"},{"nativeSrc":"22991:139:17","nodeType":"YulAssignment","src":"22991:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"23125:4:17","nodeType":"YulIdentifier","src":"23125:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e_to_t_string_memory_ptr_fromStack","nativeSrc":"22999:124:17","nodeType":"YulIdentifier","src":"22999:124:17"},"nativeSrc":"22999:131:17","nodeType":"YulFunctionCall","src":"22999:131:17"},"variableNames":[{"name":"tail","nativeSrc":"22991:4:17","nodeType":"YulIdentifier","src":"22991:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"22718:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22869:9:17","nodeType":"YulTypedName","src":"22869:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22884:4:17","nodeType":"YulTypedName","src":"22884:4:17","type":""}],"src":"22718:419:17"},{"body":{"nativeSrc":"23249:70:17","nodeType":"YulBlock","src":"23249:70:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"23271:6:17","nodeType":"YulIdentifier","src":"23271:6:17"},{"kind":"number","nativeSrc":"23279:1:17","nodeType":"YulLiteral","src":"23279:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"23267:3:17","nodeType":"YulIdentifier","src":"23267:3:17"},"nativeSrc":"23267:14:17","nodeType":"YulFunctionCall","src":"23267:14:17"},{"hexValue":"77726f6e6720616d6f756e742c2073656e6420302e3120455448","kind":"string","nativeSrc":"23283:28:17","nodeType":"YulLiteral","src":"23283:28:17","type":"","value":"wrong amount, send 0.1 ETH"}],"functionName":{"name":"mstore","nativeSrc":"23260:6:17","nodeType":"YulIdentifier","src":"23260:6:17"},"nativeSrc":"23260:52:17","nodeType":"YulFunctionCall","src":"23260:52:17"},"nativeSrc":"23260:52:17","nodeType":"YulExpressionStatement","src":"23260:52:17"}]},"name":"store_literal_in_memory_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e","nativeSrc":"23143:176:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"23241:6:17","nodeType":"YulTypedName","src":"23241:6:17","type":""}],"src":"23143:176:17"},{"body":{"nativeSrc":"23471:220:17","nodeType":"YulBlock","src":"23471:220:17","statements":[{"nativeSrc":"23481:74:17","nodeType":"YulAssignment","src":"23481:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"23547:3:17","nodeType":"YulIdentifier","src":"23547:3:17"},{"kind":"number","nativeSrc":"23552:2:17","nodeType":"YulLiteral","src":"23552:2:17","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"23488:58:17","nodeType":"YulIdentifier","src":"23488:58:17"},"nativeSrc":"23488:67:17","nodeType":"YulFunctionCall","src":"23488:67:17"},"variableNames":[{"name":"pos","nativeSrc":"23481:3:17","nodeType":"YulIdentifier","src":"23481:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"23653:3:17","nodeType":"YulIdentifier","src":"23653:3:17"}],"functionName":{"name":"store_literal_in_memory_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e","nativeSrc":"23564:88:17","nodeType":"YulIdentifier","src":"23564:88:17"},"nativeSrc":"23564:93:17","nodeType":"YulFunctionCall","src":"23564:93:17"},"nativeSrc":"23564:93:17","nodeType":"YulExpressionStatement","src":"23564:93:17"},{"nativeSrc":"23666:19:17","nodeType":"YulAssignment","src":"23666:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"23677:3:17","nodeType":"YulIdentifier","src":"23677:3:17"},{"kind":"number","nativeSrc":"23682:2:17","nodeType":"YulLiteral","src":"23682:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23673:3:17","nodeType":"YulIdentifier","src":"23673:3:17"},"nativeSrc":"23673:12:17","nodeType":"YulFunctionCall","src":"23673:12:17"},"variableNames":[{"name":"end","nativeSrc":"23666:3:17","nodeType":"YulIdentifier","src":"23666:3:17"}]}]},"name":"abi_encode_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e_to_t_string_memory_ptr_fromStack","nativeSrc":"23325:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"23459:3:17","nodeType":"YulTypedName","src":"23459:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"23467:3:17","nodeType":"YulTypedName","src":"23467:3:17","type":""}],"src":"23325:366:17"},{"body":{"nativeSrc":"23868:248:17","nodeType":"YulBlock","src":"23868:248:17","statements":[{"nativeSrc":"23878:26:17","nodeType":"YulAssignment","src":"23878:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"23890:9:17","nodeType":"YulIdentifier","src":"23890:9:17"},{"kind":"number","nativeSrc":"23901:2:17","nodeType":"YulLiteral","src":"23901:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23886:3:17","nodeType":"YulIdentifier","src":"23886:3:17"},"nativeSrc":"23886:18:17","nodeType":"YulFunctionCall","src":"23886:18:17"},"variableNames":[{"name":"tail","nativeSrc":"23878:4:17","nodeType":"YulIdentifier","src":"23878:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23925:9:17","nodeType":"YulIdentifier","src":"23925:9:17"},{"kind":"number","nativeSrc":"23936:1:17","nodeType":"YulLiteral","src":"23936:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"23921:3:17","nodeType":"YulIdentifier","src":"23921:3:17"},"nativeSrc":"23921:17:17","nodeType":"YulFunctionCall","src":"23921:17:17"},{"arguments":[{"name":"tail","nativeSrc":"23944:4:17","nodeType":"YulIdentifier","src":"23944:4:17"},{"name":"headStart","nativeSrc":"23950:9:17","nodeType":"YulIdentifier","src":"23950:9:17"}],"functionName":{"name":"sub","nativeSrc":"23940:3:17","nodeType":"YulIdentifier","src":"23940:3:17"},"nativeSrc":"23940:20:17","nodeType":"YulFunctionCall","src":"23940:20:17"}],"functionName":{"name":"mstore","nativeSrc":"23914:6:17","nodeType":"YulIdentifier","src":"23914:6:17"},"nativeSrc":"23914:47:17","nodeType":"YulFunctionCall","src":"23914:47:17"},"nativeSrc":"23914:47:17","nodeType":"YulExpressionStatement","src":"23914:47:17"},{"nativeSrc":"23970:139:17","nodeType":"YulAssignment","src":"23970:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"24104:4:17","nodeType":"YulIdentifier","src":"24104:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e_to_t_string_memory_ptr_fromStack","nativeSrc":"23978:124:17","nodeType":"YulIdentifier","src":"23978:124:17"},"nativeSrc":"23978:131:17","nodeType":"YulFunctionCall","src":"23978:131:17"},"variableNames":[{"name":"tail","nativeSrc":"23970:4:17","nodeType":"YulIdentifier","src":"23970:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"23697:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23848:9:17","nodeType":"YulTypedName","src":"23848:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23863:4:17","nodeType":"YulTypedName","src":"23863:4:17","type":""}],"src":"23697:419:17"},{"body":{"nativeSrc":"24228:126:17","nodeType":"YulBlock","src":"24228:126:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"24250:6:17","nodeType":"YulIdentifier","src":"24250:6:17"},{"kind":"number","nativeSrc":"24258:1:17","nodeType":"YulLiteral","src":"24258:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"24246:3:17","nodeType":"YulIdentifier","src":"24246:3:17"},"nativeSrc":"24246:14:17","nodeType":"YulFunctionCall","src":"24246:14:17"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nativeSrc":"24262:34:17","nodeType":"YulLiteral","src":"24262:34:17","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nativeSrc":"24239:6:17","nodeType":"YulIdentifier","src":"24239:6:17"},"nativeSrc":"24239:58:17","nodeType":"YulFunctionCall","src":"24239:58:17"},"nativeSrc":"24239:58:17","nodeType":"YulExpressionStatement","src":"24239:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"24318:6:17","nodeType":"YulIdentifier","src":"24318:6:17"},{"kind":"number","nativeSrc":"24326:2:17","nodeType":"YulLiteral","src":"24326:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24314:3:17","nodeType":"YulIdentifier","src":"24314:3:17"},"nativeSrc":"24314:15:17","nodeType":"YulFunctionCall","src":"24314:15:17"},{"hexValue":"72206f7220617070726f766564","kind":"string","nativeSrc":"24331:15:17","nodeType":"YulLiteral","src":"24331:15:17","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nativeSrc":"24307:6:17","nodeType":"YulIdentifier","src":"24307:6:17"},"nativeSrc":"24307:40:17","nodeType":"YulFunctionCall","src":"24307:40:17"},"nativeSrc":"24307:40:17","nodeType":"YulExpressionStatement","src":"24307:40:17"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"24122:232:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"24220:6:17","nodeType":"YulTypedName","src":"24220:6:17","type":""}],"src":"24122:232:17"},{"body":{"nativeSrc":"24506:220:17","nodeType":"YulBlock","src":"24506:220:17","statements":[{"nativeSrc":"24516:74:17","nodeType":"YulAssignment","src":"24516:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"24582:3:17","nodeType":"YulIdentifier","src":"24582:3:17"},{"kind":"number","nativeSrc":"24587:2:17","nodeType":"YulLiteral","src":"24587:2:17","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"24523:58:17","nodeType":"YulIdentifier","src":"24523:58:17"},"nativeSrc":"24523:67:17","nodeType":"YulFunctionCall","src":"24523:67:17"},"variableNames":[{"name":"pos","nativeSrc":"24516:3:17","nodeType":"YulIdentifier","src":"24516:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"24688:3:17","nodeType":"YulIdentifier","src":"24688:3:17"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"24599:88:17","nodeType":"YulIdentifier","src":"24599:88:17"},"nativeSrc":"24599:93:17","nodeType":"YulFunctionCall","src":"24599:93:17"},"nativeSrc":"24599:93:17","nodeType":"YulExpressionStatement","src":"24599:93:17"},{"nativeSrc":"24701:19:17","nodeType":"YulAssignment","src":"24701:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"24712:3:17","nodeType":"YulIdentifier","src":"24712:3:17"},{"kind":"number","nativeSrc":"24717:2:17","nodeType":"YulLiteral","src":"24717:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24708:3:17","nodeType":"YulIdentifier","src":"24708:3:17"},"nativeSrc":"24708:12:17","nodeType":"YulFunctionCall","src":"24708:12:17"},"variableNames":[{"name":"end","nativeSrc":"24701:3:17","nodeType":"YulIdentifier","src":"24701:3:17"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"24360:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"24494:3:17","nodeType":"YulTypedName","src":"24494:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"24502:3:17","nodeType":"YulTypedName","src":"24502:3:17","type":""}],"src":"24360:366:17"},{"body":{"nativeSrc":"24903:248:17","nodeType":"YulBlock","src":"24903:248:17","statements":[{"nativeSrc":"24913:26:17","nodeType":"YulAssignment","src":"24913:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"24925:9:17","nodeType":"YulIdentifier","src":"24925:9:17"},{"kind":"number","nativeSrc":"24936:2:17","nodeType":"YulLiteral","src":"24936:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24921:3:17","nodeType":"YulIdentifier","src":"24921:3:17"},"nativeSrc":"24921:18:17","nodeType":"YulFunctionCall","src":"24921:18:17"},"variableNames":[{"name":"tail","nativeSrc":"24913:4:17","nodeType":"YulIdentifier","src":"24913:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24960:9:17","nodeType":"YulIdentifier","src":"24960:9:17"},{"kind":"number","nativeSrc":"24971:1:17","nodeType":"YulLiteral","src":"24971:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"24956:3:17","nodeType":"YulIdentifier","src":"24956:3:17"},"nativeSrc":"24956:17:17","nodeType":"YulFunctionCall","src":"24956:17:17"},{"arguments":[{"name":"tail","nativeSrc":"24979:4:17","nodeType":"YulIdentifier","src":"24979:4:17"},{"name":"headStart","nativeSrc":"24985:9:17","nodeType":"YulIdentifier","src":"24985:9:17"}],"functionName":{"name":"sub","nativeSrc":"24975:3:17","nodeType":"YulIdentifier","src":"24975:3:17"},"nativeSrc":"24975:20:17","nodeType":"YulFunctionCall","src":"24975:20:17"}],"functionName":{"name":"mstore","nativeSrc":"24949:6:17","nodeType":"YulIdentifier","src":"24949:6:17"},"nativeSrc":"24949:47:17","nodeType":"YulFunctionCall","src":"24949:47:17"},"nativeSrc":"24949:47:17","nodeType":"YulExpressionStatement","src":"24949:47:17"},{"nativeSrc":"25005:139:17","nodeType":"YulAssignment","src":"25005:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"25139:4:17","nodeType":"YulIdentifier","src":"25139:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"25013:124:17","nodeType":"YulIdentifier","src":"25013:124:17"},"nativeSrc":"25013:131:17","nodeType":"YulFunctionCall","src":"25013:131:17"},"variableNames":[{"name":"tail","nativeSrc":"25005:4:17","nodeType":"YulIdentifier","src":"25005:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"24732:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24883:9:17","nodeType":"YulTypedName","src":"24883:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24898:4:17","nodeType":"YulTypedName","src":"24898:4:17","type":""}],"src":"24732:419:17"},{"body":{"nativeSrc":"25263:64:17","nodeType":"YulBlock","src":"25263:64:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"25285:6:17","nodeType":"YulIdentifier","src":"25285:6:17"},{"kind":"number","nativeSrc":"25293:1:17","nodeType":"YulLiteral","src":"25293:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"25281:3:17","nodeType":"YulIdentifier","src":"25281:3:17"},"nativeSrc":"25281:14:17","nodeType":"YulFunctionCall","src":"25281:14:17"},{"hexValue":"6e6f2066756e647320746f207769746864726177","kind":"string","nativeSrc":"25297:22:17","nodeType":"YulLiteral","src":"25297:22:17","type":"","value":"no funds to withdraw"}],"functionName":{"name":"mstore","nativeSrc":"25274:6:17","nodeType":"YulIdentifier","src":"25274:6:17"},"nativeSrc":"25274:46:17","nodeType":"YulFunctionCall","src":"25274:46:17"},"nativeSrc":"25274:46:17","nodeType":"YulExpressionStatement","src":"25274:46:17"}]},"name":"store_literal_in_memory_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932","nativeSrc":"25157:170:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"25255:6:17","nodeType":"YulTypedName","src":"25255:6:17","type":""}],"src":"25157:170:17"},{"body":{"nativeSrc":"25479:220:17","nodeType":"YulBlock","src":"25479:220:17","statements":[{"nativeSrc":"25489:74:17","nodeType":"YulAssignment","src":"25489:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"25555:3:17","nodeType":"YulIdentifier","src":"25555:3:17"},{"kind":"number","nativeSrc":"25560:2:17","nodeType":"YulLiteral","src":"25560:2:17","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"25496:58:17","nodeType":"YulIdentifier","src":"25496:58:17"},"nativeSrc":"25496:67:17","nodeType":"YulFunctionCall","src":"25496:67:17"},"variableNames":[{"name":"pos","nativeSrc":"25489:3:17","nodeType":"YulIdentifier","src":"25489:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"25661:3:17","nodeType":"YulIdentifier","src":"25661:3:17"}],"functionName":{"name":"store_literal_in_memory_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932","nativeSrc":"25572:88:17","nodeType":"YulIdentifier","src":"25572:88:17"},"nativeSrc":"25572:93:17","nodeType":"YulFunctionCall","src":"25572:93:17"},"nativeSrc":"25572:93:17","nodeType":"YulExpressionStatement","src":"25572:93:17"},{"nativeSrc":"25674:19:17","nodeType":"YulAssignment","src":"25674:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"25685:3:17","nodeType":"YulIdentifier","src":"25685:3:17"},{"kind":"number","nativeSrc":"25690:2:17","nodeType":"YulLiteral","src":"25690:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25681:3:17","nodeType":"YulIdentifier","src":"25681:3:17"},"nativeSrc":"25681:12:17","nodeType":"YulFunctionCall","src":"25681:12:17"},"variableNames":[{"name":"end","nativeSrc":"25674:3:17","nodeType":"YulIdentifier","src":"25674:3:17"}]}]},"name":"abi_encode_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932_to_t_string_memory_ptr_fromStack","nativeSrc":"25333:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"25467:3:17","nodeType":"YulTypedName","src":"25467:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"25475:3:17","nodeType":"YulTypedName","src":"25475:3:17","type":""}],"src":"25333:366:17"},{"body":{"nativeSrc":"25876:248:17","nodeType":"YulBlock","src":"25876:248:17","statements":[{"nativeSrc":"25886:26:17","nodeType":"YulAssignment","src":"25886:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"25898:9:17","nodeType":"YulIdentifier","src":"25898:9:17"},{"kind":"number","nativeSrc":"25909:2:17","nodeType":"YulLiteral","src":"25909:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25894:3:17","nodeType":"YulIdentifier","src":"25894:3:17"},"nativeSrc":"25894:18:17","nodeType":"YulFunctionCall","src":"25894:18:17"},"variableNames":[{"name":"tail","nativeSrc":"25886:4:17","nodeType":"YulIdentifier","src":"25886:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25933:9:17","nodeType":"YulIdentifier","src":"25933:9:17"},{"kind":"number","nativeSrc":"25944:1:17","nodeType":"YulLiteral","src":"25944:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"25929:3:17","nodeType":"YulIdentifier","src":"25929:3:17"},"nativeSrc":"25929:17:17","nodeType":"YulFunctionCall","src":"25929:17:17"},{"arguments":[{"name":"tail","nativeSrc":"25952:4:17","nodeType":"YulIdentifier","src":"25952:4:17"},{"name":"headStart","nativeSrc":"25958:9:17","nodeType":"YulIdentifier","src":"25958:9:17"}],"functionName":{"name":"sub","nativeSrc":"25948:3:17","nodeType":"YulIdentifier","src":"25948:3:17"},"nativeSrc":"25948:20:17","nodeType":"YulFunctionCall","src":"25948:20:17"}],"functionName":{"name":"mstore","nativeSrc":"25922:6:17","nodeType":"YulIdentifier","src":"25922:6:17"},"nativeSrc":"25922:47:17","nodeType":"YulFunctionCall","src":"25922:47:17"},"nativeSrc":"25922:47:17","nodeType":"YulExpressionStatement","src":"25922:47:17"},{"nativeSrc":"25978:139:17","nodeType":"YulAssignment","src":"25978:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"26112:4:17","nodeType":"YulIdentifier","src":"26112:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932_to_t_string_memory_ptr_fromStack","nativeSrc":"25986:124:17","nodeType":"YulIdentifier","src":"25986:124:17"},"nativeSrc":"25986:131:17","nodeType":"YulFunctionCall","src":"25986:131:17"},"variableNames":[{"name":"tail","nativeSrc":"25978:4:17","nodeType":"YulIdentifier","src":"25978:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25705:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25856:9:17","nodeType":"YulTypedName","src":"25856:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25871:4:17","nodeType":"YulTypedName","src":"25871:4:17","type":""}],"src":"25705:419:17"},{"body":{"nativeSrc":"26236:64:17","nodeType":"YulBlock","src":"26236:64:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"26258:6:17","nodeType":"YulIdentifier","src":"26258:6:17"},{"kind":"number","nativeSrc":"26266:1:17","nodeType":"YulLiteral","src":"26266:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"26254:3:17","nodeType":"YulIdentifier","src":"26254:3:17"},"nativeSrc":"26254:14:17","nodeType":"YulFunctionCall","src":"26254:14:17"},{"hexValue":"66756e64207472616e73666572206661696c6564","kind":"string","nativeSrc":"26270:22:17","nodeType":"YulLiteral","src":"26270:22:17","type":"","value":"fund transfer failed"}],"functionName":{"name":"mstore","nativeSrc":"26247:6:17","nodeType":"YulIdentifier","src":"26247:6:17"},"nativeSrc":"26247:46:17","nodeType":"YulFunctionCall","src":"26247:46:17"},"nativeSrc":"26247:46:17","nodeType":"YulExpressionStatement","src":"26247:46:17"}]},"name":"store_literal_in_memory_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d","nativeSrc":"26130:170:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"26228:6:17","nodeType":"YulTypedName","src":"26228:6:17","type":""}],"src":"26130:170:17"},{"body":{"nativeSrc":"26452:220:17","nodeType":"YulBlock","src":"26452:220:17","statements":[{"nativeSrc":"26462:74:17","nodeType":"YulAssignment","src":"26462:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"26528:3:17","nodeType":"YulIdentifier","src":"26528:3:17"},{"kind":"number","nativeSrc":"26533:2:17","nodeType":"YulLiteral","src":"26533:2:17","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"26469:58:17","nodeType":"YulIdentifier","src":"26469:58:17"},"nativeSrc":"26469:67:17","nodeType":"YulFunctionCall","src":"26469:67:17"},"variableNames":[{"name":"pos","nativeSrc":"26462:3:17","nodeType":"YulIdentifier","src":"26462:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"26634:3:17","nodeType":"YulIdentifier","src":"26634:3:17"}],"functionName":{"name":"store_literal_in_memory_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d","nativeSrc":"26545:88:17","nodeType":"YulIdentifier","src":"26545:88:17"},"nativeSrc":"26545:93:17","nodeType":"YulFunctionCall","src":"26545:93:17"},"nativeSrc":"26545:93:17","nodeType":"YulExpressionStatement","src":"26545:93:17"},{"nativeSrc":"26647:19:17","nodeType":"YulAssignment","src":"26647:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"26658:3:17","nodeType":"YulIdentifier","src":"26658:3:17"},{"kind":"number","nativeSrc":"26663:2:17","nodeType":"YulLiteral","src":"26663:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26654:3:17","nodeType":"YulIdentifier","src":"26654:3:17"},"nativeSrc":"26654:12:17","nodeType":"YulFunctionCall","src":"26654:12:17"},"variableNames":[{"name":"end","nativeSrc":"26647:3:17","nodeType":"YulIdentifier","src":"26647:3:17"}]}]},"name":"abi_encode_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d_to_t_string_memory_ptr_fromStack","nativeSrc":"26306:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"26440:3:17","nodeType":"YulTypedName","src":"26440:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"26448:3:17","nodeType":"YulTypedName","src":"26448:3:17","type":""}],"src":"26306:366:17"},{"body":{"nativeSrc":"26849:248:17","nodeType":"YulBlock","src":"26849:248:17","statements":[{"nativeSrc":"26859:26:17","nodeType":"YulAssignment","src":"26859:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"26871:9:17","nodeType":"YulIdentifier","src":"26871:9:17"},{"kind":"number","nativeSrc":"26882:2:17","nodeType":"YulLiteral","src":"26882:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26867:3:17","nodeType":"YulIdentifier","src":"26867:3:17"},"nativeSrc":"26867:18:17","nodeType":"YulFunctionCall","src":"26867:18:17"},"variableNames":[{"name":"tail","nativeSrc":"26859:4:17","nodeType":"YulIdentifier","src":"26859:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26906:9:17","nodeType":"YulIdentifier","src":"26906:9:17"},{"kind":"number","nativeSrc":"26917:1:17","nodeType":"YulLiteral","src":"26917:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"26902:3:17","nodeType":"YulIdentifier","src":"26902:3:17"},"nativeSrc":"26902:17:17","nodeType":"YulFunctionCall","src":"26902:17:17"},{"arguments":[{"name":"tail","nativeSrc":"26925:4:17","nodeType":"YulIdentifier","src":"26925:4:17"},{"name":"headStart","nativeSrc":"26931:9:17","nodeType":"YulIdentifier","src":"26931:9:17"}],"functionName":{"name":"sub","nativeSrc":"26921:3:17","nodeType":"YulIdentifier","src":"26921:3:17"},"nativeSrc":"26921:20:17","nodeType":"YulFunctionCall","src":"26921:20:17"}],"functionName":{"name":"mstore","nativeSrc":"26895:6:17","nodeType":"YulIdentifier","src":"26895:6:17"},"nativeSrc":"26895:47:17","nodeType":"YulFunctionCall","src":"26895:47:17"},"nativeSrc":"26895:47:17","nodeType":"YulExpressionStatement","src":"26895:47:17"},{"nativeSrc":"26951:139:17","nodeType":"YulAssignment","src":"26951:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"27085:4:17","nodeType":"YulIdentifier","src":"27085:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d_to_t_string_memory_ptr_fromStack","nativeSrc":"26959:124:17","nodeType":"YulIdentifier","src":"26959:124:17"},"nativeSrc":"26959:131:17","nodeType":"YulFunctionCall","src":"26959:131:17"},"variableNames":[{"name":"tail","nativeSrc":"26951:4:17","nodeType":"YulIdentifier","src":"26951:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"26678:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26829:9:17","nodeType":"YulTypedName","src":"26829:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26844:4:17","nodeType":"YulTypedName","src":"26844:4:17","type":""}],"src":"26678:419:17"},{"body":{"nativeSrc":"27151:362:17","nodeType":"YulBlock","src":"27151:362:17","statements":[{"nativeSrc":"27161:25:17","nodeType":"YulAssignment","src":"27161:25:17","value":{"arguments":[{"name":"x","nativeSrc":"27184:1:17","nodeType":"YulIdentifier","src":"27184:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27166:17:17","nodeType":"YulIdentifier","src":"27166:17:17"},"nativeSrc":"27166:20:17","nodeType":"YulFunctionCall","src":"27166:20:17"},"variableNames":[{"name":"x","nativeSrc":"27161:1:17","nodeType":"YulIdentifier","src":"27161:1:17"}]},{"nativeSrc":"27195:25:17","nodeType":"YulAssignment","src":"27195:25:17","value":{"arguments":[{"name":"y","nativeSrc":"27218:1:17","nodeType":"YulIdentifier","src":"27218:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27200:17:17","nodeType":"YulIdentifier","src":"27200:17:17"},"nativeSrc":"27200:20:17","nodeType":"YulFunctionCall","src":"27200:20:17"},"variableNames":[{"name":"y","nativeSrc":"27195:1:17","nodeType":"YulIdentifier","src":"27195:1:17"}]},{"nativeSrc":"27229:28:17","nodeType":"YulVariableDeclaration","src":"27229:28:17","value":{"arguments":[{"name":"x","nativeSrc":"27252:1:17","nodeType":"YulIdentifier","src":"27252:1:17"},{"name":"y","nativeSrc":"27255:1:17","nodeType":"YulIdentifier","src":"27255:1:17"}],"functionName":{"name":"mul","nativeSrc":"27248:3:17","nodeType":"YulIdentifier","src":"27248:3:17"},"nativeSrc":"27248:9:17","nodeType":"YulFunctionCall","src":"27248:9:17"},"variables":[{"name":"product_raw","nativeSrc":"27233:11:17","nodeType":"YulTypedName","src":"27233:11:17","type":""}]},{"nativeSrc":"27266:41:17","nodeType":"YulAssignment","src":"27266:41:17","value":{"arguments":[{"name":"product_raw","nativeSrc":"27295:11:17","nodeType":"YulIdentifier","src":"27295:11:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27277:17:17","nodeType":"YulIdentifier","src":"27277:17:17"},"nativeSrc":"27277:30:17","nodeType":"YulFunctionCall","src":"27277:30:17"},"variableNames":[{"name":"product","nativeSrc":"27266:7:17","nodeType":"YulIdentifier","src":"27266:7:17"}]},{"body":{"nativeSrc":"27484:22:17","nodeType":"YulBlock","src":"27484:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"27486:16:17","nodeType":"YulIdentifier","src":"27486:16:17"},"nativeSrc":"27486:18:17","nodeType":"YulFunctionCall","src":"27486:18:17"},"nativeSrc":"27486:18:17","nodeType":"YulExpressionStatement","src":"27486:18:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"27417:1:17","nodeType":"YulIdentifier","src":"27417:1:17"}],"functionName":{"name":"iszero","nativeSrc":"27410:6:17","nodeType":"YulIdentifier","src":"27410:6:17"},"nativeSrc":"27410:9:17","nodeType":"YulFunctionCall","src":"27410:9:17"},{"arguments":[{"name":"y","nativeSrc":"27440:1:17","nodeType":"YulIdentifier","src":"27440:1:17"},{"arguments":[{"name":"product","nativeSrc":"27447:7:17","nodeType":"YulIdentifier","src":"27447:7:17"},{"name":"x","nativeSrc":"27456:1:17","nodeType":"YulIdentifier","src":"27456:1:17"}],"functionName":{"name":"div","nativeSrc":"27443:3:17","nodeType":"YulIdentifier","src":"27443:3:17"},"nativeSrc":"27443:15:17","nodeType":"YulFunctionCall","src":"27443:15:17"}],"functionName":{"name":"eq","nativeSrc":"27437:2:17","nodeType":"YulIdentifier","src":"27437:2:17"},"nativeSrc":"27437:22:17","nodeType":"YulFunctionCall","src":"27437:22:17"}],"functionName":{"name":"or","nativeSrc":"27390:2:17","nodeType":"YulIdentifier","src":"27390:2:17"},"nativeSrc":"27390:83:17","nodeType":"YulFunctionCall","src":"27390:83:17"}],"functionName":{"name":"iszero","nativeSrc":"27370:6:17","nodeType":"YulIdentifier","src":"27370:6:17"},"nativeSrc":"27370:113:17","nodeType":"YulFunctionCall","src":"27370:113:17"},"nativeSrc":"27367:139:17","nodeType":"YulIf","src":"27367:139:17"}]},"name":"checked_mul_t_uint256","nativeSrc":"27103:410:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"27134:1:17","nodeType":"YulTypedName","src":"27134:1:17","type":""},{"name":"y","nativeSrc":"27137:1:17","nodeType":"YulTypedName","src":"27137:1:17","type":""}],"returnVariables":[{"name":"product","nativeSrc":"27143:7:17","nodeType":"YulTypedName","src":"27143:7:17","type":""}],"src":"27103:410:17"},{"body":{"nativeSrc":"27547:152:17","nodeType":"YulBlock","src":"27547:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"27564:1:17","nodeType":"YulLiteral","src":"27564:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"27567:77:17","nodeType":"YulLiteral","src":"27567:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"27557:6:17","nodeType":"YulIdentifier","src":"27557:6:17"},"nativeSrc":"27557:88:17","nodeType":"YulFunctionCall","src":"27557:88:17"},"nativeSrc":"27557:88:17","nodeType":"YulExpressionStatement","src":"27557:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"27661:1:17","nodeType":"YulLiteral","src":"27661:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"27664:4:17","nodeType":"YulLiteral","src":"27664:4:17","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"27654:6:17","nodeType":"YulIdentifier","src":"27654:6:17"},"nativeSrc":"27654:15:17","nodeType":"YulFunctionCall","src":"27654:15:17"},"nativeSrc":"27654:15:17","nodeType":"YulExpressionStatement","src":"27654:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"27685:1:17","nodeType":"YulLiteral","src":"27685:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"27688:4:17","nodeType":"YulLiteral","src":"27688:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"27678:6:17","nodeType":"YulIdentifier","src":"27678:6:17"},"nativeSrc":"27678:15:17","nodeType":"YulFunctionCall","src":"27678:15:17"},"nativeSrc":"27678:15:17","nodeType":"YulExpressionStatement","src":"27678:15:17"}]},"name":"panic_error_0x12","nativeSrc":"27519:180:17","nodeType":"YulFunctionDefinition","src":"27519:180:17"},{"body":{"nativeSrc":"27747:143:17","nodeType":"YulBlock","src":"27747:143:17","statements":[{"nativeSrc":"27757:25:17","nodeType":"YulAssignment","src":"27757:25:17","value":{"arguments":[{"name":"x","nativeSrc":"27780:1:17","nodeType":"YulIdentifier","src":"27780:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27762:17:17","nodeType":"YulIdentifier","src":"27762:17:17"},"nativeSrc":"27762:20:17","nodeType":"YulFunctionCall","src":"27762:20:17"},"variableNames":[{"name":"x","nativeSrc":"27757:1:17","nodeType":"YulIdentifier","src":"27757:1:17"}]},{"nativeSrc":"27791:25:17","nodeType":"YulAssignment","src":"27791:25:17","value":{"arguments":[{"name":"y","nativeSrc":"27814:1:17","nodeType":"YulIdentifier","src":"27814:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27796:17:17","nodeType":"YulIdentifier","src":"27796:17:17"},"nativeSrc":"27796:20:17","nodeType":"YulFunctionCall","src":"27796:20:17"},"variableNames":[{"name":"y","nativeSrc":"27791:1:17","nodeType":"YulIdentifier","src":"27791:1:17"}]},{"body":{"nativeSrc":"27838:22:17","nodeType":"YulBlock","src":"27838:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"27840:16:17","nodeType":"YulIdentifier","src":"27840:16:17"},"nativeSrc":"27840:18:17","nodeType":"YulFunctionCall","src":"27840:18:17"},"nativeSrc":"27840:18:17","nodeType":"YulExpressionStatement","src":"27840:18:17"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"27835:1:17","nodeType":"YulIdentifier","src":"27835:1:17"}],"functionName":{"name":"iszero","nativeSrc":"27828:6:17","nodeType":"YulIdentifier","src":"27828:6:17"},"nativeSrc":"27828:9:17","nodeType":"YulFunctionCall","src":"27828:9:17"},"nativeSrc":"27825:35:17","nodeType":"YulIf","src":"27825:35:17"},{"nativeSrc":"27870:14:17","nodeType":"YulAssignment","src":"27870:14:17","value":{"arguments":[{"name":"x","nativeSrc":"27879:1:17","nodeType":"YulIdentifier","src":"27879:1:17"},{"name":"y","nativeSrc":"27882:1:17","nodeType":"YulIdentifier","src":"27882:1:17"}],"functionName":{"name":"div","nativeSrc":"27875:3:17","nodeType":"YulIdentifier","src":"27875:3:17"},"nativeSrc":"27875:9:17","nodeType":"YulFunctionCall","src":"27875:9:17"},"variableNames":[{"name":"r","nativeSrc":"27870:1:17","nodeType":"YulIdentifier","src":"27870:1:17"}]}]},"name":"checked_div_t_uint256","nativeSrc":"27705:185:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"27736:1:17","nodeType":"YulTypedName","src":"27736:1:17","type":""},{"name":"y","nativeSrc":"27739:1:17","nodeType":"YulTypedName","src":"27739:1:17","type":""}],"returnVariables":[{"name":"r","nativeSrc":"27745:1:17","nodeType":"YulTypedName","src":"27745:1:17","type":""}],"src":"27705:185:17"},{"body":{"nativeSrc":"28002:71:17","nodeType":"YulBlock","src":"28002:71:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"28024:6:17","nodeType":"YulIdentifier","src":"28024:6:17"},{"kind":"number","nativeSrc":"28032:1:17","nodeType":"YulLiteral","src":"28032:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"28020:3:17","nodeType":"YulIdentifier","src":"28020:3:17"},"nativeSrc":"28020:14:17","nodeType":"YulFunctionCall","src":"28020:14:17"},{"hexValue":"77726f6e6720616d6f756e742c2073656e6420302e303520455448","kind":"string","nativeSrc":"28036:29:17","nodeType":"YulLiteral","src":"28036:29:17","type":"","value":"wrong amount, send 0.05 ETH"}],"functionName":{"name":"mstore","nativeSrc":"28013:6:17","nodeType":"YulIdentifier","src":"28013:6:17"},"nativeSrc":"28013:53:17","nodeType":"YulFunctionCall","src":"28013:53:17"},"nativeSrc":"28013:53:17","nodeType":"YulExpressionStatement","src":"28013:53:17"}]},"name":"store_literal_in_memory_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a","nativeSrc":"27896:177:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"27994:6:17","nodeType":"YulTypedName","src":"27994:6:17","type":""}],"src":"27896:177:17"},{"body":{"nativeSrc":"28225:220:17","nodeType":"YulBlock","src":"28225:220:17","statements":[{"nativeSrc":"28235:74:17","nodeType":"YulAssignment","src":"28235:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"28301:3:17","nodeType":"YulIdentifier","src":"28301:3:17"},{"kind":"number","nativeSrc":"28306:2:17","nodeType":"YulLiteral","src":"28306:2:17","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"28242:58:17","nodeType":"YulIdentifier","src":"28242:58:17"},"nativeSrc":"28242:67:17","nodeType":"YulFunctionCall","src":"28242:67:17"},"variableNames":[{"name":"pos","nativeSrc":"28235:3:17","nodeType":"YulIdentifier","src":"28235:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"28407:3:17","nodeType":"YulIdentifier","src":"28407:3:17"}],"functionName":{"name":"store_literal_in_memory_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a","nativeSrc":"28318:88:17","nodeType":"YulIdentifier","src":"28318:88:17"},"nativeSrc":"28318:93:17","nodeType":"YulFunctionCall","src":"28318:93:17"},"nativeSrc":"28318:93:17","nodeType":"YulExpressionStatement","src":"28318:93:17"},{"nativeSrc":"28420:19:17","nodeType":"YulAssignment","src":"28420:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"28431:3:17","nodeType":"YulIdentifier","src":"28431:3:17"},{"kind":"number","nativeSrc":"28436:2:17","nodeType":"YulLiteral","src":"28436:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28427:3:17","nodeType":"YulIdentifier","src":"28427:3:17"},"nativeSrc":"28427:12:17","nodeType":"YulFunctionCall","src":"28427:12:17"},"variableNames":[{"name":"end","nativeSrc":"28420:3:17","nodeType":"YulIdentifier","src":"28420:3:17"}]}]},"name":"abi_encode_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a_to_t_string_memory_ptr_fromStack","nativeSrc":"28079:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"28213:3:17","nodeType":"YulTypedName","src":"28213:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"28221:3:17","nodeType":"YulTypedName","src":"28221:3:17","type":""}],"src":"28079:366:17"},{"body":{"nativeSrc":"28622:248:17","nodeType":"YulBlock","src":"28622:248:17","statements":[{"nativeSrc":"28632:26:17","nodeType":"YulAssignment","src":"28632:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"28644:9:17","nodeType":"YulIdentifier","src":"28644:9:17"},{"kind":"number","nativeSrc":"28655:2:17","nodeType":"YulLiteral","src":"28655:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28640:3:17","nodeType":"YulIdentifier","src":"28640:3:17"},"nativeSrc":"28640:18:17","nodeType":"YulFunctionCall","src":"28640:18:17"},"variableNames":[{"name":"tail","nativeSrc":"28632:4:17","nodeType":"YulIdentifier","src":"28632:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28679:9:17","nodeType":"YulIdentifier","src":"28679:9:17"},{"kind":"number","nativeSrc":"28690:1:17","nodeType":"YulLiteral","src":"28690:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"28675:3:17","nodeType":"YulIdentifier","src":"28675:3:17"},"nativeSrc":"28675:17:17","nodeType":"YulFunctionCall","src":"28675:17:17"},{"arguments":[{"name":"tail","nativeSrc":"28698:4:17","nodeType":"YulIdentifier","src":"28698:4:17"},{"name":"headStart","nativeSrc":"28704:9:17","nodeType":"YulIdentifier","src":"28704:9:17"}],"functionName":{"name":"sub","nativeSrc":"28694:3:17","nodeType":"YulIdentifier","src":"28694:3:17"},"nativeSrc":"28694:20:17","nodeType":"YulFunctionCall","src":"28694:20:17"}],"functionName":{"name":"mstore","nativeSrc":"28668:6:17","nodeType":"YulIdentifier","src":"28668:6:17"},"nativeSrc":"28668:47:17","nodeType":"YulFunctionCall","src":"28668:47:17"},"nativeSrc":"28668:47:17","nodeType":"YulExpressionStatement","src":"28668:47:17"},{"nativeSrc":"28724:139:17","nodeType":"YulAssignment","src":"28724:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"28858:4:17","nodeType":"YulIdentifier","src":"28858:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a_to_t_string_memory_ptr_fromStack","nativeSrc":"28732:124:17","nodeType":"YulIdentifier","src":"28732:124:17"},"nativeSrc":"28732:131:17","nodeType":"YulFunctionCall","src":"28732:131:17"},"variableNames":[{"name":"tail","nativeSrc":"28724:4:17","nodeType":"YulIdentifier","src":"28724:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"28451:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28602:9:17","nodeType":"YulTypedName","src":"28602:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28617:4:17","nodeType":"YulTypedName","src":"28617:4:17","type":""}],"src":"28451:419:17"},{"body":{"nativeSrc":"28982:68:17","nodeType":"YulBlock","src":"28982:68:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"29004:6:17","nodeType":"YulIdentifier","src":"29004:6:17"},{"kind":"number","nativeSrc":"29012:1:17","nodeType":"YulLiteral","src":"29012:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"29000:3:17","nodeType":"YulIdentifier","src":"29000:3:17"},"nativeSrc":"29000:14:17","nodeType":"YulFunctionCall","src":"29000:14:17"},{"hexValue":"446973636f756e7420616c726561647920636c61696d6564","kind":"string","nativeSrc":"29016:26:17","nodeType":"YulLiteral","src":"29016:26:17","type":"","value":"Discount already claimed"}],"functionName":{"name":"mstore","nativeSrc":"28993:6:17","nodeType":"YulIdentifier","src":"28993:6:17"},"nativeSrc":"28993:50:17","nodeType":"YulFunctionCall","src":"28993:50:17"},"nativeSrc":"28993:50:17","nodeType":"YulExpressionStatement","src":"28993:50:17"}]},"name":"store_literal_in_memory_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2","nativeSrc":"28876:174:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"28974:6:17","nodeType":"YulTypedName","src":"28974:6:17","type":""}],"src":"28876:174:17"},{"body":{"nativeSrc":"29202:220:17","nodeType":"YulBlock","src":"29202:220:17","statements":[{"nativeSrc":"29212:74:17","nodeType":"YulAssignment","src":"29212:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"29278:3:17","nodeType":"YulIdentifier","src":"29278:3:17"},{"kind":"number","nativeSrc":"29283:2:17","nodeType":"YulLiteral","src":"29283:2:17","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"29219:58:17","nodeType":"YulIdentifier","src":"29219:58:17"},"nativeSrc":"29219:67:17","nodeType":"YulFunctionCall","src":"29219:67:17"},"variableNames":[{"name":"pos","nativeSrc":"29212:3:17","nodeType":"YulIdentifier","src":"29212:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"29384:3:17","nodeType":"YulIdentifier","src":"29384:3:17"}],"functionName":{"name":"store_literal_in_memory_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2","nativeSrc":"29295:88:17","nodeType":"YulIdentifier","src":"29295:88:17"},"nativeSrc":"29295:93:17","nodeType":"YulFunctionCall","src":"29295:93:17"},"nativeSrc":"29295:93:17","nodeType":"YulExpressionStatement","src":"29295:93:17"},{"nativeSrc":"29397:19:17","nodeType":"YulAssignment","src":"29397:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"29408:3:17","nodeType":"YulIdentifier","src":"29408:3:17"},{"kind":"number","nativeSrc":"29413:2:17","nodeType":"YulLiteral","src":"29413:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29404:3:17","nodeType":"YulIdentifier","src":"29404:3:17"},"nativeSrc":"29404:12:17","nodeType":"YulFunctionCall","src":"29404:12:17"},"variableNames":[{"name":"end","nativeSrc":"29397:3:17","nodeType":"YulIdentifier","src":"29397:3:17"}]}]},"name":"abi_encode_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2_to_t_string_memory_ptr_fromStack","nativeSrc":"29056:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"29190:3:17","nodeType":"YulTypedName","src":"29190:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"29198:3:17","nodeType":"YulTypedName","src":"29198:3:17","type":""}],"src":"29056:366:17"},{"body":{"nativeSrc":"29599:248:17","nodeType":"YulBlock","src":"29599:248:17","statements":[{"nativeSrc":"29609:26:17","nodeType":"YulAssignment","src":"29609:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"29621:9:17","nodeType":"YulIdentifier","src":"29621:9:17"},{"kind":"number","nativeSrc":"29632:2:17","nodeType":"YulLiteral","src":"29632:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29617:3:17","nodeType":"YulIdentifier","src":"29617:3:17"},"nativeSrc":"29617:18:17","nodeType":"YulFunctionCall","src":"29617:18:17"},"variableNames":[{"name":"tail","nativeSrc":"29609:4:17","nodeType":"YulIdentifier","src":"29609:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29656:9:17","nodeType":"YulIdentifier","src":"29656:9:17"},{"kind":"number","nativeSrc":"29667:1:17","nodeType":"YulLiteral","src":"29667:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"29652:3:17","nodeType":"YulIdentifier","src":"29652:3:17"},"nativeSrc":"29652:17:17","nodeType":"YulFunctionCall","src":"29652:17:17"},{"arguments":[{"name":"tail","nativeSrc":"29675:4:17","nodeType":"YulIdentifier","src":"29675:4:17"},{"name":"headStart","nativeSrc":"29681:9:17","nodeType":"YulIdentifier","src":"29681:9:17"}],"functionName":{"name":"sub","nativeSrc":"29671:3:17","nodeType":"YulIdentifier","src":"29671:3:17"},"nativeSrc":"29671:20:17","nodeType":"YulFunctionCall","src":"29671:20:17"}],"functionName":{"name":"mstore","nativeSrc":"29645:6:17","nodeType":"YulIdentifier","src":"29645:6:17"},"nativeSrc":"29645:47:17","nodeType":"YulFunctionCall","src":"29645:47:17"},"nativeSrc":"29645:47:17","nodeType":"YulExpressionStatement","src":"29645:47:17"},{"nativeSrc":"29701:139:17","nodeType":"YulAssignment","src":"29701:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"29835:4:17","nodeType":"YulIdentifier","src":"29835:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2_to_t_string_memory_ptr_fromStack","nativeSrc":"29709:124:17","nodeType":"YulIdentifier","src":"29709:124:17"},"nativeSrc":"29709:131:17","nodeType":"YulFunctionCall","src":"29709:131:17"},"variableNames":[{"name":"tail","nativeSrc":"29701:4:17","nodeType":"YulIdentifier","src":"29701:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"29428:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29579:9:17","nodeType":"YulTypedName","src":"29579:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29594:4:17","nodeType":"YulTypedName","src":"29594:4:17","type":""}],"src":"29428:419:17"},{"body":{"nativeSrc":"29907:87:17","nodeType":"YulBlock","src":"29907:87:17","statements":[{"nativeSrc":"29917:11:17","nodeType":"YulAssignment","src":"29917:11:17","value":{"name":"ptr","nativeSrc":"29925:3:17","nodeType":"YulIdentifier","src":"29925:3:17"},"variableNames":[{"name":"data","nativeSrc":"29917:4:17","nodeType":"YulIdentifier","src":"29917:4:17"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"29945:1:17","nodeType":"YulLiteral","src":"29945:1:17","type":"","value":"0"},{"name":"ptr","nativeSrc":"29948:3:17","nodeType":"YulIdentifier","src":"29948:3:17"}],"functionName":{"name":"mstore","nativeSrc":"29938:6:17","nodeType":"YulIdentifier","src":"29938:6:17"},"nativeSrc":"29938:14:17","nodeType":"YulFunctionCall","src":"29938:14:17"},"nativeSrc":"29938:14:17","nodeType":"YulExpressionStatement","src":"29938:14:17"},{"nativeSrc":"29961:26:17","nodeType":"YulAssignment","src":"29961:26:17","value":{"arguments":[{"kind":"number","nativeSrc":"29979:1:17","nodeType":"YulLiteral","src":"29979:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"29982:4:17","nodeType":"YulLiteral","src":"29982:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"29969:9:17","nodeType":"YulIdentifier","src":"29969:9:17"},"nativeSrc":"29969:18:17","nodeType":"YulFunctionCall","src":"29969:18:17"},"variableNames":[{"name":"data","nativeSrc":"29961:4:17","nodeType":"YulIdentifier","src":"29961:4:17"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"29853:141:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"29894:3:17","nodeType":"YulTypedName","src":"29894:3:17","type":""}],"returnVariables":[{"name":"data","nativeSrc":"29902:4:17","nodeType":"YulTypedName","src":"29902:4:17","type":""}],"src":"29853:141:17"},{"body":{"nativeSrc":"30044:49:17","nodeType":"YulBlock","src":"30044:49:17","statements":[{"nativeSrc":"30054:33:17","nodeType":"YulAssignment","src":"30054:33:17","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"30072:5:17","nodeType":"YulIdentifier","src":"30072:5:17"},{"kind":"number","nativeSrc":"30079:2:17","nodeType":"YulLiteral","src":"30079:2:17","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"30068:3:17","nodeType":"YulIdentifier","src":"30068:3:17"},"nativeSrc":"30068:14:17","nodeType":"YulFunctionCall","src":"30068:14:17"},{"kind":"number","nativeSrc":"30084:2:17","nodeType":"YulLiteral","src":"30084:2:17","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"30064:3:17","nodeType":"YulIdentifier","src":"30064:3:17"},"nativeSrc":"30064:23:17","nodeType":"YulFunctionCall","src":"30064:23:17"},"variableNames":[{"name":"result","nativeSrc":"30054:6:17","nodeType":"YulIdentifier","src":"30054:6:17"}]}]},"name":"divide_by_32_ceil","nativeSrc":"30000:93:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30027:5:17","nodeType":"YulTypedName","src":"30027:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"30037:6:17","nodeType":"YulTypedName","src":"30037:6:17","type":""}],"src":"30000:93:17"},{"body":{"nativeSrc":"30152:54:17","nodeType":"YulBlock","src":"30152:54:17","statements":[{"nativeSrc":"30162:37:17","nodeType":"YulAssignment","src":"30162:37:17","value":{"arguments":[{"name":"bits","nativeSrc":"30187:4:17","nodeType":"YulIdentifier","src":"30187:4:17"},{"name":"value","nativeSrc":"30193:5:17","nodeType":"YulIdentifier","src":"30193:5:17"}],"functionName":{"name":"shl","nativeSrc":"30183:3:17","nodeType":"YulIdentifier","src":"30183:3:17"},"nativeSrc":"30183:16:17","nodeType":"YulFunctionCall","src":"30183:16:17"},"variableNames":[{"name":"newValue","nativeSrc":"30162:8:17","nodeType":"YulIdentifier","src":"30162:8:17"}]}]},"name":"shift_left_dynamic","nativeSrc":"30099:107:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"30127:4:17","nodeType":"YulTypedName","src":"30127:4:17","type":""},{"name":"value","nativeSrc":"30133:5:17","nodeType":"YulTypedName","src":"30133:5:17","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"30143:8:17","nodeType":"YulTypedName","src":"30143:8:17","type":""}],"src":"30099:107:17"},{"body":{"nativeSrc":"30288:317:17","nodeType":"YulBlock","src":"30288:317:17","statements":[{"nativeSrc":"30298:35:17","nodeType":"YulVariableDeclaration","src":"30298:35:17","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"30319:10:17","nodeType":"YulIdentifier","src":"30319:10:17"},{"kind":"number","nativeSrc":"30331:1:17","nodeType":"YulLiteral","src":"30331:1:17","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"30315:3:17","nodeType":"YulIdentifier","src":"30315:3:17"},"nativeSrc":"30315:18:17","nodeType":"YulFunctionCall","src":"30315:18:17"},"variables":[{"name":"shiftBits","nativeSrc":"30302:9:17","nodeType":"YulTypedName","src":"30302:9:17","type":""}]},{"nativeSrc":"30342:109:17","nodeType":"YulVariableDeclaration","src":"30342:109:17","value":{"arguments":[{"name":"shiftBits","nativeSrc":"30373:9:17","nodeType":"YulIdentifier","src":"30373:9:17"},{"kind":"number","nativeSrc":"30384:66:17","nodeType":"YulLiteral","src":"30384:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"30354:18:17","nodeType":"YulIdentifier","src":"30354:18:17"},"nativeSrc":"30354:97:17","nodeType":"YulFunctionCall","src":"30354:97:17"},"variables":[{"name":"mask","nativeSrc":"30346:4:17","nodeType":"YulTypedName","src":"30346:4:17","type":""}]},{"nativeSrc":"30460:51:17","nodeType":"YulAssignment","src":"30460:51:17","value":{"arguments":[{"name":"shiftBits","nativeSrc":"30491:9:17","nodeType":"YulIdentifier","src":"30491:9:17"},{"name":"toInsert","nativeSrc":"30502:8:17","nodeType":"YulIdentifier","src":"30502:8:17"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"30472:18:17","nodeType":"YulIdentifier","src":"30472:18:17"},"nativeSrc":"30472:39:17","nodeType":"YulFunctionCall","src":"30472:39:17"},"variableNames":[{"name":"toInsert","nativeSrc":"30460:8:17","nodeType":"YulIdentifier","src":"30460:8:17"}]},{"nativeSrc":"30520:30:17","nodeType":"YulAssignment","src":"30520:30:17","value":{"arguments":[{"name":"value","nativeSrc":"30533:5:17","nodeType":"YulIdentifier","src":"30533:5:17"},{"arguments":[{"name":"mask","nativeSrc":"30544:4:17","nodeType":"YulIdentifier","src":"30544:4:17"}],"functionName":{"name":"not","nativeSrc":"30540:3:17","nodeType":"YulIdentifier","src":"30540:3:17"},"nativeSrc":"30540:9:17","nodeType":"YulFunctionCall","src":"30540:9:17"}],"functionName":{"name":"and","nativeSrc":"30529:3:17","nodeType":"YulIdentifier","src":"30529:3:17"},"nativeSrc":"30529:21:17","nodeType":"YulFunctionCall","src":"30529:21:17"},"variableNames":[{"name":"value","nativeSrc":"30520:5:17","nodeType":"YulIdentifier","src":"30520:5:17"}]},{"nativeSrc":"30559:40:17","nodeType":"YulAssignment","src":"30559:40:17","value":{"arguments":[{"name":"value","nativeSrc":"30572:5:17","nodeType":"YulIdentifier","src":"30572:5:17"},{"arguments":[{"name":"toInsert","nativeSrc":"30583:8:17","nodeType":"YulIdentifier","src":"30583:8:17"},{"name":"mask","nativeSrc":"30593:4:17","nodeType":"YulIdentifier","src":"30593:4:17"}],"functionName":{"name":"and","nativeSrc":"30579:3:17","nodeType":"YulIdentifier","src":"30579:3:17"},"nativeSrc":"30579:19:17","nodeType":"YulFunctionCall","src":"30579:19:17"}],"functionName":{"name":"or","nativeSrc":"30569:2:17","nodeType":"YulIdentifier","src":"30569:2:17"},"nativeSrc":"30569:30:17","nodeType":"YulFunctionCall","src":"30569:30:17"},"variableNames":[{"name":"result","nativeSrc":"30559:6:17","nodeType":"YulIdentifier","src":"30559:6:17"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"30212:393:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30249:5:17","nodeType":"YulTypedName","src":"30249:5:17","type":""},{"name":"shiftBytes","nativeSrc":"30256:10:17","nodeType":"YulTypedName","src":"30256:10:17","type":""},{"name":"toInsert","nativeSrc":"30268:8:17","nodeType":"YulTypedName","src":"30268:8:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"30281:6:17","nodeType":"YulTypedName","src":"30281:6:17","type":""}],"src":"30212:393:17"},{"body":{"nativeSrc":"30643:28:17","nodeType":"YulBlock","src":"30643:28:17","statements":[{"nativeSrc":"30653:12:17","nodeType":"YulAssignment","src":"30653:12:17","value":{"name":"value","nativeSrc":"30660:5:17","nodeType":"YulIdentifier","src":"30660:5:17"},"variableNames":[{"name":"ret","nativeSrc":"30653:3:17","nodeType":"YulIdentifier","src":"30653:3:17"}]}]},"name":"identity","nativeSrc":"30611:60:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30629:5:17","nodeType":"YulTypedName","src":"30629:5:17","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"30639:3:17","nodeType":"YulTypedName","src":"30639:3:17","type":""}],"src":"30611:60:17"},{"body":{"nativeSrc":"30737:82:17","nodeType":"YulBlock","src":"30737:82:17","statements":[{"nativeSrc":"30747:66:17","nodeType":"YulAssignment","src":"30747:66:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"30805:5:17","nodeType":"YulIdentifier","src":"30805:5:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"30787:17:17","nodeType":"YulIdentifier","src":"30787:17:17"},"nativeSrc":"30787:24:17","nodeType":"YulFunctionCall","src":"30787:24:17"}],"functionName":{"name":"identity","nativeSrc":"30778:8:17","nodeType":"YulIdentifier","src":"30778:8:17"},"nativeSrc":"30778:34:17","nodeType":"YulFunctionCall","src":"30778:34:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"30760:17:17","nodeType":"YulIdentifier","src":"30760:17:17"},"nativeSrc":"30760:53:17","nodeType":"YulFunctionCall","src":"30760:53:17"},"variableNames":[{"name":"converted","nativeSrc":"30747:9:17","nodeType":"YulIdentifier","src":"30747:9:17"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"30677:142:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30717:5:17","nodeType":"YulTypedName","src":"30717:5:17","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"30727:9:17","nodeType":"YulTypedName","src":"30727:9:17","type":""}],"src":"30677:142:17"},{"body":{"nativeSrc":"30872:28:17","nodeType":"YulBlock","src":"30872:28:17","statements":[{"nativeSrc":"30882:12:17","nodeType":"YulAssignment","src":"30882:12:17","value":{"name":"value","nativeSrc":"30889:5:17","nodeType":"YulIdentifier","src":"30889:5:17"},"variableNames":[{"name":"ret","nativeSrc":"30882:3:17","nodeType":"YulIdentifier","src":"30882:3:17"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"30825:75:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30858:5:17","nodeType":"YulTypedName","src":"30858:5:17","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"30868:3:17","nodeType":"YulTypedName","src":"30868:3:17","type":""}],"src":"30825:75:17"},{"body":{"nativeSrc":"30982:193:17","nodeType":"YulBlock","src":"30982:193:17","statements":[{"nativeSrc":"30992:63:17","nodeType":"YulVariableDeclaration","src":"30992:63:17","value":{"arguments":[{"name":"value_0","nativeSrc":"31047:7:17","nodeType":"YulIdentifier","src":"31047:7:17"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"31016:30:17","nodeType":"YulIdentifier","src":"31016:30:17"},"nativeSrc":"31016:39:17","nodeType":"YulFunctionCall","src":"31016:39:17"},"variables":[{"name":"convertedValue_0","nativeSrc":"30996:16:17","nodeType":"YulTypedName","src":"30996:16:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"31071:4:17","nodeType":"YulIdentifier","src":"31071:4:17"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"31111:4:17","nodeType":"YulIdentifier","src":"31111:4:17"}],"functionName":{"name":"sload","nativeSrc":"31105:5:17","nodeType":"YulIdentifier","src":"31105:5:17"},"nativeSrc":"31105:11:17","nodeType":"YulFunctionCall","src":"31105:11:17"},{"name":"offset","nativeSrc":"31118:6:17","nodeType":"YulIdentifier","src":"31118:6:17"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"31150:16:17","nodeType":"YulIdentifier","src":"31150:16:17"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"31126:23:17","nodeType":"YulIdentifier","src":"31126:23:17"},"nativeSrc":"31126:41:17","nodeType":"YulFunctionCall","src":"31126:41:17"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"31077:27:17","nodeType":"YulIdentifier","src":"31077:27:17"},"nativeSrc":"31077:91:17","nodeType":"YulFunctionCall","src":"31077:91:17"}],"functionName":{"name":"sstore","nativeSrc":"31064:6:17","nodeType":"YulIdentifier","src":"31064:6:17"},"nativeSrc":"31064:105:17","nodeType":"YulFunctionCall","src":"31064:105:17"},"nativeSrc":"31064:105:17","nodeType":"YulExpressionStatement","src":"31064:105:17"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"30906:269:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"30959:4:17","nodeType":"YulTypedName","src":"30959:4:17","type":""},{"name":"offset","nativeSrc":"30965:6:17","nodeType":"YulTypedName","src":"30965:6:17","type":""},{"name":"value_0","nativeSrc":"30973:7:17","nodeType":"YulTypedName","src":"30973:7:17","type":""}],"src":"30906:269:17"},{"body":{"nativeSrc":"31230:24:17","nodeType":"YulBlock","src":"31230:24:17","statements":[{"nativeSrc":"31240:8:17","nodeType":"YulAssignment","src":"31240:8:17","value":{"kind":"number","nativeSrc":"31247:1:17","nodeType":"YulLiteral","src":"31247:1:17","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"31240:3:17","nodeType":"YulIdentifier","src":"31240:3:17"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"31181:73:17","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"31226:3:17","nodeType":"YulTypedName","src":"31226:3:17","type":""}],"src":"31181:73:17"},{"body":{"nativeSrc":"31313:136:17","nodeType":"YulBlock","src":"31313:136:17","statements":[{"nativeSrc":"31323:46:17","nodeType":"YulVariableDeclaration","src":"31323:46:17","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"31337:30:17","nodeType":"YulIdentifier","src":"31337:30:17"},"nativeSrc":"31337:32:17","nodeType":"YulFunctionCall","src":"31337:32:17"},"variables":[{"name":"zero_0","nativeSrc":"31327:6:17","nodeType":"YulTypedName","src":"31327:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"31422:4:17","nodeType":"YulIdentifier","src":"31422:4:17"},{"name":"offset","nativeSrc":"31428:6:17","nodeType":"YulIdentifier","src":"31428:6:17"},{"name":"zero_0","nativeSrc":"31436:6:17","nodeType":"YulIdentifier","src":"31436:6:17"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"31378:43:17","nodeType":"YulIdentifier","src":"31378:43:17"},"nativeSrc":"31378:65:17","nodeType":"YulFunctionCall","src":"31378:65:17"},"nativeSrc":"31378:65:17","nodeType":"YulExpressionStatement","src":"31378:65:17"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"31260:189:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"31299:4:17","nodeType":"YulTypedName","src":"31299:4:17","type":""},{"name":"offset","nativeSrc":"31305:6:17","nodeType":"YulTypedName","src":"31305:6:17","type":""}],"src":"31260:189:17"},{"body":{"nativeSrc":"31505:136:17","nodeType":"YulBlock","src":"31505:136:17","statements":[{"body":{"nativeSrc":"31572:63:17","nodeType":"YulBlock","src":"31572:63:17","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"31616:5:17","nodeType":"YulIdentifier","src":"31616:5:17"},{"kind":"number","nativeSrc":"31623:1:17","nodeType":"YulLiteral","src":"31623:1:17","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"31586:29:17","nodeType":"YulIdentifier","src":"31586:29:17"},"nativeSrc":"31586:39:17","nodeType":"YulFunctionCall","src":"31586:39:17"},"nativeSrc":"31586:39:17","nodeType":"YulExpressionStatement","src":"31586:39:17"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"31525:5:17","nodeType":"YulIdentifier","src":"31525:5:17"},{"name":"end","nativeSrc":"31532:3:17","nodeType":"YulIdentifier","src":"31532:3:17"}],"functionName":{"name":"lt","nativeSrc":"31522:2:17","nodeType":"YulIdentifier","src":"31522:2:17"},"nativeSrc":"31522:14:17","nodeType":"YulFunctionCall","src":"31522:14:17"},"nativeSrc":"31515:120:17","nodeType":"YulForLoop","post":{"nativeSrc":"31537:26:17","nodeType":"YulBlock","src":"31537:26:17","statements":[{"nativeSrc":"31539:22:17","nodeType":"YulAssignment","src":"31539:22:17","value":{"arguments":[{"name":"start","nativeSrc":"31552:5:17","nodeType":"YulIdentifier","src":"31552:5:17"},{"kind":"number","nativeSrc":"31559:1:17","nodeType":"YulLiteral","src":"31559:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"31548:3:17","nodeType":"YulIdentifier","src":"31548:3:17"},"nativeSrc":"31548:13:17","nodeType":"YulFunctionCall","src":"31548:13:17"},"variableNames":[{"name":"start","nativeSrc":"31539:5:17","nodeType":"YulIdentifier","src":"31539:5:17"}]}]},"pre":{"nativeSrc":"31519:2:17","nodeType":"YulBlock","src":"31519:2:17","statements":[]},"src":"31515:120:17"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"31455:186:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"31493:5:17","nodeType":"YulTypedName","src":"31493:5:17","type":""},{"name":"end","nativeSrc":"31500:3:17","nodeType":"YulTypedName","src":"31500:3:17","type":""}],"src":"31455:186:17"},{"body":{"nativeSrc":"31726:464:17","nodeType":"YulBlock","src":"31726:464:17","statements":[{"body":{"nativeSrc":"31752:431:17","nodeType":"YulBlock","src":"31752:431:17","statements":[{"nativeSrc":"31766:54:17","nodeType":"YulVariableDeclaration","src":"31766:54:17","value":{"arguments":[{"name":"array","nativeSrc":"31814:5:17","nodeType":"YulIdentifier","src":"31814:5:17"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"31782:31:17","nodeType":"YulIdentifier","src":"31782:31:17"},"nativeSrc":"31782:38:17","nodeType":"YulFunctionCall","src":"31782:38:17"},"variables":[{"name":"dataArea","nativeSrc":"31770:8:17","nodeType":"YulTypedName","src":"31770:8:17","type":""}]},{"nativeSrc":"31833:63:17","nodeType":"YulVariableDeclaration","src":"31833:63:17","value":{"arguments":[{"name":"dataArea","nativeSrc":"31856:8:17","nodeType":"YulIdentifier","src":"31856:8:17"},{"arguments":[{"name":"startIndex","nativeSrc":"31884:10:17","nodeType":"YulIdentifier","src":"31884:10:17"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"31866:17:17","nodeType":"YulIdentifier","src":"31866:17:17"},"nativeSrc":"31866:29:17","nodeType":"YulFunctionCall","src":"31866:29:17"}],"functionName":{"name":"add","nativeSrc":"31852:3:17","nodeType":"YulIdentifier","src":"31852:3:17"},"nativeSrc":"31852:44:17","nodeType":"YulFunctionCall","src":"31852:44:17"},"variables":[{"name":"deleteStart","nativeSrc":"31837:11:17","nodeType":"YulTypedName","src":"31837:11:17","type":""}]},{"body":{"nativeSrc":"32053:27:17","nodeType":"YulBlock","src":"32053:27:17","statements":[{"nativeSrc":"32055:23:17","nodeType":"YulAssignment","src":"32055:23:17","value":{"name":"dataArea","nativeSrc":"32070:8:17","nodeType":"YulIdentifier","src":"32070:8:17"},"variableNames":[{"name":"deleteStart","nativeSrc":"32055:11:17","nodeType":"YulIdentifier","src":"32055:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"32037:10:17","nodeType":"YulIdentifier","src":"32037:10:17"},{"kind":"number","nativeSrc":"32049:2:17","nodeType":"YulLiteral","src":"32049:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"32034:2:17","nodeType":"YulIdentifier","src":"32034:2:17"},"nativeSrc":"32034:18:17","nodeType":"YulFunctionCall","src":"32034:18:17"},"nativeSrc":"32031:49:17","nodeType":"YulIf","src":"32031:49:17"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"32122:11:17","nodeType":"YulIdentifier","src":"32122:11:17"},{"arguments":[{"name":"dataArea","nativeSrc":"32139:8:17","nodeType":"YulIdentifier","src":"32139:8:17"},{"arguments":[{"name":"len","nativeSrc":"32167:3:17","nodeType":"YulIdentifier","src":"32167:3:17"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"32149:17:17","nodeType":"YulIdentifier","src":"32149:17:17"},"nativeSrc":"32149:22:17","nodeType":"YulFunctionCall","src":"32149:22:17"}],"functionName":{"name":"add","nativeSrc":"32135:3:17","nodeType":"YulIdentifier","src":"32135:3:17"},"nativeSrc":"32135:37:17","nodeType":"YulFunctionCall","src":"32135:37:17"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"32093:28:17","nodeType":"YulIdentifier","src":"32093:28:17"},"nativeSrc":"32093:80:17","nodeType":"YulFunctionCall","src":"32093:80:17"},"nativeSrc":"32093:80:17","nodeType":"YulExpressionStatement","src":"32093:80:17"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"31743:3:17","nodeType":"YulIdentifier","src":"31743:3:17"},{"kind":"number","nativeSrc":"31748:2:17","nodeType":"YulLiteral","src":"31748:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"31740:2:17","nodeType":"YulIdentifier","src":"31740:2:17"},"nativeSrc":"31740:11:17","nodeType":"YulFunctionCall","src":"31740:11:17"},"nativeSrc":"31737:446:17","nodeType":"YulIf","src":"31737:446:17"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"31647:543:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"31702:5:17","nodeType":"YulTypedName","src":"31702:5:17","type":""},{"name":"len","nativeSrc":"31709:3:17","nodeType":"YulTypedName","src":"31709:3:17","type":""},{"name":"startIndex","nativeSrc":"31714:10:17","nodeType":"YulTypedName","src":"31714:10:17","type":""}],"src":"31647:543:17"},{"body":{"nativeSrc":"32259:54:17","nodeType":"YulBlock","src":"32259:54:17","statements":[{"nativeSrc":"32269:37:17","nodeType":"YulAssignment","src":"32269:37:17","value":{"arguments":[{"name":"bits","nativeSrc":"32294:4:17","nodeType":"YulIdentifier","src":"32294:4:17"},{"name":"value","nativeSrc":"32300:5:17","nodeType":"YulIdentifier","src":"32300:5:17"}],"functionName":{"name":"shr","nativeSrc":"32290:3:17","nodeType":"YulIdentifier","src":"32290:3:17"},"nativeSrc":"32290:16:17","nodeType":"YulFunctionCall","src":"32290:16:17"},"variableNames":[{"name":"newValue","nativeSrc":"32269:8:17","nodeType":"YulIdentifier","src":"32269:8:17"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"32196:117:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"32234:4:17","nodeType":"YulTypedName","src":"32234:4:17","type":""},{"name":"value","nativeSrc":"32240:5:17","nodeType":"YulTypedName","src":"32240:5:17","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"32250:8:17","nodeType":"YulTypedName","src":"32250:8:17","type":""}],"src":"32196:117:17"},{"body":{"nativeSrc":"32370:118:17","nodeType":"YulBlock","src":"32370:118:17","statements":[{"nativeSrc":"32380:68:17","nodeType":"YulVariableDeclaration","src":"32380:68:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"32429:1:17","nodeType":"YulLiteral","src":"32429:1:17","type":"","value":"8"},{"name":"bytes","nativeSrc":"32432:5:17","nodeType":"YulIdentifier","src":"32432:5:17"}],"functionName":{"name":"mul","nativeSrc":"32425:3:17","nodeType":"YulIdentifier","src":"32425:3:17"},"nativeSrc":"32425:13:17","nodeType":"YulFunctionCall","src":"32425:13:17"},{"arguments":[{"kind":"number","nativeSrc":"32444:1:17","nodeType":"YulLiteral","src":"32444:1:17","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"32440:3:17","nodeType":"YulIdentifier","src":"32440:3:17"},"nativeSrc":"32440:6:17","nodeType":"YulFunctionCall","src":"32440:6:17"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"32396:28:17","nodeType":"YulIdentifier","src":"32396:28:17"},"nativeSrc":"32396:51:17","nodeType":"YulFunctionCall","src":"32396:51:17"}],"functionName":{"name":"not","nativeSrc":"32392:3:17","nodeType":"YulIdentifier","src":"32392:3:17"},"nativeSrc":"32392:56:17","nodeType":"YulFunctionCall","src":"32392:56:17"},"variables":[{"name":"mask","nativeSrc":"32384:4:17","nodeType":"YulTypedName","src":"32384:4:17","type":""}]},{"nativeSrc":"32457:25:17","nodeType":"YulAssignment","src":"32457:25:17","value":{"arguments":[{"name":"data","nativeSrc":"32471:4:17","nodeType":"YulIdentifier","src":"32471:4:17"},{"name":"mask","nativeSrc":"32477:4:17","nodeType":"YulIdentifier","src":"32477:4:17"}],"functionName":{"name":"and","nativeSrc":"32467:3:17","nodeType":"YulIdentifier","src":"32467:3:17"},"nativeSrc":"32467:15:17","nodeType":"YulFunctionCall","src":"32467:15:17"},"variableNames":[{"name":"result","nativeSrc":"32457:6:17","nodeType":"YulIdentifier","src":"32457:6:17"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"32319:169:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"32347:4:17","nodeType":"YulTypedName","src":"32347:4:17","type":""},{"name":"bytes","nativeSrc":"32353:5:17","nodeType":"YulTypedName","src":"32353:5:17","type":""}],"returnVariables":[{"name":"result","nativeSrc":"32363:6:17","nodeType":"YulTypedName","src":"32363:6:17","type":""}],"src":"32319:169:17"},{"body":{"nativeSrc":"32574:214:17","nodeType":"YulBlock","src":"32574:214:17","statements":[{"nativeSrc":"32707:37:17","nodeType":"YulAssignment","src":"32707:37:17","value":{"arguments":[{"name":"data","nativeSrc":"32734:4:17","nodeType":"YulIdentifier","src":"32734:4:17"},{"name":"len","nativeSrc":"32740:3:17","nodeType":"YulIdentifier","src":"32740:3:17"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"32715:18:17","nodeType":"YulIdentifier","src":"32715:18:17"},"nativeSrc":"32715:29:17","nodeType":"YulFunctionCall","src":"32715:29:17"},"variableNames":[{"name":"data","nativeSrc":"32707:4:17","nodeType":"YulIdentifier","src":"32707:4:17"}]},{"nativeSrc":"32753:29:17","nodeType":"YulAssignment","src":"32753:29:17","value":{"arguments":[{"name":"data","nativeSrc":"32764:4:17","nodeType":"YulIdentifier","src":"32764:4:17"},{"arguments":[{"kind":"number","nativeSrc":"32774:1:17","nodeType":"YulLiteral","src":"32774:1:17","type":"","value":"2"},{"name":"len","nativeSrc":"32777:3:17","nodeType":"YulIdentifier","src":"32777:3:17"}],"functionName":{"name":"mul","nativeSrc":"32770:3:17","nodeType":"YulIdentifier","src":"32770:3:17"},"nativeSrc":"32770:11:17","nodeType":"YulFunctionCall","src":"32770:11:17"}],"functionName":{"name":"or","nativeSrc":"32761:2:17","nodeType":"YulIdentifier","src":"32761:2:17"},"nativeSrc":"32761:21:17","nodeType":"YulFunctionCall","src":"32761:21:17"},"variableNames":[{"name":"used","nativeSrc":"32753:4:17","nodeType":"YulIdentifier","src":"32753:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"32493:295:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"32555:4:17","nodeType":"YulTypedName","src":"32555:4:17","type":""},{"name":"len","nativeSrc":"32561:3:17","nodeType":"YulTypedName","src":"32561:3:17","type":""}],"returnVariables":[{"name":"used","nativeSrc":"32569:4:17","nodeType":"YulTypedName","src":"32569:4:17","type":""}],"src":"32493:295:17"},{"body":{"nativeSrc":"32885:1303:17","nodeType":"YulBlock","src":"32885:1303:17","statements":[{"nativeSrc":"32896:51:17","nodeType":"YulVariableDeclaration","src":"32896:51:17","value":{"arguments":[{"name":"src","nativeSrc":"32943:3:17","nodeType":"YulIdentifier","src":"32943:3:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"32910:32:17","nodeType":"YulIdentifier","src":"32910:32:17"},"nativeSrc":"32910:37:17","nodeType":"YulFunctionCall","src":"32910:37:17"},"variables":[{"name":"newLen","nativeSrc":"32900:6:17","nodeType":"YulTypedName","src":"32900:6:17","type":""}]},{"body":{"nativeSrc":"33032:22:17","nodeType":"YulBlock","src":"33032:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"33034:16:17","nodeType":"YulIdentifier","src":"33034:16:17"},"nativeSrc":"33034:18:17","nodeType":"YulFunctionCall","src":"33034:18:17"},"nativeSrc":"33034:18:17","nodeType":"YulExpressionStatement","src":"33034:18:17"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"33004:6:17","nodeType":"YulIdentifier","src":"33004:6:17"},{"kind":"number","nativeSrc":"33012:18:17","nodeType":"YulLiteral","src":"33012:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"33001:2:17","nodeType":"YulIdentifier","src":"33001:2:17"},"nativeSrc":"33001:30:17","nodeType":"YulFunctionCall","src":"33001:30:17"},"nativeSrc":"32998:56:17","nodeType":"YulIf","src":"32998:56:17"},{"nativeSrc":"33064:52:17","nodeType":"YulVariableDeclaration","src":"33064:52:17","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"33110:4:17","nodeType":"YulIdentifier","src":"33110:4:17"}],"functionName":{"name":"sload","nativeSrc":"33104:5:17","nodeType":"YulIdentifier","src":"33104:5:17"},"nativeSrc":"33104:11:17","nodeType":"YulFunctionCall","src":"33104:11:17"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"33078:25:17","nodeType":"YulIdentifier","src":"33078:25:17"},"nativeSrc":"33078:38:17","nodeType":"YulFunctionCall","src":"33078:38:17"},"variables":[{"name":"oldLen","nativeSrc":"33068:6:17","nodeType":"YulTypedName","src":"33068:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"33209:4:17","nodeType":"YulIdentifier","src":"33209:4:17"},{"name":"oldLen","nativeSrc":"33215:6:17","nodeType":"YulIdentifier","src":"33215:6:17"},{"name":"newLen","nativeSrc":"33223:6:17","nodeType":"YulIdentifier","src":"33223:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"33163:45:17","nodeType":"YulIdentifier","src":"33163:45:17"},"nativeSrc":"33163:67:17","nodeType":"YulFunctionCall","src":"33163:67:17"},"nativeSrc":"33163:67:17","nodeType":"YulExpressionStatement","src":"33163:67:17"},{"nativeSrc":"33240:18:17","nodeType":"YulVariableDeclaration","src":"33240:18:17","value":{"kind":"number","nativeSrc":"33257:1:17","nodeType":"YulLiteral","src":"33257:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"33244:9:17","nodeType":"YulTypedName","src":"33244:9:17","type":""}]},{"nativeSrc":"33268:17:17","nodeType":"YulAssignment","src":"33268:17:17","value":{"kind":"number","nativeSrc":"33281:4:17","nodeType":"YulLiteral","src":"33281:4:17","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"33268:9:17","nodeType":"YulIdentifier","src":"33268:9:17"}]},{"cases":[{"body":{"nativeSrc":"33332:611:17","nodeType":"YulBlock","src":"33332:611:17","statements":[{"nativeSrc":"33346:37:17","nodeType":"YulVariableDeclaration","src":"33346:37:17","value":{"arguments":[{"name":"newLen","nativeSrc":"33365:6:17","nodeType":"YulIdentifier","src":"33365:6:17"},{"arguments":[{"kind":"number","nativeSrc":"33377:4:17","nodeType":"YulLiteral","src":"33377:4:17","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"33373:3:17","nodeType":"YulIdentifier","src":"33373:3:17"},"nativeSrc":"33373:9:17","nodeType":"YulFunctionCall","src":"33373:9:17"}],"functionName":{"name":"and","nativeSrc":"33361:3:17","nodeType":"YulIdentifier","src":"33361:3:17"},"nativeSrc":"33361:22:17","nodeType":"YulFunctionCall","src":"33361:22:17"},"variables":[{"name":"loopEnd","nativeSrc":"33350:7:17","nodeType":"YulTypedName","src":"33350:7:17","type":""}]},{"nativeSrc":"33397:51:17","nodeType":"YulVariableDeclaration","src":"33397:51:17","value":{"arguments":[{"name":"slot","nativeSrc":"33443:4:17","nodeType":"YulIdentifier","src":"33443:4:17"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"33411:31:17","nodeType":"YulIdentifier","src":"33411:31:17"},"nativeSrc":"33411:37:17","nodeType":"YulFunctionCall","src":"33411:37:17"},"variables":[{"name":"dstPtr","nativeSrc":"33401:6:17","nodeType":"YulTypedName","src":"33401:6:17","type":""}]},{"nativeSrc":"33461:10:17","nodeType":"YulVariableDeclaration","src":"33461:10:17","value":{"kind":"number","nativeSrc":"33470:1:17","nodeType":"YulLiteral","src":"33470:1:17","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"33465:1:17","nodeType":"YulTypedName","src":"33465:1:17","type":""}]},{"body":{"nativeSrc":"33529:163:17","nodeType":"YulBlock","src":"33529:163:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"33554:6:17","nodeType":"YulIdentifier","src":"33554:6:17"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"33572:3:17","nodeType":"YulIdentifier","src":"33572:3:17"},{"name":"srcOffset","nativeSrc":"33577:9:17","nodeType":"YulIdentifier","src":"33577:9:17"}],"functionName":{"name":"add","nativeSrc":"33568:3:17","nodeType":"YulIdentifier","src":"33568:3:17"},"nativeSrc":"33568:19:17","nodeType":"YulFunctionCall","src":"33568:19:17"}],"functionName":{"name":"mload","nativeSrc":"33562:5:17","nodeType":"YulIdentifier","src":"33562:5:17"},"nativeSrc":"33562:26:17","nodeType":"YulFunctionCall","src":"33562:26:17"}],"functionName":{"name":"sstore","nativeSrc":"33547:6:17","nodeType":"YulIdentifier","src":"33547:6:17"},"nativeSrc":"33547:42:17","nodeType":"YulFunctionCall","src":"33547:42:17"},"nativeSrc":"33547:42:17","nodeType":"YulExpressionStatement","src":"33547:42:17"},{"nativeSrc":"33606:24:17","nodeType":"YulAssignment","src":"33606:24:17","value":{"arguments":[{"name":"dstPtr","nativeSrc":"33620:6:17","nodeType":"YulIdentifier","src":"33620:6:17"},{"kind":"number","nativeSrc":"33628:1:17","nodeType":"YulLiteral","src":"33628:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"33616:3:17","nodeType":"YulIdentifier","src":"33616:3:17"},"nativeSrc":"33616:14:17","nodeType":"YulFunctionCall","src":"33616:14:17"},"variableNames":[{"name":"dstPtr","nativeSrc":"33606:6:17","nodeType":"YulIdentifier","src":"33606:6:17"}]},{"nativeSrc":"33647:31:17","nodeType":"YulAssignment","src":"33647:31:17","value":{"arguments":[{"name":"srcOffset","nativeSrc":"33664:9:17","nodeType":"YulIdentifier","src":"33664:9:17"},{"kind":"number","nativeSrc":"33675:2:17","nodeType":"YulLiteral","src":"33675:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"33660:3:17","nodeType":"YulIdentifier","src":"33660:3:17"},"nativeSrc":"33660:18:17","nodeType":"YulFunctionCall","src":"33660:18:17"},"variableNames":[{"name":"srcOffset","nativeSrc":"33647:9:17","nodeType":"YulIdentifier","src":"33647:9:17"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"33495:1:17","nodeType":"YulIdentifier","src":"33495:1:17"},{"name":"loopEnd","nativeSrc":"33498:7:17","nodeType":"YulIdentifier","src":"33498:7:17"}],"functionName":{"name":"lt","nativeSrc":"33492:2:17","nodeType":"YulIdentifier","src":"33492:2:17"},"nativeSrc":"33492:14:17","nodeType":"YulFunctionCall","src":"33492:14:17"},"nativeSrc":"33484:208:17","nodeType":"YulForLoop","post":{"nativeSrc":"33507:21:17","nodeType":"YulBlock","src":"33507:21:17","statements":[{"nativeSrc":"33509:17:17","nodeType":"YulAssignment","src":"33509:17:17","value":{"arguments":[{"name":"i","nativeSrc":"33518:1:17","nodeType":"YulIdentifier","src":"33518:1:17"},{"kind":"number","nativeSrc":"33521:4:17","nodeType":"YulLiteral","src":"33521:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"33514:3:17","nodeType":"YulIdentifier","src":"33514:3:17"},"nativeSrc":"33514:12:17","nodeType":"YulFunctionCall","src":"33514:12:17"},"variableNames":[{"name":"i","nativeSrc":"33509:1:17","nodeType":"YulIdentifier","src":"33509:1:17"}]}]},"pre":{"nativeSrc":"33488:3:17","nodeType":"YulBlock","src":"33488:3:17","statements":[]},"src":"33484:208:17"},{"body":{"nativeSrc":"33728:156:17","nodeType":"YulBlock","src":"33728:156:17","statements":[{"nativeSrc":"33746:43:17","nodeType":"YulVariableDeclaration","src":"33746:43:17","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"33773:3:17","nodeType":"YulIdentifier","src":"33773:3:17"},{"name":"srcOffset","nativeSrc":"33778:9:17","nodeType":"YulIdentifier","src":"33778:9:17"}],"functionName":{"name":"add","nativeSrc":"33769:3:17","nodeType":"YulIdentifier","src":"33769:3:17"},"nativeSrc":"33769:19:17","nodeType":"YulFunctionCall","src":"33769:19:17"}],"functionName":{"name":"mload","nativeSrc":"33763:5:17","nodeType":"YulIdentifier","src":"33763:5:17"},"nativeSrc":"33763:26:17","nodeType":"YulFunctionCall","src":"33763:26:17"},"variables":[{"name":"lastValue","nativeSrc":"33750:9:17","nodeType":"YulTypedName","src":"33750:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"33813:6:17","nodeType":"YulIdentifier","src":"33813:6:17"},{"arguments":[{"name":"lastValue","nativeSrc":"33840:9:17","nodeType":"YulIdentifier","src":"33840:9:17"},{"arguments":[{"name":"newLen","nativeSrc":"33855:6:17","nodeType":"YulIdentifier","src":"33855:6:17"},{"kind":"number","nativeSrc":"33863:4:17","nodeType":"YulLiteral","src":"33863:4:17","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"33851:3:17","nodeType":"YulIdentifier","src":"33851:3:17"},"nativeSrc":"33851:17:17","nodeType":"YulFunctionCall","src":"33851:17:17"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"33821:18:17","nodeType":"YulIdentifier","src":"33821:18:17"},"nativeSrc":"33821:48:17","nodeType":"YulFunctionCall","src":"33821:48:17"}],"functionName":{"name":"sstore","nativeSrc":"33806:6:17","nodeType":"YulIdentifier","src":"33806:6:17"},"nativeSrc":"33806:64:17","nodeType":"YulFunctionCall","src":"33806:64:17"},"nativeSrc":"33806:64:17","nodeType":"YulExpressionStatement","src":"33806:64:17"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"33711:7:17","nodeType":"YulIdentifier","src":"33711:7:17"},{"name":"newLen","nativeSrc":"33720:6:17","nodeType":"YulIdentifier","src":"33720:6:17"}],"functionName":{"name":"lt","nativeSrc":"33708:2:17","nodeType":"YulIdentifier","src":"33708:2:17"},"nativeSrc":"33708:19:17","nodeType":"YulFunctionCall","src":"33708:19:17"},"nativeSrc":"33705:179:17","nodeType":"YulIf","src":"33705:179:17"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"33904:4:17","nodeType":"YulIdentifier","src":"33904:4:17"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"33918:6:17","nodeType":"YulIdentifier","src":"33918:6:17"},{"kind":"number","nativeSrc":"33926:1:17","nodeType":"YulLiteral","src":"33926:1:17","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"33914:3:17","nodeType":"YulIdentifier","src":"33914:3:17"},"nativeSrc":"33914:14:17","nodeType":"YulFunctionCall","src":"33914:14:17"},{"kind":"number","nativeSrc":"33930:1:17","nodeType":"YulLiteral","src":"33930:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"33910:3:17","nodeType":"YulIdentifier","src":"33910:3:17"},"nativeSrc":"33910:22:17","nodeType":"YulFunctionCall","src":"33910:22:17"}],"functionName":{"name":"sstore","nativeSrc":"33897:6:17","nodeType":"YulIdentifier","src":"33897:6:17"},"nativeSrc":"33897:36:17","nodeType":"YulFunctionCall","src":"33897:36:17"},"nativeSrc":"33897:36:17","nodeType":"YulExpressionStatement","src":"33897:36:17"}]},"nativeSrc":"33325:618:17","nodeType":"YulCase","src":"33325:618:17","value":{"kind":"number","nativeSrc":"33330:1:17","nodeType":"YulLiteral","src":"33330:1:17","type":"","value":"1"}},{"body":{"nativeSrc":"33960:222:17","nodeType":"YulBlock","src":"33960:222:17","statements":[{"nativeSrc":"33974:14:17","nodeType":"YulVariableDeclaration","src":"33974:14:17","value":{"kind":"number","nativeSrc":"33987:1:17","nodeType":"YulLiteral","src":"33987:1:17","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"33978:5:17","nodeType":"YulTypedName","src":"33978:5:17","type":""}]},{"body":{"nativeSrc":"34011:67:17","nodeType":"YulBlock","src":"34011:67:17","statements":[{"nativeSrc":"34029:35:17","nodeType":"YulAssignment","src":"34029:35:17","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"34048:3:17","nodeType":"YulIdentifier","src":"34048:3:17"},{"name":"srcOffset","nativeSrc":"34053:9:17","nodeType":"YulIdentifier","src":"34053:9:17"}],"functionName":{"name":"add","nativeSrc":"34044:3:17","nodeType":"YulIdentifier","src":"34044:3:17"},"nativeSrc":"34044:19:17","nodeType":"YulFunctionCall","src":"34044:19:17"}],"functionName":{"name":"mload","nativeSrc":"34038:5:17","nodeType":"YulIdentifier","src":"34038:5:17"},"nativeSrc":"34038:26:17","nodeType":"YulFunctionCall","src":"34038:26:17"},"variableNames":[{"name":"value","nativeSrc":"34029:5:17","nodeType":"YulIdentifier","src":"34029:5:17"}]}]},"condition":{"name":"newLen","nativeSrc":"34004:6:17","nodeType":"YulIdentifier","src":"34004:6:17"},"nativeSrc":"34001:77:17","nodeType":"YulIf","src":"34001:77:17"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"34098:4:17","nodeType":"YulIdentifier","src":"34098:4:17"},{"arguments":[{"name":"value","nativeSrc":"34157:5:17","nodeType":"YulIdentifier","src":"34157:5:17"},{"name":"newLen","nativeSrc":"34164:6:17","nodeType":"YulIdentifier","src":"34164:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"34104:52:17","nodeType":"YulIdentifier","src":"34104:52:17"},"nativeSrc":"34104:67:17","nodeType":"YulFunctionCall","src":"34104:67:17"}],"functionName":{"name":"sstore","nativeSrc":"34091:6:17","nodeType":"YulIdentifier","src":"34091:6:17"},"nativeSrc":"34091:81:17","nodeType":"YulFunctionCall","src":"34091:81:17"},"nativeSrc":"34091:81:17","nodeType":"YulExpressionStatement","src":"34091:81:17"}]},"nativeSrc":"33952:230:17","nodeType":"YulCase","src":"33952:230:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"33305:6:17","nodeType":"YulIdentifier","src":"33305:6:17"},{"kind":"number","nativeSrc":"33313:2:17","nodeType":"YulLiteral","src":"33313:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"33302:2:17","nodeType":"YulIdentifier","src":"33302:2:17"},"nativeSrc":"33302:14:17","nodeType":"YulFunctionCall","src":"33302:14:17"},"nativeSrc":"33295:887:17","nodeType":"YulSwitch","src":"33295:887:17"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"32793:1395:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"32874:4:17","nodeType":"YulTypedName","src":"32874:4:17","type":""},{"name":"src","nativeSrc":"32880:3:17","nodeType":"YulTypedName","src":"32880:3:17","type":""}],"src":"32793:1395:17"},{"body":{"nativeSrc":"34300:68:17","nodeType":"YulBlock","src":"34300:68:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"34322:6:17","nodeType":"YulIdentifier","src":"34322:6:17"},{"kind":"number","nativeSrc":"34330:1:17","nodeType":"YulLiteral","src":"34330:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"34318:3:17","nodeType":"YulIdentifier","src":"34318:3:17"},"nativeSrc":"34318:14:17","nodeType":"YulFunctionCall","src":"34318:14:17"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nativeSrc":"34334:26:17","nodeType":"YulLiteral","src":"34334:26:17","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nativeSrc":"34311:6:17","nodeType":"YulIdentifier","src":"34311:6:17"},"nativeSrc":"34311:50:17","nodeType":"YulFunctionCall","src":"34311:50:17"},"nativeSrc":"34311:50:17","nodeType":"YulExpressionStatement","src":"34311:50:17"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"34194:174:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"34292:6:17","nodeType":"YulTypedName","src":"34292:6:17","type":""}],"src":"34194:174:17"},{"body":{"nativeSrc":"34520:220:17","nodeType":"YulBlock","src":"34520:220:17","statements":[{"nativeSrc":"34530:74:17","nodeType":"YulAssignment","src":"34530:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"34596:3:17","nodeType":"YulIdentifier","src":"34596:3:17"},{"kind":"number","nativeSrc":"34601:2:17","nodeType":"YulLiteral","src":"34601:2:17","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"34537:58:17","nodeType":"YulIdentifier","src":"34537:58:17"},"nativeSrc":"34537:67:17","nodeType":"YulFunctionCall","src":"34537:67:17"},"variableNames":[{"name":"pos","nativeSrc":"34530:3:17","nodeType":"YulIdentifier","src":"34530:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"34702:3:17","nodeType":"YulIdentifier","src":"34702:3:17"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"34613:88:17","nodeType":"YulIdentifier","src":"34613:88:17"},"nativeSrc":"34613:93:17","nodeType":"YulFunctionCall","src":"34613:93:17"},"nativeSrc":"34613:93:17","nodeType":"YulExpressionStatement","src":"34613:93:17"},{"nativeSrc":"34715:19:17","nodeType":"YulAssignment","src":"34715:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"34726:3:17","nodeType":"YulIdentifier","src":"34726:3:17"},{"kind":"number","nativeSrc":"34731:2:17","nodeType":"YulLiteral","src":"34731:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"34722:3:17","nodeType":"YulIdentifier","src":"34722:3:17"},"nativeSrc":"34722:12:17","nodeType":"YulFunctionCall","src":"34722:12:17"},"variableNames":[{"name":"end","nativeSrc":"34715:3:17","nodeType":"YulIdentifier","src":"34715:3:17"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"34374:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"34508:3:17","nodeType":"YulTypedName","src":"34508:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"34516:3:17","nodeType":"YulTypedName","src":"34516:3:17","type":""}],"src":"34374:366:17"},{"body":{"nativeSrc":"34917:248:17","nodeType":"YulBlock","src":"34917:248:17","statements":[{"nativeSrc":"34927:26:17","nodeType":"YulAssignment","src":"34927:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"34939:9:17","nodeType":"YulIdentifier","src":"34939:9:17"},{"kind":"number","nativeSrc":"34950:2:17","nodeType":"YulLiteral","src":"34950:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"34935:3:17","nodeType":"YulIdentifier","src":"34935:3:17"},"nativeSrc":"34935:18:17","nodeType":"YulFunctionCall","src":"34935:18:17"},"variableNames":[{"name":"tail","nativeSrc":"34927:4:17","nodeType":"YulIdentifier","src":"34927:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"34974:9:17","nodeType":"YulIdentifier","src":"34974:9:17"},{"kind":"number","nativeSrc":"34985:1:17","nodeType":"YulLiteral","src":"34985:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"34970:3:17","nodeType":"YulIdentifier","src":"34970:3:17"},"nativeSrc":"34970:17:17","nodeType":"YulFunctionCall","src":"34970:17:17"},{"arguments":[{"name":"tail","nativeSrc":"34993:4:17","nodeType":"YulIdentifier","src":"34993:4:17"},{"name":"headStart","nativeSrc":"34999:9:17","nodeType":"YulIdentifier","src":"34999:9:17"}],"functionName":{"name":"sub","nativeSrc":"34989:3:17","nodeType":"YulIdentifier","src":"34989:3:17"},"nativeSrc":"34989:20:17","nodeType":"YulFunctionCall","src":"34989:20:17"}],"functionName":{"name":"mstore","nativeSrc":"34963:6:17","nodeType":"YulIdentifier","src":"34963:6:17"},"nativeSrc":"34963:47:17","nodeType":"YulFunctionCall","src":"34963:47:17"},"nativeSrc":"34963:47:17","nodeType":"YulExpressionStatement","src":"34963:47:17"},{"nativeSrc":"35019:139:17","nodeType":"YulAssignment","src":"35019:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"35153:4:17","nodeType":"YulIdentifier","src":"35153:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"35027:124:17","nodeType":"YulIdentifier","src":"35027:124:17"},"nativeSrc":"35027:131:17","nodeType":"YulFunctionCall","src":"35027:131:17"},"variableNames":[{"name":"tail","nativeSrc":"35019:4:17","nodeType":"YulIdentifier","src":"35019:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"34746:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"34897:9:17","nodeType":"YulTypedName","src":"34897:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"34912:4:17","nodeType":"YulTypedName","src":"34912:4:17","type":""}],"src":"34746:419:17"},{"body":{"nativeSrc":"35277:122:17","nodeType":"YulBlock","src":"35277:122:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"35299:6:17","nodeType":"YulIdentifier","src":"35299:6:17"},{"kind":"number","nativeSrc":"35307:1:17","nodeType":"YulLiteral","src":"35307:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"35295:3:17","nodeType":"YulIdentifier","src":"35295:3:17"},"nativeSrc":"35295:14:17","nodeType":"YulFunctionCall","src":"35295:14:17"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nativeSrc":"35311:34:17","nodeType":"YulLiteral","src":"35311:34:17","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nativeSrc":"35288:6:17","nodeType":"YulIdentifier","src":"35288:6:17"},"nativeSrc":"35288:58:17","nodeType":"YulFunctionCall","src":"35288:58:17"},"nativeSrc":"35288:58:17","nodeType":"YulExpressionStatement","src":"35288:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"35367:6:17","nodeType":"YulIdentifier","src":"35367:6:17"},{"kind":"number","nativeSrc":"35375:2:17","nodeType":"YulLiteral","src":"35375:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"35363:3:17","nodeType":"YulIdentifier","src":"35363:3:17"},"nativeSrc":"35363:15:17","nodeType":"YulFunctionCall","src":"35363:15:17"},{"hexValue":"6c6964206f776e6572","kind":"string","nativeSrc":"35380:11:17","nodeType":"YulLiteral","src":"35380:11:17","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nativeSrc":"35356:6:17","nodeType":"YulIdentifier","src":"35356:6:17"},"nativeSrc":"35356:36:17","nodeType":"YulFunctionCall","src":"35356:36:17"},"nativeSrc":"35356:36:17","nodeType":"YulExpressionStatement","src":"35356:36:17"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"35171:228:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"35269:6:17","nodeType":"YulTypedName","src":"35269:6:17","type":""}],"src":"35171:228:17"},{"body":{"nativeSrc":"35551:220:17","nodeType":"YulBlock","src":"35551:220:17","statements":[{"nativeSrc":"35561:74:17","nodeType":"YulAssignment","src":"35561:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"35627:3:17","nodeType":"YulIdentifier","src":"35627:3:17"},{"kind":"number","nativeSrc":"35632:2:17","nodeType":"YulLiteral","src":"35632:2:17","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"35568:58:17","nodeType":"YulIdentifier","src":"35568:58:17"},"nativeSrc":"35568:67:17","nodeType":"YulFunctionCall","src":"35568:67:17"},"variableNames":[{"name":"pos","nativeSrc":"35561:3:17","nodeType":"YulIdentifier","src":"35561:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"35733:3:17","nodeType":"YulIdentifier","src":"35733:3:17"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"35644:88:17","nodeType":"YulIdentifier","src":"35644:88:17"},"nativeSrc":"35644:93:17","nodeType":"YulFunctionCall","src":"35644:93:17"},"nativeSrc":"35644:93:17","nodeType":"YulExpressionStatement","src":"35644:93:17"},{"nativeSrc":"35746:19:17","nodeType":"YulAssignment","src":"35746:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"35757:3:17","nodeType":"YulIdentifier","src":"35757:3:17"},{"kind":"number","nativeSrc":"35762:2:17","nodeType":"YulLiteral","src":"35762:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"35753:3:17","nodeType":"YulIdentifier","src":"35753:3:17"},"nativeSrc":"35753:12:17","nodeType":"YulFunctionCall","src":"35753:12:17"},"variableNames":[{"name":"end","nativeSrc":"35746:3:17","nodeType":"YulIdentifier","src":"35746:3:17"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"35405:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"35539:3:17","nodeType":"YulTypedName","src":"35539:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"35547:3:17","nodeType":"YulTypedName","src":"35547:3:17","type":""}],"src":"35405:366:17"},{"body":{"nativeSrc":"35948:248:17","nodeType":"YulBlock","src":"35948:248:17","statements":[{"nativeSrc":"35958:26:17","nodeType":"YulAssignment","src":"35958:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"35970:9:17","nodeType":"YulIdentifier","src":"35970:9:17"},{"kind":"number","nativeSrc":"35981:2:17","nodeType":"YulLiteral","src":"35981:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"35966:3:17","nodeType":"YulIdentifier","src":"35966:3:17"},"nativeSrc":"35966:18:17","nodeType":"YulFunctionCall","src":"35966:18:17"},"variableNames":[{"name":"tail","nativeSrc":"35958:4:17","nodeType":"YulIdentifier","src":"35958:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36005:9:17","nodeType":"YulIdentifier","src":"36005:9:17"},{"kind":"number","nativeSrc":"36016:1:17","nodeType":"YulLiteral","src":"36016:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"36001:3:17","nodeType":"YulIdentifier","src":"36001:3:17"},"nativeSrc":"36001:17:17","nodeType":"YulFunctionCall","src":"36001:17:17"},{"arguments":[{"name":"tail","nativeSrc":"36024:4:17","nodeType":"YulIdentifier","src":"36024:4:17"},{"name":"headStart","nativeSrc":"36030:9:17","nodeType":"YulIdentifier","src":"36030:9:17"}],"functionName":{"name":"sub","nativeSrc":"36020:3:17","nodeType":"YulIdentifier","src":"36020:3:17"},"nativeSrc":"36020:20:17","nodeType":"YulFunctionCall","src":"36020:20:17"}],"functionName":{"name":"mstore","nativeSrc":"35994:6:17","nodeType":"YulIdentifier","src":"35994:6:17"},"nativeSrc":"35994:47:17","nodeType":"YulFunctionCall","src":"35994:47:17"},"nativeSrc":"35994:47:17","nodeType":"YulExpressionStatement","src":"35994:47:17"},{"nativeSrc":"36050:139:17","nodeType":"YulAssignment","src":"36050:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"36184:4:17","nodeType":"YulIdentifier","src":"36184:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"36058:124:17","nodeType":"YulIdentifier","src":"36058:124:17"},"nativeSrc":"36058:131:17","nodeType":"YulFunctionCall","src":"36058:131:17"},"variableNames":[{"name":"tail","nativeSrc":"36050:4:17","nodeType":"YulIdentifier","src":"36050:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"35777:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"35928:9:17","nodeType":"YulTypedName","src":"35928:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"35943:4:17","nodeType":"YulTypedName","src":"35943:4:17","type":""}],"src":"35777:419:17"},{"body":{"nativeSrc":"36308:122:17","nodeType":"YulBlock","src":"36308:122:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"36330:6:17","nodeType":"YulIdentifier","src":"36330:6:17"},{"kind":"number","nativeSrc":"36338:1:17","nodeType":"YulLiteral","src":"36338:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"36326:3:17","nodeType":"YulIdentifier","src":"36326:3:17"},"nativeSrc":"36326:14:17","nodeType":"YulFunctionCall","src":"36326:14:17"},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f742074686520","kind":"string","nativeSrc":"36342:34:17","nodeType":"YulLiteral","src":"36342:34:17","type":"","value":"Ownable2Step: caller is not the "}],"functionName":{"name":"mstore","nativeSrc":"36319:6:17","nodeType":"YulIdentifier","src":"36319:6:17"},"nativeSrc":"36319:58:17","nodeType":"YulFunctionCall","src":"36319:58:17"},"nativeSrc":"36319:58:17","nodeType":"YulExpressionStatement","src":"36319:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"36398:6:17","nodeType":"YulIdentifier","src":"36398:6:17"},{"kind":"number","nativeSrc":"36406:2:17","nodeType":"YulLiteral","src":"36406:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"36394:3:17","nodeType":"YulIdentifier","src":"36394:3:17"},"nativeSrc":"36394:15:17","nodeType":"YulFunctionCall","src":"36394:15:17"},{"hexValue":"6e6577206f776e6572","kind":"string","nativeSrc":"36411:11:17","nodeType":"YulLiteral","src":"36411:11:17","type":"","value":"new owner"}],"functionName":{"name":"mstore","nativeSrc":"36387:6:17","nodeType":"YulIdentifier","src":"36387:6:17"},"nativeSrc":"36387:36:17","nodeType":"YulFunctionCall","src":"36387:36:17"},"nativeSrc":"36387:36:17","nodeType":"YulExpressionStatement","src":"36387:36:17"}]},"name":"store_literal_in_memory_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","nativeSrc":"36202:228:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"36300:6:17","nodeType":"YulTypedName","src":"36300:6:17","type":""}],"src":"36202:228:17"},{"body":{"nativeSrc":"36582:220:17","nodeType":"YulBlock","src":"36582:220:17","statements":[{"nativeSrc":"36592:74:17","nodeType":"YulAssignment","src":"36592:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"36658:3:17","nodeType":"YulIdentifier","src":"36658:3:17"},{"kind":"number","nativeSrc":"36663:2:17","nodeType":"YulLiteral","src":"36663:2:17","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"36599:58:17","nodeType":"YulIdentifier","src":"36599:58:17"},"nativeSrc":"36599:67:17","nodeType":"YulFunctionCall","src":"36599:67:17"},"variableNames":[{"name":"pos","nativeSrc":"36592:3:17","nodeType":"YulIdentifier","src":"36592:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"36764:3:17","nodeType":"YulIdentifier","src":"36764:3:17"}],"functionName":{"name":"store_literal_in_memory_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","nativeSrc":"36675:88:17","nodeType":"YulIdentifier","src":"36675:88:17"},"nativeSrc":"36675:93:17","nodeType":"YulFunctionCall","src":"36675:93:17"},"nativeSrc":"36675:93:17","nodeType":"YulExpressionStatement","src":"36675:93:17"},{"nativeSrc":"36777:19:17","nodeType":"YulAssignment","src":"36777:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"36788:3:17","nodeType":"YulIdentifier","src":"36788:3:17"},{"kind":"number","nativeSrc":"36793:2:17","nodeType":"YulLiteral","src":"36793:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"36784:3:17","nodeType":"YulIdentifier","src":"36784:3:17"},"nativeSrc":"36784:12:17","nodeType":"YulFunctionCall","src":"36784:12:17"},"variableNames":[{"name":"end","nativeSrc":"36777:3:17","nodeType":"YulIdentifier","src":"36777:3:17"}]}]},"name":"abi_encode_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc_to_t_string_memory_ptr_fromStack","nativeSrc":"36436:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"36570:3:17","nodeType":"YulTypedName","src":"36570:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"36578:3:17","nodeType":"YulTypedName","src":"36578:3:17","type":""}],"src":"36436:366:17"},{"body":{"nativeSrc":"36979:248:17","nodeType":"YulBlock","src":"36979:248:17","statements":[{"nativeSrc":"36989:26:17","nodeType":"YulAssignment","src":"36989:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"37001:9:17","nodeType":"YulIdentifier","src":"37001:9:17"},{"kind":"number","nativeSrc":"37012:2:17","nodeType":"YulLiteral","src":"37012:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"36997:3:17","nodeType":"YulIdentifier","src":"36997:3:17"},"nativeSrc":"36997:18:17","nodeType":"YulFunctionCall","src":"36997:18:17"},"variableNames":[{"name":"tail","nativeSrc":"36989:4:17","nodeType":"YulIdentifier","src":"36989:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37036:9:17","nodeType":"YulIdentifier","src":"37036:9:17"},{"kind":"number","nativeSrc":"37047:1:17","nodeType":"YulLiteral","src":"37047:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"37032:3:17","nodeType":"YulIdentifier","src":"37032:3:17"},"nativeSrc":"37032:17:17","nodeType":"YulFunctionCall","src":"37032:17:17"},{"arguments":[{"name":"tail","nativeSrc":"37055:4:17","nodeType":"YulIdentifier","src":"37055:4:17"},{"name":"headStart","nativeSrc":"37061:9:17","nodeType":"YulIdentifier","src":"37061:9:17"}],"functionName":{"name":"sub","nativeSrc":"37051:3:17","nodeType":"YulIdentifier","src":"37051:3:17"},"nativeSrc":"37051:20:17","nodeType":"YulFunctionCall","src":"37051:20:17"}],"functionName":{"name":"mstore","nativeSrc":"37025:6:17","nodeType":"YulIdentifier","src":"37025:6:17"},"nativeSrc":"37025:47:17","nodeType":"YulFunctionCall","src":"37025:47:17"},"nativeSrc":"37025:47:17","nodeType":"YulExpressionStatement","src":"37025:47:17"},{"nativeSrc":"37081:139:17","nodeType":"YulAssignment","src":"37081:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"37215:4:17","nodeType":"YulIdentifier","src":"37215:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc_to_t_string_memory_ptr_fromStack","nativeSrc":"37089:124:17","nodeType":"YulIdentifier","src":"37089:124:17"},"nativeSrc":"37089:131:17","nodeType":"YulFunctionCall","src":"37089:131:17"},"variableNames":[{"name":"tail","nativeSrc":"37081:4:17","nodeType":"YulIdentifier","src":"37081:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"36808:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"36959:9:17","nodeType":"YulTypedName","src":"36959:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"36974:4:17","nodeType":"YulTypedName","src":"36974:4:17","type":""}],"src":"36808:419:17"},{"body":{"nativeSrc":"37347:34:17","nodeType":"YulBlock","src":"37347:34:17","statements":[{"nativeSrc":"37357:18:17","nodeType":"YulAssignment","src":"37357:18:17","value":{"name":"pos","nativeSrc":"37372:3:17","nodeType":"YulIdentifier","src":"37372:3:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"37357:11:17","nodeType":"YulIdentifier","src":"37357:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"37233:148:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"37319:3:17","nodeType":"YulTypedName","src":"37319:3:17","type":""},{"name":"length","nativeSrc":"37324:6:17","nodeType":"YulTypedName","src":"37324:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"37335:11:17","nodeType":"YulTypedName","src":"37335:11:17","type":""}],"src":"37233:148:17"},{"body":{"nativeSrc":"37497:280:17","nodeType":"YulBlock","src":"37497:280:17","statements":[{"nativeSrc":"37507:53:17","nodeType":"YulVariableDeclaration","src":"37507:53:17","value":{"arguments":[{"name":"value","nativeSrc":"37554:5:17","nodeType":"YulIdentifier","src":"37554:5:17"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"37521:32:17","nodeType":"YulIdentifier","src":"37521:32:17"},"nativeSrc":"37521:39:17","nodeType":"YulFunctionCall","src":"37521:39:17"},"variables":[{"name":"length","nativeSrc":"37511:6:17","nodeType":"YulTypedName","src":"37511:6:17","type":""}]},{"nativeSrc":"37569:96:17","nodeType":"YulAssignment","src":"37569:96:17","value":{"arguments":[{"name":"pos","nativeSrc":"37653:3:17","nodeType":"YulIdentifier","src":"37653:3:17"},{"name":"length","nativeSrc":"37658:6:17","nodeType":"YulIdentifier","src":"37658:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"37576:76:17","nodeType":"YulIdentifier","src":"37576:76:17"},"nativeSrc":"37576:89:17","nodeType":"YulFunctionCall","src":"37576:89:17"},"variableNames":[{"name":"pos","nativeSrc":"37569:3:17","nodeType":"YulIdentifier","src":"37569:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"37713:5:17","nodeType":"YulIdentifier","src":"37713:5:17"},{"kind":"number","nativeSrc":"37720:4:17","nodeType":"YulLiteral","src":"37720:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"37709:3:17","nodeType":"YulIdentifier","src":"37709:3:17"},"nativeSrc":"37709:16:17","nodeType":"YulFunctionCall","src":"37709:16:17"},{"name":"pos","nativeSrc":"37727:3:17","nodeType":"YulIdentifier","src":"37727:3:17"},{"name":"length","nativeSrc":"37732:6:17","nodeType":"YulIdentifier","src":"37732:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"37674:34:17","nodeType":"YulIdentifier","src":"37674:34:17"},"nativeSrc":"37674:65:17","nodeType":"YulFunctionCall","src":"37674:65:17"},"nativeSrc":"37674:65:17","nodeType":"YulExpressionStatement","src":"37674:65:17"},{"nativeSrc":"37748:23:17","nodeType":"YulAssignment","src":"37748:23:17","value":{"arguments":[{"name":"pos","nativeSrc":"37759:3:17","nodeType":"YulIdentifier","src":"37759:3:17"},{"name":"length","nativeSrc":"37764:6:17","nodeType":"YulIdentifier","src":"37764:6:17"}],"functionName":{"name":"add","nativeSrc":"37755:3:17","nodeType":"YulIdentifier","src":"37755:3:17"},"nativeSrc":"37755:16:17","nodeType":"YulFunctionCall","src":"37755:16:17"},"variableNames":[{"name":"end","nativeSrc":"37748:3:17","nodeType":"YulIdentifier","src":"37748:3:17"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"37387:390:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"37478:5:17","nodeType":"YulTypedName","src":"37478:5:17","type":""},{"name":"pos","nativeSrc":"37485:3:17","nodeType":"YulTypedName","src":"37485:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"37493:3:17","nodeType":"YulTypedName","src":"37493:3:17","type":""}],"src":"37387:390:17"},{"body":{"nativeSrc":"37967:251:17","nodeType":"YulBlock","src":"37967:251:17","statements":[{"nativeSrc":"37978:102:17","nodeType":"YulAssignment","src":"37978:102:17","value":{"arguments":[{"name":"value0","nativeSrc":"38067:6:17","nodeType":"YulIdentifier","src":"38067:6:17"},{"name":"pos","nativeSrc":"38076:3:17","nodeType":"YulIdentifier","src":"38076:3:17"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"37985:81:17","nodeType":"YulIdentifier","src":"37985:81:17"},"nativeSrc":"37985:95:17","nodeType":"YulFunctionCall","src":"37985:95:17"},"variableNames":[{"name":"pos","nativeSrc":"37978:3:17","nodeType":"YulIdentifier","src":"37978:3:17"}]},{"nativeSrc":"38090:102:17","nodeType":"YulAssignment","src":"38090:102:17","value":{"arguments":[{"name":"value1","nativeSrc":"38179:6:17","nodeType":"YulIdentifier","src":"38179:6:17"},{"name":"pos","nativeSrc":"38188:3:17","nodeType":"YulIdentifier","src":"38188:3:17"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"38097:81:17","nodeType":"YulIdentifier","src":"38097:81:17"},"nativeSrc":"38097:95:17","nodeType":"YulFunctionCall","src":"38097:95:17"},"variableNames":[{"name":"pos","nativeSrc":"38090:3:17","nodeType":"YulIdentifier","src":"38090:3:17"}]},{"nativeSrc":"38202:10:17","nodeType":"YulAssignment","src":"38202:10:17","value":{"name":"pos","nativeSrc":"38209:3:17","nodeType":"YulIdentifier","src":"38209:3:17"},"variableNames":[{"name":"end","nativeSrc":"38202:3:17","nodeType":"YulIdentifier","src":"38202:3:17"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"37783:435:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"37938:3:17","nodeType":"YulTypedName","src":"37938:3:17","type":""},{"name":"value1","nativeSrc":"37944:6:17","nodeType":"YulTypedName","src":"37944:6:17","type":""},{"name":"value0","nativeSrc":"37952:6:17","nodeType":"YulTypedName","src":"37952:6:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"37963:3:17","nodeType":"YulTypedName","src":"37963:3:17","type":""}],"src":"37783:435:17"},{"body":{"nativeSrc":"38330:116:17","nodeType":"YulBlock","src":"38330:116:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"38352:6:17","nodeType":"YulIdentifier","src":"38352:6:17"},{"kind":"number","nativeSrc":"38360:1:17","nodeType":"YulLiteral","src":"38360:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"38348:3:17","nodeType":"YulIdentifier","src":"38348:3:17"},"nativeSrc":"38348:14:17","nodeType":"YulFunctionCall","src":"38348:14:17"},{"hexValue":"74686520737570706c79206c696d6974206f6620313030302069732072656163","kind":"string","nativeSrc":"38364:34:17","nodeType":"YulLiteral","src":"38364:34:17","type":"","value":"the supply limit of 1000 is reac"}],"functionName":{"name":"mstore","nativeSrc":"38341:6:17","nodeType":"YulIdentifier","src":"38341:6:17"},"nativeSrc":"38341:58:17","nodeType":"YulFunctionCall","src":"38341:58:17"},"nativeSrc":"38341:58:17","nodeType":"YulExpressionStatement","src":"38341:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"38420:6:17","nodeType":"YulIdentifier","src":"38420:6:17"},{"kind":"number","nativeSrc":"38428:2:17","nodeType":"YulLiteral","src":"38428:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"38416:3:17","nodeType":"YulIdentifier","src":"38416:3:17"},"nativeSrc":"38416:15:17","nodeType":"YulFunctionCall","src":"38416:15:17"},{"hexValue":"686564","kind":"string","nativeSrc":"38433:5:17","nodeType":"YulLiteral","src":"38433:5:17","type":"","value":"hed"}],"functionName":{"name":"mstore","nativeSrc":"38409:6:17","nodeType":"YulIdentifier","src":"38409:6:17"},"nativeSrc":"38409:30:17","nodeType":"YulFunctionCall","src":"38409:30:17"},"nativeSrc":"38409:30:17","nodeType":"YulExpressionStatement","src":"38409:30:17"}]},"name":"store_literal_in_memory_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864","nativeSrc":"38224:222:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"38322:6:17","nodeType":"YulTypedName","src":"38322:6:17","type":""}],"src":"38224:222:17"},{"body":{"nativeSrc":"38598:220:17","nodeType":"YulBlock","src":"38598:220:17","statements":[{"nativeSrc":"38608:74:17","nodeType":"YulAssignment","src":"38608:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"38674:3:17","nodeType":"YulIdentifier","src":"38674:3:17"},{"kind":"number","nativeSrc":"38679:2:17","nodeType":"YulLiteral","src":"38679:2:17","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"38615:58:17","nodeType":"YulIdentifier","src":"38615:58:17"},"nativeSrc":"38615:67:17","nodeType":"YulFunctionCall","src":"38615:67:17"},"variableNames":[{"name":"pos","nativeSrc":"38608:3:17","nodeType":"YulIdentifier","src":"38608:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"38780:3:17","nodeType":"YulIdentifier","src":"38780:3:17"}],"functionName":{"name":"store_literal_in_memory_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864","nativeSrc":"38691:88:17","nodeType":"YulIdentifier","src":"38691:88:17"},"nativeSrc":"38691:93:17","nodeType":"YulFunctionCall","src":"38691:93:17"},"nativeSrc":"38691:93:17","nodeType":"YulExpressionStatement","src":"38691:93:17"},{"nativeSrc":"38793:19:17","nodeType":"YulAssignment","src":"38793:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"38804:3:17","nodeType":"YulIdentifier","src":"38804:3:17"},{"kind":"number","nativeSrc":"38809:2:17","nodeType":"YulLiteral","src":"38809:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"38800:3:17","nodeType":"YulIdentifier","src":"38800:3:17"},"nativeSrc":"38800:12:17","nodeType":"YulFunctionCall","src":"38800:12:17"},"variableNames":[{"name":"end","nativeSrc":"38793:3:17","nodeType":"YulIdentifier","src":"38793:3:17"}]}]},"name":"abi_encode_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864_to_t_string_memory_ptr_fromStack","nativeSrc":"38452:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"38586:3:17","nodeType":"YulTypedName","src":"38586:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"38594:3:17","nodeType":"YulTypedName","src":"38594:3:17","type":""}],"src":"38452:366:17"},{"body":{"nativeSrc":"38995:248:17","nodeType":"YulBlock","src":"38995:248:17","statements":[{"nativeSrc":"39005:26:17","nodeType":"YulAssignment","src":"39005:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"39017:9:17","nodeType":"YulIdentifier","src":"39017:9:17"},{"kind":"number","nativeSrc":"39028:2:17","nodeType":"YulLiteral","src":"39028:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"39013:3:17","nodeType":"YulIdentifier","src":"39013:3:17"},"nativeSrc":"39013:18:17","nodeType":"YulFunctionCall","src":"39013:18:17"},"variableNames":[{"name":"tail","nativeSrc":"39005:4:17","nodeType":"YulIdentifier","src":"39005:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"39052:9:17","nodeType":"YulIdentifier","src":"39052:9:17"},{"kind":"number","nativeSrc":"39063:1:17","nodeType":"YulLiteral","src":"39063:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"39048:3:17","nodeType":"YulIdentifier","src":"39048:3:17"},"nativeSrc":"39048:17:17","nodeType":"YulFunctionCall","src":"39048:17:17"},{"arguments":[{"name":"tail","nativeSrc":"39071:4:17","nodeType":"YulIdentifier","src":"39071:4:17"},{"name":"headStart","nativeSrc":"39077:9:17","nodeType":"YulIdentifier","src":"39077:9:17"}],"functionName":{"name":"sub","nativeSrc":"39067:3:17","nodeType":"YulIdentifier","src":"39067:3:17"},"nativeSrc":"39067:20:17","nodeType":"YulFunctionCall","src":"39067:20:17"}],"functionName":{"name":"mstore","nativeSrc":"39041:6:17","nodeType":"YulIdentifier","src":"39041:6:17"},"nativeSrc":"39041:47:17","nodeType":"YulFunctionCall","src":"39041:47:17"},"nativeSrc":"39041:47:17","nodeType":"YulExpressionStatement","src":"39041:47:17"},{"nativeSrc":"39097:139:17","nodeType":"YulAssignment","src":"39097:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"39231:4:17","nodeType":"YulIdentifier","src":"39231:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864_to_t_string_memory_ptr_fromStack","nativeSrc":"39105:124:17","nodeType":"YulIdentifier","src":"39105:124:17"},"nativeSrc":"39105:131:17","nodeType":"YulFunctionCall","src":"39105:131:17"},"variableNames":[{"name":"tail","nativeSrc":"39097:4:17","nodeType":"YulIdentifier","src":"39097:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"38824:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"38975:9:17","nodeType":"YulTypedName","src":"38975:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"38990:4:17","nodeType":"YulTypedName","src":"38990:4:17","type":""}],"src":"38824:419:17"},{"body":{"nativeSrc":"39293:147:17","nodeType":"YulBlock","src":"39293:147:17","statements":[{"nativeSrc":"39303:25:17","nodeType":"YulAssignment","src":"39303:25:17","value":{"arguments":[{"name":"x","nativeSrc":"39326:1:17","nodeType":"YulIdentifier","src":"39326:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"39308:17:17","nodeType":"YulIdentifier","src":"39308:17:17"},"nativeSrc":"39308:20:17","nodeType":"YulFunctionCall","src":"39308:20:17"},"variableNames":[{"name":"x","nativeSrc":"39303:1:17","nodeType":"YulIdentifier","src":"39303:1:17"}]},{"nativeSrc":"39337:25:17","nodeType":"YulAssignment","src":"39337:25:17","value":{"arguments":[{"name":"y","nativeSrc":"39360:1:17","nodeType":"YulIdentifier","src":"39360:1:17"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"39342:17:17","nodeType":"YulIdentifier","src":"39342:17:17"},"nativeSrc":"39342:20:17","nodeType":"YulFunctionCall","src":"39342:20:17"},"variableNames":[{"name":"y","nativeSrc":"39337:1:17","nodeType":"YulIdentifier","src":"39337:1:17"}]},{"nativeSrc":"39371:16:17","nodeType":"YulAssignment","src":"39371:16:17","value":{"arguments":[{"name":"x","nativeSrc":"39382:1:17","nodeType":"YulIdentifier","src":"39382:1:17"},{"name":"y","nativeSrc":"39385:1:17","nodeType":"YulIdentifier","src":"39385:1:17"}],"functionName":{"name":"add","nativeSrc":"39378:3:17","nodeType":"YulIdentifier","src":"39378:3:17"},"nativeSrc":"39378:9:17","nodeType":"YulFunctionCall","src":"39378:9:17"},"variableNames":[{"name":"sum","nativeSrc":"39371:3:17","nodeType":"YulIdentifier","src":"39371:3:17"}]},{"body":{"nativeSrc":"39411:22:17","nodeType":"YulBlock","src":"39411:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"39413:16:17","nodeType":"YulIdentifier","src":"39413:16:17"},"nativeSrc":"39413:18:17","nodeType":"YulFunctionCall","src":"39413:18:17"},"nativeSrc":"39413:18:17","nodeType":"YulExpressionStatement","src":"39413:18:17"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"39403:1:17","nodeType":"YulIdentifier","src":"39403:1:17"},{"name":"sum","nativeSrc":"39406:3:17","nodeType":"YulIdentifier","src":"39406:3:17"}],"functionName":{"name":"gt","nativeSrc":"39400:2:17","nodeType":"YulIdentifier","src":"39400:2:17"},"nativeSrc":"39400:10:17","nodeType":"YulFunctionCall","src":"39400:10:17"},"nativeSrc":"39397:36:17","nodeType":"YulIf","src":"39397:36:17"}]},"name":"checked_add_t_uint256","nativeSrc":"39249:191:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"39280:1:17","nodeType":"YulTypedName","src":"39280:1:17","type":""},{"name":"y","nativeSrc":"39283:1:17","nodeType":"YulTypedName","src":"39283:1:17","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"39289:3:17","nodeType":"YulTypedName","src":"39289:3:17","type":""}],"src":"39249:191:17"},{"body":{"nativeSrc":"39552:118:17","nodeType":"YulBlock","src":"39552:118:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"39574:6:17","nodeType":"YulIdentifier","src":"39574:6:17"},{"kind":"number","nativeSrc":"39582:1:17","nodeType":"YulLiteral","src":"39582:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"39570:3:17","nodeType":"YulIdentifier","src":"39570:3:17"},"nativeSrc":"39570:14:17","nodeType":"YulFunctionCall","src":"39570:14:17"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nativeSrc":"39586:34:17","nodeType":"YulLiteral","src":"39586:34:17","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nativeSrc":"39563:6:17","nodeType":"YulIdentifier","src":"39563:6:17"},"nativeSrc":"39563:58:17","nodeType":"YulFunctionCall","src":"39563:58:17"},"nativeSrc":"39563:58:17","nodeType":"YulExpressionStatement","src":"39563:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"39642:6:17","nodeType":"YulIdentifier","src":"39642:6:17"},{"kind":"number","nativeSrc":"39650:2:17","nodeType":"YulLiteral","src":"39650:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"39638:3:17","nodeType":"YulIdentifier","src":"39638:3:17"},"nativeSrc":"39638:15:17","nodeType":"YulFunctionCall","src":"39638:15:17"},{"hexValue":"6f776e6572","kind":"string","nativeSrc":"39655:7:17","nodeType":"YulLiteral","src":"39655:7:17","type":"","value":"owner"}],"functionName":{"name":"mstore","nativeSrc":"39631:6:17","nodeType":"YulIdentifier","src":"39631:6:17"},"nativeSrc":"39631:32:17","nodeType":"YulFunctionCall","src":"39631:32:17"},"nativeSrc":"39631:32:17","nodeType":"YulExpressionStatement","src":"39631:32:17"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"39446:224:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"39544:6:17","nodeType":"YulTypedName","src":"39544:6:17","type":""}],"src":"39446:224:17"},{"body":{"nativeSrc":"39822:220:17","nodeType":"YulBlock","src":"39822:220:17","statements":[{"nativeSrc":"39832:74:17","nodeType":"YulAssignment","src":"39832:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"39898:3:17","nodeType":"YulIdentifier","src":"39898:3:17"},{"kind":"number","nativeSrc":"39903:2:17","nodeType":"YulLiteral","src":"39903:2:17","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"39839:58:17","nodeType":"YulIdentifier","src":"39839:58:17"},"nativeSrc":"39839:67:17","nodeType":"YulFunctionCall","src":"39839:67:17"},"variableNames":[{"name":"pos","nativeSrc":"39832:3:17","nodeType":"YulIdentifier","src":"39832:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"40004:3:17","nodeType":"YulIdentifier","src":"40004:3:17"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"39915:88:17","nodeType":"YulIdentifier","src":"39915:88:17"},"nativeSrc":"39915:93:17","nodeType":"YulFunctionCall","src":"39915:93:17"},"nativeSrc":"39915:93:17","nodeType":"YulExpressionStatement","src":"39915:93:17"},{"nativeSrc":"40017:19:17","nodeType":"YulAssignment","src":"40017:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"40028:3:17","nodeType":"YulIdentifier","src":"40028:3:17"},{"kind":"number","nativeSrc":"40033:2:17","nodeType":"YulLiteral","src":"40033:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"40024:3:17","nodeType":"YulIdentifier","src":"40024:3:17"},"nativeSrc":"40024:12:17","nodeType":"YulFunctionCall","src":"40024:12:17"},"variableNames":[{"name":"end","nativeSrc":"40017:3:17","nodeType":"YulIdentifier","src":"40017:3:17"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"39676:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"39810:3:17","nodeType":"YulTypedName","src":"39810:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"39818:3:17","nodeType":"YulTypedName","src":"39818:3:17","type":""}],"src":"39676:366:17"},{"body":{"nativeSrc":"40219:248:17","nodeType":"YulBlock","src":"40219:248:17","statements":[{"nativeSrc":"40229:26:17","nodeType":"YulAssignment","src":"40229:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"40241:9:17","nodeType":"YulIdentifier","src":"40241:9:17"},{"kind":"number","nativeSrc":"40252:2:17","nodeType":"YulLiteral","src":"40252:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"40237:3:17","nodeType":"YulIdentifier","src":"40237:3:17"},"nativeSrc":"40237:18:17","nodeType":"YulFunctionCall","src":"40237:18:17"},"variableNames":[{"name":"tail","nativeSrc":"40229:4:17","nodeType":"YulIdentifier","src":"40229:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"40276:9:17","nodeType":"YulIdentifier","src":"40276:9:17"},{"kind":"number","nativeSrc":"40287:1:17","nodeType":"YulLiteral","src":"40287:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"40272:3:17","nodeType":"YulIdentifier","src":"40272:3:17"},"nativeSrc":"40272:17:17","nodeType":"YulFunctionCall","src":"40272:17:17"},{"arguments":[{"name":"tail","nativeSrc":"40295:4:17","nodeType":"YulIdentifier","src":"40295:4:17"},{"name":"headStart","nativeSrc":"40301:9:17","nodeType":"YulIdentifier","src":"40301:9:17"}],"functionName":{"name":"sub","nativeSrc":"40291:3:17","nodeType":"YulIdentifier","src":"40291:3:17"},"nativeSrc":"40291:20:17","nodeType":"YulFunctionCall","src":"40291:20:17"}],"functionName":{"name":"mstore","nativeSrc":"40265:6:17","nodeType":"YulIdentifier","src":"40265:6:17"},"nativeSrc":"40265:47:17","nodeType":"YulFunctionCall","src":"40265:47:17"},"nativeSrc":"40265:47:17","nodeType":"YulExpressionStatement","src":"40265:47:17"},{"nativeSrc":"40321:139:17","nodeType":"YulAssignment","src":"40321:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"40455:4:17","nodeType":"YulIdentifier","src":"40455:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"40329:124:17","nodeType":"YulIdentifier","src":"40329:124:17"},"nativeSrc":"40329:131:17","nodeType":"YulFunctionCall","src":"40329:131:17"},"variableNames":[{"name":"tail","nativeSrc":"40321:4:17","nodeType":"YulIdentifier","src":"40321:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"40048:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"40199:9:17","nodeType":"YulTypedName","src":"40199:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"40214:4:17","nodeType":"YulTypedName","src":"40214:4:17","type":""}],"src":"40048:419:17"},{"body":{"nativeSrc":"40579:117:17","nodeType":"YulBlock","src":"40579:117:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"40601:6:17","nodeType":"YulIdentifier","src":"40601:6:17"},{"kind":"number","nativeSrc":"40609:1:17","nodeType":"YulLiteral","src":"40609:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"40597:3:17","nodeType":"YulIdentifier","src":"40597:3:17"},"nativeSrc":"40597:14:17","nodeType":"YulFunctionCall","src":"40597:14:17"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nativeSrc":"40613:34:17","nodeType":"YulLiteral","src":"40613:34:17","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nativeSrc":"40590:6:17","nodeType":"YulIdentifier","src":"40590:6:17"},"nativeSrc":"40590:58:17","nodeType":"YulFunctionCall","src":"40590:58:17"},"nativeSrc":"40590:58:17","nodeType":"YulExpressionStatement","src":"40590:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"40669:6:17","nodeType":"YulIdentifier","src":"40669:6:17"},{"kind":"number","nativeSrc":"40677:2:17","nodeType":"YulLiteral","src":"40677:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"40665:3:17","nodeType":"YulIdentifier","src":"40665:3:17"},"nativeSrc":"40665:15:17","nodeType":"YulFunctionCall","src":"40665:15:17"},{"hexValue":"72657373","kind":"string","nativeSrc":"40682:6:17","nodeType":"YulLiteral","src":"40682:6:17","type":"","value":"ress"}],"functionName":{"name":"mstore","nativeSrc":"40658:6:17","nodeType":"YulIdentifier","src":"40658:6:17"},"nativeSrc":"40658:31:17","nodeType":"YulFunctionCall","src":"40658:31:17"},"nativeSrc":"40658:31:17","nodeType":"YulExpressionStatement","src":"40658:31:17"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"40473:223:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"40571:6:17","nodeType":"YulTypedName","src":"40571:6:17","type":""}],"src":"40473:223:17"},{"body":{"nativeSrc":"40848:220:17","nodeType":"YulBlock","src":"40848:220:17","statements":[{"nativeSrc":"40858:74:17","nodeType":"YulAssignment","src":"40858:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"40924:3:17","nodeType":"YulIdentifier","src":"40924:3:17"},{"kind":"number","nativeSrc":"40929:2:17","nodeType":"YulLiteral","src":"40929:2:17","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"40865:58:17","nodeType":"YulIdentifier","src":"40865:58:17"},"nativeSrc":"40865:67:17","nodeType":"YulFunctionCall","src":"40865:67:17"},"variableNames":[{"name":"pos","nativeSrc":"40858:3:17","nodeType":"YulIdentifier","src":"40858:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"41030:3:17","nodeType":"YulIdentifier","src":"41030:3:17"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"40941:88:17","nodeType":"YulIdentifier","src":"40941:88:17"},"nativeSrc":"40941:93:17","nodeType":"YulFunctionCall","src":"40941:93:17"},"nativeSrc":"40941:93:17","nodeType":"YulExpressionStatement","src":"40941:93:17"},{"nativeSrc":"41043:19:17","nodeType":"YulAssignment","src":"41043:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"41054:3:17","nodeType":"YulIdentifier","src":"41054:3:17"},{"kind":"number","nativeSrc":"41059:2:17","nodeType":"YulLiteral","src":"41059:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"41050:3:17","nodeType":"YulIdentifier","src":"41050:3:17"},"nativeSrc":"41050:12:17","nodeType":"YulFunctionCall","src":"41050:12:17"},"variableNames":[{"name":"end","nativeSrc":"41043:3:17","nodeType":"YulIdentifier","src":"41043:3:17"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"40702:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"40836:3:17","nodeType":"YulTypedName","src":"40836:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"40844:3:17","nodeType":"YulTypedName","src":"40844:3:17","type":""}],"src":"40702:366:17"},{"body":{"nativeSrc":"41245:248:17","nodeType":"YulBlock","src":"41245:248:17","statements":[{"nativeSrc":"41255:26:17","nodeType":"YulAssignment","src":"41255:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"41267:9:17","nodeType":"YulIdentifier","src":"41267:9:17"},{"kind":"number","nativeSrc":"41278:2:17","nodeType":"YulLiteral","src":"41278:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"41263:3:17","nodeType":"YulIdentifier","src":"41263:3:17"},"nativeSrc":"41263:18:17","nodeType":"YulFunctionCall","src":"41263:18:17"},"variableNames":[{"name":"tail","nativeSrc":"41255:4:17","nodeType":"YulIdentifier","src":"41255:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"41302:9:17","nodeType":"YulIdentifier","src":"41302:9:17"},{"kind":"number","nativeSrc":"41313:1:17","nodeType":"YulLiteral","src":"41313:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"41298:3:17","nodeType":"YulIdentifier","src":"41298:3:17"},"nativeSrc":"41298:17:17","nodeType":"YulFunctionCall","src":"41298:17:17"},{"arguments":[{"name":"tail","nativeSrc":"41321:4:17","nodeType":"YulIdentifier","src":"41321:4:17"},{"name":"headStart","nativeSrc":"41327:9:17","nodeType":"YulIdentifier","src":"41327:9:17"}],"functionName":{"name":"sub","nativeSrc":"41317:3:17","nodeType":"YulIdentifier","src":"41317:3:17"},"nativeSrc":"41317:20:17","nodeType":"YulFunctionCall","src":"41317:20:17"}],"functionName":{"name":"mstore","nativeSrc":"41291:6:17","nodeType":"YulIdentifier","src":"41291:6:17"},"nativeSrc":"41291:47:17","nodeType":"YulFunctionCall","src":"41291:47:17"},"nativeSrc":"41291:47:17","nodeType":"YulExpressionStatement","src":"41291:47:17"},{"nativeSrc":"41347:139:17","nodeType":"YulAssignment","src":"41347:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"41481:4:17","nodeType":"YulIdentifier","src":"41481:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"41355:124:17","nodeType":"YulIdentifier","src":"41355:124:17"},"nativeSrc":"41355:131:17","nodeType":"YulFunctionCall","src":"41355:131:17"},"variableNames":[{"name":"tail","nativeSrc":"41347:4:17","nodeType":"YulIdentifier","src":"41347:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"41074:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"41225:9:17","nodeType":"YulTypedName","src":"41225:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"41240:4:17","nodeType":"YulTypedName","src":"41240:4:17","type":""}],"src":"41074:419:17"},{"body":{"nativeSrc":"41605:76:17","nodeType":"YulBlock","src":"41605:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"41627:6:17","nodeType":"YulIdentifier","src":"41627:6:17"},{"kind":"number","nativeSrc":"41635:1:17","nodeType":"YulLiteral","src":"41635:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"41623:3:17","nodeType":"YulIdentifier","src":"41623:3:17"},"nativeSrc":"41623:14:17","nodeType":"YulFunctionCall","src":"41623:14:17"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nativeSrc":"41639:34:17","nodeType":"YulLiteral","src":"41639:34:17","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nativeSrc":"41616:6:17","nodeType":"YulIdentifier","src":"41616:6:17"},"nativeSrc":"41616:58:17","nodeType":"YulFunctionCall","src":"41616:58:17"},"nativeSrc":"41616:58:17","nodeType":"YulExpressionStatement","src":"41616:58:17"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nativeSrc":"41499:182:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"41597:6:17","nodeType":"YulTypedName","src":"41597:6:17","type":""}],"src":"41499:182:17"},{"body":{"nativeSrc":"41833:220:17","nodeType":"YulBlock","src":"41833:220:17","statements":[{"nativeSrc":"41843:74:17","nodeType":"YulAssignment","src":"41843:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"41909:3:17","nodeType":"YulIdentifier","src":"41909:3:17"},{"kind":"number","nativeSrc":"41914:2:17","nodeType":"YulLiteral","src":"41914:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"41850:58:17","nodeType":"YulIdentifier","src":"41850:58:17"},"nativeSrc":"41850:67:17","nodeType":"YulFunctionCall","src":"41850:67:17"},"variableNames":[{"name":"pos","nativeSrc":"41843:3:17","nodeType":"YulIdentifier","src":"41843:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"42015:3:17","nodeType":"YulIdentifier","src":"42015:3:17"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nativeSrc":"41926:88:17","nodeType":"YulIdentifier","src":"41926:88:17"},"nativeSrc":"41926:93:17","nodeType":"YulFunctionCall","src":"41926:93:17"},"nativeSrc":"41926:93:17","nodeType":"YulExpressionStatement","src":"41926:93:17"},{"nativeSrc":"42028:19:17","nodeType":"YulAssignment","src":"42028:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"42039:3:17","nodeType":"YulIdentifier","src":"42039:3:17"},{"kind":"number","nativeSrc":"42044:2:17","nodeType":"YulLiteral","src":"42044:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"42035:3:17","nodeType":"YulIdentifier","src":"42035:3:17"},"nativeSrc":"42035:12:17","nodeType":"YulFunctionCall","src":"42035:12:17"},"variableNames":[{"name":"end","nativeSrc":"42028:3:17","nodeType":"YulIdentifier","src":"42028:3:17"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nativeSrc":"41687:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"41821:3:17","nodeType":"YulTypedName","src":"41821:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"41829:3:17","nodeType":"YulTypedName","src":"41829:3:17","type":""}],"src":"41687:366:17"},{"body":{"nativeSrc":"42230:248:17","nodeType":"YulBlock","src":"42230:248:17","statements":[{"nativeSrc":"42240:26:17","nodeType":"YulAssignment","src":"42240:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"42252:9:17","nodeType":"YulIdentifier","src":"42252:9:17"},{"kind":"number","nativeSrc":"42263:2:17","nodeType":"YulLiteral","src":"42263:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"42248:3:17","nodeType":"YulIdentifier","src":"42248:3:17"},"nativeSrc":"42248:18:17","nodeType":"YulFunctionCall","src":"42248:18:17"},"variableNames":[{"name":"tail","nativeSrc":"42240:4:17","nodeType":"YulIdentifier","src":"42240:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"42287:9:17","nodeType":"YulIdentifier","src":"42287:9:17"},{"kind":"number","nativeSrc":"42298:1:17","nodeType":"YulLiteral","src":"42298:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"42283:3:17","nodeType":"YulIdentifier","src":"42283:3:17"},"nativeSrc":"42283:17:17","nodeType":"YulFunctionCall","src":"42283:17:17"},{"arguments":[{"name":"tail","nativeSrc":"42306:4:17","nodeType":"YulIdentifier","src":"42306:4:17"},{"name":"headStart","nativeSrc":"42312:9:17","nodeType":"YulIdentifier","src":"42312:9:17"}],"functionName":{"name":"sub","nativeSrc":"42302:3:17","nodeType":"YulIdentifier","src":"42302:3:17"},"nativeSrc":"42302:20:17","nodeType":"YulFunctionCall","src":"42302:20:17"}],"functionName":{"name":"mstore","nativeSrc":"42276:6:17","nodeType":"YulIdentifier","src":"42276:6:17"},"nativeSrc":"42276:47:17","nodeType":"YulFunctionCall","src":"42276:47:17"},"nativeSrc":"42276:47:17","nodeType":"YulExpressionStatement","src":"42276:47:17"},{"nativeSrc":"42332:139:17","nodeType":"YulAssignment","src":"42332:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"42466:4:17","nodeType":"YulIdentifier","src":"42466:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nativeSrc":"42340:124:17","nodeType":"YulIdentifier","src":"42340:124:17"},"nativeSrc":"42340:131:17","nodeType":"YulFunctionCall","src":"42340:131:17"},"variableNames":[{"name":"tail","nativeSrc":"42332:4:17","nodeType":"YulIdentifier","src":"42332:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"42059:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"42210:9:17","nodeType":"YulTypedName","src":"42210:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"42225:4:17","nodeType":"YulTypedName","src":"42225:4:17","type":""}],"src":"42059:419:17"},{"body":{"nativeSrc":"42638:288:17","nodeType":"YulBlock","src":"42638:288:17","statements":[{"nativeSrc":"42648:26:17","nodeType":"YulAssignment","src":"42648:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"42660:9:17","nodeType":"YulIdentifier","src":"42660:9:17"},{"kind":"number","nativeSrc":"42671:2:17","nodeType":"YulLiteral","src":"42671:2:17","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"42656:3:17","nodeType":"YulIdentifier","src":"42656:3:17"},"nativeSrc":"42656:18:17","nodeType":"YulFunctionCall","src":"42656:18:17"},"variableNames":[{"name":"tail","nativeSrc":"42648:4:17","nodeType":"YulIdentifier","src":"42648:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"42728:6:17","nodeType":"YulIdentifier","src":"42728:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"42741:9:17","nodeType":"YulIdentifier","src":"42741:9:17"},{"kind":"number","nativeSrc":"42752:1:17","nodeType":"YulLiteral","src":"42752:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"42737:3:17","nodeType":"YulIdentifier","src":"42737:3:17"},"nativeSrc":"42737:17:17","nodeType":"YulFunctionCall","src":"42737:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"42684:43:17","nodeType":"YulIdentifier","src":"42684:43:17"},"nativeSrc":"42684:71:17","nodeType":"YulFunctionCall","src":"42684:71:17"},"nativeSrc":"42684:71:17","nodeType":"YulExpressionStatement","src":"42684:71:17"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"42809:6:17","nodeType":"YulIdentifier","src":"42809:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"42822:9:17","nodeType":"YulIdentifier","src":"42822:9:17"},{"kind":"number","nativeSrc":"42833:2:17","nodeType":"YulLiteral","src":"42833:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"42818:3:17","nodeType":"YulIdentifier","src":"42818:3:17"},"nativeSrc":"42818:18:17","nodeType":"YulFunctionCall","src":"42818:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"42765:43:17","nodeType":"YulIdentifier","src":"42765:43:17"},"nativeSrc":"42765:72:17","nodeType":"YulFunctionCall","src":"42765:72:17"},"nativeSrc":"42765:72:17","nodeType":"YulExpressionStatement","src":"42765:72:17"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"42891:6:17","nodeType":"YulIdentifier","src":"42891:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"42904:9:17","nodeType":"YulIdentifier","src":"42904:9:17"},{"kind":"number","nativeSrc":"42915:2:17","nodeType":"YulLiteral","src":"42915:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"42900:3:17","nodeType":"YulIdentifier","src":"42900:3:17"},"nativeSrc":"42900:18:17","nodeType":"YulFunctionCall","src":"42900:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"42847:43:17","nodeType":"YulIdentifier","src":"42847:43:17"},"nativeSrc":"42847:72:17","nodeType":"YulFunctionCall","src":"42847:72:17"},"nativeSrc":"42847:72:17","nodeType":"YulExpressionStatement","src":"42847:72:17"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"42484:442:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"42594:9:17","nodeType":"YulTypedName","src":"42594:9:17","type":""},{"name":"value2","nativeSrc":"42606:6:17","nodeType":"YulTypedName","src":"42606:6:17","type":""},{"name":"value1","nativeSrc":"42614:6:17","nodeType":"YulTypedName","src":"42614:6:17","type":""},{"name":"value0","nativeSrc":"42622:6:17","nodeType":"YulTypedName","src":"42622:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"42633:4:17","nodeType":"YulTypedName","src":"42633:4:17","type":""}],"src":"42484:442:17"},{"body":{"nativeSrc":"42979:32:17","nodeType":"YulBlock","src":"42979:32:17","statements":[{"nativeSrc":"42989:16:17","nodeType":"YulAssignment","src":"42989:16:17","value":{"name":"value","nativeSrc":"43000:5:17","nodeType":"YulIdentifier","src":"43000:5:17"},"variableNames":[{"name":"aligned","nativeSrc":"42989:7:17","nodeType":"YulIdentifier","src":"42989:7:17"}]}]},"name":"leftAlign_t_bytes32","nativeSrc":"42932:79:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"42961:5:17","nodeType":"YulTypedName","src":"42961:5:17","type":""}],"returnVariables":[{"name":"aligned","nativeSrc":"42971:7:17","nodeType":"YulTypedName","src":"42971:7:17","type":""}],"src":"42932:79:17"},{"body":{"nativeSrc":"43100:74:17","nodeType":"YulBlock","src":"43100:74:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"43117:3:17","nodeType":"YulIdentifier","src":"43117:3:17"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"43160:5:17","nodeType":"YulIdentifier","src":"43160:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"43142:17:17","nodeType":"YulIdentifier","src":"43142:17:17"},"nativeSrc":"43142:24:17","nodeType":"YulFunctionCall","src":"43142:24:17"}],"functionName":{"name":"leftAlign_t_bytes32","nativeSrc":"43122:19:17","nodeType":"YulIdentifier","src":"43122:19:17"},"nativeSrc":"43122:45:17","nodeType":"YulFunctionCall","src":"43122:45:17"}],"functionName":{"name":"mstore","nativeSrc":"43110:6:17","nodeType":"YulIdentifier","src":"43110:6:17"},"nativeSrc":"43110:58:17","nodeType":"YulFunctionCall","src":"43110:58:17"},"nativeSrc":"43110:58:17","nodeType":"YulExpressionStatement","src":"43110:58:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nativeSrc":"43017:157:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"43088:5:17","nodeType":"YulTypedName","src":"43088:5:17","type":""},{"name":"pos","nativeSrc":"43095:3:17","nodeType":"YulTypedName","src":"43095:3:17","type":""}],"src":"43017:157:17"},{"body":{"nativeSrc":"43296:140:17","nodeType":"YulBlock","src":"43296:140:17","statements":[{"expression":{"arguments":[{"name":"value0","nativeSrc":"43369:6:17","nodeType":"YulIdentifier","src":"43369:6:17"},{"name":"pos","nativeSrc":"43378:3:17","nodeType":"YulIdentifier","src":"43378:3:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nativeSrc":"43307:61:17","nodeType":"YulIdentifier","src":"43307:61:17"},"nativeSrc":"43307:75:17","nodeType":"YulFunctionCall","src":"43307:75:17"},"nativeSrc":"43307:75:17","nodeType":"YulExpressionStatement","src":"43307:75:17"},{"nativeSrc":"43391:19:17","nodeType":"YulAssignment","src":"43391:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"43402:3:17","nodeType":"YulIdentifier","src":"43402:3:17"},{"kind":"number","nativeSrc":"43407:2:17","nodeType":"YulLiteral","src":"43407:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"43398:3:17","nodeType":"YulIdentifier","src":"43398:3:17"},"nativeSrc":"43398:12:17","nodeType":"YulFunctionCall","src":"43398:12:17"},"variableNames":[{"name":"pos","nativeSrc":"43391:3:17","nodeType":"YulIdentifier","src":"43391:3:17"}]},{"nativeSrc":"43420:10:17","nodeType":"YulAssignment","src":"43420:10:17","value":{"name":"pos","nativeSrc":"43427:3:17","nodeType":"YulIdentifier","src":"43427:3:17"},"variableNames":[{"name":"end","nativeSrc":"43420:3:17","nodeType":"YulIdentifier","src":"43420:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"43180:256:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"43275:3:17","nodeType":"YulTypedName","src":"43275:3:17","type":""},{"name":"value0","nativeSrc":"43281:6:17","nodeType":"YulTypedName","src":"43281:6:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"43292:3:17","nodeType":"YulTypedName","src":"43292:3:17","type":""}],"src":"43180:256:17"},{"body":{"nativeSrc":"43548:57:17","nodeType":"YulBlock","src":"43548:57:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"43570:6:17","nodeType":"YulIdentifier","src":"43570:6:17"},{"kind":"number","nativeSrc":"43578:1:17","nodeType":"YulLiteral","src":"43578:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"43566:3:17","nodeType":"YulIdentifier","src":"43566:3:17"},"nativeSrc":"43566:14:17","nodeType":"YulFunctionCall","src":"43566:14:17"},{"hexValue":"496e76616c69642070726f6f66","kind":"string","nativeSrc":"43582:15:17","nodeType":"YulLiteral","src":"43582:15:17","type":"","value":"Invalid proof"}],"functionName":{"name":"mstore","nativeSrc":"43559:6:17","nodeType":"YulIdentifier","src":"43559:6:17"},"nativeSrc":"43559:39:17","nodeType":"YulFunctionCall","src":"43559:39:17"},"nativeSrc":"43559:39:17","nodeType":"YulExpressionStatement","src":"43559:39:17"}]},"name":"store_literal_in_memory_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639","nativeSrc":"43442:163:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"43540:6:17","nodeType":"YulTypedName","src":"43540:6:17","type":""}],"src":"43442:163:17"},{"body":{"nativeSrc":"43757:220:17","nodeType":"YulBlock","src":"43757:220:17","statements":[{"nativeSrc":"43767:74:17","nodeType":"YulAssignment","src":"43767:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"43833:3:17","nodeType":"YulIdentifier","src":"43833:3:17"},{"kind":"number","nativeSrc":"43838:2:17","nodeType":"YulLiteral","src":"43838:2:17","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"43774:58:17","nodeType":"YulIdentifier","src":"43774:58:17"},"nativeSrc":"43774:67:17","nodeType":"YulFunctionCall","src":"43774:67:17"},"variableNames":[{"name":"pos","nativeSrc":"43767:3:17","nodeType":"YulIdentifier","src":"43767:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"43939:3:17","nodeType":"YulIdentifier","src":"43939:3:17"}],"functionName":{"name":"store_literal_in_memory_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639","nativeSrc":"43850:88:17","nodeType":"YulIdentifier","src":"43850:88:17"},"nativeSrc":"43850:93:17","nodeType":"YulFunctionCall","src":"43850:93:17"},"nativeSrc":"43850:93:17","nodeType":"YulExpressionStatement","src":"43850:93:17"},{"nativeSrc":"43952:19:17","nodeType":"YulAssignment","src":"43952:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"43963:3:17","nodeType":"YulIdentifier","src":"43963:3:17"},{"kind":"number","nativeSrc":"43968:2:17","nodeType":"YulLiteral","src":"43968:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"43959:3:17","nodeType":"YulIdentifier","src":"43959:3:17"},"nativeSrc":"43959:12:17","nodeType":"YulFunctionCall","src":"43959:12:17"},"variableNames":[{"name":"end","nativeSrc":"43952:3:17","nodeType":"YulIdentifier","src":"43952:3:17"}]}]},"name":"abi_encode_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639_to_t_string_memory_ptr_fromStack","nativeSrc":"43611:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"43745:3:17","nodeType":"YulTypedName","src":"43745:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"43753:3:17","nodeType":"YulTypedName","src":"43753:3:17","type":""}],"src":"43611:366:17"},{"body":{"nativeSrc":"44154:248:17","nodeType":"YulBlock","src":"44154:248:17","statements":[{"nativeSrc":"44164:26:17","nodeType":"YulAssignment","src":"44164:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"44176:9:17","nodeType":"YulIdentifier","src":"44176:9:17"},{"kind":"number","nativeSrc":"44187:2:17","nodeType":"YulLiteral","src":"44187:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"44172:3:17","nodeType":"YulIdentifier","src":"44172:3:17"},"nativeSrc":"44172:18:17","nodeType":"YulFunctionCall","src":"44172:18:17"},"variableNames":[{"name":"tail","nativeSrc":"44164:4:17","nodeType":"YulIdentifier","src":"44164:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"44211:9:17","nodeType":"YulIdentifier","src":"44211:9:17"},{"kind":"number","nativeSrc":"44222:1:17","nodeType":"YulLiteral","src":"44222:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"44207:3:17","nodeType":"YulIdentifier","src":"44207:3:17"},"nativeSrc":"44207:17:17","nodeType":"YulFunctionCall","src":"44207:17:17"},{"arguments":[{"name":"tail","nativeSrc":"44230:4:17","nodeType":"YulIdentifier","src":"44230:4:17"},{"name":"headStart","nativeSrc":"44236:9:17","nodeType":"YulIdentifier","src":"44236:9:17"}],"functionName":{"name":"sub","nativeSrc":"44226:3:17","nodeType":"YulIdentifier","src":"44226:3:17"},"nativeSrc":"44226:20:17","nodeType":"YulFunctionCall","src":"44226:20:17"}],"functionName":{"name":"mstore","nativeSrc":"44200:6:17","nodeType":"YulIdentifier","src":"44200:6:17"},"nativeSrc":"44200:47:17","nodeType":"YulFunctionCall","src":"44200:47:17"},"nativeSrc":"44200:47:17","nodeType":"YulExpressionStatement","src":"44200:47:17"},{"nativeSrc":"44256:139:17","nodeType":"YulAssignment","src":"44256:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"44390:4:17","nodeType":"YulIdentifier","src":"44390:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639_to_t_string_memory_ptr_fromStack","nativeSrc":"44264:124:17","nodeType":"YulIdentifier","src":"44264:124:17"},"nativeSrc":"44264:131:17","nodeType":"YulFunctionCall","src":"44264:131:17"},"variableNames":[{"name":"tail","nativeSrc":"44256:4:17","nodeType":"YulIdentifier","src":"44256:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"43983:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"44134:9:17","nodeType":"YulTypedName","src":"44134:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"44149:4:17","nodeType":"YulTypedName","src":"44149:4:17","type":""}],"src":"43983:419:17"},{"body":{"nativeSrc":"44514:123:17","nodeType":"YulBlock","src":"44514:123:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"44536:6:17","nodeType":"YulIdentifier","src":"44536:6:17"},{"kind":"number","nativeSrc":"44544:1:17","nodeType":"YulLiteral","src":"44544:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"44532:3:17","nodeType":"YulIdentifier","src":"44532:3:17"},"nativeSrc":"44532:14:17","nodeType":"YulFunctionCall","src":"44532:14:17"},{"hexValue":"455243323938313a20726f79616c7479206665652077696c6c20657863656564","kind":"string","nativeSrc":"44548:34:17","nodeType":"YulLiteral","src":"44548:34:17","type":"","value":"ERC2981: royalty fee will exceed"}],"functionName":{"name":"mstore","nativeSrc":"44525:6:17","nodeType":"YulIdentifier","src":"44525:6:17"},"nativeSrc":"44525:58:17","nodeType":"YulFunctionCall","src":"44525:58:17"},"nativeSrc":"44525:58:17","nodeType":"YulExpressionStatement","src":"44525:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"44604:6:17","nodeType":"YulIdentifier","src":"44604:6:17"},{"kind":"number","nativeSrc":"44612:2:17","nodeType":"YulLiteral","src":"44612:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"44600:3:17","nodeType":"YulIdentifier","src":"44600:3:17"},"nativeSrc":"44600:15:17","nodeType":"YulFunctionCall","src":"44600:15:17"},{"hexValue":"2073616c655072696365","kind":"string","nativeSrc":"44617:12:17","nodeType":"YulLiteral","src":"44617:12:17","type":"","value":" salePrice"}],"functionName":{"name":"mstore","nativeSrc":"44593:6:17","nodeType":"YulIdentifier","src":"44593:6:17"},"nativeSrc":"44593:37:17","nodeType":"YulFunctionCall","src":"44593:37:17"},"nativeSrc":"44593:37:17","nodeType":"YulExpressionStatement","src":"44593:37:17"}]},"name":"store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","nativeSrc":"44408:229:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"44506:6:17","nodeType":"YulTypedName","src":"44506:6:17","type":""}],"src":"44408:229:17"},{"body":{"nativeSrc":"44789:220:17","nodeType":"YulBlock","src":"44789:220:17","statements":[{"nativeSrc":"44799:74:17","nodeType":"YulAssignment","src":"44799:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"44865:3:17","nodeType":"YulIdentifier","src":"44865:3:17"},{"kind":"number","nativeSrc":"44870:2:17","nodeType":"YulLiteral","src":"44870:2:17","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"44806:58:17","nodeType":"YulIdentifier","src":"44806:58:17"},"nativeSrc":"44806:67:17","nodeType":"YulFunctionCall","src":"44806:67:17"},"variableNames":[{"name":"pos","nativeSrc":"44799:3:17","nodeType":"YulIdentifier","src":"44799:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"44971:3:17","nodeType":"YulIdentifier","src":"44971:3:17"}],"functionName":{"name":"store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d","nativeSrc":"44882:88:17","nodeType":"YulIdentifier","src":"44882:88:17"},"nativeSrc":"44882:93:17","nodeType":"YulFunctionCall","src":"44882:93:17"},"nativeSrc":"44882:93:17","nodeType":"YulExpressionStatement","src":"44882:93:17"},{"nativeSrc":"44984:19:17","nodeType":"YulAssignment","src":"44984:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"44995:3:17","nodeType":"YulIdentifier","src":"44995:3:17"},{"kind":"number","nativeSrc":"45000:2:17","nodeType":"YulLiteral","src":"45000:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"44991:3:17","nodeType":"YulIdentifier","src":"44991:3:17"},"nativeSrc":"44991:12:17","nodeType":"YulFunctionCall","src":"44991:12:17"},"variableNames":[{"name":"end","nativeSrc":"44984:3:17","nodeType":"YulIdentifier","src":"44984:3:17"}]}]},"name":"abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack","nativeSrc":"44643:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"44777:3:17","nodeType":"YulTypedName","src":"44777:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"44785:3:17","nodeType":"YulTypedName","src":"44785:3:17","type":""}],"src":"44643:366:17"},{"body":{"nativeSrc":"45186:248:17","nodeType":"YulBlock","src":"45186:248:17","statements":[{"nativeSrc":"45196:26:17","nodeType":"YulAssignment","src":"45196:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"45208:9:17","nodeType":"YulIdentifier","src":"45208:9:17"},{"kind":"number","nativeSrc":"45219:2:17","nodeType":"YulLiteral","src":"45219:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"45204:3:17","nodeType":"YulIdentifier","src":"45204:3:17"},"nativeSrc":"45204:18:17","nodeType":"YulFunctionCall","src":"45204:18:17"},"variableNames":[{"name":"tail","nativeSrc":"45196:4:17","nodeType":"YulIdentifier","src":"45196:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"45243:9:17","nodeType":"YulIdentifier","src":"45243:9:17"},{"kind":"number","nativeSrc":"45254:1:17","nodeType":"YulLiteral","src":"45254:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"45239:3:17","nodeType":"YulIdentifier","src":"45239:3:17"},"nativeSrc":"45239:17:17","nodeType":"YulFunctionCall","src":"45239:17:17"},{"arguments":[{"name":"tail","nativeSrc":"45262:4:17","nodeType":"YulIdentifier","src":"45262:4:17"},{"name":"headStart","nativeSrc":"45268:9:17","nodeType":"YulIdentifier","src":"45268:9:17"}],"functionName":{"name":"sub","nativeSrc":"45258:3:17","nodeType":"YulIdentifier","src":"45258:3:17"},"nativeSrc":"45258:20:17","nodeType":"YulFunctionCall","src":"45258:20:17"}],"functionName":{"name":"mstore","nativeSrc":"45232:6:17","nodeType":"YulIdentifier","src":"45232:6:17"},"nativeSrc":"45232:47:17","nodeType":"YulFunctionCall","src":"45232:47:17"},"nativeSrc":"45232:47:17","nodeType":"YulExpressionStatement","src":"45232:47:17"},{"nativeSrc":"45288:139:17","nodeType":"YulAssignment","src":"45288:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"45422:4:17","nodeType":"YulIdentifier","src":"45422:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack","nativeSrc":"45296:124:17","nodeType":"YulIdentifier","src":"45296:124:17"},"nativeSrc":"45296:131:17","nodeType":"YulFunctionCall","src":"45296:131:17"},"variableNames":[{"name":"tail","nativeSrc":"45288:4:17","nodeType":"YulIdentifier","src":"45288:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"45015:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"45166:9:17","nodeType":"YulTypedName","src":"45166:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"45181:4:17","nodeType":"YulTypedName","src":"45181:4:17","type":""}],"src":"45015:419:17"},{"body":{"nativeSrc":"45546:71:17","nodeType":"YulBlock","src":"45546:71:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"45568:6:17","nodeType":"YulIdentifier","src":"45568:6:17"},{"kind":"number","nativeSrc":"45576:1:17","nodeType":"YulLiteral","src":"45576:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"45564:3:17","nodeType":"YulIdentifier","src":"45564:3:17"},"nativeSrc":"45564:14:17","nodeType":"YulFunctionCall","src":"45564:14:17"},{"hexValue":"455243323938313a20496e76616c696420706172616d6574657273","kind":"string","nativeSrc":"45580:29:17","nodeType":"YulLiteral","src":"45580:29:17","type":"","value":"ERC2981: Invalid parameters"}],"functionName":{"name":"mstore","nativeSrc":"45557:6:17","nodeType":"YulIdentifier","src":"45557:6:17"},"nativeSrc":"45557:53:17","nodeType":"YulFunctionCall","src":"45557:53:17"},"nativeSrc":"45557:53:17","nodeType":"YulExpressionStatement","src":"45557:53:17"}]},"name":"store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084","nativeSrc":"45440:177:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"45538:6:17","nodeType":"YulTypedName","src":"45538:6:17","type":""}],"src":"45440:177:17"},{"body":{"nativeSrc":"45769:220:17","nodeType":"YulBlock","src":"45769:220:17","statements":[{"nativeSrc":"45779:74:17","nodeType":"YulAssignment","src":"45779:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"45845:3:17","nodeType":"YulIdentifier","src":"45845:3:17"},{"kind":"number","nativeSrc":"45850:2:17","nodeType":"YulLiteral","src":"45850:2:17","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"45786:58:17","nodeType":"YulIdentifier","src":"45786:58:17"},"nativeSrc":"45786:67:17","nodeType":"YulFunctionCall","src":"45786:67:17"},"variableNames":[{"name":"pos","nativeSrc":"45779:3:17","nodeType":"YulIdentifier","src":"45779:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"45951:3:17","nodeType":"YulIdentifier","src":"45951:3:17"}],"functionName":{"name":"store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084","nativeSrc":"45862:88:17","nodeType":"YulIdentifier","src":"45862:88:17"},"nativeSrc":"45862:93:17","nodeType":"YulFunctionCall","src":"45862:93:17"},"nativeSrc":"45862:93:17","nodeType":"YulExpressionStatement","src":"45862:93:17"},{"nativeSrc":"45964:19:17","nodeType":"YulAssignment","src":"45964:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"45975:3:17","nodeType":"YulIdentifier","src":"45975:3:17"},{"kind":"number","nativeSrc":"45980:2:17","nodeType":"YulLiteral","src":"45980:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"45971:3:17","nodeType":"YulIdentifier","src":"45971:3:17"},"nativeSrc":"45971:12:17","nodeType":"YulFunctionCall","src":"45971:12:17"},"variableNames":[{"name":"end","nativeSrc":"45964:3:17","nodeType":"YulIdentifier","src":"45964:3:17"}]}]},"name":"abi_encode_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084_to_t_string_memory_ptr_fromStack","nativeSrc":"45623:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"45757:3:17","nodeType":"YulTypedName","src":"45757:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"45765:3:17","nodeType":"YulTypedName","src":"45765:3:17","type":""}],"src":"45623:366:17"},{"body":{"nativeSrc":"46166:248:17","nodeType":"YulBlock","src":"46166:248:17","statements":[{"nativeSrc":"46176:26:17","nodeType":"YulAssignment","src":"46176:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"46188:9:17","nodeType":"YulIdentifier","src":"46188:9:17"},{"kind":"number","nativeSrc":"46199:2:17","nodeType":"YulLiteral","src":"46199:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"46184:3:17","nodeType":"YulIdentifier","src":"46184:3:17"},"nativeSrc":"46184:18:17","nodeType":"YulFunctionCall","src":"46184:18:17"},"variableNames":[{"name":"tail","nativeSrc":"46176:4:17","nodeType":"YulIdentifier","src":"46176:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"46223:9:17","nodeType":"YulIdentifier","src":"46223:9:17"},{"kind":"number","nativeSrc":"46234:1:17","nodeType":"YulLiteral","src":"46234:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"46219:3:17","nodeType":"YulIdentifier","src":"46219:3:17"},"nativeSrc":"46219:17:17","nodeType":"YulFunctionCall","src":"46219:17:17"},{"arguments":[{"name":"tail","nativeSrc":"46242:4:17","nodeType":"YulIdentifier","src":"46242:4:17"},{"name":"headStart","nativeSrc":"46248:9:17","nodeType":"YulIdentifier","src":"46248:9:17"}],"functionName":{"name":"sub","nativeSrc":"46238:3:17","nodeType":"YulIdentifier","src":"46238:3:17"},"nativeSrc":"46238:20:17","nodeType":"YulFunctionCall","src":"46238:20:17"}],"functionName":{"name":"mstore","nativeSrc":"46212:6:17","nodeType":"YulIdentifier","src":"46212:6:17"},"nativeSrc":"46212:47:17","nodeType":"YulFunctionCall","src":"46212:47:17"},"nativeSrc":"46212:47:17","nodeType":"YulExpressionStatement","src":"46212:47:17"},{"nativeSrc":"46268:139:17","nodeType":"YulAssignment","src":"46268:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"46402:4:17","nodeType":"YulIdentifier","src":"46402:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084_to_t_string_memory_ptr_fromStack","nativeSrc":"46276:124:17","nodeType":"YulIdentifier","src":"46276:124:17"},"nativeSrc":"46276:131:17","nodeType":"YulFunctionCall","src":"46276:131:17"},"variableNames":[{"name":"tail","nativeSrc":"46268:4:17","nodeType":"YulIdentifier","src":"46268:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"45995:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"46146:9:17","nodeType":"YulTypedName","src":"46146:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"46161:4:17","nodeType":"YulTypedName","src":"46161:4:17","type":""}],"src":"45995:419:17"},{"body":{"nativeSrc":"46526:69:17","nodeType":"YulBlock","src":"46526:69:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"46548:6:17","nodeType":"YulIdentifier","src":"46548:6:17"},{"kind":"number","nativeSrc":"46556:1:17","nodeType":"YulLiteral","src":"46556:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"46544:3:17","nodeType":"YulIdentifier","src":"46544:3:17"},"nativeSrc":"46544:14:17","nodeType":"YulFunctionCall","src":"46544:14:17"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nativeSrc":"46560:27:17","nodeType":"YulLiteral","src":"46560:27:17","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nativeSrc":"46537:6:17","nodeType":"YulIdentifier","src":"46537:6:17"},"nativeSrc":"46537:51:17","nodeType":"YulFunctionCall","src":"46537:51:17"},"nativeSrc":"46537:51:17","nodeType":"YulExpressionStatement","src":"46537:51:17"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"46420:175:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"46518:6:17","nodeType":"YulTypedName","src":"46518:6:17","type":""}],"src":"46420:175:17"},{"body":{"nativeSrc":"46747:220:17","nodeType":"YulBlock","src":"46747:220:17","statements":[{"nativeSrc":"46757:74:17","nodeType":"YulAssignment","src":"46757:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"46823:3:17","nodeType":"YulIdentifier","src":"46823:3:17"},{"kind":"number","nativeSrc":"46828:2:17","nodeType":"YulLiteral","src":"46828:2:17","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"46764:58:17","nodeType":"YulIdentifier","src":"46764:58:17"},"nativeSrc":"46764:67:17","nodeType":"YulFunctionCall","src":"46764:67:17"},"variableNames":[{"name":"pos","nativeSrc":"46757:3:17","nodeType":"YulIdentifier","src":"46757:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"46929:3:17","nodeType":"YulIdentifier","src":"46929:3:17"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"46840:88:17","nodeType":"YulIdentifier","src":"46840:88:17"},"nativeSrc":"46840:93:17","nodeType":"YulFunctionCall","src":"46840:93:17"},"nativeSrc":"46840:93:17","nodeType":"YulExpressionStatement","src":"46840:93:17"},{"nativeSrc":"46942:19:17","nodeType":"YulAssignment","src":"46942:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"46953:3:17","nodeType":"YulIdentifier","src":"46953:3:17"},{"kind":"number","nativeSrc":"46958:2:17","nodeType":"YulLiteral","src":"46958:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"46949:3:17","nodeType":"YulIdentifier","src":"46949:3:17"},"nativeSrc":"46949:12:17","nodeType":"YulFunctionCall","src":"46949:12:17"},"variableNames":[{"name":"end","nativeSrc":"46942:3:17","nodeType":"YulIdentifier","src":"46942:3:17"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"46601:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"46735:3:17","nodeType":"YulTypedName","src":"46735:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"46743:3:17","nodeType":"YulTypedName","src":"46743:3:17","type":""}],"src":"46601:366:17"},{"body":{"nativeSrc":"47144:248:17","nodeType":"YulBlock","src":"47144:248:17","statements":[{"nativeSrc":"47154:26:17","nodeType":"YulAssignment","src":"47154:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"47166:9:17","nodeType":"YulIdentifier","src":"47166:9:17"},{"kind":"number","nativeSrc":"47177:2:17","nodeType":"YulLiteral","src":"47177:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"47162:3:17","nodeType":"YulIdentifier","src":"47162:3:17"},"nativeSrc":"47162:18:17","nodeType":"YulFunctionCall","src":"47162:18:17"},"variableNames":[{"name":"tail","nativeSrc":"47154:4:17","nodeType":"YulIdentifier","src":"47154:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"47201:9:17","nodeType":"YulIdentifier","src":"47201:9:17"},{"kind":"number","nativeSrc":"47212:1:17","nodeType":"YulLiteral","src":"47212:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"47197:3:17","nodeType":"YulIdentifier","src":"47197:3:17"},"nativeSrc":"47197:17:17","nodeType":"YulFunctionCall","src":"47197:17:17"},{"arguments":[{"name":"tail","nativeSrc":"47220:4:17","nodeType":"YulIdentifier","src":"47220:4:17"},{"name":"headStart","nativeSrc":"47226:9:17","nodeType":"YulIdentifier","src":"47226:9:17"}],"functionName":{"name":"sub","nativeSrc":"47216:3:17","nodeType":"YulIdentifier","src":"47216:3:17"},"nativeSrc":"47216:20:17","nodeType":"YulFunctionCall","src":"47216:20:17"}],"functionName":{"name":"mstore","nativeSrc":"47190:6:17","nodeType":"YulIdentifier","src":"47190:6:17"},"nativeSrc":"47190:47:17","nodeType":"YulFunctionCall","src":"47190:47:17"},"nativeSrc":"47190:47:17","nodeType":"YulExpressionStatement","src":"47190:47:17"},{"nativeSrc":"47246:139:17","nodeType":"YulAssignment","src":"47246:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"47380:4:17","nodeType":"YulIdentifier","src":"47380:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"47254:124:17","nodeType":"YulIdentifier","src":"47254:124:17"},"nativeSrc":"47254:131:17","nodeType":"YulFunctionCall","src":"47254:131:17"},"variableNames":[{"name":"tail","nativeSrc":"47246:4:17","nodeType":"YulIdentifier","src":"47246:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"46973:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"47124:9:17","nodeType":"YulTypedName","src":"47124:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"47139:4:17","nodeType":"YulTypedName","src":"47139:4:17","type":""}],"src":"46973:419:17"},{"body":{"nativeSrc":"47504:131:17","nodeType":"YulBlock","src":"47504:131:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"47526:6:17","nodeType":"YulIdentifier","src":"47526:6:17"},{"kind":"number","nativeSrc":"47534:1:17","nodeType":"YulLiteral","src":"47534:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"47522:3:17","nodeType":"YulIdentifier","src":"47522:3:17"},"nativeSrc":"47522:14:17","nodeType":"YulFunctionCall","src":"47522:14:17"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nativeSrc":"47538:34:17","nodeType":"YulLiteral","src":"47538:34:17","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nativeSrc":"47515:6:17","nodeType":"YulIdentifier","src":"47515:6:17"},"nativeSrc":"47515:58:17","nodeType":"YulFunctionCall","src":"47515:58:17"},"nativeSrc":"47515:58:17","nodeType":"YulExpressionStatement","src":"47515:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"47594:6:17","nodeType":"YulIdentifier","src":"47594:6:17"},{"kind":"number","nativeSrc":"47602:2:17","nodeType":"YulLiteral","src":"47602:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"47590:3:17","nodeType":"YulIdentifier","src":"47590:3:17"},"nativeSrc":"47590:15:17","nodeType":"YulFunctionCall","src":"47590:15:17"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nativeSrc":"47607:20:17","nodeType":"YulLiteral","src":"47607:20:17","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nativeSrc":"47583:6:17","nodeType":"YulIdentifier","src":"47583:6:17"},"nativeSrc":"47583:45:17","nodeType":"YulFunctionCall","src":"47583:45:17"},"nativeSrc":"47583:45:17","nodeType":"YulExpressionStatement","src":"47583:45:17"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"47398:237:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"47496:6:17","nodeType":"YulTypedName","src":"47496:6:17","type":""}],"src":"47398:237:17"},{"body":{"nativeSrc":"47787:220:17","nodeType":"YulBlock","src":"47787:220:17","statements":[{"nativeSrc":"47797:74:17","nodeType":"YulAssignment","src":"47797:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"47863:3:17","nodeType":"YulIdentifier","src":"47863:3:17"},{"kind":"number","nativeSrc":"47868:2:17","nodeType":"YulLiteral","src":"47868:2:17","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"47804:58:17","nodeType":"YulIdentifier","src":"47804:58:17"},"nativeSrc":"47804:67:17","nodeType":"YulFunctionCall","src":"47804:67:17"},"variableNames":[{"name":"pos","nativeSrc":"47797:3:17","nodeType":"YulIdentifier","src":"47797:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"47969:3:17","nodeType":"YulIdentifier","src":"47969:3:17"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"47880:88:17","nodeType":"YulIdentifier","src":"47880:88:17"},"nativeSrc":"47880:93:17","nodeType":"YulFunctionCall","src":"47880:93:17"},"nativeSrc":"47880:93:17","nodeType":"YulExpressionStatement","src":"47880:93:17"},{"nativeSrc":"47982:19:17","nodeType":"YulAssignment","src":"47982:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"47993:3:17","nodeType":"YulIdentifier","src":"47993:3:17"},{"kind":"number","nativeSrc":"47998:2:17","nodeType":"YulLiteral","src":"47998:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"47989:3:17","nodeType":"YulIdentifier","src":"47989:3:17"},"nativeSrc":"47989:12:17","nodeType":"YulFunctionCall","src":"47989:12:17"},"variableNames":[{"name":"end","nativeSrc":"47982:3:17","nodeType":"YulIdentifier","src":"47982:3:17"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"47641:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"47775:3:17","nodeType":"YulTypedName","src":"47775:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"47783:3:17","nodeType":"YulTypedName","src":"47783:3:17","type":""}],"src":"47641:366:17"},{"body":{"nativeSrc":"48184:248:17","nodeType":"YulBlock","src":"48184:248:17","statements":[{"nativeSrc":"48194:26:17","nodeType":"YulAssignment","src":"48194:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"48206:9:17","nodeType":"YulIdentifier","src":"48206:9:17"},{"kind":"number","nativeSrc":"48217:2:17","nodeType":"YulLiteral","src":"48217:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"48202:3:17","nodeType":"YulIdentifier","src":"48202:3:17"},"nativeSrc":"48202:18:17","nodeType":"YulFunctionCall","src":"48202:18:17"},"variableNames":[{"name":"tail","nativeSrc":"48194:4:17","nodeType":"YulIdentifier","src":"48194:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"48241:9:17","nodeType":"YulIdentifier","src":"48241:9:17"},{"kind":"number","nativeSrc":"48252:1:17","nodeType":"YulLiteral","src":"48252:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"48237:3:17","nodeType":"YulIdentifier","src":"48237:3:17"},"nativeSrc":"48237:17:17","nodeType":"YulFunctionCall","src":"48237:17:17"},{"arguments":[{"name":"tail","nativeSrc":"48260:4:17","nodeType":"YulIdentifier","src":"48260:4:17"},{"name":"headStart","nativeSrc":"48266:9:17","nodeType":"YulIdentifier","src":"48266:9:17"}],"functionName":{"name":"sub","nativeSrc":"48256:3:17","nodeType":"YulIdentifier","src":"48256:3:17"},"nativeSrc":"48256:20:17","nodeType":"YulFunctionCall","src":"48256:20:17"}],"functionName":{"name":"mstore","nativeSrc":"48230:6:17","nodeType":"YulIdentifier","src":"48230:6:17"},"nativeSrc":"48230:47:17","nodeType":"YulFunctionCall","src":"48230:47:17"},"nativeSrc":"48230:47:17","nodeType":"YulExpressionStatement","src":"48230:47:17"},{"nativeSrc":"48286:139:17","nodeType":"YulAssignment","src":"48286:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"48420:4:17","nodeType":"YulIdentifier","src":"48420:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"48294:124:17","nodeType":"YulIdentifier","src":"48294:124:17"},"nativeSrc":"48294:131:17","nodeType":"YulFunctionCall","src":"48294:131:17"},"variableNames":[{"name":"tail","nativeSrc":"48286:4:17","nodeType":"YulIdentifier","src":"48286:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"48013:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"48164:9:17","nodeType":"YulTypedName","src":"48164:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"48179:4:17","nodeType":"YulTypedName","src":"48179:4:17","type":""}],"src":"48013:419:17"},{"body":{"nativeSrc":"48544:69:17","nodeType":"YulBlock","src":"48544:69:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"48566:6:17","nodeType":"YulIdentifier","src":"48566:6:17"},{"kind":"number","nativeSrc":"48574:1:17","nodeType":"YulLiteral","src":"48574:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"48562:3:17","nodeType":"YulIdentifier","src":"48562:3:17"},"nativeSrc":"48562:14:17","nodeType":"YulFunctionCall","src":"48562:14:17"},{"hexValue":"455243323938313a20696e76616c6964207265636569766572","kind":"string","nativeSrc":"48578:27:17","nodeType":"YulLiteral","src":"48578:27:17","type":"","value":"ERC2981: invalid receiver"}],"functionName":{"name":"mstore","nativeSrc":"48555:6:17","nodeType":"YulIdentifier","src":"48555:6:17"},"nativeSrc":"48555:51:17","nodeType":"YulFunctionCall","src":"48555:51:17"},"nativeSrc":"48555:51:17","nodeType":"YulExpressionStatement","src":"48555:51:17"}]},"name":"store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff","nativeSrc":"48438:175:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"48536:6:17","nodeType":"YulTypedName","src":"48536:6:17","type":""}],"src":"48438:175:17"},{"body":{"nativeSrc":"48765:220:17","nodeType":"YulBlock","src":"48765:220:17","statements":[{"nativeSrc":"48775:74:17","nodeType":"YulAssignment","src":"48775:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"48841:3:17","nodeType":"YulIdentifier","src":"48841:3:17"},{"kind":"number","nativeSrc":"48846:2:17","nodeType":"YulLiteral","src":"48846:2:17","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"48782:58:17","nodeType":"YulIdentifier","src":"48782:58:17"},"nativeSrc":"48782:67:17","nodeType":"YulFunctionCall","src":"48782:67:17"},"variableNames":[{"name":"pos","nativeSrc":"48775:3:17","nodeType":"YulIdentifier","src":"48775:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"48947:3:17","nodeType":"YulIdentifier","src":"48947:3:17"}],"functionName":{"name":"store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff","nativeSrc":"48858:88:17","nodeType":"YulIdentifier","src":"48858:88:17"},"nativeSrc":"48858:93:17","nodeType":"YulFunctionCall","src":"48858:93:17"},"nativeSrc":"48858:93:17","nodeType":"YulExpressionStatement","src":"48858:93:17"},{"nativeSrc":"48960:19:17","nodeType":"YulAssignment","src":"48960:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"48971:3:17","nodeType":"YulIdentifier","src":"48971:3:17"},{"kind":"number","nativeSrc":"48976:2:17","nodeType":"YulLiteral","src":"48976:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"48967:3:17","nodeType":"YulIdentifier","src":"48967:3:17"},"nativeSrc":"48967:12:17","nodeType":"YulFunctionCall","src":"48967:12:17"},"variableNames":[{"name":"end","nativeSrc":"48960:3:17","nodeType":"YulIdentifier","src":"48960:3:17"}]}]},"name":"abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack","nativeSrc":"48619:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"48753:3:17","nodeType":"YulTypedName","src":"48753:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"48761:3:17","nodeType":"YulTypedName","src":"48761:3:17","type":""}],"src":"48619:366:17"},{"body":{"nativeSrc":"49162:248:17","nodeType":"YulBlock","src":"49162:248:17","statements":[{"nativeSrc":"49172:26:17","nodeType":"YulAssignment","src":"49172:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"49184:9:17","nodeType":"YulIdentifier","src":"49184:9:17"},{"kind":"number","nativeSrc":"49195:2:17","nodeType":"YulLiteral","src":"49195:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"49180:3:17","nodeType":"YulIdentifier","src":"49180:3:17"},"nativeSrc":"49180:18:17","nodeType":"YulFunctionCall","src":"49180:18:17"},"variableNames":[{"name":"tail","nativeSrc":"49172:4:17","nodeType":"YulIdentifier","src":"49172:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"49219:9:17","nodeType":"YulIdentifier","src":"49219:9:17"},{"kind":"number","nativeSrc":"49230:1:17","nodeType":"YulLiteral","src":"49230:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"49215:3:17","nodeType":"YulIdentifier","src":"49215:3:17"},"nativeSrc":"49215:17:17","nodeType":"YulFunctionCall","src":"49215:17:17"},{"arguments":[{"name":"tail","nativeSrc":"49238:4:17","nodeType":"YulIdentifier","src":"49238:4:17"},{"name":"headStart","nativeSrc":"49244:9:17","nodeType":"YulIdentifier","src":"49244:9:17"}],"functionName":{"name":"sub","nativeSrc":"49234:3:17","nodeType":"YulIdentifier","src":"49234:3:17"},"nativeSrc":"49234:20:17","nodeType":"YulFunctionCall","src":"49234:20:17"}],"functionName":{"name":"mstore","nativeSrc":"49208:6:17","nodeType":"YulIdentifier","src":"49208:6:17"},"nativeSrc":"49208:47:17","nodeType":"YulFunctionCall","src":"49208:47:17"},"nativeSrc":"49208:47:17","nodeType":"YulExpressionStatement","src":"49208:47:17"},{"nativeSrc":"49264:139:17","nodeType":"YulAssignment","src":"49264:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"49398:4:17","nodeType":"YulIdentifier","src":"49398:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack","nativeSrc":"49272:124:17","nodeType":"YulIdentifier","src":"49272:124:17"},"nativeSrc":"49272:131:17","nodeType":"YulFunctionCall","src":"49272:131:17"},"variableNames":[{"name":"tail","nativeSrc":"49264:4:17","nodeType":"YulIdentifier","src":"49264:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"48991:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49142:9:17","nodeType":"YulTypedName","src":"49142:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"49157:4:17","nodeType":"YulTypedName","src":"49157:4:17","type":""}],"src":"48991:419:17"},{"body":{"nativeSrc":"49474:40:17","nodeType":"YulBlock","src":"49474:40:17","statements":[{"nativeSrc":"49485:22:17","nodeType":"YulAssignment","src":"49485:22:17","value":{"arguments":[{"name":"value","nativeSrc":"49501:5:17","nodeType":"YulIdentifier","src":"49501:5:17"}],"functionName":{"name":"mload","nativeSrc":"49495:5:17","nodeType":"YulIdentifier","src":"49495:5:17"},"nativeSrc":"49495:12:17","nodeType":"YulFunctionCall","src":"49495:12:17"},"variableNames":[{"name":"length","nativeSrc":"49485:6:17","nodeType":"YulIdentifier","src":"49485:6:17"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"49416:98:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"49457:5:17","nodeType":"YulTypedName","src":"49457:5:17","type":""}],"returnVariables":[{"name":"length","nativeSrc":"49467:6:17","nodeType":"YulTypedName","src":"49467:6:17","type":""}],"src":"49416:98:17"},{"body":{"nativeSrc":"49615:73:17","nodeType":"YulBlock","src":"49615:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"49632:3:17","nodeType":"YulIdentifier","src":"49632:3:17"},{"name":"length","nativeSrc":"49637:6:17","nodeType":"YulIdentifier","src":"49637:6:17"}],"functionName":{"name":"mstore","nativeSrc":"49625:6:17","nodeType":"YulIdentifier","src":"49625:6:17"},"nativeSrc":"49625:19:17","nodeType":"YulFunctionCall","src":"49625:19:17"},"nativeSrc":"49625:19:17","nodeType":"YulExpressionStatement","src":"49625:19:17"},{"nativeSrc":"49653:29:17","nodeType":"YulAssignment","src":"49653:29:17","value":{"arguments":[{"name":"pos","nativeSrc":"49672:3:17","nodeType":"YulIdentifier","src":"49672:3:17"},{"kind":"number","nativeSrc":"49677:4:17","nodeType":"YulLiteral","src":"49677:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"49668:3:17","nodeType":"YulIdentifier","src":"49668:3:17"},"nativeSrc":"49668:14:17","nodeType":"YulFunctionCall","src":"49668:14:17"},"variableNames":[{"name":"updated_pos","nativeSrc":"49653:11:17","nodeType":"YulIdentifier","src":"49653:11:17"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"49520:168:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"49587:3:17","nodeType":"YulTypedName","src":"49587:3:17","type":""},{"name":"length","nativeSrc":"49592:6:17","nodeType":"YulTypedName","src":"49592:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"49603:11:17","nodeType":"YulTypedName","src":"49603:11:17","type":""}],"src":"49520:168:17"},{"body":{"nativeSrc":"49784:283:17","nodeType":"YulBlock","src":"49784:283:17","statements":[{"nativeSrc":"49794:52:17","nodeType":"YulVariableDeclaration","src":"49794:52:17","value":{"arguments":[{"name":"value","nativeSrc":"49840:5:17","nodeType":"YulIdentifier","src":"49840:5:17"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"49808:31:17","nodeType":"YulIdentifier","src":"49808:31:17"},"nativeSrc":"49808:38:17","nodeType":"YulFunctionCall","src":"49808:38:17"},"variables":[{"name":"length","nativeSrc":"49798:6:17","nodeType":"YulTypedName","src":"49798:6:17","type":""}]},{"nativeSrc":"49855:77:17","nodeType":"YulAssignment","src":"49855:77:17","value":{"arguments":[{"name":"pos","nativeSrc":"49920:3:17","nodeType":"YulIdentifier","src":"49920:3:17"},{"name":"length","nativeSrc":"49925:6:17","nodeType":"YulIdentifier","src":"49925:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"49862:57:17","nodeType":"YulIdentifier","src":"49862:57:17"},"nativeSrc":"49862:70:17","nodeType":"YulFunctionCall","src":"49862:70:17"},"variableNames":[{"name":"pos","nativeSrc":"49855:3:17","nodeType":"YulIdentifier","src":"49855:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"49980:5:17","nodeType":"YulIdentifier","src":"49980:5:17"},{"kind":"number","nativeSrc":"49987:4:17","nodeType":"YulLiteral","src":"49987:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"49976:3:17","nodeType":"YulIdentifier","src":"49976:3:17"},"nativeSrc":"49976:16:17","nodeType":"YulFunctionCall","src":"49976:16:17"},{"name":"pos","nativeSrc":"49994:3:17","nodeType":"YulIdentifier","src":"49994:3:17"},{"name":"length","nativeSrc":"49999:6:17","nodeType":"YulIdentifier","src":"49999:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"49941:34:17","nodeType":"YulIdentifier","src":"49941:34:17"},"nativeSrc":"49941:65:17","nodeType":"YulFunctionCall","src":"49941:65:17"},"nativeSrc":"49941:65:17","nodeType":"YulExpressionStatement","src":"49941:65:17"},{"nativeSrc":"50015:46:17","nodeType":"YulAssignment","src":"50015:46:17","value":{"arguments":[{"name":"pos","nativeSrc":"50026:3:17","nodeType":"YulIdentifier","src":"50026:3:17"},{"arguments":[{"name":"length","nativeSrc":"50053:6:17","nodeType":"YulIdentifier","src":"50053:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"50031:21:17","nodeType":"YulIdentifier","src":"50031:21:17"},"nativeSrc":"50031:29:17","nodeType":"YulFunctionCall","src":"50031:29:17"}],"functionName":{"name":"add","nativeSrc":"50022:3:17","nodeType":"YulIdentifier","src":"50022:3:17"},"nativeSrc":"50022:39:17","nodeType":"YulFunctionCall","src":"50022:39:17"},"variableNames":[{"name":"end","nativeSrc":"50015:3:17","nodeType":"YulIdentifier","src":"50015:3:17"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"49694:373:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"49765:5:17","nodeType":"YulTypedName","src":"49765:5:17","type":""},{"name":"pos","nativeSrc":"49772:3:17","nodeType":"YulTypedName","src":"49772:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"49780:3:17","nodeType":"YulTypedName","src":"49780:3:17","type":""}],"src":"49694:373:17"},{"body":{"nativeSrc":"50273:440:17","nodeType":"YulBlock","src":"50273:440:17","statements":[{"nativeSrc":"50283:27:17","nodeType":"YulAssignment","src":"50283:27:17","value":{"arguments":[{"name":"headStart","nativeSrc":"50295:9:17","nodeType":"YulIdentifier","src":"50295:9:17"},{"kind":"number","nativeSrc":"50306:3:17","nodeType":"YulLiteral","src":"50306:3:17","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"50291:3:17","nodeType":"YulIdentifier","src":"50291:3:17"},"nativeSrc":"50291:19:17","nodeType":"YulFunctionCall","src":"50291:19:17"},"variableNames":[{"name":"tail","nativeSrc":"50283:4:17","nodeType":"YulIdentifier","src":"50283:4:17"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"50364:6:17","nodeType":"YulIdentifier","src":"50364:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"50377:9:17","nodeType":"YulIdentifier","src":"50377:9:17"},{"kind":"number","nativeSrc":"50388:1:17","nodeType":"YulLiteral","src":"50388:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"50373:3:17","nodeType":"YulIdentifier","src":"50373:3:17"},"nativeSrc":"50373:17:17","nodeType":"YulFunctionCall","src":"50373:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"50320:43:17","nodeType":"YulIdentifier","src":"50320:43:17"},"nativeSrc":"50320:71:17","nodeType":"YulFunctionCall","src":"50320:71:17"},"nativeSrc":"50320:71:17","nodeType":"YulExpressionStatement","src":"50320:71:17"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"50445:6:17","nodeType":"YulIdentifier","src":"50445:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"50458:9:17","nodeType":"YulIdentifier","src":"50458:9:17"},{"kind":"number","nativeSrc":"50469:2:17","nodeType":"YulLiteral","src":"50469:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"50454:3:17","nodeType":"YulIdentifier","src":"50454:3:17"},"nativeSrc":"50454:18:17","nodeType":"YulFunctionCall","src":"50454:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"50401:43:17","nodeType":"YulIdentifier","src":"50401:43:17"},"nativeSrc":"50401:72:17","nodeType":"YulFunctionCall","src":"50401:72:17"},"nativeSrc":"50401:72:17","nodeType":"YulExpressionStatement","src":"50401:72:17"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"50527:6:17","nodeType":"YulIdentifier","src":"50527:6:17"},{"arguments":[{"name":"headStart","nativeSrc":"50540:9:17","nodeType":"YulIdentifier","src":"50540:9:17"},{"kind":"number","nativeSrc":"50551:2:17","nodeType":"YulLiteral","src":"50551:2:17","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"50536:3:17","nodeType":"YulIdentifier","src":"50536:3:17"},"nativeSrc":"50536:18:17","nodeType":"YulFunctionCall","src":"50536:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"50483:43:17","nodeType":"YulIdentifier","src":"50483:43:17"},"nativeSrc":"50483:72:17","nodeType":"YulFunctionCall","src":"50483:72:17"},"nativeSrc":"50483:72:17","nodeType":"YulExpressionStatement","src":"50483:72:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"50576:9:17","nodeType":"YulIdentifier","src":"50576:9:17"},{"kind":"number","nativeSrc":"50587:2:17","nodeType":"YulLiteral","src":"50587:2:17","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"50572:3:17","nodeType":"YulIdentifier","src":"50572:3:17"},"nativeSrc":"50572:18:17","nodeType":"YulFunctionCall","src":"50572:18:17"},{"arguments":[{"name":"tail","nativeSrc":"50596:4:17","nodeType":"YulIdentifier","src":"50596:4:17"},{"name":"headStart","nativeSrc":"50602:9:17","nodeType":"YulIdentifier","src":"50602:9:17"}],"functionName":{"name":"sub","nativeSrc":"50592:3:17","nodeType":"YulIdentifier","src":"50592:3:17"},"nativeSrc":"50592:20:17","nodeType":"YulFunctionCall","src":"50592:20:17"}],"functionName":{"name":"mstore","nativeSrc":"50565:6:17","nodeType":"YulIdentifier","src":"50565:6:17"},"nativeSrc":"50565:48:17","nodeType":"YulFunctionCall","src":"50565:48:17"},"nativeSrc":"50565:48:17","nodeType":"YulExpressionStatement","src":"50565:48:17"},{"nativeSrc":"50622:84:17","nodeType":"YulAssignment","src":"50622:84:17","value":{"arguments":[{"name":"value3","nativeSrc":"50692:6:17","nodeType":"YulIdentifier","src":"50692:6:17"},{"name":"tail","nativeSrc":"50701:4:17","nodeType":"YulIdentifier","src":"50701:4:17"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"50630:61:17","nodeType":"YulIdentifier","src":"50630:61:17"},"nativeSrc":"50630:76:17","nodeType":"YulFunctionCall","src":"50630:76:17"},"variableNames":[{"name":"tail","nativeSrc":"50622:4:17","nodeType":"YulIdentifier","src":"50622:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"50073:640:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"50221:9:17","nodeType":"YulTypedName","src":"50221:9:17","type":""},{"name":"value3","nativeSrc":"50233:6:17","nodeType":"YulTypedName","src":"50233:6:17","type":""},{"name":"value2","nativeSrc":"50241:6:17","nodeType":"YulTypedName","src":"50241:6:17","type":""},{"name":"value1","nativeSrc":"50249:6:17","nodeType":"YulTypedName","src":"50249:6:17","type":""},{"name":"value0","nativeSrc":"50257:6:17","nodeType":"YulTypedName","src":"50257:6:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"50268:4:17","nodeType":"YulTypedName","src":"50268:4:17","type":""}],"src":"50073:640:17"},{"body":{"nativeSrc":"50781:79:17","nodeType":"YulBlock","src":"50781:79:17","statements":[{"nativeSrc":"50791:22:17","nodeType":"YulAssignment","src":"50791:22:17","value":{"arguments":[{"name":"offset","nativeSrc":"50806:6:17","nodeType":"YulIdentifier","src":"50806:6:17"}],"functionName":{"name":"mload","nativeSrc":"50800:5:17","nodeType":"YulIdentifier","src":"50800:5:17"},"nativeSrc":"50800:13:17","nodeType":"YulFunctionCall","src":"50800:13:17"},"variableNames":[{"name":"value","nativeSrc":"50791:5:17","nodeType":"YulIdentifier","src":"50791:5:17"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"50848:5:17","nodeType":"YulIdentifier","src":"50848:5:17"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"50822:25:17","nodeType":"YulIdentifier","src":"50822:25:17"},"nativeSrc":"50822:32:17","nodeType":"YulFunctionCall","src":"50822:32:17"},"nativeSrc":"50822:32:17","nodeType":"YulExpressionStatement","src":"50822:32:17"}]},"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"50719:141:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"50759:6:17","nodeType":"YulTypedName","src":"50759:6:17","type":""},{"name":"end","nativeSrc":"50767:3:17","nodeType":"YulTypedName","src":"50767:3:17","type":""}],"returnVariables":[{"name":"value","nativeSrc":"50775:5:17","nodeType":"YulTypedName","src":"50775:5:17","type":""}],"src":"50719:141:17"},{"body":{"nativeSrc":"50942:273:17","nodeType":"YulBlock","src":"50942:273:17","statements":[{"body":{"nativeSrc":"50988:83:17","nodeType":"YulBlock","src":"50988:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"50990:77:17","nodeType":"YulIdentifier","src":"50990:77:17"},"nativeSrc":"50990:79:17","nodeType":"YulFunctionCall","src":"50990:79:17"},"nativeSrc":"50990:79:17","nodeType":"YulExpressionStatement","src":"50990:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"50963:7:17","nodeType":"YulIdentifier","src":"50963:7:17"},{"name":"headStart","nativeSrc":"50972:9:17","nodeType":"YulIdentifier","src":"50972:9:17"}],"functionName":{"name":"sub","nativeSrc":"50959:3:17","nodeType":"YulIdentifier","src":"50959:3:17"},"nativeSrc":"50959:23:17","nodeType":"YulFunctionCall","src":"50959:23:17"},{"kind":"number","nativeSrc":"50984:2:17","nodeType":"YulLiteral","src":"50984:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"50955:3:17","nodeType":"YulIdentifier","src":"50955:3:17"},"nativeSrc":"50955:32:17","nodeType":"YulFunctionCall","src":"50955:32:17"},"nativeSrc":"50952:119:17","nodeType":"YulIf","src":"50952:119:17"},{"nativeSrc":"51081:127:17","nodeType":"YulBlock","src":"51081:127:17","statements":[{"nativeSrc":"51096:15:17","nodeType":"YulVariableDeclaration","src":"51096:15:17","value":{"kind":"number","nativeSrc":"51110:1:17","nodeType":"YulLiteral","src":"51110:1:17","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"51100:6:17","nodeType":"YulTypedName","src":"51100:6:17","type":""}]},{"nativeSrc":"51125:73:17","nodeType":"YulAssignment","src":"51125:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"51170:9:17","nodeType":"YulIdentifier","src":"51170:9:17"},{"name":"offset","nativeSrc":"51181:6:17","nodeType":"YulIdentifier","src":"51181:6:17"}],"functionName":{"name":"add","nativeSrc":"51166:3:17","nodeType":"YulIdentifier","src":"51166:3:17"},"nativeSrc":"51166:22:17","nodeType":"YulFunctionCall","src":"51166:22:17"},{"name":"dataEnd","nativeSrc":"51190:7:17","nodeType":"YulIdentifier","src":"51190:7:17"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"51135:30:17","nodeType":"YulIdentifier","src":"51135:30:17"},"nativeSrc":"51135:63:17","nodeType":"YulFunctionCall","src":"51135:63:17"},"variableNames":[{"name":"value0","nativeSrc":"51125:6:17","nodeType":"YulIdentifier","src":"51125:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"50866:349:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"50912:9:17","nodeType":"YulTypedName","src":"50912:9:17","type":""},{"name":"dataEnd","nativeSrc":"50923:7:17","nodeType":"YulTypedName","src":"50923:7:17","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"50935:6:17","nodeType":"YulTypedName","src":"50935:6:17","type":""}],"src":"50866:349:17"},{"body":{"nativeSrc":"51249:152:17","nodeType":"YulBlock","src":"51249:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"51266:1:17","nodeType":"YulLiteral","src":"51266:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"51269:77:17","nodeType":"YulLiteral","src":"51269:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"51259:6:17","nodeType":"YulIdentifier","src":"51259:6:17"},"nativeSrc":"51259:88:17","nodeType":"YulFunctionCall","src":"51259:88:17"},"nativeSrc":"51259:88:17","nodeType":"YulExpressionStatement","src":"51259:88:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"51363:1:17","nodeType":"YulLiteral","src":"51363:1:17","type":"","value":"4"},{"kind":"number","nativeSrc":"51366:4:17","nodeType":"YulLiteral","src":"51366:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"51356:6:17","nodeType":"YulIdentifier","src":"51356:6:17"},"nativeSrc":"51356:15:17","nodeType":"YulFunctionCall","src":"51356:15:17"},"nativeSrc":"51356:15:17","nodeType":"YulExpressionStatement","src":"51356:15:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"51387:1:17","nodeType":"YulLiteral","src":"51387:1:17","type":"","value":"0"},{"kind":"number","nativeSrc":"51390:4:17","nodeType":"YulLiteral","src":"51390:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"51380:6:17","nodeType":"YulIdentifier","src":"51380:6:17"},"nativeSrc":"51380:15:17","nodeType":"YulFunctionCall","src":"51380:15:17"},"nativeSrc":"51380:15:17","nodeType":"YulExpressionStatement","src":"51380:15:17"}]},"name":"panic_error_0x32","nativeSrc":"51221:180:17","nodeType":"YulFunctionDefinition","src":"51221:180:17"},{"body":{"nativeSrc":"51513:76:17","nodeType":"YulBlock","src":"51513:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"51535:6:17","nodeType":"YulIdentifier","src":"51535:6:17"},{"kind":"number","nativeSrc":"51543:1:17","nodeType":"YulLiteral","src":"51543:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"51531:3:17","nodeType":"YulIdentifier","src":"51531:3:17"},"nativeSrc":"51531:14:17","nodeType":"YulFunctionCall","src":"51531:14:17"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nativeSrc":"51547:34:17","nodeType":"YulLiteral","src":"51547:34:17","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nativeSrc":"51524:6:17","nodeType":"YulIdentifier","src":"51524:6:17"},"nativeSrc":"51524:58:17","nodeType":"YulFunctionCall","src":"51524:58:17"},"nativeSrc":"51524:58:17","nodeType":"YulExpressionStatement","src":"51524:58:17"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nativeSrc":"51407:182:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"51505:6:17","nodeType":"YulTypedName","src":"51505:6:17","type":""}],"src":"51407:182:17"},{"body":{"nativeSrc":"51741:220:17","nodeType":"YulBlock","src":"51741:220:17","statements":[{"nativeSrc":"51751:74:17","nodeType":"YulAssignment","src":"51751:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"51817:3:17","nodeType":"YulIdentifier","src":"51817:3:17"},{"kind":"number","nativeSrc":"51822:2:17","nodeType":"YulLiteral","src":"51822:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"51758:58:17","nodeType":"YulIdentifier","src":"51758:58:17"},"nativeSrc":"51758:67:17","nodeType":"YulFunctionCall","src":"51758:67:17"},"variableNames":[{"name":"pos","nativeSrc":"51751:3:17","nodeType":"YulIdentifier","src":"51751:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"51923:3:17","nodeType":"YulIdentifier","src":"51923:3:17"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nativeSrc":"51834:88:17","nodeType":"YulIdentifier","src":"51834:88:17"},"nativeSrc":"51834:93:17","nodeType":"YulFunctionCall","src":"51834:93:17"},"nativeSrc":"51834:93:17","nodeType":"YulExpressionStatement","src":"51834:93:17"},{"nativeSrc":"51936:19:17","nodeType":"YulAssignment","src":"51936:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"51947:3:17","nodeType":"YulIdentifier","src":"51947:3:17"},{"kind":"number","nativeSrc":"51952:2:17","nodeType":"YulLiteral","src":"51952:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"51943:3:17","nodeType":"YulIdentifier","src":"51943:3:17"},"nativeSrc":"51943:12:17","nodeType":"YulFunctionCall","src":"51943:12:17"},"variableNames":[{"name":"end","nativeSrc":"51936:3:17","nodeType":"YulIdentifier","src":"51936:3:17"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nativeSrc":"51595:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"51729:3:17","nodeType":"YulTypedName","src":"51729:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"51737:3:17","nodeType":"YulTypedName","src":"51737:3:17","type":""}],"src":"51595:366:17"},{"body":{"nativeSrc":"52138:248:17","nodeType":"YulBlock","src":"52138:248:17","statements":[{"nativeSrc":"52148:26:17","nodeType":"YulAssignment","src":"52148:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"52160:9:17","nodeType":"YulIdentifier","src":"52160:9:17"},{"kind":"number","nativeSrc":"52171:2:17","nodeType":"YulLiteral","src":"52171:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"52156:3:17","nodeType":"YulIdentifier","src":"52156:3:17"},"nativeSrc":"52156:18:17","nodeType":"YulFunctionCall","src":"52156:18:17"},"variableNames":[{"name":"tail","nativeSrc":"52148:4:17","nodeType":"YulIdentifier","src":"52148:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"52195:9:17","nodeType":"YulIdentifier","src":"52195:9:17"},{"kind":"number","nativeSrc":"52206:1:17","nodeType":"YulLiteral","src":"52206:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"52191:3:17","nodeType":"YulIdentifier","src":"52191:3:17"},"nativeSrc":"52191:17:17","nodeType":"YulFunctionCall","src":"52191:17:17"},{"arguments":[{"name":"tail","nativeSrc":"52214:4:17","nodeType":"YulIdentifier","src":"52214:4:17"},{"name":"headStart","nativeSrc":"52220:9:17","nodeType":"YulIdentifier","src":"52220:9:17"}],"functionName":{"name":"sub","nativeSrc":"52210:3:17","nodeType":"YulIdentifier","src":"52210:3:17"},"nativeSrc":"52210:20:17","nodeType":"YulFunctionCall","src":"52210:20:17"}],"functionName":{"name":"mstore","nativeSrc":"52184:6:17","nodeType":"YulIdentifier","src":"52184:6:17"},"nativeSrc":"52184:47:17","nodeType":"YulFunctionCall","src":"52184:47:17"},"nativeSrc":"52184:47:17","nodeType":"YulExpressionStatement","src":"52184:47:17"},{"nativeSrc":"52240:139:17","nodeType":"YulAssignment","src":"52240:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"52374:4:17","nodeType":"YulIdentifier","src":"52374:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nativeSrc":"52248:124:17","nodeType":"YulIdentifier","src":"52248:124:17"},"nativeSrc":"52248:131:17","nodeType":"YulFunctionCall","src":"52248:131:17"},"variableNames":[{"name":"tail","nativeSrc":"52240:4:17","nodeType":"YulIdentifier","src":"52240:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"51967:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"52118:9:17","nodeType":"YulTypedName","src":"52118:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"52133:4:17","nodeType":"YulTypedName","src":"52133:4:17","type":""}],"src":"51967:419:17"},{"body":{"nativeSrc":"52498:72:17","nodeType":"YulBlock","src":"52498:72:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"52520:6:17","nodeType":"YulIdentifier","src":"52520:6:17"},{"kind":"number","nativeSrc":"52528:1:17","nodeType":"YulLiteral","src":"52528:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"52516:3:17","nodeType":"YulIdentifier","src":"52516:3:17"},"nativeSrc":"52516:14:17","nodeType":"YulFunctionCall","src":"52516:14:17"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nativeSrc":"52532:30:17","nodeType":"YulLiteral","src":"52532:30:17","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nativeSrc":"52509:6:17","nodeType":"YulIdentifier","src":"52509:6:17"},"nativeSrc":"52509:54:17","nodeType":"YulFunctionCall","src":"52509:54:17"},"nativeSrc":"52509:54:17","nodeType":"YulExpressionStatement","src":"52509:54:17"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nativeSrc":"52392:178:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"52490:6:17","nodeType":"YulTypedName","src":"52490:6:17","type":""}],"src":"52392:178:17"},{"body":{"nativeSrc":"52722:220:17","nodeType":"YulBlock","src":"52722:220:17","statements":[{"nativeSrc":"52732:74:17","nodeType":"YulAssignment","src":"52732:74:17","value":{"arguments":[{"name":"pos","nativeSrc":"52798:3:17","nodeType":"YulIdentifier","src":"52798:3:17"},{"kind":"number","nativeSrc":"52803:2:17","nodeType":"YulLiteral","src":"52803:2:17","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"52739:58:17","nodeType":"YulIdentifier","src":"52739:58:17"},"nativeSrc":"52739:67:17","nodeType":"YulFunctionCall","src":"52739:67:17"},"variableNames":[{"name":"pos","nativeSrc":"52732:3:17","nodeType":"YulIdentifier","src":"52732:3:17"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"52904:3:17","nodeType":"YulIdentifier","src":"52904:3:17"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nativeSrc":"52815:88:17","nodeType":"YulIdentifier","src":"52815:88:17"},"nativeSrc":"52815:93:17","nodeType":"YulFunctionCall","src":"52815:93:17"},"nativeSrc":"52815:93:17","nodeType":"YulExpressionStatement","src":"52815:93:17"},{"nativeSrc":"52917:19:17","nodeType":"YulAssignment","src":"52917:19:17","value":{"arguments":[{"name":"pos","nativeSrc":"52928:3:17","nodeType":"YulIdentifier","src":"52928:3:17"},{"kind":"number","nativeSrc":"52933:2:17","nodeType":"YulLiteral","src":"52933:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"52924:3:17","nodeType":"YulIdentifier","src":"52924:3:17"},"nativeSrc":"52924:12:17","nodeType":"YulFunctionCall","src":"52924:12:17"},"variableNames":[{"name":"end","nativeSrc":"52917:3:17","nodeType":"YulIdentifier","src":"52917:3:17"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nativeSrc":"52576:366:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"52710:3:17","nodeType":"YulTypedName","src":"52710:3:17","type":""}],"returnVariables":[{"name":"end","nativeSrc":"52718:3:17","nodeType":"YulTypedName","src":"52718:3:17","type":""}],"src":"52576:366:17"},{"body":{"nativeSrc":"53119:248:17","nodeType":"YulBlock","src":"53119:248:17","statements":[{"nativeSrc":"53129:26:17","nodeType":"YulAssignment","src":"53129:26:17","value":{"arguments":[{"name":"headStart","nativeSrc":"53141:9:17","nodeType":"YulIdentifier","src":"53141:9:17"},{"kind":"number","nativeSrc":"53152:2:17","nodeType":"YulLiteral","src":"53152:2:17","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"53137:3:17","nodeType":"YulIdentifier","src":"53137:3:17"},"nativeSrc":"53137:18:17","nodeType":"YulFunctionCall","src":"53137:18:17"},"variableNames":[{"name":"tail","nativeSrc":"53129:4:17","nodeType":"YulIdentifier","src":"53129:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"53176:9:17","nodeType":"YulIdentifier","src":"53176:9:17"},{"kind":"number","nativeSrc":"53187:1:17","nodeType":"YulLiteral","src":"53187:1:17","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"53172:3:17","nodeType":"YulIdentifier","src":"53172:3:17"},"nativeSrc":"53172:17:17","nodeType":"YulFunctionCall","src":"53172:17:17"},{"arguments":[{"name":"tail","nativeSrc":"53195:4:17","nodeType":"YulIdentifier","src":"53195:4:17"},{"name":"headStart","nativeSrc":"53201:9:17","nodeType":"YulIdentifier","src":"53201:9:17"}],"functionName":{"name":"sub","nativeSrc":"53191:3:17","nodeType":"YulIdentifier","src":"53191:3:17"},"nativeSrc":"53191:20:17","nodeType":"YulFunctionCall","src":"53191:20:17"}],"functionName":{"name":"mstore","nativeSrc":"53165:6:17","nodeType":"YulIdentifier","src":"53165:6:17"},"nativeSrc":"53165:47:17","nodeType":"YulFunctionCall","src":"53165:47:17"},"nativeSrc":"53165:47:17","nodeType":"YulExpressionStatement","src":"53165:47:17"},{"nativeSrc":"53221:139:17","nodeType":"YulAssignment","src":"53221:139:17","value":{"arguments":[{"name":"tail","nativeSrc":"53355:4:17","nodeType":"YulIdentifier","src":"53355:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nativeSrc":"53229:124:17","nodeType":"YulIdentifier","src":"53229:124:17"},"nativeSrc":"53229:131:17","nodeType":"YulFunctionCall","src":"53229:131:17"},"variableNames":[{"name":"tail","nativeSrc":"53221:4:17","nodeType":"YulIdentifier","src":"53221:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"52948:419:17","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"53099:9:17","nodeType":"YulTypedName","src":"53099:9:17","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"53114:4:17","nodeType":"YulTypedName","src":"53114:4:17","type":""}],"src":"52948:419:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes32[]\n    function abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint96_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_uint96(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient royalty amount\")\n\n    }\n\n    function abi_encode_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_69fe954861c88a4d877b112295e55d6cefbb81971d477244d8c8ac95b4e4f1ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e(memPtr) {\n\n        mstore(add(memPtr, 0), \"Refund failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_940ea0545bf4a4779ef86217d18a28c86bb09c07d43dd7635f3da6878953d25e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e(memPtr) {\n\n        mstore(add(memPtr, 0), \"wrong amount, send 0.1 ETH\")\n\n    }\n\n    function abi_encode_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2ac2bc11db613b6d48a61d50a381701b71e775b16322f7d395f4e217c52aaa2e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932(memPtr) {\n\n        mstore(add(memPtr, 0), \"no funds to withdraw\")\n\n    }\n\n    function abi_encode_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f16a37131a5f2b14ebfdd9aa53f017e01dd1984ee5ab37e0dda921b7e9bd0932_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d(memPtr) {\n\n        mstore(add(memPtr, 0), \"fund transfer failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c7b4055a53e163521681c49179af286b1a576955896b3eec1970dfe4178faf7d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a(memPtr) {\n\n        mstore(add(memPtr, 0), \"wrong amount, send 0.05 ETH\")\n\n    }\n\n    function abi_encode_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b5f5360cef08aa57593fff6dd1d3f9b62071de0a09272ec0354e9d741f03a77a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Discount already claimed\")\n\n    }\n\n    function abi_encode_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c4045f3ff922517c88fbe94be3c8cb1e301acaeed6bc8f55caebb74db7d820c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable2Step: caller is not the \")\n\n        mstore(add(memPtr, 32), \"new owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864(memPtr) {\n\n        mstore(add(memPtr, 0), \"the supply limit of 1000 is reac\")\n\n        mstore(add(memPtr, 32), \"hed\")\n\n    }\n\n    function abi_encode_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6c4384fd96949e42a4935eeaed53c6141eb2c40f41fbc812661a88c9b5f39864_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid proof\")\n\n    }\n\n    function abi_encode_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC2981: royalty fee will exceed\")\n\n        mstore(add(memPtr, 32), \" salePrice\")\n\n    }\n\n    function abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC2981: Invalid parameters\")\n\n    }\n\n    function abi_encode_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC2981: invalid receiver\")\n\n    }\n\n    function abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3603":[{"length":32,"start":3681},{"length":32,"start":7138}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5944C753 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0x98BDF6F5 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x6AB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x713 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x98BDF6F5 EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5F1 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0xC7499348 EQ PUSH2 0x643 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x559 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x570 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x59B JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x5944C753 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x63D9D166 EQ PUSH2 0x4DA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x505 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x24600FC3 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3DB JUMPI DUP1 PUSH4 0x47B13D8A EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x55850FE6 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x44B JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x3B0 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0xAB7039E GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xAB7039E EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x307 JUMPI PUSH2 0x1E3 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x28D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x73C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x2D27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x74E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x2DD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x272 SWAP2 SWAP1 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0x7E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x284 SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x826 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x2F1F JUMP JUMPDEST PUSH2 0x93D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DA PUSH2 0xA69 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FE SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0x2FB0 JUMP JUMPDEST PUSH2 0xAC7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x345 PUSH2 0xB27 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x36E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x369 SWAP2 SWAP1 PUSH2 0x3003 JUMP JUMPDEST PUSH2 0xC75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37C SWAP3 SWAP2 SWAP1 PUSH2 0x3043 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A7 SWAP2 SWAP1 PUSH2 0x3085 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C5 PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D2 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x2FB0 JUMP JUMPDEST PUSH2 0xE89 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x3105 JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x442 SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x472 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x46D SWAP2 SWAP1 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0xFC3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x496 SWAP2 SWAP1 PUSH2 0x3360 JUMP JUMPDEST PUSH2 0xFDE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BF SWAP2 SWAP1 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0xFF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D1 SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EF PUSH2 0x107C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FC SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x527 SWAP2 SWAP1 PUSH2 0x33B3 JUMP JUMPDEST PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x539 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x557 PUSH2 0x113F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x56E PUSH2 0x1153 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x585 PUSH2 0x11E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B0 PUSH2 0x120A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0x2DD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DB PUSH2 0x129C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5E8 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x618 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x613 SWAP2 SWAP1 PUSH2 0x340C JUMP JUMPDEST PUSH2 0x12A2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x63C SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH2 0x12B8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x658 PUSH2 0x131A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x665 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x695 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x690 SWAP2 SWAP1 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0x1325 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6A2 SWAP2 SWAP1 PUSH2 0x2DD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C0 PUSH2 0x138D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6CD SWAP2 SWAP1 PUSH2 0x2E98 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6F8 SWAP2 SWAP1 PUSH2 0x3570 JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70A SWAP2 SWAP1 PUSH2 0x2D27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x73A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x33B3 JUMP JUMPDEST PUSH2 0x144B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x747 DUP3 PUSH2 0x14F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x75D SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x789 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7EB DUP3 PUSH2 0x1572 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x831 DUP3 PUSH2 0xFF6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x898 SWAP1 PUSH2 0x3682 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8C0 PUSH2 0x15BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8EF JUMPI POP PUSH2 0x8EE DUP2 PUSH2 0x8E9 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST JUMPDEST PUSH2 0x92E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x925 SWAP1 PUSH2 0x3714 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x938 DUP4 DUP4 PUSH2 0x15C5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x949 DUP4 DUP4 PUSH2 0xC75 JUMP JUMPDEST SWAP2 POP POP DUP1 CALLVALUE LT ISZERO PUSH2 0x98F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x986 SWAP1 PUSH2 0x3780 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x99A DUP6 DUP6 DUP6 PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLVALUE PUSH2 0x9A8 SWAP2 SWAP1 PUSH2 0x37CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xA61 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x9D9 SWAP1 PUSH2 0x3834 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x3895 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0x16345785D8A0000 CALLVALUE EQ PUSH2 0xAB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAAA SWAP1 PUSH2 0x3901 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xABB PUSH2 0x167E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xAD8 PUSH2 0xAD2 PUSH2 0x15BD JUMP JUMPDEST DUP3 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0xB17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB0E SWAP1 PUSH2 0x3993 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB22 DUP4 DUP4 DUP4 PUSH2 0x17CA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB2F PUSH2 0x1AC3 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB6E SWAP1 PUSH2 0x39FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xB9D SWAP1 PUSH2 0x3834 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC1A SWAP1 PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEAFF4B37086828766AD3268786972C0CD24259D4C87A80F9D3963A3C3D999B0D DUP4 PUSH1 0x40 MLOAD PUSH2 0xC69 SWAP2 SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE0A JUMPI PUSH1 0x8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0xE14 PUSH2 0x1B41 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0xE40 SWAP2 SWAP1 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0xE4A SWAP2 SWAP1 PUSH2 0x3AFC JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD DUP2 SWAP4 POP SWAP4 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0xEA4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 CALLVALUE EQ PUSH2 0xEF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE9 SWAP1 PUSH2 0x3B79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEFD PUSH1 0xC DUP4 PUSH2 0x1B4B JUMP JUMPDEST ISZERO PUSH2 0xF3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF34 SWAP1 PUSH2 0x3BE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF8A DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP4 DUP4 CALLER PUSH2 0x1B87 JUMP JUMPDEST PUSH2 0xF97 PUSH1 0xC DUP4 PUSH1 0x1 PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFB7 JUMPI PUSH2 0xFAA PUSH2 0x167E JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xF9A JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFA DUP2 JUMP JUMPDEST PUSH2 0xFCB PUSH2 0x1AC3 JUMP JUMPDEST DUP1 PUSH1 0xB SWAP1 DUP2 PUSH2 0xFDA SWAP2 SWAP1 PUSH2 0x3DB1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFE6 PUSH2 0x1AC3 JUMP JUMPDEST PUSH2 0xFF1 DUP4 DUP4 DUP4 PUSH2 0x1C72 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1002 DUP4 PUSH2 0x1E19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1073 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x106A SWAP1 PUSH2 0x3ECF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0x16345785D8A0000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10EF SWAP1 PUSH2 0x3F61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1147 PUSH2 0x1AC3 JUMP JUMPDEST PUSH2 0x1151 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x115D PUSH2 0x15BD JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x117E PUSH2 0x138D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11CB SWAP1 PUSH2 0x3FF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11DD DUP2 PUSH2 0x1E56 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x1219 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1245 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1292 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1267 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1292 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1275 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x12B4 PUSH2 0x12AD PUSH2 0x15BD JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1E6D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x12C9 PUSH2 0x12C3 PUSH2 0x15BD JUMP JUMPDEST DUP4 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x1308 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12FF SWAP1 PUSH2 0x3993 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1314 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1FD9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1330 DUP3 PUSH2 0x1572 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x133A PUSH2 0x2035 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x135A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1385 JUMP JUMPDEST DUP1 PUSH2 0x1364 DUP5 PUSH2 0x20C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1375 SWAP3 SWAP2 SWAP1 PUSH2 0x404F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1453 PUSH2 0x1AC3 JUMP JUMPDEST DUP1 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14B3 PUSH2 0x11E0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2A55205A00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x156B JUMPI POP PUSH2 0x156A DUP3 PUSH2 0x2195 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x157B DUP2 PUSH2 0x2277 JUMP JUMPDEST PUSH2 0x15BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B1 SWAP1 PUSH2 0x3ECF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1638 DUP4 PUSH2 0xFF6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xA SLOAD LT PUSH2 0x16C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16BB SWAP1 PUSH2 0x40E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x16DE SWAP2 SWAP1 PUSH2 0x4105 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x16EF CALLER DUP3 PUSH2 0x22B8 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x90DDEDD5A25821BBA11FBB98DE02EC1F75C1BE90AE147D6450CE873E7B78B5D8 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1741 DUP4 PUSH2 0xFF6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1783 JUMPI POP PUSH2 0x1782 DUP2 DUP6 PUSH2 0x13B7 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x17C1 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17A9 DUP5 PUSH2 0x7E0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17EA DUP3 PUSH2 0xFF6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1840 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1837 SWAP1 PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x18AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18A6 SWAP1 PUSH2 0x423D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18BC DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22D6 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18DC DUP3 PUSH2 0xFF6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1932 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1929 SWAP1 PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1ABE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22DC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1ACB PUSH2 0x15BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AE9 PUSH2 0x11E0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B36 SWAP1 PUSH2 0x42A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 DUP4 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP5 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD AND EQ ISZERO SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B9E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x42C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BC4 SWAP2 SWAP1 PUSH2 0x4321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x1C07 DUP6 PUSH32 0x0 DUP4 PUSH2 0x22E2 JUMP JUMPDEST PUSH2 0x1C46 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3D SWAP1 PUSH2 0x4388 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C62 JUMPI PUSH2 0x1C5D DUP4 DUP4 PUSH2 0x22F9 JUMP JUMPDEST PUSH2 0x1C6D JUMP JUMPDEST PUSH2 0x1C6C DUP4 DUP4 PUSH2 0x2337 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C7A PUSH2 0x1B41 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1CD8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CCF SWAP1 PUSH2 0x441A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3E SWAP1 PUSH2 0x4486 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E5F DUP2 PUSH2 0x2376 JUMP JUMPDEST PUSH2 0x1E6A DUP2 PUSH1 0xFA PUSH2 0x23A7 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED2 SWAP1 PUSH2 0x44F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1FCC SWAP2 SWAP1 PUSH2 0x2D27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1FE4 DUP5 DUP5 DUP5 PUSH2 0x17CA JUMP JUMPDEST PUSH2 0x1FF0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x253C JUMP JUMPDEST PUSH2 0x202F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2026 SWAP1 PUSH2 0x4584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0x2044 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2070 SWAP1 PUSH2 0x35DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20BD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2092 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20BD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20A0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x20D6 DUP5 PUSH2 0x26C3 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20F5 JUMPI PUSH2 0x20F4 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2127 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x218A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x217E JUMPI PUSH2 0x217D PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2135 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x2260 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x2270 JUMPI POP PUSH2 0x226F DUP3 PUSH2 0x2816 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2299 DUP4 PUSH2 0x1E19 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22D2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2880 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x22EF DUP6 DUP5 PUSH2 0x28DB JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP4 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD OR SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP4 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP DUP1 NOT DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD AND SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x23A4 DUP2 PUSH2 0x292B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x23AF PUSH2 0x1B41 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x240D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2404 SWAP1 PUSH2 0x441A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x247C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2473 SWAP1 PUSH2 0x45F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x255D DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x29F1 JUMP JUMPDEST ISZERO PUSH2 0x26B6 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2586 PUSH2 0x15BD JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4665 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x25E4 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25E1 SWAP2 SWAP1 PUSH2 0x46C6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2666 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2614 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2619 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x265E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2655 SWAP1 PUSH2 0x4584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x26BB JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2721 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2717 JUMPI PUSH2 0x2716 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x275E JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2754 JUMPI PUSH2 0x2753 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x278D JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2783 JUMPI PUSH2 0x2782 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x27B6 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x27AC JUMPI PUSH2 0x27AB PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x27DB JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x27D1 JUMPI PUSH2 0x27D0 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x27FE JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x27F4 JUMPI PUSH2 0x27F3 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x280D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x288A DUP4 DUP4 PUSH2 0x2A14 JUMP JUMPDEST PUSH2 0x2897 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x253C JUMP JUMPDEST PUSH2 0x28D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28CD SWAP1 PUSH2 0x4584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2920 JUMPI PUSH2 0x2911 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2904 JUMPI PUSH2 0x2903 PUSH2 0x46F3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2C31 JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x28E4 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2A83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A7A SWAP1 PUSH2 0x476E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2A8C DUP2 PUSH2 0x2277 JUMP JUMPDEST ISZERO PUSH2 0x2ACC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC3 SWAP1 PUSH2 0x47DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2ADA PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22D6 JUMP JUMPDEST PUSH2 0x2AE3 DUP2 PUSH2 0x2277 JUMP JUMPDEST ISZERO PUSH2 0x2B23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B1A SWAP1 PUSH2 0x47DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2C2D PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x22DC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2C49 JUMPI PUSH2 0x2C44 DUP3 DUP5 PUSH2 0x2C5C JUMP JUMPDEST PUSH2 0x2C54 JUMP JUMPDEST PUSH2 0x2C53 DUP4 DUP4 PUSH2 0x2C5C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CBC DUP2 PUSH2 0x2C87 JUMP JUMPDEST DUP2 EQ PUSH2 0x2CC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2CD9 DUP2 PUSH2 0x2CB3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF5 JUMPI PUSH2 0x2CF4 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D03 DUP5 DUP3 DUP6 ADD PUSH2 0x2CCA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D21 DUP2 PUSH2 0x2D0C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D3C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D7C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2D61 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DA4 DUP3 PUSH2 0x2D42 JUMP JUMPDEST PUSH2 0x2DAE DUP2 DUP6 PUSH2 0x2D4D JUMP JUMPDEST SWAP4 POP PUSH2 0x2DBE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D5E JUMP JUMPDEST PUSH2 0x2DC7 DUP2 PUSH2 0x2D88 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DEC DUP2 DUP5 PUSH2 0x2D99 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E07 DUP2 PUSH2 0x2DF4 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2E24 DUP2 PUSH2 0x2DFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E40 JUMPI PUSH2 0x2E3F PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E4E DUP5 DUP3 DUP6 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E82 DUP3 PUSH2 0x2E57 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E92 DUP2 PUSH2 0x2E77 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EAD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2EBC DUP2 PUSH2 0x2E77 JUMP JUMPDEST DUP2 EQ PUSH2 0x2EC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2ED9 DUP2 PUSH2 0x2EB3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2EF6 JUMPI PUSH2 0x2EF5 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F04 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F15 DUP6 DUP3 DUP7 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2F39 JUMPI PUSH2 0x2F38 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F47 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2F58 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2F69 DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x2F7A DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x2F8F DUP2 PUSH2 0x2DF4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2FAA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F86 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FC9 JUMPI PUSH2 0x2FC8 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FD7 DUP7 DUP3 DUP8 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2FE8 DUP7 DUP3 DUP8 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2FF9 DUP7 DUP3 DUP8 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x301A JUMPI PUSH2 0x3019 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3028 DUP6 DUP3 DUP7 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3039 DUP6 DUP3 DUP7 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3058 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x3065 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F86 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x307F DUP2 PUSH2 0x306C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x309A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3076 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x30C5 JUMPI PUSH2 0x30C4 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30E2 JUMPI PUSH2 0x30E1 PUSH2 0x30A5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x30FE JUMPI PUSH2 0x30FD PUSH2 0x30AA JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x311F JUMPI PUSH2 0x311E PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x313D JUMPI PUSH2 0x313C PUSH2 0x2C82 JUMP JUMPDEST JUMPDEST PUSH2 0x3149 DUP8 DUP3 DUP9 ADD PUSH2 0x30AF JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 PUSH2 0x315C DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x316D DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x319A DUP2 PUSH2 0x3179 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x31B5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3191 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x31F8 DUP3 PUSH2 0x2D88 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3217 JUMPI PUSH2 0x3216 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x322A PUSH2 0x2C73 JUMP JUMPDEST SWAP1 POP PUSH2 0x3236 DUP3 DUP3 PUSH2 0x31EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3256 JUMPI PUSH2 0x3255 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH2 0x325F DUP3 PUSH2 0x2D88 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328E PUSH2 0x3289 DUP5 PUSH2 0x323B JUMP JUMPDEST PUSH2 0x3220 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x32AA JUMPI PUSH2 0x32A9 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x32B5 DUP5 DUP3 DUP6 PUSH2 0x326C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x32D2 JUMPI PUSH2 0x32D1 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x32E2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x327B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3301 JUMPI PUSH2 0x3300 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x331F JUMPI PUSH2 0x331E PUSH2 0x2C82 JUMP JUMPDEST JUMPDEST PUSH2 0x332B DUP5 DUP3 DUP6 ADD PUSH2 0x32BD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x333D DUP2 PUSH2 0x3179 JUMP JUMPDEST DUP2 EQ PUSH2 0x3348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x335A DUP2 PUSH2 0x3334 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3379 JUMPI PUSH2 0x3378 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3387 DUP7 DUP3 DUP8 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3398 DUP7 DUP3 DUP8 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x33A9 DUP7 DUP3 DUP8 ADD PUSH2 0x334B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33C9 JUMPI PUSH2 0x33C8 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33D7 DUP5 DUP3 DUP6 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x33E9 DUP2 PUSH2 0x2D0C JUMP JUMPDEST DUP2 EQ PUSH2 0x33F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3406 DUP2 PUSH2 0x33E0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3423 JUMPI PUSH2 0x3422 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3431 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3442 DUP6 DUP3 DUP7 ADD PUSH2 0x33F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3467 JUMPI PUSH2 0x3466 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH2 0x3470 DUP3 PUSH2 0x2D88 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3490 PUSH2 0x348B DUP5 PUSH2 0x344C JUMP JUMPDEST PUSH2 0x3220 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x34AC JUMPI PUSH2 0x34AB PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x34B7 DUP5 DUP3 DUP6 PUSH2 0x326C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x34D4 JUMPI PUSH2 0x34D3 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x34E4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x347D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3507 JUMPI PUSH2 0x3506 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3515 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3526 DUP8 DUP3 DUP9 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3537 DUP8 DUP3 DUP9 ADD PUSH2 0x2E15 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3558 JUMPI PUSH2 0x3557 PUSH2 0x2C82 JUMP JUMPDEST JUMPDEST PUSH2 0x3564 DUP8 DUP3 DUP9 ADD PUSH2 0x34BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3587 JUMPI PUSH2 0x3586 PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3595 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x35A6 DUP6 DUP3 DUP7 ADD PUSH2 0x2ECA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x35F7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x360A JUMPI PUSH2 0x3609 PUSH2 0x35B0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x366C PUSH1 0x21 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3677 DUP3 PUSH2 0x3610 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x369B DUP2 PUSH2 0x365F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36FE PUSH1 0x3D DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3709 DUP3 PUSH2 0x36A2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x372D DUP2 PUSH2 0x36F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420726F79616C747920616D6F756E740000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x376A PUSH1 0x1B DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3775 DUP3 PUSH2 0x3734 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3799 DUP2 PUSH2 0x375D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x37DA DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x37E5 DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x37FD JUMPI PUSH2 0x37FC PUSH2 0x37A0 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x381E PUSH1 0x0 DUP4 PUSH2 0x3803 JUMP JUMPDEST SWAP2 POP PUSH2 0x3829 DUP3 PUSH2 0x380E JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x383F DUP3 PUSH2 0x3811 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526566756E64206661696C656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x387F PUSH1 0xD DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x388A DUP3 PUSH2 0x3849 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x38AE DUP2 PUSH2 0x3872 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x77726F6E6720616D6F756E742C2073656E6420302E3120455448000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38EB PUSH1 0x1A DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x38F6 DUP3 PUSH2 0x38B5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x391A DUP2 PUSH2 0x38DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397D PUSH1 0x2D DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3988 DUP3 PUSH2 0x3921 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39AC DUP2 PUSH2 0x3970 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F2066756E647320746F207769746864726177000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39E9 PUSH1 0x14 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x39F4 DUP3 PUSH2 0x39B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A18 DUP2 PUSH2 0x39DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x66756E64207472616E73666572206661696C6564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A55 PUSH1 0x14 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3A60 DUP3 PUSH2 0x3A1F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A84 DUP2 PUSH2 0x3A48 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A96 DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AA1 DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3AAF DUP2 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x3AC6 JUMPI PUSH2 0x3AC5 PUSH2 0x37A0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B07 DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B12 DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3B22 JUMPI PUSH2 0x3B21 PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x77726F6E6720616D6F756E742C2073656E6420302E3035204554480000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B63 PUSH1 0x1B DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3B6E DUP3 PUSH2 0x3B2D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B92 DUP2 PUSH2 0x3B56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x446973636F756E7420616C726561647920636C61696D65640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCF PUSH1 0x18 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3BDA DUP3 PUSH2 0x3B99 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BFE DUP2 PUSH2 0x3BC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3C67 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3C2A JUMP JUMPDEST PUSH2 0x3C71 DUP7 DUP4 PUSH2 0x3C2A JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CAE PUSH2 0x3CA9 PUSH2 0x3CA4 DUP5 PUSH2 0x2DF4 JUMP JUMPDEST PUSH2 0x3C89 JUMP JUMPDEST PUSH2 0x2DF4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CC8 DUP4 PUSH2 0x3C93 JUMP JUMPDEST PUSH2 0x3CDC PUSH2 0x3CD4 DUP3 PUSH2 0x3CB5 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3C37 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3CF1 PUSH2 0x3CE4 JUMP JUMPDEST PUSH2 0x3CFC DUP2 DUP5 DUP5 PUSH2 0x3CBF JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D20 JUMPI PUSH2 0x3D15 PUSH1 0x0 DUP3 PUSH2 0x3CE9 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3D02 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3D65 JUMPI PUSH2 0x3D36 DUP2 PUSH2 0x3C05 JUMP JUMPDEST PUSH2 0x3D3F DUP5 PUSH2 0x3C1A JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3D4E JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3D62 PUSH2 0x3D5A DUP6 PUSH2 0x3C1A JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3D01 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D88 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3D6A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DA1 DUP4 DUP4 PUSH2 0x3D77 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3DBA DUP3 PUSH2 0x2D42 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DD3 JUMPI PUSH2 0x3DD2 PUSH2 0x31C0 JUMP JUMPDEST JUMPDEST PUSH2 0x3DDD DUP3 SLOAD PUSH2 0x35DF JUMP JUMPDEST PUSH2 0x3DE8 DUP3 DUP3 DUP6 PUSH2 0x3D24 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3E1B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3E09 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3E13 DUP6 DUP3 PUSH2 0x3D95 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3E7B JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3E29 DUP7 PUSH2 0x3C05 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3E51 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3E2C JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3E6E JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3E6A PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3D77 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EB9 PUSH1 0x18 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3EC4 DUP3 PUSH2 0x3E83 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3EE8 DUP2 PUSH2 0x3EAC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4B PUSH1 0x29 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3F56 DUP3 PUSH2 0x3EEF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F7A DUP2 PUSH2 0x3F3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E6577206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FDD PUSH1 0x29 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x3FE8 DUP3 PUSH2 0x3F81 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x400C DUP2 PUSH2 0x3FD0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4029 DUP3 PUSH2 0x2D42 JUMP JUMPDEST PUSH2 0x4033 DUP2 DUP6 PUSH2 0x4013 JUMP JUMPDEST SWAP4 POP PUSH2 0x4043 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D5E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x405B DUP3 DUP6 PUSH2 0x401E JUMP JUMPDEST SWAP2 POP PUSH2 0x4067 DUP3 DUP5 PUSH2 0x401E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x74686520737570706C79206C696D6974206F6620313030302069732072656163 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6865640000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40CF PUSH1 0x23 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x40DA DUP3 PUSH2 0x4073 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x40FE DUP2 PUSH2 0x40C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4110 DUP3 PUSH2 0x2DF4 JUMP JUMPDEST SWAP2 POP PUSH2 0x411B DUP4 PUSH2 0x2DF4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x4133 JUMPI PUSH2 0x4132 PUSH2 0x37A0 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4195 PUSH1 0x25 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x41A0 DUP3 PUSH2 0x4139 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x41C4 DUP2 PUSH2 0x4188 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4227 PUSH1 0x24 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x4232 DUP3 PUSH2 0x41CB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4256 DUP2 PUSH2 0x421A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4293 PUSH1 0x20 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x429E DUP3 PUSH2 0x425D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42C2 DUP2 PUSH2 0x4286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x42DE PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x42EB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2F86 JUMP JUMPDEST PUSH2 0x42F8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F86 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x431B PUSH2 0x4316 DUP3 PUSH2 0x306C JUMP JUMPDEST PUSH2 0x4300 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x432D DUP3 DUP5 PUSH2 0x430A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E76616C69642070726F6F6600000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4372 PUSH1 0xD DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x437D DUP3 PUSH2 0x433C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43A1 DUP2 PUSH2 0x4365 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4404 PUSH1 0x2A DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x440F DUP3 PUSH2 0x43A8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4433 DUP2 PUSH2 0x43F7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4470 PUSH1 0x1B DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x447B DUP3 PUSH2 0x443A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x449F DUP2 PUSH2 0x4463 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44DC PUSH1 0x19 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x44E7 DUP3 PUSH2 0x44A6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x450B DUP2 PUSH2 0x44CF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x456E PUSH1 0x32 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x4579 DUP3 PUSH2 0x4512 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x459D DUP2 PUSH2 0x4561 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45DA PUSH1 0x19 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x45E5 DUP3 PUSH2 0x45A4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4609 DUP2 PUSH2 0x45CD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4637 DUP3 PUSH2 0x4610 JUMP JUMPDEST PUSH2 0x4641 DUP2 DUP6 PUSH2 0x461B JUMP JUMPDEST SWAP4 POP PUSH2 0x4651 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D5E JUMP JUMPDEST PUSH2 0x465A DUP2 PUSH2 0x2D88 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x467A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x4687 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2E89 JUMP JUMPDEST PUSH2 0x4694 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2F86 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x46A6 DUP2 DUP5 PUSH2 0x462C JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x46C0 DUP2 PUSH2 0x2CB3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x46DC JUMPI PUSH2 0x46DB PUSH2 0x2C7D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46EA DUP5 DUP3 DUP6 ADD PUSH2 0x46B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4758 PUSH1 0x20 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x4763 DUP3 PUSH2 0x4722 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4787 DUP2 PUSH2 0x474B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47C4 PUSH1 0x1C DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 POP PUSH2 0x47CF DUP3 PUSH2 0x478E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x47F3 DUP2 PUSH2 0x47B7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 CALLDATACOPY DUP14 NUMBER 0xBE EXP 0x2C PUSH9 0xA65D7B7001C390D78C POP 0x4E JUMPDEST TIMESTAMP 0xEC EXTCODECOPY 0xE9 PUSH25 0x5E6ED0E12E862964736F6C634300081B003300000000000000 ","sourceMap":"786:6541:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5786:168;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2859:592:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4044:130;;;:::i;:::-;;5485:91;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4612:326:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2111:359:16;;;;;;;;;;;;;:::i;:::-;;1671:432:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1120:35:16;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;839:41;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5004:179:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4507:454:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;886:50;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5081:99;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3735:166;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;962:49:16;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:0;;;;;;;;;;;;;:::i;:::-;;1734:206:1;;;;;;;;;;;;;:::i;:::-;;1201:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1085:29:16;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1017:61:16;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2801:276:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;847:99:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1139:178:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5786:168:16;5888:4;5911:36;5935:11;5911:23;:36::i;:::-;5904:43;;5786:168;;;:::o;2471:98:3:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;2859:592:16:-;2987:21;3012:32;3024:7;3033:10;3012:11;:32::i;:::-;2984:60;;;3075:13;3062:9;:26;;3054:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;3130:31;3143:4;3149:2;3153:7;3130:12;:31::i;:::-;3209:14;3238:13;3226:9;:25;;;;:::i;:::-;3209:42;;3274:1;3265:6;:10;3261:184;;;3292:18;3316:10;:15;;3339:6;3316:34;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3291:59;;;3403:13;3395:39;;;;;;;;;;;;:::i;:::-;;;;;;;;;3277:168;3261:184;2974:477;;2859:592;;;;:::o;4044:130::-;1002:9;4093;:26;4085:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;4160:7;:5;:7::i;:::-;4044:130::o;5485:91::-;5529:7;5555:14;;5548:21;;5485:91;:::o;4612:326:3:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;2111:359:16:-;1094:13:0;:11;:13::i;:::-;2165:23:16::1;2191:21;2165:47;;2248:1;2230:15;:19;2222:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;2285:12;2311:10;2303:24;;2335:15;2303:52;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2284:71;;;2373:7;2365:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;2435:10;2420:43;;;2447:15;2420:43;;;;;;:::i;:::-;;;;;;;;2155:315;;2111:359::o:0;1671:432:7:-;1768:7;1777;1796:26;1825:17;:27;1843:8;1825:27;;;;;;;;;;;1796:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1895:1;1867:30;;:7;:16;;;:30;;;1863:90;;1923:19;1913:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1863:90;1963:21;2028:17;:15;:17::i;:::-;1987:58;;2001:7;:23;;;1988:36;;:10;:36;;;;:::i;:::-;1987:58;;;;:::i;:::-;1963:82;;2064:7;:16;;;2082:13;2056:40;;;;;;1671:432;;;;;:::o;1120:35:16:-;;;:::o;839:41::-;876:4;839:41;:::o;5004:179:3:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;4507:454:16:-;1068:10;4623:9;:37;4615:77;;;;;;;;;;;;:::i;:::-;;;;;;;;;4711:31;4723:11;4736:5;4711:11;:31::i;:::-;4710:32;4702:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;4781:46;4794:5;;4781:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4801:5;4808:6;4816:10;4781:12;:46::i;:::-;4837:39;4851:11;4864:5;4871:4;4837:13;:39::i;:::-;4891:9;4886:69;4910:6;4906:1;:10;4886:69;;;4937:7;:5;:7::i;:::-;4918:3;;;;;;;4886:69;;;;4507:454;;;;:::o;886:50::-;933:3;886:50;:::o;5081:99::-;1094:13:0;:11;:13::i;:::-;5166:7:16::1;5151:12;:22;;;;;;:::i;:::-;;5081:99:::0;:::o;3735:166::-;1094:13:0;:11;:13::i;:::-;3845:49:16::1;3862:7;3871:8;3881:12;3845:16;:49::i;:::-;3735:166:::0;;;:::o;2190:219:3:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;962:49:16:-;1002:9;962:49;:::o;1929:204:3:-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1734:206:1:-;1780:14;1797:12;:10;:12::i;:::-;1780:29;;1845:6;1827:24;;:14;:12;:14::i;:::-;:24;;;1819:78;;;;;;;;;;;;:::i;:::-;;;;;;;;;1907:26;1926:6;1907:18;:26::i;:::-;1770:170;1734:206::o;1201:85:0:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;2633:102:3:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;1085:29:16:-;;;;:::o;4169:153:3:-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;1017:61:16:-;1068:10;1017:61;:::o;2801:276:3:-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;847:99:1:-;900:7;926:13;;;;;;;;;;;919:20;;847:99;:::o;4388:162:3:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;1139:178:1:-;1094:13:0;:11;:13::i;:::-;1244:8:1::1;1228:13;;:24;;;;;;;;;;;;;;;;;;1301:8;1267:43;;1292:7;:5;:7::i;:::-;1267:43;;;;;;;;;;;;1139:178:::0;:::o;1408:213:7:-;1510:4;1548:26;1533:41;;;:11;:41;;;;:81;;;;1578:36;1602:11;1578:23;:36::i;:::-;1533:81;1526:88;;1408:213;;;:::o;13466:133:3:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:9:-;693:7;719:10;712:17;;640:96;:::o;12768:171:3:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7063:262:16:-;876:4;7107:14;;:27;7099:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;7184:15;7202:14;;7184:32;;7244:1;7226:14;;:19;;;;;;;:::i;:::-;;;;;;;;7255:30;7265:10;7277:7;7255:9;:30::i;:::-;7307:10;7300:18;;;;;;;;;;;;7089:236;7063:262::o;7540:261:3:-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2378:95:7:-;2436:6;2461:5;2454:12;;2378:95;:::o;568:217:15:-;642:4;658:14;684:1;675:5;:10;;658:27;;695:12;724:4;716:5;:12;710:1;:19;;695:34;;777:1;769:4;746:6;:12;;:20;759:6;746:20;;;;;;;;;;;;:27;:32;;739:39;;;;568:217;;;;:::o;6663:282:16:-;6777:12;6836:4;6842:5;6849:6;6825:31;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6815:42;;;;;;6802:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;6792:67;;;;;;6777:82;;6877:43;6896:5;6903:10;6915:4;6877:18;:43::i;:::-;6869:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;6767:178;6663:282;;;;:::o;867:225:15:-;985:5;981:105;;;1006:18;1010:6;1018:5;1006:3;:18::i;:::-;981:105;;;1055:20;1061:6;1069:5;1055;:20::i;:::-;981:105;867:225;;;:::o;3495:381:7:-;3658:17;:15;:17::i;:::-;3642:33;;:12;:33;;;;3634:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;3760:1;3740:22;;:8;:22;;;3732:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;3834:35;;;;;;;;3846:8;3834:35;;;;;;3856:12;3834:35;;;;;3805:17;:26;3823:7;3805:26;;;;;;;;;;;:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3495:381;;;:::o;6838:115:3:-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;6130:224:16:-;6204:34;6229:8;6204:24;:34::i;:::-;6248:51;6267:8;933:3;6248:18;:51::i;:::-;6130:224;:::o;13075:307:3:-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;5255:111:16:-;5315:13;5347:12;5340:19;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5255:111;:::o;415:696:10:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;1570:300:3:-;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;8131:108::-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;:::-;8131:108;;:::o;15698:154::-;;;;;:::o;16558:153::-;;;;;:::o;1156:184:11:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;1293:40;;1156:184;;;;;:::o;1151:186:15:-;1221:14;1247:1;1238:5;:10;;1221:27;;1258:12;1287:4;1279:5;:12;1273:1;:19;;1258:34;;1326:4;1302:6;:12;;:20;1315:6;1302:20;;;;;;;;;;;;:28;;;;;;;;;;;1211:126;;1151:186;;:::o;1398:189::-;1470:14;1496:1;1487:5;:10;;1470:27;;1507:12;1536:4;1528:5;:12;1522:1;:19;;1507:34;;1576:4;1575:5;1551:6;:12;;:20;1564:6;1551:20;;;;;;;;;;;;:29;;;;;;;;;;;1460:127;;1398:189;;:::o;1501:153:1:-;1590:13;;1583:20;;;;;;;;;;;1613:34;1638:8;1613:24;:34::i;:::-;1501:153;:::o;2734:327:7:-;2852:17;:15;:17::i;:::-;2836:33;;:12;:33;;;;2828:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;2954:1;2934:22;;:8;:22;;;2926:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;3019:35;;;;;;;;3031:8;3019:35;;;;;;3041:12;3019:35;;;;;2997:19;:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2734:327;;:::o;14151:831:3:-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:14:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;829:155:12:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;8460:309:3:-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8460:309;;;:::o;1994:290:11:-;2077:7;2096:20;2119:4;2096:27;;2138:9;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;;2205:9;:33::i;:::-;2190:48;;2171:3;;;;;;;2133:116;;;;2265:12;2258:19;;;1994:290;;;;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;1175:320:8:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9091:920:3:-;9184:1;9170:16;;:2;:16;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;8879:147:11:-;8942:7;8972:1;8968;:5;:51;;8999:20;9014:1;9017;8999:14;:20::i;:::-;8968:51;;;8976:20;8991:1;8994;8976:14;:20::i;:::-;8968:51;8961:58;;8879:147;;;;:::o;9032:261::-;9100:13;9204:1;9198:4;9191:15;9232:1;9226:4;9219:15;9272:4;9266;9256:21;9247:30;;9032:261;;;;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:248::-;1880:1;1890:113;1904:6;1901:1;1898:13;1890:113;;;1989:1;1984:3;1980:11;1974:18;1970:1;1965:3;1961:11;1954:39;1926:2;1923:1;1919:10;1914:15;;1890:113;;;2037:1;2028:6;2023:3;2019:16;2012:27;1860:186;1798:248;;;:::o;2052:102::-;2093:6;2144:2;2140:7;2135:2;2128:5;2124:14;2120:28;2110:38;;2052:102;;;:::o;2160:377::-;2248:3;2276:39;2309:5;2276:39;:::i;:::-;2331:71;2395:6;2390:3;2331:71;:::i;:::-;2324:78;;2411:65;2469:6;2464:3;2457:4;2450:5;2446:16;2411:65;:::i;:::-;2501:29;2523:6;2501:29;:::i;:::-;2496:3;2492:39;2485:46;;2252:285;2160:377;;;;:::o;2543:313::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2743:9;2737:4;2733:20;2729:1;2718:9;2714:17;2707:47;2771:78;2844:4;2835:6;2771:78;:::i;:::-;2763:86;;2543:313;;;;:::o;2862:77::-;2899:7;2928:5;2917:16;;2862:77;;;:::o;2945:122::-;3018:24;3036:5;3018:24;:::i;:::-;3011:5;3008:35;2998:63;;3057:1;3054;3047:12;2998:63;2945:122;:::o;3073:139::-;3119:5;3157:6;3144:20;3135:29;;3173:33;3200:5;3173:33;:::i;:::-;3073:139;;;;:::o;3218:329::-;3277:6;3326:2;3314:9;3305:7;3301:23;3297:32;3294:119;;;3332:79;;:::i;:::-;3294:119;3452:1;3477:53;3522:7;3513:6;3502:9;3498:22;3477:53;:::i;:::-;3467:63;;3423:117;3218:329;;;;:::o;3553:126::-;3590:7;3630:42;3623:5;3619:54;3608:65;;3553:126;;;:::o;3685:96::-;3722:7;3751:24;3769:5;3751:24;:::i;:::-;3740:35;;3685:96;;;:::o;3787:118::-;3874:24;3892:5;3874:24;:::i;:::-;3869:3;3862:37;3787:118;;:::o;3911:222::-;4004:4;4042:2;4031:9;4027:18;4019:26;;4055:71;4123:1;4112:9;4108:17;4099:6;4055:71;:::i;:::-;3911:222;;;;:::o;4139:122::-;4212:24;4230:5;4212:24;:::i;:::-;4205:5;4202:35;4192:63;;4251:1;4248;4241:12;4192:63;4139:122;:::o;4267:139::-;4313:5;4351:6;4338:20;4329:29;;4367:33;4394:5;4367:33;:::i;:::-;4267:139;;;;:::o;4412:474::-;4480:6;4488;4537:2;4525:9;4516:7;4512:23;4508:32;4505:119;;;4543:79;;:::i;:::-;4505:119;4663:1;4688:53;4733:7;4724:6;4713:9;4709:22;4688:53;:::i;:::-;4678:63;;4634:117;4790:2;4816:53;4861:7;4852:6;4841:9;4837:22;4816:53;:::i;:::-;4806:63;;4761:118;4412:474;;;;;:::o;4892:765::-;4978:6;4986;4994;5002;5051:3;5039:9;5030:7;5026:23;5022:33;5019:120;;;5058:79;;:::i;:::-;5019:120;5178:1;5203:53;5248:7;5239:6;5228:9;5224:22;5203:53;:::i;:::-;5193:63;;5149:117;5305:2;5331:53;5376:7;5367:6;5356:9;5352:22;5331:53;:::i;:::-;5321:63;;5276:118;5433:2;5459:53;5504:7;5495:6;5484:9;5480:22;5459:53;:::i;:::-;5449:63;;5404:118;5561:2;5587:53;5632:7;5623:6;5612:9;5608:22;5587:53;:::i;:::-;5577:63;;5532:118;4892:765;;;;;;;:::o;5663:118::-;5750:24;5768:5;5750:24;:::i;:::-;5745:3;5738:37;5663:118;;:::o;5787:222::-;5880:4;5918:2;5907:9;5903:18;5895:26;;5931:71;5999:1;5988:9;5984:17;5975:6;5931:71;:::i;:::-;5787:222;;;;:::o;6015:619::-;6092:6;6100;6108;6157:2;6145:9;6136:7;6132:23;6128:32;6125:119;;;6163:79;;:::i;:::-;6125:119;6283:1;6308:53;6353:7;6344:6;6333:9;6329:22;6308:53;:::i;:::-;6298:63;;6254:117;6410:2;6436:53;6481:7;6472:6;6461:9;6457:22;6436:53;:::i;:::-;6426:63;;6381:118;6538:2;6564:53;6609:7;6600:6;6589:9;6585:22;6564:53;:::i;:::-;6554:63;;6509:118;6015:619;;;;;:::o;6640:474::-;6708:6;6716;6765:2;6753:9;6744:7;6740:23;6736:32;6733:119;;;6771:79;;:::i;:::-;6733:119;6891:1;6916:53;6961:7;6952:6;6941:9;6937:22;6916:53;:::i;:::-;6906:63;;6862:117;7018:2;7044:53;7089:7;7080:6;7069:9;7065:22;7044:53;:::i;:::-;7034:63;;6989:118;6640:474;;;;;:::o;7120:332::-;7241:4;7279:2;7268:9;7264:18;7256:26;;7292:71;7360:1;7349:9;7345:17;7336:6;7292:71;:::i;:::-;7373:72;7441:2;7430:9;7426:18;7417:6;7373:72;:::i;:::-;7120:332;;;;;:::o;7458:77::-;7495:7;7524:5;7513:16;;7458:77;;;:::o;7541:118::-;7628:24;7646:5;7628:24;:::i;:::-;7623:3;7616:37;7541:118;;:::o;7665:222::-;7758:4;7796:2;7785:9;7781:18;7773:26;;7809:71;7877:1;7866:9;7862:17;7853:6;7809:71;:::i;:::-;7665:222;;;;:::o;7893:117::-;8002:1;7999;7992:12;8016:117;8125:1;8122;8115:12;8139:117;8248:1;8245;8238:12;8279:568;8352:8;8362:6;8412:3;8405:4;8397:6;8393:17;8389:27;8379:122;;8420:79;;:::i;:::-;8379:122;8533:6;8520:20;8510:30;;8563:18;8555:6;8552:30;8549:117;;;8585:79;;:::i;:::-;8549:117;8699:4;8691:6;8687:17;8675:29;;8753:3;8745:4;8737:6;8733:17;8723:8;8719:32;8716:41;8713:128;;;8760:79;;:::i;:::-;8713:128;8279:568;;;;;:::o;8853:849::-;8957:6;8965;8973;8981;9030:2;9018:9;9009:7;9005:23;9001:32;8998:119;;;9036:79;;:::i;:::-;8998:119;9184:1;9173:9;9169:17;9156:31;9214:18;9206:6;9203:30;9200:117;;;9236:79;;:::i;:::-;9200:117;9349:80;9421:7;9412:6;9401:9;9397:22;9349:80;:::i;:::-;9331:98;;;;9127:312;9478:2;9504:53;9549:7;9540:6;9529:9;9525:22;9504:53;:::i;:::-;9494:63;;9449:118;9606:2;9632:53;9677:7;9668:6;9657:9;9653:22;9632:53;:::i;:::-;9622:63;;9577:118;8853:849;;;;;;;:::o;9708:109::-;9744:7;9784:26;9777:5;9773:38;9762:49;;9708:109;;;:::o;9823:115::-;9908:23;9925:5;9908:23;:::i;:::-;9903:3;9896:36;9823:115;;:::o;9944:218::-;10035:4;10073:2;10062:9;10058:18;10050:26;;10086:69;10152:1;10141:9;10137:17;10128:6;10086:69;:::i;:::-;9944:218;;;;:::o;10168:117::-;10277:1;10274;10267:12;10291:180;10339:77;10336:1;10329:88;10436:4;10433:1;10426:15;10460:4;10457:1;10450:15;10477:281;10560:27;10582:4;10560:27;:::i;:::-;10552:6;10548:40;10690:6;10678:10;10675:22;10654:18;10642:10;10639:34;10636:62;10633:88;;;10701:18;;:::i;:::-;10633:88;10741:10;10737:2;10730:22;10520:238;10477:281;;:::o;10764:129::-;10798:6;10825:20;;:::i;:::-;10815:30;;10854:33;10882:4;10874:6;10854:33;:::i;:::-;10764:129;;;:::o;10899:308::-;10961:4;11051:18;11043:6;11040:30;11037:56;;;11073:18;;:::i;:::-;11037:56;11111:29;11133:6;11111:29;:::i;:::-;11103:37;;11195:4;11189;11185:15;11177:23;;10899:308;;;:::o;11213:148::-;11311:6;11306:3;11301;11288:30;11352:1;11343:6;11338:3;11334:16;11327:27;11213:148;;;:::o;11367:425::-;11445:5;11470:66;11486:49;11528:6;11486:49;:::i;:::-;11470:66;:::i;:::-;11461:75;;11559:6;11552:5;11545:21;11597:4;11590:5;11586:16;11635:3;11626:6;11621:3;11617:16;11614:25;11611:112;;;11642:79;;:::i;:::-;11611:112;11732:54;11779:6;11774:3;11769;11732:54;:::i;:::-;11451:341;11367:425;;;;;:::o;11812:340::-;11868:5;11917:3;11910:4;11902:6;11898:17;11894:27;11884:122;;11925:79;;:::i;:::-;11884:122;12042:6;12029:20;12067:79;12142:3;12134:6;12127:4;12119:6;12115:17;12067:79;:::i;:::-;12058:88;;11874:278;11812:340;;;;:::o;12158:509::-;12227:6;12276:2;12264:9;12255:7;12251:23;12247:32;12244:119;;;12282:79;;:::i;:::-;12244:119;12430:1;12419:9;12415:17;12402:31;12460:18;12452:6;12449:30;12446:117;;;12482:79;;:::i;:::-;12446:117;12587:63;12642:7;12633:6;12622:9;12618:22;12587:63;:::i;:::-;12577:73;;12373:287;12158:509;;;;:::o;12673:120::-;12745:23;12762:5;12745:23;:::i;:::-;12738:5;12735:34;12725:62;;12783:1;12780;12773:12;12725:62;12673:120;:::o;12799:137::-;12844:5;12882:6;12869:20;12860:29;;12898:32;12924:5;12898:32;:::i;:::-;12799:137;;;;:::o;12942:617::-;13018:6;13026;13034;13083:2;13071:9;13062:7;13058:23;13054:32;13051:119;;;13089:79;;:::i;:::-;13051:119;13209:1;13234:53;13279:7;13270:6;13259:9;13255:22;13234:53;:::i;:::-;13224:63;;13180:117;13336:2;13362:53;13407:7;13398:6;13387:9;13383:22;13362:53;:::i;:::-;13352:63;;13307:118;13464:2;13490:52;13534:7;13525:6;13514:9;13510:22;13490:52;:::i;:::-;13480:62;;13435:117;12942:617;;;;;:::o;13565:329::-;13624:6;13673:2;13661:9;13652:7;13648:23;13644:32;13641:119;;;13679:79;;:::i;:::-;13641:119;13799:1;13824:53;13869:7;13860:6;13849:9;13845:22;13824:53;:::i;:::-;13814:63;;13770:117;13565:329;;;;:::o;13900:116::-;13970:21;13985:5;13970:21;:::i;:::-;13963:5;13960:32;13950:60;;14006:1;14003;13996:12;13950:60;13900:116;:::o;14022:133::-;14065:5;14103:6;14090:20;14081:29;;14119:30;14143:5;14119:30;:::i;:::-;14022:133;;;;:::o;14161:468::-;14226:6;14234;14283:2;14271:9;14262:7;14258:23;14254:32;14251:119;;;14289:79;;:::i;:::-;14251:119;14409:1;14434:53;14479:7;14470:6;14459:9;14455:22;14434:53;:::i;:::-;14424:63;;14380:117;14536:2;14562:50;14604:7;14595:6;14584:9;14580:22;14562:50;:::i;:::-;14552:60;;14507:115;14161:468;;;;;:::o;14635:307::-;14696:4;14786:18;14778:6;14775:30;14772:56;;;14808:18;;:::i;:::-;14772:56;14846:29;14868:6;14846:29;:::i;:::-;14838:37;;14930:4;14924;14920:15;14912:23;;14635:307;;;:::o;14948:423::-;15025:5;15050:65;15066:48;15107:6;15066:48;:::i;:::-;15050:65;:::i;:::-;15041:74;;15138:6;15131:5;15124:21;15176:4;15169:5;15165:16;15214:3;15205:6;15200:3;15196:16;15193:25;15190:112;;;15221:79;;:::i;:::-;15190:112;15311:54;15358:6;15353:3;15348;15311:54;:::i;:::-;15031:340;14948:423;;;;;:::o;15390:338::-;15445:5;15494:3;15487:4;15479:6;15475:17;15471:27;15461:122;;15502:79;;:::i;:::-;15461:122;15619:6;15606:20;15644:78;15718:3;15710:6;15703:4;15695:6;15691:17;15644:78;:::i;:::-;15635:87;;15451:277;15390:338;;;;:::o;15734:943::-;15829:6;15837;15845;15853;15902:3;15890:9;15881:7;15877:23;15873:33;15870:120;;;15909:79;;:::i;:::-;15870:120;16029:1;16054:53;16099:7;16090:6;16079:9;16075:22;16054:53;:::i;:::-;16044:63;;16000:117;16156:2;16182:53;16227:7;16218:6;16207:9;16203:22;16182:53;:::i;:::-;16172:63;;16127:118;16284:2;16310:53;16355:7;16346:6;16335:9;16331:22;16310:53;:::i;:::-;16300:63;;16255:118;16440:2;16429:9;16425:18;16412:32;16471:18;16463:6;16460:30;16457:117;;;16493:79;;:::i;:::-;16457:117;16598:62;16652:7;16643:6;16632:9;16628:22;16598:62;:::i;:::-;16588:72;;16383:287;15734:943;;;;;;;:::o;16683:474::-;16751:6;16759;16808:2;16796:9;16787:7;16783:23;16779:32;16776:119;;;16814:79;;:::i;:::-;16776:119;16934:1;16959:53;17004:7;16995:6;16984:9;16980:22;16959:53;:::i;:::-;16949:63;;16905:117;17061:2;17087:53;17132:7;17123:6;17112:9;17108:22;17087:53;:::i;:::-;17077:63;;17032:118;16683:474;;;;;:::o;17163:180::-;17211:77;17208:1;17201:88;17308:4;17305:1;17298:15;17332:4;17329:1;17322:15;17349:320;17393:6;17430:1;17424:4;17420:12;17410:22;;17477:1;17471:4;17467:12;17498:18;17488:81;;17554:4;17546:6;17542:17;17532:27;;17488:81;17616:2;17608:6;17605:14;17585:18;17582:38;17579:84;;17635:18;;:::i;:::-;17579:84;17400:269;17349:320;;;:::o;17675:220::-;17815:34;17811:1;17803:6;17799:14;17792:58;17884:3;17879:2;17871:6;17867:15;17860:28;17675:220;:::o;17901:366::-;18043:3;18064:67;18128:2;18123:3;18064:67;:::i;:::-;18057:74;;18140:93;18229:3;18140:93;:::i;:::-;18258:2;18253:3;18249:12;18242:19;;17901:366;;;:::o;18273:419::-;18439:4;18477:2;18466:9;18462:18;18454:26;;18526:9;18520:4;18516:20;18512:1;18501:9;18497:17;18490:47;18554:131;18680:4;18554:131;:::i;:::-;18546:139;;18273:419;;;:::o;18698:248::-;18838:34;18834:1;18826:6;18822:14;18815:58;18907:31;18902:2;18894:6;18890:15;18883:56;18698:248;:::o;18952:366::-;19094:3;19115:67;19179:2;19174:3;19115:67;:::i;:::-;19108:74;;19191:93;19280:3;19191:93;:::i;:::-;19309:2;19304:3;19300:12;19293:19;;18952:366;;;:::o;19324:419::-;19490:4;19528:2;19517:9;19513:18;19505:26;;19577:9;19571:4;19567:20;19563:1;19552:9;19548:17;19541:47;19605:131;19731:4;19605:131;:::i;:::-;19597:139;;19324:419;;;:::o;19749:177::-;19889:29;19885:1;19877:6;19873:14;19866:53;19749:177;:::o;19932:366::-;20074:3;20095:67;20159:2;20154:3;20095:67;:::i;:::-;20088:74;;20171:93;20260:3;20171:93;:::i;:::-;20289:2;20284:3;20280:12;20273:19;;19932:366;;;:::o;20304:419::-;20470:4;20508:2;20497:9;20493:18;20485:26;;20557:9;20551:4;20547:20;20543:1;20532:9;20528:17;20521:47;20585:131;20711:4;20585:131;:::i;:::-;20577:139;;20304:419;;;:::o;20729:180::-;20777:77;20774:1;20767:88;20874:4;20871:1;20864:15;20898:4;20895:1;20888:15;20915:194;20955:4;20975:20;20993:1;20975:20;:::i;:::-;20970:25;;21009:20;21027:1;21009:20;:::i;:::-;21004:25;;21053:1;21050;21046:9;21038:17;;21077:1;21071:4;21068:11;21065:37;;;21082:18;;:::i;:::-;21065:37;20915:194;;;;:::o;21115:147::-;21216:11;21253:3;21238:18;;21115:147;;;;:::o;21268:114::-;;:::o;21388:398::-;21547:3;21568:83;21649:1;21644:3;21568:83;:::i;:::-;21561:90;;21660:93;21749:3;21660:93;:::i;:::-;21778:1;21773:3;21769:11;21762:18;;21388:398;;;:::o;21792:379::-;21976:3;21998:147;22141:3;21998:147;:::i;:::-;21991:154;;22162:3;22155:10;;21792:379;;;:::o;22177:163::-;22317:15;22313:1;22305:6;22301:14;22294:39;22177:163;:::o;22346:366::-;22488:3;22509:67;22573:2;22568:3;22509:67;:::i;:::-;22502:74;;22585:93;22674:3;22585:93;:::i;:::-;22703:2;22698:3;22694:12;22687:19;;22346:366;;;:::o;22718:419::-;22884:4;22922:2;22911:9;22907:18;22899:26;;22971:9;22965:4;22961:20;22957:1;22946:9;22942:17;22935:47;22999:131;23125:4;22999:131;:::i;:::-;22991:139;;22718:419;;;:::o;23143:176::-;23283:28;23279:1;23271:6;23267:14;23260:52;23143:176;:::o;23325:366::-;23467:3;23488:67;23552:2;23547:3;23488:67;:::i;:::-;23481:74;;23564:93;23653:3;23564:93;:::i;:::-;23682:2;23677:3;23673:12;23666:19;;23325:366;;;:::o;23697:419::-;23863:4;23901:2;23890:9;23886:18;23878:26;;23950:9;23944:4;23940:20;23936:1;23925:9;23921:17;23914:47;23978:131;24104:4;23978:131;:::i;:::-;23970:139;;23697:419;;;:::o;24122:232::-;24262:34;24258:1;24250:6;24246:14;24239:58;24331:15;24326:2;24318:6;24314:15;24307:40;24122:232;:::o;24360:366::-;24502:3;24523:67;24587:2;24582:3;24523:67;:::i;:::-;24516:74;;24599:93;24688:3;24599:93;:::i;:::-;24717:2;24712:3;24708:12;24701:19;;24360:366;;;:::o;24732:419::-;24898:4;24936:2;24925:9;24921:18;24913:26;;24985:9;24979:4;24975:20;24971:1;24960:9;24956:17;24949:47;25013:131;25139:4;25013:131;:::i;:::-;25005:139;;24732:419;;;:::o;25157:170::-;25297:22;25293:1;25285:6;25281:14;25274:46;25157:170;:::o;25333:366::-;25475:3;25496:67;25560:2;25555:3;25496:67;:::i;:::-;25489:74;;25572:93;25661:3;25572:93;:::i;:::-;25690:2;25685:3;25681:12;25674:19;;25333:366;;;:::o;25705:419::-;25871:4;25909:2;25898:9;25894:18;25886:26;;25958:9;25952:4;25948:20;25944:1;25933:9;25929:17;25922:47;25986:131;26112:4;25986:131;:::i;:::-;25978:139;;25705:419;;;:::o;26130:170::-;26270:22;26266:1;26258:6;26254:14;26247:46;26130:170;:::o;26306:366::-;26448:3;26469:67;26533:2;26528:3;26469:67;:::i;:::-;26462:74;;26545:93;26634:3;26545:93;:::i;:::-;26663:2;26658:3;26654:12;26647:19;;26306:366;;;:::o;26678:419::-;26844:4;26882:2;26871:9;26867:18;26859:26;;26931:9;26925:4;26921:20;26917:1;26906:9;26902:17;26895:47;26959:131;27085:4;26959:131;:::i;:::-;26951:139;;26678:419;;;:::o;27103:410::-;27143:7;27166:20;27184:1;27166:20;:::i;:::-;27161:25;;27200:20;27218:1;27200:20;:::i;:::-;27195:25;;27255:1;27252;27248:9;27277:30;27295:11;27277:30;:::i;:::-;27266:41;;27456:1;27447:7;27443:15;27440:1;27437:22;27417:1;27410:9;27390:83;27367:139;;27486:18;;:::i;:::-;27367:139;27151:362;27103:410;;;;:::o;27519:180::-;27567:77;27564:1;27557:88;27664:4;27661:1;27654:15;27688:4;27685:1;27678:15;27705:185;27745:1;27762:20;27780:1;27762:20;:::i;:::-;27757:25;;27796:20;27814:1;27796:20;:::i;:::-;27791:25;;27835:1;27825:35;;27840:18;;:::i;:::-;27825:35;27882:1;27879;27875:9;27870:14;;27705:185;;;;:::o;27896:177::-;28036:29;28032:1;28024:6;28020:14;28013:53;27896:177;:::o;28079:366::-;28221:3;28242:67;28306:2;28301:3;28242:67;:::i;:::-;28235:74;;28318:93;28407:3;28318:93;:::i;:::-;28436:2;28431:3;28427:12;28420:19;;28079:366;;;:::o;28451:419::-;28617:4;28655:2;28644:9;28640:18;28632:26;;28704:9;28698:4;28694:20;28690:1;28679:9;28675:17;28668:47;28732:131;28858:4;28732:131;:::i;:::-;28724:139;;28451:419;;;:::o;28876:174::-;29016:26;29012:1;29004:6;29000:14;28993:50;28876:174;:::o;29056:366::-;29198:3;29219:67;29283:2;29278:3;29219:67;:::i;:::-;29212:74;;29295:93;29384:3;29295:93;:::i;:::-;29413:2;29408:3;29404:12;29397:19;;29056:366;;;:::o;29428:419::-;29594:4;29632:2;29621:9;29617:18;29609:26;;29681:9;29675:4;29671:20;29667:1;29656:9;29652:17;29645:47;29709:131;29835:4;29709:131;:::i;:::-;29701:139;;29428:419;;;:::o;29853:141::-;29902:4;29925:3;29917:11;;29948:3;29945:1;29938:14;29982:4;29979:1;29969:18;29961:26;;29853:141;;;:::o;30000:93::-;30037:6;30084:2;30079;30072:5;30068:14;30064:23;30054:33;;30000:93;;;:::o;30099:107::-;30143:8;30193:5;30187:4;30183:16;30162:37;;30099:107;;;;:::o;30212:393::-;30281:6;30331:1;30319:10;30315:18;30354:97;30384:66;30373:9;30354:97;:::i;:::-;30472:39;30502:8;30491:9;30472:39;:::i;:::-;30460:51;;30544:4;30540:9;30533:5;30529:21;30520:30;;30593:4;30583:8;30579:19;30572:5;30569:30;30559:40;;30288:317;;30212:393;;;;;:::o;30611:60::-;30639:3;30660:5;30653:12;;30611:60;;;:::o;30677:142::-;30727:9;30760:53;30778:34;30787:24;30805:5;30787:24;:::i;:::-;30778:34;:::i;:::-;30760:53;:::i;:::-;30747:66;;30677:142;;;:::o;30825:75::-;30868:3;30889:5;30882:12;;30825:75;;;:::o;30906:269::-;31016:39;31047:7;31016:39;:::i;:::-;31077:91;31126:41;31150:16;31126:41;:::i;:::-;31118:6;31111:4;31105:11;31077:91;:::i;:::-;31071:4;31064:105;30982:193;30906:269;;;:::o;31181:73::-;31226:3;31181:73;:::o;31260:189::-;31337:32;;:::i;:::-;31378:65;31436:6;31428;31422:4;31378:65;:::i;:::-;31313:136;31260:189;;:::o;31455:186::-;31515:120;31532:3;31525:5;31522:14;31515:120;;;31586:39;31623:1;31616:5;31586:39;:::i;:::-;31559:1;31552:5;31548:13;31539:22;;31515:120;;;31455:186;;:::o;31647:543::-;31748:2;31743:3;31740:11;31737:446;;;31782:38;31814:5;31782:38;:::i;:::-;31866:29;31884:10;31866:29;:::i;:::-;31856:8;31852:44;32049:2;32037:10;32034:18;32031:49;;;32070:8;32055:23;;32031:49;32093:80;32149:22;32167:3;32149:22;:::i;:::-;32139:8;32135:37;32122:11;32093:80;:::i;:::-;31752:431;;31737:446;31647:543;;;:::o;32196:117::-;32250:8;32300:5;32294:4;32290:16;32269:37;;32196:117;;;;:::o;32319:169::-;32363:6;32396:51;32444:1;32440:6;32432:5;32429:1;32425:13;32396:51;:::i;:::-;32392:56;32477:4;32471;32467:15;32457:25;;32370:118;32319:169;;;;:::o;32493:295::-;32569:4;32715:29;32740:3;32734:4;32715:29;:::i;:::-;32707:37;;32777:3;32774:1;32770:11;32764:4;32761:21;32753:29;;32493:295;;;;:::o;32793:1395::-;32910:37;32943:3;32910:37;:::i;:::-;33012:18;33004:6;33001:30;32998:56;;;33034:18;;:::i;:::-;32998:56;33078:38;33110:4;33104:11;33078:38;:::i;:::-;33163:67;33223:6;33215;33209:4;33163:67;:::i;:::-;33257:1;33281:4;33268:17;;33313:2;33305:6;33302:14;33330:1;33325:618;;;;33987:1;34004:6;34001:77;;;34053:9;34048:3;34044:19;34038:26;34029:35;;34001:77;34104:67;34164:6;34157:5;34104:67;:::i;:::-;34098:4;34091:81;33960:222;33295:887;;33325:618;33377:4;33373:9;33365:6;33361:22;33411:37;33443:4;33411:37;:::i;:::-;33470:1;33484:208;33498:7;33495:1;33492:14;33484:208;;;33577:9;33572:3;33568:19;33562:26;33554:6;33547:42;33628:1;33620:6;33616:14;33606:24;;33675:2;33664:9;33660:18;33647:31;;33521:4;33518:1;33514:12;33509:17;;33484:208;;;33720:6;33711:7;33708:19;33705:179;;;33778:9;33773:3;33769:19;33763:26;33821:48;33863:4;33855:6;33851:17;33840:9;33821:48;:::i;:::-;33813:6;33806:64;33728:156;33705:179;33930:1;33926;33918:6;33914:14;33910:22;33904:4;33897:36;33332:611;;;33295:887;;32885:1303;;;32793:1395;;:::o;34194:174::-;34334:26;34330:1;34322:6;34318:14;34311:50;34194:174;:::o;34374:366::-;34516:3;34537:67;34601:2;34596:3;34537:67;:::i;:::-;34530:74;;34613:93;34702:3;34613:93;:::i;:::-;34731:2;34726:3;34722:12;34715:19;;34374:366;;;:::o;34746:419::-;34912:4;34950:2;34939:9;34935:18;34927:26;;34999:9;34993:4;34989:20;34985:1;34974:9;34970:17;34963:47;35027:131;35153:4;35027:131;:::i;:::-;35019:139;;34746:419;;;:::o;35171:228::-;35311:34;35307:1;35299:6;35295:14;35288:58;35380:11;35375:2;35367:6;35363:15;35356:36;35171:228;:::o;35405:366::-;35547:3;35568:67;35632:2;35627:3;35568:67;:::i;:::-;35561:74;;35644:93;35733:3;35644:93;:::i;:::-;35762:2;35757:3;35753:12;35746:19;;35405:366;;;:::o;35777:419::-;35943:4;35981:2;35970:9;35966:18;35958:26;;36030:9;36024:4;36020:20;36016:1;36005:9;36001:17;35994:47;36058:131;36184:4;36058:131;:::i;:::-;36050:139;;35777:419;;;:::o;36202:228::-;36342:34;36338:1;36330:6;36326:14;36319:58;36411:11;36406:2;36398:6;36394:15;36387:36;36202:228;:::o;36436:366::-;36578:3;36599:67;36663:2;36658:3;36599:67;:::i;:::-;36592:74;;36675:93;36764:3;36675:93;:::i;:::-;36793:2;36788:3;36784:12;36777:19;;36436:366;;;:::o;36808:419::-;36974:4;37012:2;37001:9;36997:18;36989:26;;37061:9;37055:4;37051:20;37047:1;37036:9;37032:17;37025:47;37089:131;37215:4;37089:131;:::i;:::-;37081:139;;36808:419;;;:::o;37233:148::-;37335:11;37372:3;37357:18;;37233:148;;;;:::o;37387:390::-;37493:3;37521:39;37554:5;37521:39;:::i;:::-;37576:89;37658:6;37653:3;37576:89;:::i;:::-;37569:96;;37674:65;37732:6;37727:3;37720:4;37713:5;37709:16;37674:65;:::i;:::-;37764:6;37759:3;37755:16;37748:23;;37497:280;37387:390;;;;:::o;37783:435::-;37963:3;37985:95;38076:3;38067:6;37985:95;:::i;:::-;37978:102;;38097:95;38188:3;38179:6;38097:95;:::i;:::-;38090:102;;38209:3;38202:10;;37783:435;;;;;:::o;38224:222::-;38364:34;38360:1;38352:6;38348:14;38341:58;38433:5;38428:2;38420:6;38416:15;38409:30;38224:222;:::o;38452:366::-;38594:3;38615:67;38679:2;38674:3;38615:67;:::i;:::-;38608:74;;38691:93;38780:3;38691:93;:::i;:::-;38809:2;38804:3;38800:12;38793:19;;38452:366;;;:::o;38824:419::-;38990:4;39028:2;39017:9;39013:18;39005:26;;39077:9;39071:4;39067:20;39063:1;39052:9;39048:17;39041:47;39105:131;39231:4;39105:131;:::i;:::-;39097:139;;38824:419;;;:::o;39249:191::-;39289:3;39308:20;39326:1;39308:20;:::i;:::-;39303:25;;39342:20;39360:1;39342:20;:::i;:::-;39337:25;;39385:1;39382;39378:9;39371:16;;39406:3;39403:1;39400:10;39397:36;;;39413:18;;:::i;:::-;39397:36;39249:191;;;;:::o;39446:224::-;39586:34;39582:1;39574:6;39570:14;39563:58;39655:7;39650:2;39642:6;39638:15;39631:32;39446:224;:::o;39676:366::-;39818:3;39839:67;39903:2;39898:3;39839:67;:::i;:::-;39832:74;;39915:93;40004:3;39915:93;:::i;:::-;40033:2;40028:3;40024:12;40017:19;;39676:366;;;:::o;40048:419::-;40214:4;40252:2;40241:9;40237:18;40229:26;;40301:9;40295:4;40291:20;40287:1;40276:9;40272:17;40265:47;40329:131;40455:4;40329:131;:::i;:::-;40321:139;;40048:419;;;:::o;40473:223::-;40613:34;40609:1;40601:6;40597:14;40590:58;40682:6;40677:2;40669:6;40665:15;40658:31;40473:223;:::o;40702:366::-;40844:3;40865:67;40929:2;40924:3;40865:67;:::i;:::-;40858:74;;40941:93;41030:3;40941:93;:::i;:::-;41059:2;41054:3;41050:12;41043:19;;40702:366;;;:::o;41074:419::-;41240:4;41278:2;41267:9;41263:18;41255:26;;41327:9;41321:4;41317:20;41313:1;41302:9;41298:17;41291:47;41355:131;41481:4;41355:131;:::i;:::-;41347:139;;41074:419;;;:::o;41499:182::-;41639:34;41635:1;41627:6;41623:14;41616:58;41499:182;:::o;41687:366::-;41829:3;41850:67;41914:2;41909:3;41850:67;:::i;:::-;41843:74;;41926:93;42015:3;41926:93;:::i;:::-;42044:2;42039:3;42035:12;42028:19;;41687:366;;;:::o;42059:419::-;42225:4;42263:2;42252:9;42248:18;42240:26;;42312:9;42306:4;42302:20;42298:1;42287:9;42283:17;42276:47;42340:131;42466:4;42340:131;:::i;:::-;42332:139;;42059:419;;;:::o;42484:442::-;42633:4;42671:2;42660:9;42656:18;42648:26;;42684:71;42752:1;42741:9;42737:17;42728:6;42684:71;:::i;:::-;42765:72;42833:2;42822:9;42818:18;42809:6;42765:72;:::i;:::-;42847;42915:2;42904:9;42900:18;42891:6;42847:72;:::i;:::-;42484:442;;;;;;:::o;42932:79::-;42971:7;43000:5;42989:16;;42932:79;;;:::o;43017:157::-;43122:45;43142:24;43160:5;43142:24;:::i;:::-;43122:45;:::i;:::-;43117:3;43110:58;43017:157;;:::o;43180:256::-;43292:3;43307:75;43378:3;43369:6;43307:75;:::i;:::-;43407:2;43402:3;43398:12;43391:19;;43427:3;43420:10;;43180:256;;;;:::o;43442:163::-;43582:15;43578:1;43570:6;43566:14;43559:39;43442:163;:::o;43611:366::-;43753:3;43774:67;43838:2;43833:3;43774:67;:::i;:::-;43767:74;;43850:93;43939:3;43850:93;:::i;:::-;43968:2;43963:3;43959:12;43952:19;;43611:366;;;:::o;43983:419::-;44149:4;44187:2;44176:9;44172:18;44164:26;;44236:9;44230:4;44226:20;44222:1;44211:9;44207:17;44200:47;44264:131;44390:4;44264:131;:::i;:::-;44256:139;;43983:419;;;:::o;44408:229::-;44548:34;44544:1;44536:6;44532:14;44525:58;44617:12;44612:2;44604:6;44600:15;44593:37;44408:229;:::o;44643:366::-;44785:3;44806:67;44870:2;44865:3;44806:67;:::i;:::-;44799:74;;44882:93;44971:3;44882:93;:::i;:::-;45000:2;44995:3;44991:12;44984:19;;44643:366;;;:::o;45015:419::-;45181:4;45219:2;45208:9;45204:18;45196:26;;45268:9;45262:4;45258:20;45254:1;45243:9;45239:17;45232:47;45296:131;45422:4;45296:131;:::i;:::-;45288:139;;45015:419;;;:::o;45440:177::-;45580:29;45576:1;45568:6;45564:14;45557:53;45440:177;:::o;45623:366::-;45765:3;45786:67;45850:2;45845:3;45786:67;:::i;:::-;45779:74;;45862:93;45951:3;45862:93;:::i;:::-;45980:2;45975:3;45971:12;45964:19;;45623:366;;;:::o;45995:419::-;46161:4;46199:2;46188:9;46184:18;46176:26;;46248:9;46242:4;46238:20;46234:1;46223:9;46219:17;46212:47;46276:131;46402:4;46276:131;:::i;:::-;46268:139;;45995:419;;;:::o;46420:175::-;46560:27;46556:1;46548:6;46544:14;46537:51;46420:175;:::o;46601:366::-;46743:3;46764:67;46828:2;46823:3;46764:67;:::i;:::-;46757:74;;46840:93;46929:3;46840:93;:::i;:::-;46958:2;46953:3;46949:12;46942:19;;46601:366;;;:::o;46973:419::-;47139:4;47177:2;47166:9;47162:18;47154:26;;47226:9;47220:4;47216:20;47212:1;47201:9;47197:17;47190:47;47254:131;47380:4;47254:131;:::i;:::-;47246:139;;46973:419;;;:::o;47398:237::-;47538:34;47534:1;47526:6;47522:14;47515:58;47607:20;47602:2;47594:6;47590:15;47583:45;47398:237;:::o;47641:366::-;47783:3;47804:67;47868:2;47863:3;47804:67;:::i;:::-;47797:74;;47880:93;47969:3;47880:93;:::i;:::-;47998:2;47993:3;47989:12;47982:19;;47641:366;;;:::o;48013:419::-;48179:4;48217:2;48206:9;48202:18;48194:26;;48266:9;48260:4;48256:20;48252:1;48241:9;48237:17;48230:47;48294:131;48420:4;48294:131;:::i;:::-;48286:139;;48013:419;;;:::o;48438:175::-;48578:27;48574:1;48566:6;48562:14;48555:51;48438:175;:::o;48619:366::-;48761:3;48782:67;48846:2;48841:3;48782:67;:::i;:::-;48775:74;;48858:93;48947:3;48858:93;:::i;:::-;48976:2;48971:3;48967:12;48960:19;;48619:366;;;:::o;48991:419::-;49157:4;49195:2;49184:9;49180:18;49172:26;;49244:9;49238:4;49234:20;49230:1;49219:9;49215:17;49208:47;49272:131;49398:4;49272:131;:::i;:::-;49264:139;;48991:419;;;:::o;49416:98::-;49467:6;49501:5;49495:12;49485:22;;49416:98;;;:::o;49520:168::-;49603:11;49637:6;49632:3;49625:19;49677:4;49672:3;49668:14;49653:29;;49520:168;;;;:::o;49694:373::-;49780:3;49808:38;49840:5;49808:38;:::i;:::-;49862:70;49925:6;49920:3;49862:70;:::i;:::-;49855:77;;49941:65;49999:6;49994:3;49987:4;49980:5;49976:16;49941:65;:::i;:::-;50031:29;50053:6;50031:29;:::i;:::-;50026:3;50022:39;50015:46;;49784:283;49694:373;;;;:::o;50073:640::-;50268:4;50306:3;50295:9;50291:19;50283:27;;50320:71;50388:1;50377:9;50373:17;50364:6;50320:71;:::i;:::-;50401:72;50469:2;50458:9;50454:18;50445:6;50401:72;:::i;:::-;50483;50551:2;50540:9;50536:18;50527:6;50483:72;:::i;:::-;50602:9;50596:4;50592:20;50587:2;50576:9;50572:18;50565:48;50630:76;50701:4;50692:6;50630:76;:::i;:::-;50622:84;;50073:640;;;;;;;:::o;50719:141::-;50775:5;50806:6;50800:13;50791:22;;50822:32;50848:5;50822:32;:::i;:::-;50719:141;;;;:::o;50866:349::-;50935:6;50984:2;50972:9;50963:7;50959:23;50955:32;50952:119;;;50990:79;;:::i;:::-;50952:119;51110:1;51135:63;51190:7;51181:6;51170:9;51166:22;51135:63;:::i;:::-;51125:73;;51081:127;50866:349;;;;:::o;51221:180::-;51269:77;51266:1;51259:88;51366:4;51363:1;51356:15;51390:4;51387:1;51380:15;51407:182;51547:34;51543:1;51535:6;51531:14;51524:58;51407:182;:::o;51595:366::-;51737:3;51758:67;51822:2;51817:3;51758:67;:::i;:::-;51751:74;;51834:93;51923:3;51834:93;:::i;:::-;51952:2;51947:3;51943:12;51936:19;;51595:366;;;:::o;51967:419::-;52133:4;52171:2;52160:9;52156:18;52148:26;;52220:9;52214:4;52210:20;52206:1;52195:9;52191:17;52184:47;52248:131;52374:4;52248:131;:::i;:::-;52240:139;;51967:419;;;:::o;52392:178::-;52532:30;52528:1;52520:6;52516:14;52509:54;52392:178;:::o;52576:366::-;52718:3;52739:67;52803:2;52798:3;52739:67;:::i;:::-;52732:74;;52815:93;52904:3;52815:93;:::i;:::-;52933:2;52928:3;52924:12;52917:19;;52576:366;;;:::o;52948:419::-;53114:4;53152:2;53141:9;53137:18;53129:26;;53201:9;53195:4;53191:20;53187:1;53176:9;53172:17;53165:47;53229:131;53355:4;53229:131;:::i;:::-;53221:139;;52948:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3696000","executionCost":"infinite","totalCost":"infinite"},"external":{"DISCOUNTED_MINTING_PRICE()":"440","MAX_SUPPLY()":"441","MINTING_PRICE()":"419","ROYALTY_FEE_NUMERATOR()":"424","acceptOwnership()":"103591","approve(address,uint256)":"infinite","balanceOf(address)":"2988","getApproved(uint256)":"5323","isApprovedForAll(address,address)":"infinite","merkleRoot()":"infinite","mint()":"infinite","mintWithDiscount(bytes32[],uint256,uint256)":"infinite","name()":"infinite","owner()":"2611","ownerOf(uint256)":"3067","pendingOwner()":"2588","renounceOwnership()":"55150","royaltyInfo(uint256,uint256)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setBaseURI(string)":"infinite","setTokenRoyalty(uint256,address,uint96)":"52034","supportsInterface(bytes4)":"952","symbol()":"infinite","tokenIdCounter()":"2474","tokenURI(uint256)":"infinite","totalSupply()":"2527","transferFrom(address,address,uint256)":"infinite","transferFromWithRoyalties(address,address,uint256,uint256)":"infinite","transferOwnership(address)":"infinite","withdrawFunds()":"infinite"},"internal":{"_baseURI()":"infinite","_mint()":"infinite","_transferOwnership(address)":"infinite","_verifyProof(bytes32[] memory,uint256,uint256,address)":"infinite"}},"methodIdentifiers":{"DISCOUNTED_MINTING_PRICE()":"c7499348","MAX_SUPPLY()":"32cb6b0c","MINTING_PRICE()":"63d9d166","ROYALTY_FEE_NUMERATOR()":"55850fe6","acceptOwnership()":"79ba5097","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","merkleRoot()":"2eb4a7ab","mint()":"1249c58b","mintWithDiscount(bytes32[],uint256,uint256)":"47b13d8a","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","royaltyInfo(uint256,uint256)":"2a55205a","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setBaseURI(string)":"55f804b3","setTokenRoyalty(uint256,address,uint96)":"5944c753","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenIdCounter()":"98bdf6f5","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","transferFromWithRoyalties(address,address,uint256,uint256)":"0ab7039e","transferOwnership(address)":"f2fde38b","withdrawFunds()":"24600fc3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISCOUNTED_MINTING_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTING_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTY_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWithDiscount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesPrice\",\"type\":\"uint256\"}],\"name\":\"transferFromWithRoyalties\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An ERC721 contract with added functionality for minting, discounts using Merkle proofs, and royalties (ERC2981).      Includes features like time-limited discounts, withdrawal of funds, and token transfers with royalty payments.      Based on OpenZeppelin's ERC721, Ownable2Step, and ERC2981 standards.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"baseURI\":\"The base URI for token metadata.\",\"merkleRoot_\":\"The Merkle root used for airdrop/discount verification.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint()\":{\"details\":\"Requires sending 0.1 ETH. Only mints if the supply limit hasn't been reached.\"},\"mintWithDiscount(bytes32[],uint256,uint256)\":{\"details\":\"Requires sending 0.05 ETH for the discounted mint price.\",\"params\":{\"amount\":\"The number of tokens to mint.\",\"index\":\"The index in the Merkle tree.\",\"proof\":\"The Merkle proof of eligibility for the discount.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"baseURI\":\"The new base URI.\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty percentage, represented as a numerator out of 10,000.\",\"receiver\":\"The address that should receive the royalty.\",\"tokenId\":\"The ID of the token.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface identifier.\"},\"returns\":{\"_0\":\"Whether the contract supports the specified interface.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply of tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferFromWithRoyalties(address,address,uint256,uint256)\":{\"details\":\"Ensures that the royalty payment is made before the transfer.\",\"params\":{\"from\":\"The address sending the NFT.\",\"salesPrice\":\"The sale price of the NFT.\",\"to\":\"The address receiving the NFT.\",\"tokenId\":\"The ID of the token being transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"withdrawFunds()\":{\"details\":\"Only callable by the owner of the contract. Emits a FundsWithdrawn event.\"}},\"title\":\"NFT1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor that initializes the NFT1 contract.\"},\"mint()\":{\"notice\":\"Mint a new NFT.\"},\"mintWithDiscount(bytes32[],uint256,uint256)\":{\"notice\":\"Mint an NFT with a discount using a valid Merkle proof.\"},\"setBaseURI(string)\":{\"notice\":\"Set a new base URI for the token metadata.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Set a custom royalty for a specific token.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Override to include support for ERC2981 interface.\"},\"totalSupply()\":{\"notice\":\"Get the total number of minted tokens.\"},\"transferFromWithRoyalties(address,address,uint256,uint256)\":{\"notice\":\"Transfer an NFT along with royalty payment to the rightful receiver.\"},\"withdrawFunds()\":{\"notice\":\"Withdraw all the funds from the contract to the owner's address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT1.sol\":\"NFT1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xbe43faa7ef7ac3c588d91a2f457fb90f4dc0cf9972b0eb8d9bdfa7d136f25df5\",\"license\":\"MIT\"},\"contracts/NFT1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.27;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title NFT1\\n * @dev An ERC721 contract with added functionality for minting, discounts using Merkle proofs, and royalties (ERC2981).\\n *      Includes features like time-limited discounts, withdrawal of funds, and token transfers with royalty payments.\\n *      Based on OpenZeppelin's ERC721, Ownable2Step, and ERC2981 standards.\\n */\\ncontract NFT1 is ERC721, Ownable2Step, ERC2981 {\\n    uint256 public constant MAX_SUPPLY = 1000;\\n    uint96 public constant ROYALTY_FEE_NUMERATOR = 250; // 2.5% royalty fee\\n    uint256 public constant MINTING_PRICE = 0.1 ether;\\n    uint256 public constant DISCOUNTED_MINTING_PRICE = 0.05 ether;\\n\\n    uint256 public tokenIdCounter;\\n    bytes32 public immutable merkleRoot; // Root of Merkle tree used for airdrop verification\\n\\n    string private baseTokenURI;\\n    BitMaps.BitMap private airdropList;\\n\\n    // Events\\n    event FundsWithdrawn(address indexed owner, uint256 amount);\\n    event Minted(address indexed nftOwner);\\n\\n    /**\\n     * @notice Constructor that initializes the NFT1 contract.\\n     * @param baseURI The base URI for token metadata.\\n     * @param merkleRoot_ The Merkle root used for airdrop/discount verification.\\n     */\\n    constructor(string memory baseURI, bytes32 merkleRoot_) ERC721(\\\"NFT1\\\", \\\"NFT1\\\") {\\n        baseTokenURI = baseURI;\\n        merkleRoot = merkleRoot_;\\n        tokenIdCounter = 0;\\n        _setDefaultRoyalty(msg.sender, ROYALTY_FEE_NUMERATOR); // Setting the default royalty fee to the deployer\\n    }\\n\\n    /**\\n     * @notice Withdraw all the funds from the contract to the owner's address.\\n     * @dev Only callable by the owner of the contract. Emits a FundsWithdrawn event.\\n     */\\n    function withdrawFunds() external onlyOwner {\\n        uint256 contractBalance = address(this).balance;\\n        require(contractBalance > 0, \\\"no funds to withdraw\\\");\\n        (bool success, ) = payable(msg.sender).call{value: contractBalance}(\\\"\\\");\\n        require(success, \\\"fund transfer failed\\\");\\n        emit FundsWithdrawn(msg.sender, contractBalance);\\n    }\\n\\n    /**\\n     * @notice Transfer an NFT along with royalty payment to the rightful receiver.\\n     * @param from The address sending the NFT.\\n     * @param to The address receiving the NFT.\\n     * @param tokenId The ID of the token being transferred.\\n     * @param salesPrice The sale price of the NFT.\\n     * @dev Ensures that the royalty payment is made before the transfer.\\n     */\\n    function transferFromWithRoyalties(address from, address to, uint256 tokenId, uint256 salesPrice) external payable {\\n        (, uint256 royaltyAmount) = royaltyInfo(tokenId, salesPrice);\\n        require(msg.value >= royaltyAmount, \\\"Insufficient royalty amount\\\");\\n        transferFrom(from, to, tokenId); // Perform the actual token transfer\\n\\n        uint256 excess = msg.value - royaltyAmount;\\n        if (excess > 0) {\\n            (bool refundSuccess, ) = msg.sender.call{value: excess}(\\\"\\\"); // Refund excess ETH to sender\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Set a custom royalty for a specific token.\\n     * @param tokenId The ID of the token.\\n     * @param receiver The address that should receive the royalty.\\n     * @param feeNumerator The royalty percentage, represented as a numerator out of 10,000.\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @notice Mint a new NFT.\\n     * @dev Requires sending 0.1 ETH. Only mints if the supply limit hasn't been reached.\\n     */\\n    function mint() public payable {\\n        require(msg.value == MINTING_PRICE, \\\"wrong amount, send 0.1 ETH\\\");\\n        _mint();\\n    }\\n\\n    /**\\n     * @notice Mint an NFT with a discount using a valid Merkle proof.\\n     * @param proof The Merkle proof of eligibility for the discount.\\n     * @param index The index in the Merkle tree.\\n     * @param amount The number of tokens to mint.\\n     * @dev Requires sending 0.05 ETH for the discounted mint price.\\n     */\\n    function mintWithDiscount(bytes32[] calldata proof, uint256 index, uint256 amount) public payable {\\n        require(msg.value == DISCOUNTED_MINTING_PRICE, \\\"wrong amount, send 0.05 ETH\\\");\\n        require(!BitMaps.get(airdropList, index), \\\"Discount already claimed\\\");\\n        _verifyProof(proof, index, amount, msg.sender);\\n        BitMaps.setTo(airdropList, index, true);\\n        for (uint256 i = 0; i < amount; i++) {\\n            _mint();\\n        }\\n    }\\n\\n    /**\\n     * @notice Set a new base URI for the token metadata.\\n     * @param baseURI The new base URI.\\n     */\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        baseTokenURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev Returns the base URI for token metadata.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice Get the total number of minted tokens.\\n     * @return The total supply of tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return tokenIdCounter;\\n    }\\n\\n    /**\\n     * @notice Override to include support for ERC2981 interface.\\n     * @param interfaceId The interface identifier.\\n     * @return Whether the contract supports the specified interface.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Internal function to update ownership and royalty receiver when transferring ownership.\\n     * @param newOwner The new owner of the contract.\\n     */\\n    function _transferOwnership(address newOwner) internal override {\\n        super._transferOwnership(newOwner);\\n        _setDefaultRoyalty(newOwner, ROYALTY_FEE_NUMERATOR); // Update default royalty receiver to new owner\\n    }\\n\\n    /**\\n     * @dev Verify the Merkle proof for an address, index, and amount.\\n     * @param proof The Merkle proof.\\n     * @param index The index of the leaf in the Merkle tree.\\n     * @param amount The amount of tokens associated with the proof.\\n     * @param addr The address being verified.\\n     */\\n    function _verifyProof(bytes32[] memory proof, uint256 index, uint256 amount, address addr) private view {\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(addr, index, amount))));\\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \\\"Invalid proof\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token.\\n     * Emits a Minted event when successful.\\n     */\\n    function _mint() internal {\\n        require(tokenIdCounter < MAX_SUPPLY, \\\"the supply limit of 1000 is reached\\\");\\n        uint256 tokenId = tokenIdCounter;\\n        tokenIdCounter += 1;\\n        _safeMint(msg.sender, tokenId);\\n        emit Minted(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb5bc14fbe14cfd12aa2f7a3cb639fb7ad325435bdf2e02e605d410aec32f6861\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":240,"contract":"contracts/NFT1.sol:NFT1","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":242,"contract":"contracts/NFT1.sol:NFT1","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":246,"contract":"contracts/NFT1.sol:NFT1","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":250,"contract":"contracts/NFT1.sol:NFT1","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":254,"contract":"contracts/NFT1.sol:NFT1","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":260,"contract":"contracts/NFT1.sol:NFT1","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7,"contract":"contracts/NFT1.sol:NFT1","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":120,"contract":"contracts/NFT1.sol:NFT1","label":"_pendingOwner","offset":0,"slot":"7","type":"t_address"},{"astId":1319,"contract":"contracts/NFT1.sol:NFT1","label":"_defaultRoyaltyInfo","offset":0,"slot":"8","type":"t_struct(RoyaltyInfo)1316_storage"},{"astId":1324,"contract":"contracts/NFT1.sol:NFT1","label":"_tokenRoyaltyInfo","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_struct(RoyaltyInfo)1316_storage)"},{"astId":3601,"contract":"contracts/NFT1.sol:NFT1","label":"tokenIdCounter","offset":0,"slot":"10","type":"t_uint256"},{"astId":3605,"contract":"contracts/NFT1.sol:NFT1","label":"baseTokenURI","offset":0,"slot":"11","type":"t_string_storage"},{"astId":3608,"contract":"contracts/NFT1.sol:NFT1","label":"airdropList","offset":0,"slot":"12","type":"t_struct(BitMap)3438_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_struct(RoyaltyInfo)1316_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC2981.RoyaltyInfo)","numberOfBytes":"32","value":"t_struct(RoyaltyInfo)1316_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(BitMap)3438_storage":{"encoding":"inplace","label":"struct BitMaps.BitMap","members":[{"astId":3437,"contract":"contracts/NFT1.sol:NFT1","label":"_data","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"}],"numberOfBytes":"32"},"t_struct(RoyaltyInfo)1316_storage":{"encoding":"inplace","label":"struct ERC2981.RoyaltyInfo","members":[{"astId":1313,"contract":"contracts/NFT1.sol:NFT1","label":"receiver","offset":0,"slot":"0","type":"t_address"},{"astId":1315,"contract":"contracts/NFT1.sol:NFT1","label":"royaltyFraction","offset":20,"slot":"0","type":"t_uint96"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructor that initializes the NFT1 contract."},"mint()":{"notice":"Mint a new NFT."},"mintWithDiscount(bytes32[],uint256,uint256)":{"notice":"Mint an NFT with a discount using a valid Merkle proof."},"setBaseURI(string)":{"notice":"Set a new base URI for the token metadata."},"setTokenRoyalty(uint256,address,uint96)":{"notice":"Set a custom royalty for a specific token."},"supportsInterface(bytes4)":{"notice":"Override to include support for ERC2981 interface."},"totalSupply()":{"notice":"Get the total number of minted tokens."},"transferFromWithRoyalties(address,address,uint256,uint256)":{"notice":"Transfer an NFT along with royalty payment to the rightful receiver."},"withdrawFunds()":{"notice":"Withdraw all the funds from the contract to the owner's address."}},"version":1}}}}}}