{"id":"40b5edca7ff78bdc8f1586c2057e134e","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/interfaces/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/riddles/Attacker2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./Overmint1.sol\";\n\ncontract Attacker2 {\n    Overmint1 public vulnerableContract;\n\n    constructor(address vulnerableContract_) {\n        vulnerableContract = Overmint1(vulnerableContract_);\n    }\n    function attack() external {\n        vulnerableContract.mint();\n        vulnerableContract.mint();\n        vulnerableContract.mint();\n    }\n}\n"},"contracts/riddles/Overmint1.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.27;\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract Overmint1 is ERC721 {\n    using Address for address;\n    mapping(address => uint256) public amountMinted;\n    uint256 public totalSupply;\n\n    constructor() ERC721(\"Overmint1\", \"AT\") {}\n\n    function mint() external {\n        require(amountMinted[msg.sender] <= 3, \"max 3 NFTs\");\n        totalSupply++;\n        _safeMint(msg.sender, totalSupply);\n        amountMinted[msg.sender]++;\n    }\n\n    function success(address _attacker) external view returns (bool) {\n        return balanceOf(_attacker) == 5;\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/interfaces/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1063]},"id":3,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:0"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"../token/ERC721/IERC721Receiver.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3,"sourceUnit":1064,"src":"124:45:0","symbolAliases":[],"unitAlias":""}],"src":"99:71:0"},"id":0},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1420],"Context":[1442],"ERC165":[1641],"ERC721":[929],"IERC165":[1653],"IERC721":[1045],"IERC721Metadata":[1090],"IERC721Receiver":[1063],"Math":[2518],"Strings":[1617]},"id":930,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1046,"src":"132:23:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1064,"src":"156:31:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1091,"src":"188:42:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":8,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1421,"src":"231:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":9,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1443,"src":"265:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":10,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1618,"src":"299:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":11,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":930,"sourceUnit":1642,"src":"333:46:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":13,"name":"Context","nameLocations":["647:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1442,"src":"647:7:1"},"id":14,"nodeType":"InheritanceSpecifier","src":"647:7:1"},{"baseName":{"id":15,"name":"ERC165","nameLocations":["656:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1641,"src":"656:6:1"},"id":16,"nodeType":"InheritanceSpecifier","src":"656:6:1"},{"baseName":{"id":17,"name":"IERC721","nameLocations":["664:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1045,"src":"664:7:1"},"id":18,"nodeType":"InheritanceSpecifier","src":"664:7:1"},{"baseName":{"id":19,"name":"IERC721Metadata","nameLocations":["673:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"673:15:1"},"id":20,"nodeType":"InheritanceSpecifier","src":"673:15:1"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"381:246:1","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":929,"linearizedBaseContracts":[929,1090,1045,1641,1653,1442],"name":"ERC721","nameLocation":"637:6:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":23,"libraryName":{"id":21,"name":"Address","nameLocations":["701:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"701:7:1"},"nodeType":"UsingForDirective","src":"695:26:1","typeName":{"id":22,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":26,"libraryName":{"id":24,"name":"Strings","nameLocations":["732:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1617,"src":"732:7:1"},"nodeType":"UsingForDirective","src":"726:26:1","typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":28,"mutability":"mutable","name":"_name","nameLocation":"791:5:1","nodeType":"VariableDeclaration","scope":929,"src":"776:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":27,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":30,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:1","nodeType":"VariableDeclaration","scope":929,"src":"823:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":29,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":34,"mutability":"mutable","name":"_owners","nameLocation":"934:7:1","nodeType":"VariableDeclaration","scope":929,"src":"898:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":33,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":38,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:1","nodeType":"VariableDeclaration","scope":929,"src":"992:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":37,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":35,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":36,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":42,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:1","nodeType":"VariableDeclaration","scope":929,"src":"1093:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":41,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":39,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":40,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":48,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:1","nodeType":"VariableDeclaration","scope":929,"src":"1199:71:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":47,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":46,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":44,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":45,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":64,"nodeType":"Block","src":"1446:57:1","statements":[{"expression":{"id":58,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":56,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1456:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":57,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"1464:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":59,"nodeType":"ExpressionStatement","src":"1456:13:1"},{"expression":{"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":60,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1479:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":61,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"1489:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":63,"nodeType":"ExpressionStatement","src":"1479:17:1"}]},"documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"1277:108:1","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":65,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"name_","nameLocation":"1416:5:1","nodeType":"VariableDeclaration","scope":65,"src":"1402:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":50,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:1","nodeType":"VariableDeclaration","scope":65,"src":"1423:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":52,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:1"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[],"src":"1446:0:1"},"scope":929,"src":"1390:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1640,1652],"body":{"id":95,"nodeType":"Block","src":"1678:192:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":76,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1707:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":78,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"1727:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1045_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1045_$","typeString":"type(contract IERC721)"}],"id":77,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1045","typeString":"type(contract IERC721)"}},"id":80,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":82,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1763:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":84,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"1783:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1090_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1090_$","typeString":"type(contract IERC721Metadata)"}],"id":83,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":85,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1090","typeString":"type(contract IERC721Metadata)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":91,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1851:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":89,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$929_$","typeString":"type(contract super ERC721)"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1640,"src":"1827:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":75,"id":94,"nodeType":"Return","src":"1688:175:1"}]},"documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"1509:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":96,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:1","nodeType":"FunctionDefinition","overrides":{"id":72,"nodeType":"OverrideSpecifier","overrides":[{"id":70,"name":"ERC165","nameLocations":["1646:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1641,"src":"1646:6:1"},{"id":71,"name":"IERC165","nameLocations":["1654:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1653,"src":"1654:7:1"}],"src":"1637:25:1"},"parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:1","nodeType":"VariableDeclaration","scope":96,"src":"1597:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":67,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:1"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":96,"src":"1672:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":73,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:1"},"scope":929,"src":"1570:300:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[970],"body":{"id":119,"nodeType":"Block","src":"2010:123:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"2028:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:1","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2020:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":114,"nodeType":"ExpressionStatement","src":"2020:73:1"},{"expression":{"baseExpression":{"id":115,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"2110:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":117,"indexExpression":{"id":116,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"2120:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":104,"id":118,"nodeType":"Return","src":"2103:23:1"}]},"documentation":{"id":97,"nodeType":"StructuredDocumentation","src":"1876:48:1","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":120,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:1","nodeType":"FunctionDefinition","overrides":{"id":101,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:1"},"parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99,"mutability":"mutable","name":"owner","nameLocation":"1956:5:1","nodeType":"VariableDeclaration","scope":120,"src":"1948:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:1"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":120,"src":"2001:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:1"},"scope":929,"src":"1929:204:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[978],"body":{"id":147,"nodeType":"Block","src":"2271:138:1","statements":[{"assignments":[130],"declarations":[{"constant":false,"id":130,"mutability":"mutable","name":"owner","nameLocation":"2289:5:1","nodeType":"VariableDeclaration","scope":147,"src":"2281:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":134,"initialValue":{"arguments":[{"id":132,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2306:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":131,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"2297:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":136,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"2332:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:1","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":135,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"ExpressionStatement","src":"2324:56:1"},{"expression":{"id":145,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"2397:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":128,"id":146,"nodeType":"Return","src":"2390:12:1"}]},"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"2139:46:1","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":148,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:1","nodeType":"FunctionDefinition","overrides":{"id":125,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:1"},"parameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:1","nodeType":"VariableDeclaration","scope":148,"src":"2207:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":148,"src":"2262:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:1"},"scope":929,"src":"2190:219:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1075],"body":{"id":157,"nodeType":"Block","src":"2540:29:1","statements":[{"expression":{"id":155,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2557:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":154,"id":156,"nodeType":"Return","src":"2550:12:1"}]},"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"2415:51:1","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":158,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:1","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:1"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"2484:2:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":158,"src":"2525:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":152,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:1"},"scope":929,"src":"2471:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1081],"body":{"id":167,"nodeType":"Block","src":"2704:31:1","statements":[{"expression":{"id":165,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2721:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":164,"id":166,"nodeType":"Return","src":"2714:14:1"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"2575:53:1","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":168,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:1","nodeType":"FunctionDefinition","overrides":{"id":161,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:1"},"parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"2648:2:1"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"2689:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":162,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:1"},"scope":929,"src":"2633:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1089],"body":{"id":206,"nodeType":"Block","src":"2889:188:1","statements":[{"expression":{"arguments":[{"id":178,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"2914:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":177,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2899:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":180,"nodeType":"ExpressionStatement","src":"2899:23:1"},{"assignments":[182],"declarations":[{"constant":false,"id":182,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:1","nodeType":"VariableDeclaration","scope":206,"src":"2933:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":181,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":185,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":183,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2957:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:1"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":188,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"2990:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":186,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:1","typeDescriptions":{}}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:1","memberName":"length","nodeType":"MemberAccess","src":"2984:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:1","trueExpression":{"arguments":[{"arguments":[{"id":197,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"3036:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":198,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"3045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1500,"src":"3045:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":195,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":193,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:1","typeDescriptions":{}}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":176,"id":205,"nodeType":"Return","src":"2977:93:1"}]},"documentation":{"id":169,"nodeType":"StructuredDocumentation","src":"2741:55:1","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":207,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:1","nodeType":"FunctionDefinition","overrides":{"id":173,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:1"},"parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":171,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":207,"src":"2819:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:1"},"returnParameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":207,"src":"2874:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":174,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:1"},"scope":929,"src":"2801:276:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":215,"nodeType":"Block","src":"3385:26:1","statements":[{"expression":{"hexValue":"","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":212,"id":214,"nodeType":"Return","src":"3395:9:1"}]},"documentation":{"id":208,"nodeType":"StructuredDocumentation","src":"3083:231:1","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":216,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:1","nodeType":"FunctionDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"3336:2:1"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":216,"src":"3370:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":210,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:1"},"scope":929,"src":"3319:92:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1018],"body":{"id":258,"nodeType":"Block","src":"3538:336:1","statements":[{"assignments":[226],"declarations":[{"constant":false,"id":226,"mutability":"mutable","name":"owner","nameLocation":"3556:5:1","nodeType":"VariableDeclaration","scope":258,"src":"3548:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":225,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":231,"initialValue":{"arguments":[{"id":229,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":227,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"3564:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"3564:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":233,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"3605:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":234,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3611:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":232,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3597:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":238,"nodeType":"ExpressionStatement","src":"3597:57:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":240,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3686:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":242,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3702:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":245,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3728:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":246,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3735:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":244,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"3711:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3665:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":252,"nodeType":"ExpressionStatement","src":"3665:170:1"},{"expression":{"arguments":[{"id":254,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"3855:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":255,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3859:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":253,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"3846:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":257,"nodeType":"ExpressionStatement","src":"3846:21:1"}]},"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"3417:46:1","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":259,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:1","nodeType":"FunctionDefinition","overrides":{"id":223,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:1"},"parameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"to","nameLocation":"3493:2:1","nodeType":"VariableDeclaration","scope":259,"src":"3485:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":218,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:1","nodeType":"VariableDeclaration","scope":259,"src":"3497:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":220,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:1"},"returnParameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"3538:0:1"},"scope":929,"src":"3468:406:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1034],"body":{"id":276,"nodeType":"Block","src":"4020:82:1","statements":[{"expression":{"arguments":[{"id":269,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"4045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":268,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4030:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":271,"nodeType":"ExpressionStatement","src":"4030:23:1"},{"expression":{"baseExpression":{"id":272,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"4071:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":274,"indexExpression":{"id":273,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"4087:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":267,"id":275,"nodeType":"Return","src":"4064:31:1"}]},"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"3880:50:1","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":277,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:1","nodeType":"FunctionDefinition","overrides":{"id":264,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:1"},"parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:1","nodeType":"VariableDeclaration","scope":277,"src":"3956:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:1"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":277,"src":"4011:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:1"},"scope":929,"src":"3935:167:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1026],"body":{"id":293,"nodeType":"Block","src":"4253:69:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":287,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"4282:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":289,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"4296:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":290,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"4306:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":286,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"4263:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":292,"nodeType":"ExpressionStatement","src":"4263:52:1"}]},"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"4108:56:1","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":294,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:1","nodeType":"FunctionDefinition","overrides":{"id":284,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:1"},"parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"operator","nameLocation":"4204:8:1","nodeType":"VariableDeclaration","scope":294,"src":"4196:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":279,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"approved","nameLocation":"4219:8:1","nodeType":"VariableDeclaration","scope":294,"src":"4214:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":281,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:1"},"returnParameters":{"id":285,"nodeType":"ParameterList","parameters":[],"src":"4253:0:1"},"scope":929,"src":"4169:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1044],"body":{"id":311,"nodeType":"Block","src":"4491:59:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":305,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"4508:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":307,"indexExpression":{"id":306,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"4527:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":309,"indexExpression":{"id":308,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"4534:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":304,"id":310,"nodeType":"Return","src":"4501:42:1"}]},"documentation":{"id":295,"nodeType":"StructuredDocumentation","src":"4328:55:1","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":312,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:1","nodeType":"FunctionDefinition","overrides":{"id":301,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:1"},"parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"owner","nameLocation":"4422:5:1","nodeType":"VariableDeclaration","scope":312,"src":"4414:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"operator","nameLocation":"4437:8:1","nodeType":"VariableDeclaration","scope":312,"src":"4429:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":298,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:1"},"returnParameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":312,"src":"4485:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":302,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:1"},"scope":929,"src":"4388:162:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1010],"body":{"id":338,"nodeType":"Block","src":"4731:207:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":325,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"4820:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":327,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4834:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":324,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4801:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":323,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4793:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":331,"nodeType":"ExpressionStatement","src":"4793:99:1"},{"expression":{"arguments":[{"id":333,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"4913:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":334,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4919:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":335,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4923:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":332,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"4903:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":337,"nodeType":"ExpressionStatement","src":"4903:28:1"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"4556:51:1","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":339,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:1","nodeType":"FunctionDefinition","overrides":{"id":321,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:1"},"parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"from","nameLocation":"4651:4:1","nodeType":"VariableDeclaration","scope":339,"src":"4643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"mutability":"mutable","name":"to","nameLocation":"4673:2:1","nodeType":"VariableDeclaration","scope":339,"src":"4665:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:1","nodeType":"VariableDeclaration","scope":339,"src":"4685:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:1"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[],"src":"4731:0:1"},"scope":929,"src":"4612:326:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1000],"body":{"id":357,"nodeType":"Block","src":"5127:56:1","statements":[{"expression":{"arguments":[{"id":351,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"5154:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":352,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"5160:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":353,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"5164:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":350,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[358,388],"referencedDeclaration":388,"src":"5137:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":356,"nodeType":"ExpressionStatement","src":"5137:39:1"}]},"documentation":{"id":340,"nodeType":"StructuredDocumentation","src":"4944:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":358,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:1","nodeType":"FunctionDefinition","overrides":{"id":348,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:1"},"parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"mutability":"mutable","name":"from","nameLocation":"5047:4:1","nodeType":"VariableDeclaration","scope":358,"src":"5039:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":341,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":344,"mutability":"mutable","name":"to","nameLocation":"5069:2:1","nodeType":"VariableDeclaration","scope":358,"src":"5061:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:1","nodeType":"VariableDeclaration","scope":358,"src":"5081:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:1"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[],"src":"5127:0:1"},"scope":929,"src":"5004:179:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[990],"body":{"id":387,"nodeType":"Block","src":"5399:164:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":373,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"5436:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5436:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":375,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"5450:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":372,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"5417:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":371,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5409:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":379,"nodeType":"ExpressionStatement","src":"5409:99:1"},{"expression":{"arguments":[{"id":381,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5532:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":382,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"5538:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":383,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"5542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":384,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"5551:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":380,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"5518:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":386,"nodeType":"ExpressionStatement","src":"5518:38:1"}]},"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"5189:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":388,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:1","nodeType":"FunctionDefinition","overrides":{"id":369,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:1"},"parameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"from","nameLocation":"5292:4:1","nodeType":"VariableDeclaration","scope":388,"src":"5284:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"mutability":"mutable","name":"to","nameLocation":"5314:2:1","nodeType":"VariableDeclaration","scope":388,"src":"5306:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":365,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:1","nodeType":"VariableDeclaration","scope":388,"src":"5326:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":364,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":367,"mutability":"mutable","name":"data","nameLocation":"5364:4:1","nodeType":"VariableDeclaration","scope":388,"src":"5351:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":366,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:1"},"returnParameters":{"id":370,"nodeType":"ParameterList","parameters":[],"src":"5399:0:1"},"scope":929,"src":"5249:314:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":416,"nodeType":"Block","src":"6564:165:1","statements":[{"expression":{"arguments":[{"id":401,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"6584:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":402,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"6590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":403,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"6594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":400,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"6574:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6574:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"ExpressionStatement","src":"6574:28:1"},{"expression":{"arguments":[{"arguments":[{"id":408,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"6643:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":409,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"6649:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":410,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"6653:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":411,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"6662:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":407,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"6620:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":406,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":415,"nodeType":"ExpressionStatement","src":"6612:110:1"}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"5569:850:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":417,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:1","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"from","nameLocation":"6464:4:1","nodeType":"VariableDeclaration","scope":417,"src":"6456:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":390,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"to","nameLocation":"6486:2:1","nodeType":"VariableDeclaration","scope":417,"src":"6478:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":392,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:1","nodeType":"VariableDeclaration","scope":417,"src":"6498:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":397,"mutability":"mutable","name":"data","nameLocation":"6536:4:1","nodeType":"VariableDeclaration","scope":417,"src":"6523:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":396,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:1"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[],"src":"6564:0:1"},"scope":929,"src":"6424:305:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":429,"nodeType":"Block","src":"6913:40:1","statements":[{"expression":{"baseExpression":{"id":425,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"6930:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":427,"indexExpression":{"id":426,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":424,"id":428,"nodeType":"Return","src":"6923:23:1"}]},"documentation":{"id":418,"nodeType":"StructuredDocumentation","src":"6735:98:1","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":430,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:1","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:1","nodeType":"VariableDeclaration","scope":430,"src":"6856:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":419,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:1"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":430,"src":"6904:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:1"},"scope":929,"src":"6838:115:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":447,"nodeType":"Block","src":"7327:55:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":439,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"7353:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":438,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"7344:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":441,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:1","typeDescriptions":{}}},"id":444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":437,"id":446,"nodeType":"Return","src":"7337:38:1"}]},"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"6959:292:1","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":448,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:1","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:1","nodeType":"VariableDeclaration","scope":448,"src":"7273:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:1"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"7321:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":435,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:1"},"scope":929,"src":"7256:126:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":481,"nodeType":"Block","src":"7639:162:1","statements":[{"assignments":[459],"declarations":[{"constant":false,"id":459,"mutability":"mutable","name":"owner","nameLocation":"7657:5:1","nodeType":"VariableDeclaration","scope":481,"src":"7649:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":464,"initialValue":{"arguments":[{"id":462,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"7680:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":460,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"7665:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7672:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"7665:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":465,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"7706:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":466,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"7717:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":469,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"7743:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":470,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"7750:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":468,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"7726:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":474,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"7774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":473,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"7762:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7762:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":476,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"7786:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":479,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":457,"id":480,"nodeType":"Return","src":"7698:96:1"}]},"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"7388:147:1","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":482,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:1","nodeType":"FunctionDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"spender","nameLocation":"7576:7:1","nodeType":"VariableDeclaration","scope":482,"src":"7568:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:1","nodeType":"VariableDeclaration","scope":482,"src":"7585:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":452,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:1"},"returnParameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":482,"src":"7633:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":455,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:1"},"scope":929,"src":"7540:261:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":496,"nodeType":"Block","src":"8196:43:1","statements":[{"expression":{"arguments":[{"id":491,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"8216:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":492,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"8220:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":490,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[497,526],"referencedDeclaration":526,"src":"8206:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8206:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":495,"nodeType":"ExpressionStatement","src":"8206:26:1"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"7807:319:1","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":497,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:1","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"to","nameLocation":"8158:2:1","nodeType":"VariableDeclaration","scope":497,"src":"8150:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":484,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:1","nodeType":"VariableDeclaration","scope":497,"src":"8162:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:1"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[],"src":"8196:0:1"},"scope":929,"src":"8131:108:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":525,"nodeType":"Block","src":"8574:195:1","statements":[{"expression":{"arguments":[{"id":508,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"8590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":509,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"8594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":507,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"8584:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":511,"nodeType":"ExpressionStatement","src":"8584:18:1"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:1","typeDescriptions":{}}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8656:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":518,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"8668:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"8672:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":520,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"8681:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":513,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"8633:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8633:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":512,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8612:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":524,"nodeType":"ExpressionStatement","src":"8612:150:1"}]},"documentation":{"id":498,"nodeType":"StructuredDocumentation","src":"8245:210:1","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":526,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:1","nodeType":"FunctionDefinition","parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"to","nameLocation":"8496:2:1","nodeType":"VariableDeclaration","scope":526,"src":"8488:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:1","nodeType":"VariableDeclaration","scope":526,"src":"8508:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"data","nameLocation":"8546:4:1","nodeType":"VariableDeclaration","scope":526,"src":"8533:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":503,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:1"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"8574:0:1"},"scope":929,"src":"8460:309:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":602,"nodeType":"Block","src":"9152:859:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":535,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9170:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:1","typeDescriptions":{}}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":534,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9162:61:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":543,"nodeType":"ExpressionStatement","src":"9162:61:1"},{"expression":{"arguments":[{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:1","subExpression":{"arguments":[{"id":546,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9250:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":545,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"9242:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9233:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9233:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":551,"nodeType":"ExpressionStatement","src":"9233:58:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:1","typeDescriptions":{}}},"id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9323:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":557,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9335:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":558,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9339:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":552,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"9302:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":561,"nodeType":"ExpressionStatement","src":"9302:48:1"},{"expression":{"arguments":[{"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:1","subExpression":{"arguments":[{"id":564,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9454:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":563,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"9446:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9446:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":562,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9437:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"ExpressionStatement","src":"9437:58:1"},{"id":576,"nodeType":"UncheckedBlock","src":"9506:360:1","statements":[{"expression":{"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":570,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"9837:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":572,"indexExpression":{"id":571,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9847:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":575,"nodeType":"ExpressionStatement","src":"9837:18:1"}]},{"expression":{"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":577,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"9876:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":579,"indexExpression":{"id":578,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9884:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":580,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9895:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":582,"nodeType":"ExpressionStatement","src":"9876:21:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:1","typeDescriptions":{}}},"id":587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9922:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":588,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9934:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":589,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":583,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"9913:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9913:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":591,"nodeType":"EmitStatement","src":"9908:38:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:1","typeDescriptions":{}}},"id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9977:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":597,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9989:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":598,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9993:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":592,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"9957:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9957:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":601,"nodeType":"ExpressionStatement","src":"9957:47:1"}]},"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"8775:311:1","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":603,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:1","nodeType":"FunctionDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"to","nameLocation":"9114:2:1","nodeType":"VariableDeclaration","scope":603,"src":"9106:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:1","nodeType":"VariableDeclaration","scope":603,"src":"9118:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":530,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:1"},"returnParameters":{"id":533,"nodeType":"ParameterList","parameters":[],"src":"9152:0:1"},"scope":929,"src":"9091:920:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":669,"nodeType":"Block","src":"10386:713:1","statements":[{"assignments":[610],"declarations":[{"constant":false,"id":610,"mutability":"mutable","name":"owner","nameLocation":"10404:5:1","nodeType":"VariableDeclaration","scope":669,"src":"10396:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":615,"initialValue":{"arguments":[{"id":613,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"10427:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":611,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"10412:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"10412:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10412:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:1"},{"expression":{"arguments":[{"id":617,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"10467:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:1","typeDescriptions":{}}},"id":621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":622,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"10486:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":616,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"10446:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10446:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":625,"nodeType":"ExpressionStatement","src":"10446:51:1"},{"expression":{"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":626,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"10599:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"10622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":627,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"10607:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"10607:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10607:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":632,"nodeType":"ExpressionStatement","src":"10599:31:1"},{"expression":{"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:1","subExpression":{"baseExpression":{"id":633,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"10675:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":635,"indexExpression":{"id":634,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"10691:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":637,"nodeType":"ExpressionStatement","src":"10668:31:1"},{"id":644,"nodeType":"UncheckedBlock","src":"10710:237:1","statements":[{"expression":{"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":638,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"10915:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":640,"indexExpression":{"id":639,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"10925:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":643,"nodeType":"ExpressionStatement","src":"10915:21:1"}]},{"expression":{"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:1","subExpression":{"baseExpression":{"id":645,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"10963:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":647,"indexExpression":{"id":646,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"10971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":649,"nodeType":"ExpressionStatement","src":"10956:23:1"},{"eventCall":{"arguments":[{"id":651,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"11004:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:1","typeDescriptions":{}}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"11023:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":650,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"10995:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10995:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":658,"nodeType":"EmitStatement","src":"10990:41:1"},{"expression":{"arguments":[{"id":660,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"11062:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:1","typeDescriptions":{}}},"id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11069:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":665,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"11081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":659,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"11042:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":668,"nodeType":"ExpressionStatement","src":"11042:50:1"}]},"documentation":{"id":604,"nodeType":"StructuredDocumentation","src":"10017:315:1","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":670,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:1","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:1","nodeType":"VariableDeclaration","scope":670,"src":"10352:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":605,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:1"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[],"src":"10386:0:1"},"scope":929,"src":"10337:762:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"11532:1124:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":683,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11565:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":681,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"11550:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11557:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"11550:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11550:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":685,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"11577:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":680,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11542:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"ExpressionStatement","src":"11542:81:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":691,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"11641:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:1","typeDescriptions":{}}},"id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":690,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11633:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"ExpressionStatement","src":"11633:65:1"},{"expression":{"arguments":[{"id":701,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"11730:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":702,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"11736:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":703,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11740:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":700,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"11709:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11709:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":706,"nodeType":"ExpressionStatement","src":"11709:42:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11866:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":708,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"11851:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11858:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"11851:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":712,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"11878:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11843:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11843:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":716,"nodeType":"ExpressionStatement","src":"11843:81:1"},{"expression":{"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:1","subExpression":{"baseExpression":{"id":717,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"11993:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":719,"indexExpression":{"id":718,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"12009:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":721,"nodeType":"ExpressionStatement","src":"11986:31:1"},{"id":734,"nodeType":"UncheckedBlock","src":"12028:496:1","statements":[{"expression":{"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":722,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"12461:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":724,"indexExpression":{"id":723,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"12471:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":727,"nodeType":"ExpressionStatement","src":"12461:20:1"},{"expression":{"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":728,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"12495:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":730,"indexExpression":{"id":729,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"12505:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":733,"nodeType":"ExpressionStatement","src":"12495:18:1"}]},{"expression":{"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":735,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"12533:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":737,"indexExpression":{"id":736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"12541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":738,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"12552:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":740,"nodeType":"ExpressionStatement","src":"12533:21:1"},{"eventCall":{"arguments":[{"id":742,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"12579:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":743,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"12585:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"12589:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":741,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"12570:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12570:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":746,"nodeType":"EmitStatement","src":"12565:32:1"},{"expression":{"arguments":[{"id":748,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"12628:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":749,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"12634:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":750,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"12638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":747,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"12608:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12608:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":753,"nodeType":"ExpressionStatement","src":"12608:41:1"}]},"documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"11105:313:1","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:1","nodeType":"FunctionDefinition","parameters":{"id":678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"from","nameLocation":"11459:4:1","nodeType":"VariableDeclaration","scope":755,"src":"11451:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"to","nameLocation":"11481:2:1","nodeType":"VariableDeclaration","scope":755,"src":"11473:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":674,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":677,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:1","nodeType":"VariableDeclaration","scope":755,"src":"11493:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":676,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:1"},"returnParameters":{"id":679,"nodeType":"ParameterList","parameters":[],"src":"11532:0:1"},"scope":929,"src":"11423:1233:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":778,"nodeType":"Block","src":"12832:107:1","statements":[{"expression":{"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":763,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"12842:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":765,"indexExpression":{"id":764,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12858:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":766,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"12869:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":768,"nodeType":"ExpressionStatement","src":"12842:29:1"},{"eventCall":{"arguments":[{"arguments":[{"id":772,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":770,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"12895:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$929_$","typeString":"type(contract ERC721)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12902:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":148,"src":"12895:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":774,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"12920:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12924:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":769,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"12886:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":777,"nodeType":"EmitStatement","src":"12881:51:1"}]},"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"12662:101:1","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":779,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:1","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"to","nameLocation":"12794:2:1","nodeType":"VariableDeclaration","scope":779,"src":"12786:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:1","nodeType":"VariableDeclaration","scope":779,"src":"12798:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:1"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[],"src":"12832:0:1"},"scope":929,"src":"12768:171:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":810,"nodeType":"Block","src":"13198:184:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":790,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"13216:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":791,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"13225:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":789,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13208:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13208:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":795,"nodeType":"ExpressionStatement","src":"13208:55:1"},{"expression":{"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":796,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"13273:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":799,"indexExpression":{"id":797,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"13292:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":800,"indexExpression":{"id":798,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"13299:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":801,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"13311:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":803,"nodeType":"ExpressionStatement","src":"13273:46:1"},{"eventCall":{"arguments":[{"id":805,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"13349:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":806,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"13356:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":807,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"13366:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":804,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"13334:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"EmitStatement","src":"13329:46:1"}]},"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"12945:125:1","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:1","nodeType":"FunctionDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"owner","nameLocation":"13120:5:1","nodeType":"VariableDeclaration","scope":811,"src":"13112:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"operator","nameLocation":"13143:8:1","nodeType":"VariableDeclaration","scope":811,"src":"13135:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":783,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"approved","nameLocation":"13166:8:1","nodeType":"VariableDeclaration","scope":811,"src":"13161:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":785,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:1"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[],"src":"13198:0:1"},"scope":929,"src":"13075:307:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":824,"nodeType":"Block","src":"13529:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":819,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"13555:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":818,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"13547:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13547:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13539:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13539:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":823,"nodeType":"ExpressionStatement","src":"13539:53:1"}]},"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"13388:73:1","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":825,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:1","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:1","nodeType":"VariableDeclaration","scope":825,"src":"13490:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:1"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"13529:0:1"},"scope":929,"src":"13466:133:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":886,"nodeType":"Block","src":"14306:676:1","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"14320:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14323:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1108,"src":"14320:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14320:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":884,"nodeType":"Block","src":"14940:36:1","statements":[{"expression":{"hexValue":"74727565","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":838,"id":883,"nodeType":"Return","src":"14954:11:1"}]},"id":885,"nodeType":"IfStatement","src":"14316:660:1","trueBody":{"id":881,"nodeType":"Block","src":"14337:597:1","statements":[{"clauses":[{"block":{"id":861,"nodeType":"Block","src":"14451:91:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":855,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"14476:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":856,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"14486:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1063_$","typeString":"type(contract IERC721Receiver)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14502:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1062,"src":"14486:32:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14519:8:1","memberName":"selector","nodeType":"MemberAccess","src":"14486:41:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":838,"id":860,"nodeType":"Return","src":"14469:58:1"}]},"errorName":"","id":862,"nodeType":"TryCatchClause","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"retval","nameLocation":"14443:6:1","nodeType":"VariableDeclaration","scope":862,"src":"14436:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":852,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:1"},"src":"14427:115:1"},{"block":{"id":878,"nodeType":"Block","src":"14571:353:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":866,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"14593:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14600:6:1","memberName":"length","nodeType":"MemberAccess","src":"14593:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":876,"nodeType":"Block","src":"14720:190:1","statements":[{"AST":{"nativeSrc":"14806:86:1","nodeType":"YulBlock","src":"14806:86:1","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14843:2:1","nodeType":"YulLiteral","src":"14843:2:1","type":"","value":"32"},{"name":"reason","nativeSrc":"14847:6:1","nodeType":"YulIdentifier","src":"14847:6:1"}],"functionName":{"name":"add","nativeSrc":"14839:3:1","nodeType":"YulIdentifier","src":"14839:3:1"},"nativeSrc":"14839:15:1","nodeType":"YulFunctionCall","src":"14839:15:1"},{"arguments":[{"name":"reason","nativeSrc":"14862:6:1","nodeType":"YulIdentifier","src":"14862:6:1"}],"functionName":{"name":"mload","nativeSrc":"14856:5:1","nodeType":"YulIdentifier","src":"14856:5:1"},"nativeSrc":"14856:13:1","nodeType":"YulFunctionCall","src":"14856:13:1"}],"functionName":{"name":"revert","nativeSrc":"14832:6:1","nodeType":"YulIdentifier","src":"14832:6:1"},"nativeSrc":"14832:38:1","nodeType":"YulFunctionCall","src":"14832:38:1"},"nativeSrc":"14832:38:1","nodeType":"YulExpressionStatement","src":"14832:38:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":864,"isOffset":false,"isSlot":false,"src":"14847:6:1","valueSize":1},{"declaration":864,"isOffset":false,"isSlot":false,"src":"14862:6:1","valueSize":1}],"id":875,"nodeType":"InlineAssembly","src":"14797:95:1"}]},"id":877,"nodeType":"IfStatement","src":"14589:321:1","trueBody":{"id":874,"nodeType":"Block","src":"14613:101:1","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":870,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":873,"nodeType":"ExpressionStatement","src":"14635:60:1"}]}}]},"errorName":"","id":879,"nodeType":"TryCatchClause","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"reason","nameLocation":"14563:6:1","nodeType":"VariableDeclaration","scope":879,"src":"14550:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":863,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:1"},"src":"14543:381:1"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":846,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"14392:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14392:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":848,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"14406:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":849,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"14412:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":850,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"14421:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":843,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"14371:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":842,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"14355:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1063_$","typeString":"type(contract IERC721Receiver)"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1063","typeString":"contract IERC721Receiver"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14375:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1062,"src":"14355:36:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:71:1","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":880,"nodeType":"TryStatement","src":"14351:573:1"}]}}]},"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"13605:541:1","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":887,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:1","nodeType":"FunctionDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"from","nameLocation":"14200:4:1","nodeType":"VariableDeclaration","scope":887,"src":"14192:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":827,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"to","nameLocation":"14222:2:1","nodeType":"VariableDeclaration","scope":887,"src":"14214:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":832,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:1","nodeType":"VariableDeclaration","scope":887,"src":"14234:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"data","nameLocation":"14272:4:1","nodeType":"VariableDeclaration","scope":887,"src":"14259:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":833,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:1"},"returnParameters":{"id":838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":887,"src":"14300:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":836,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:1"},"scope":929,"src":"14151:831:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":899,"nodeType":"Block","src":"15850:2:1","statements":[]},"documentation":{"id":888,"nodeType":"StructuredDocumentation","src":"14988:705:1","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:1","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"from","nameLocation":"15745:4:1","nodeType":"VariableDeclaration","scope":900,"src":"15737:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":889,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":892,"mutability":"mutable","name":"to","nameLocation":"15767:2:1","nodeType":"VariableDeclaration","scope":900,"src":"15759:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"firstTokenId","nameLocation":"15787:12:1","nodeType":"VariableDeclaration","scope":900,"src":"15779:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":893,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"batchSize","nameLocation":"15817:9:1","nodeType":"VariableDeclaration","scope":900,"src":"15809:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:105:1"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"15850:0:1"},"scope":929,"src":"15698:154:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":912,"nodeType":"Block","src":"16709:2:1","statements":[]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"15858:695:1","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":913,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16567:19:1","nodeType":"FunctionDefinition","parameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"from","nameLocation":"16604:4:1","nodeType":"VariableDeclaration","scope":913,"src":"16596:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"16596:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"to","nameLocation":"16626:2:1","nodeType":"VariableDeclaration","scope":913,"src":"16618:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"16618:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"firstTokenId","nameLocation":"16646:12:1","nodeType":"VariableDeclaration","scope":913,"src":"16638:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"16638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"batchSize","nameLocation":"16676:9:1","nodeType":"VariableDeclaration","scope":913,"src":"16668:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"16668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16586:105:1"},"returnParameters":{"id":911,"nodeType":"ParameterList","parameters":[],"src":"16709:0:1"},"scope":929,"src":"16558:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"17260:45:1","statements":[{"expression":{"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":921,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"17270:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":923,"indexExpression":{"id":922,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"17280:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17270:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":924,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"17292:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17270:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":926,"nodeType":"ExpressionStatement","src":"17270:28:1"}]},"documentation":{"id":914,"nodeType":"StructuredDocumentation","src":"16717:409:1","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"17193:24:1","nodeType":"FunctionDefinition","parameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"account","nameLocation":"17226:7:1","nodeType":"VariableDeclaration","scope":928,"src":"17218:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":915,"name":"address","nodeType":"ElementaryTypeName","src":"17218:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":918,"mutability":"mutable","name":"amount","nameLocation":"17243:6:1","nodeType":"VariableDeclaration","scope":928,"src":"17235:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"17235:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17217:33:1"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[],"src":"17260:0:1"},"scope":929,"src":"17184:121:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":930,"src":"628:16679:1","usedErrors":[],"usedEvents":[944,953,962]}],"src":"107:17201:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1653],"IERC721":[1045]},"id":1046,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":931,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":932,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1046,"sourceUnit":1654,"src":"133:47:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":934,"name":"IERC165","nameLocations":["271:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1653,"src":"271:7:2"},"id":935,"nodeType":"InheritanceSpecifier","src":"271:7:2"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"182:67:2","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1045,"linearizedBaseContracts":[1045,1653],"name":"IERC721","nameLocation":"260:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"285:88:2","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":944,"name":"Transfer","nameLocation":"384:8:2","nodeType":"EventDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:2","nodeType":"VariableDeclaration","scope":944,"src":"393:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:2","nodeType":"VariableDeclaration","scope":944,"src":"415:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:2","nodeType":"VariableDeclaration","scope":944,"src":"435:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:2"},"src":"378:82:2"},{"anonymous":false,"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"466:94:2","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":953,"name":"Approval","nameLocation":"571:8:2","nodeType":"EventDefinition","parameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:2","nodeType":"VariableDeclaration","scope":953,"src":"580:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:2","nodeType":"VariableDeclaration","scope":953,"src":"603:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":948,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":951,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:2","nodeType":"VariableDeclaration","scope":953,"src":"629:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:2"},"src":"565:89:2"},{"anonymous":false,"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"660:117:2","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":962,"name":"ApprovalForAll","nameLocation":"788:14:2","nodeType":"EventDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:2","nodeType":"VariableDeclaration","scope":962,"src":"803:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":958,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:2","nodeType":"VariableDeclaration","scope":962,"src":"826:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":960,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:2","nodeType":"VariableDeclaration","scope":962,"src":"852:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":959,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:2"},"src":"782:85:2"},{"documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"873:76:2","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":970,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:2","nodeType":"FunctionDefinition","parameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"owner","nameLocation":"981:5:2","nodeType":"VariableDeclaration","scope":970,"src":"973:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":964,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:2"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"balance","nameLocation":"1019:7:2","nodeType":"VariableDeclaration","scope":970,"src":"1011:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":967,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:2"},"scope":1045,"src":"954:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"1034:131:2","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":978,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:2","nodeType":"FunctionDefinition","parameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:2","nodeType":"VariableDeclaration","scope":978,"src":"1187:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":972,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:2"},"returnParameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"owner","nameLocation":"1235:5:2","nodeType":"VariableDeclaration","scope":978,"src":"1227:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":975,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:2"},"scope":1045,"src":"1170:72:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"1248:556:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":990,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:2","nodeType":"FunctionDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"from","nameLocation":"1852:4:2","nodeType":"VariableDeclaration","scope":990,"src":"1844:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"to","nameLocation":"1874:2:2","nodeType":"VariableDeclaration","scope":990,"src":"1866:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":982,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:2","nodeType":"VariableDeclaration","scope":990,"src":"1886:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"data","nameLocation":"1926:4:2","nodeType":"VariableDeclaration","scope":990,"src":"1911:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":986,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:2"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"1945:0:2"},"scope":1045,"src":"1809:137:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"1952:687:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1000,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:2","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":993,"mutability":"mutable","name":"from","nameLocation":"2687:4:2","nodeType":"VariableDeclaration","scope":1000,"src":"2679:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":992,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":995,"mutability":"mutable","name":"to","nameLocation":"2709:2:2","nodeType":"VariableDeclaration","scope":1000,"src":"2701:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":994,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":997,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:2","nodeType":"VariableDeclaration","scope":1000,"src":"2721:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":996,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:2"},"returnParameters":{"id":999,"nodeType":"ParameterList","parameters":[],"src":"2751:0:2"},"scope":1045,"src":"2644:108:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1001,"nodeType":"StructuredDocumentation","src":"2758:732:2","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1010,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:2","nodeType":"FunctionDefinition","parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"from","nameLocation":"3534:4:2","nodeType":"VariableDeclaration","scope":1010,"src":"3526:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1002,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"to","nameLocation":"3556:2:2","nodeType":"VariableDeclaration","scope":1010,"src":"3548:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1004,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:2","nodeType":"VariableDeclaration","scope":1010,"src":"3568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:2"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"3598:0:2"},"scope":1045,"src":"3495:104:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"3605:452:2","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1018,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:2","nodeType":"FunctionDefinition","parameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"to","nameLocation":"4087:2:2","nodeType":"VariableDeclaration","scope":1018,"src":"4079:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1012,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1015,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:2","nodeType":"VariableDeclaration","scope":1018,"src":"4091:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:2"},"returnParameters":{"id":1017,"nodeType":"ParameterList","parameters":[],"src":"4116:0:2"},"scope":1045,"src":"4062:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"4123:309:2","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1026,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:2","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"operator","nameLocation":"4472:8:2","nodeType":"VariableDeclaration","scope":1026,"src":"4464:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:2","nodeType":"VariableDeclaration","scope":1026,"src":"4482:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1022,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:2"},"returnParameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"4506:0:2"},"scope":1045,"src":"4437:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1027,"nodeType":"StructuredDocumentation","src":"4513:139:2","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1034,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:2","nodeType":"FunctionDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:2","nodeType":"VariableDeclaration","scope":1034,"src":"4678:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1028,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:2"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"operator","nameLocation":"4726:8:2","nodeType":"VariableDeclaration","scope":1034,"src":"4718:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1031,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:2"},"scope":1045,"src":"4657:79:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"4742:138:2","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1044,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:2","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"owner","nameLocation":"4919:5:2","nodeType":"VariableDeclaration","scope":1044,"src":"4911:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"operator","nameLocation":"4934:8:2","nodeType":"VariableDeclaration","scope":1044,"src":"4926:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:2"},"returnParameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1044,"src":"4967:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1041,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:2"},"scope":1045,"src":"4885:88:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1046,"src":"250:4725:2","usedErrors":[],"usedEvents":[944,953,962]}],"src":"108:4868:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1063]},"id":1064,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1047,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"141:152:3","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1063,"linearizedBaseContracts":[1063],"name":"IERC721Receiver","nameLocation":"304:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1049,"nodeType":"StructuredDocumentation","src":"326:493:3","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1062,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:3","nodeType":"FunctionDefinition","parameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"operator","nameLocation":"867:8:3","nodeType":"VariableDeclaration","scope":1062,"src":"859:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1050,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"from","nameLocation":"893:4:3","nodeType":"VariableDeclaration","scope":1062,"src":"885:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:3","nodeType":"VariableDeclaration","scope":1062,"src":"907:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1054,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"data","nameLocation":"947:4:3","nodeType":"VariableDeclaration","scope":1062,"src":"932:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1056,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:3"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1062,"src":"976:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1059,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:3"},"scope":1063,"src":"824:160:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1064,"src":"294:692:3","usedErrors":[],"usedEvents":[]}],"src":"116:871:3"},"id":3},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[1653],"IERC721":[1045],"IERC721Metadata":[1090]},"id":1091,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1065,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1066,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":1046,"src":"137:24:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1068,"name":"IERC721","nameLocations":["326:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1045,"src":"326:7:4"},"id":1069,"nodeType":"InheritanceSpecifier","src":"326:7:4"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"163:133:4","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1090,"linearizedBaseContracts":[1090,1045,1653],"name":"IERC721Metadata","nameLocation":"307:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"340:58:4","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1075,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:4","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[],"src":"416:2:4"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1075,"src":"442:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1072,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:4"},"scope":1090,"src":"403:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"463:60:4","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1081,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:4","nodeType":"FunctionDefinition","parameters":{"id":1077,"nodeType":"ParameterList","parameters":[],"src":"543:2:4"},"returnParameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1081,"src":"569:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1078,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:4"},"scope":1090,"src":"528:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"590:90:4","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1089,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:4","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:4","nodeType":"VariableDeclaration","scope":1089,"src":"703:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:4"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1089,"src":"743:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1086,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:4"},"scope":1090,"src":"685:73:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1091,"src":"297:463:4","usedErrors":[],"usedEvents":[944,953,962]}],"src":"112:649:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1420]},"id":1421,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1092,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1093,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1420,"linearizedBaseContracts":[1420],"name":"Address","nameLocation":"202:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1107,"nodeType":"Block","src":"1241:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1101,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"1465:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:5","memberName":"code","nodeType":"MemberAccess","src":"1465:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:5","memberName":"length","nodeType":"MemberAccess","src":"1465:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1100,"id":1106,"nodeType":"Return","src":"1458:30:5"}]},"documentation":{"id":1094,"nodeType":"StructuredDocumentation","src":"216:954:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1108,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:5","nodeType":"FunctionDefinition","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"account","nameLocation":"1203:7:5","nodeType":"VariableDeclaration","scope":1108,"src":"1195:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1095,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:5"},"returnParameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1108,"src":"1235:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1098,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:5"},"scope":1420,"src":"1175:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1141,"nodeType":"Block","src":"2483:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1119,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1420","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1420","typeString":"library Address"}],"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1117,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:5","typeDescriptions":{}}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:5","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1122,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2526:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1116,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2493:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1126,"nodeType":"ExpressionStatement","src":"2493:73:5"},{"assignments":[1128,null],"declarations":[{"constant":false,"id":1128,"mutability":"mutable","name":"success","nameLocation":"2583:7:5","nodeType":"VariableDeclaration","scope":1141,"src":"2578:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1127,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1135,"initialValue":{"arguments":[{"hexValue":"","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1129,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2596:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:5","memberName":"call","nodeType":"MemberAccess","src":"2596:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1131,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2618:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:5"},{"expression":{"arguments":[{"id":1137,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"2647:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1136,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2639:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1140,"nodeType":"ExpressionStatement","src":"2639:78:5"}]},"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"1501:906:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1142,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:5","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:5","nodeType":"VariableDeclaration","scope":1142,"src":"2431:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"amount","nameLocation":"2466:6:5","nodeType":"VariableDeclaration","scope":1142,"src":"2458:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:5"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[],"src":"2483:0:5"},"scope":1420,"src":"2412:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1159,"nodeType":"Block","src":"3555:96:5","statements":[{"expression":{"arguments":[{"id":1153,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"3594:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1154,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"3602:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1152,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1200,1244],"referencedDeclaration":1244,"src":"3572:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1151,"id":1158,"nodeType":"Return","src":"3565:79:5"}]},"documentation":{"id":1143,"nodeType":"StructuredDocumentation","src":"2730:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1160,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:5","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"target","nameLocation":"3496:6:5","nodeType":"VariableDeclaration","scope":1160,"src":"3488:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"data","nameLocation":"3517:4:5","nodeType":"VariableDeclaration","scope":1160,"src":"3504:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1146,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:5"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1160,"src":"3541:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1149,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:5"},"scope":1420,"src":"3466:185:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1179,"nodeType":"Block","src":"4020:76:5","statements":[{"expression":{"arguments":[{"id":1173,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"4059:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1174,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"4067:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1176,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"4076:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1172,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1200,1244],"referencedDeclaration":1244,"src":"4037:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1171,"id":1178,"nodeType":"Return","src":"4030:59:5"}]},"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"3657:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1180,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:5","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"target","nameLocation":"3912:6:5","nodeType":"VariableDeclaration","scope":1180,"src":"3904:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"data","nameLocation":"3941:4:5","nodeType":"VariableDeclaration","scope":1180,"src":"3928:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1164,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:5","nodeType":"VariableDeclaration","scope":1180,"src":"3955:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1166,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:5"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1180,"src":"4006:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1169,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:5"},"scope":1420,"src":"3873:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1199,"nodeType":"Block","src":"4601:111:5","statements":[{"expression":{"arguments":[{"id":1193,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"4640:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1194,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4648:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"4654:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1192,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1200,1244],"referencedDeclaration":1244,"src":"4618:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1191,"id":1198,"nodeType":"Return","src":"4611:94:5"}]},"documentation":{"id":1181,"nodeType":"StructuredDocumentation","src":"4102:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1200,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:5","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"target","nameLocation":"4506:6:5","nodeType":"VariableDeclaration","scope":1200,"src":"4498:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1182,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"data","nameLocation":"4535:4:5","nodeType":"VariableDeclaration","scope":1200,"src":"4522:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"value","nameLocation":"4557:5:5","nodeType":"VariableDeclaration","scope":1200,"src":"4549:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1186,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:5"},"returnParameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1200,"src":"4587:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1189,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:5"},"scope":1420,"src":"4458:254:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1243,"nodeType":"Block","src":"5139:267:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1217,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1420","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1420","typeString":"library Address"}],"id":1216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1215,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:5","typeDescriptions":{}}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:5","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"5182:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1214,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5149:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1224,"nodeType":"ExpressionStatement","src":"5149:81:5"},{"assignments":[1226,1228],"declarations":[{"constant":false,"id":1226,"mutability":"mutable","name":"success","nameLocation":"5246:7:5","nodeType":"VariableDeclaration","scope":1243,"src":"5241:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1225,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:5","nodeType":"VariableDeclaration","scope":1243,"src":"5255:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1227,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1235,"initialValue":{"arguments":[{"id":1233,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"5308:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1229,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"5282:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:5","memberName":"call","nodeType":"MemberAccess","src":"5282:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"5301:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:5"},{"expression":{"arguments":[{"id":1237,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"5357:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1238,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5365:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1239,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"5374:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1240,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"5386:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1236,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"5330:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1213,"id":1242,"nodeType":"Return","src":"5323:76:5"}]},"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"4718:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1244,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:5","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"target","nameLocation":"5008:6:5","nodeType":"VariableDeclaration","scope":1244,"src":"5000:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"data","nameLocation":"5037:4:5","nodeType":"VariableDeclaration","scope":1244,"src":"5024:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1204,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"value","nameLocation":"5059:5:5","nodeType":"VariableDeclaration","scope":1244,"src":"5051:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:5","nodeType":"VariableDeclaration","scope":1244,"src":"5074:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1208,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:5"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"5125:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1211,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:5"},"scope":1420,"src":"4960:446:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1260,"nodeType":"Block","src":"5683:97:5","statements":[{"expression":{"arguments":[{"id":1255,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"5719:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1256,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"5727:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1254,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1261,1290],"referencedDeclaration":1290,"src":"5700:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1253,"id":1259,"nodeType":"Return","src":"5693:80:5"}]},"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"5412:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:5","nodeType":"FunctionDefinition","parameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"target","nameLocation":"5619:6:5","nodeType":"VariableDeclaration","scope":1261,"src":"5611:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1246,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1249,"mutability":"mutable","name":"data","nameLocation":"5640:4:5","nodeType":"VariableDeclaration","scope":1261,"src":"5627:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1248,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:5"},"returnParameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1261,"src":"5669:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1251,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:5"},"scope":1420,"src":"5583:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1289,"nodeType":"Block","src":"6122:168:5","statements":[{"assignments":[1274,1276],"declarations":[{"constant":false,"id":1274,"mutability":"mutable","name":"success","nameLocation":"6138:7:5","nodeType":"VariableDeclaration","scope":1289,"src":"6133:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1273,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:5","nodeType":"VariableDeclaration","scope":1289,"src":"6147:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1275,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1281,"initialValue":{"arguments":[{"id":1279,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"6192:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1277,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6174:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:5"},{"expression":{"arguments":[{"id":1283,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6241:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1284,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"6249:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1285,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"6258:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1286,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"6270:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1282,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"6214:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1272,"id":1288,"nodeType":"Return","src":"6207:76:5"}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"5786:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1290,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:5","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"target","nameLocation":"6009:6:5","nodeType":"VariableDeclaration","scope":1290,"src":"6001:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1266,"mutability":"mutable","name":"data","nameLocation":"6038:4:5","nodeType":"VariableDeclaration","scope":1290,"src":"6025:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1265,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:5","nodeType":"VariableDeclaration","scope":1290,"src":"6052:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1267,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:5"},"returnParameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1290,"src":"6108:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1270,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:5"},"scope":1420,"src":"5964:326:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1306,"nodeType":"Block","src":"6566:101:5","statements":[{"expression":{"arguments":[{"id":1301,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"6604:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1302,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"6612:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1300,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1307,1336],"referencedDeclaration":1336,"src":"6583:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1299,"id":1305,"nodeType":"Return","src":"6576:84:5"}]},"documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"6296:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1307,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:5","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"target","nameLocation":"6507:6:5","nodeType":"VariableDeclaration","scope":1307,"src":"6499:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"data","nameLocation":"6528:4:5","nodeType":"VariableDeclaration","scope":1307,"src":"6515:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1294,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:5"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1307,"src":"6552:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1297,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:5"},"scope":1420,"src":"6469:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1335,"nodeType":"Block","src":"7008:170:5","statements":[{"assignments":[1320,1322],"declarations":[{"constant":false,"id":1320,"mutability":"mutable","name":"success","nameLocation":"7024:7:5","nodeType":"VariableDeclaration","scope":1335,"src":"7019:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1319,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:5","nodeType":"VariableDeclaration","scope":1335,"src":"7033:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1321,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1327,"initialValue":{"arguments":[{"id":1325,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"7080:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1323,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"7060:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:5"},{"expression":{"arguments":[{"id":1329,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"7129:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"7137:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1331,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"7146:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1332,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"7158:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1328,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"7102:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1318,"id":1334,"nodeType":"Return","src":"7095:76:5"}]},"documentation":{"id":1308,"nodeType":"StructuredDocumentation","src":"6673:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:5","nodeType":"FunctionDefinition","parameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1310,"mutability":"mutable","name":"target","nameLocation":"6900:6:5","nodeType":"VariableDeclaration","scope":1336,"src":"6892:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1312,"mutability":"mutable","name":"data","nameLocation":"6929:4:5","nodeType":"VariableDeclaration","scope":1336,"src":"6916:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1311,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1314,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:5","nodeType":"VariableDeclaration","scope":1336,"src":"6943:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1313,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:5"},"returnParameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1336,"src":"6994:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1316,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:5"},"scope":1420,"src":"6853:325:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"7660:434:5","statements":[{"condition":{"id":1350,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"7674:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1372,"nodeType":"Block","src":"8030:58:5","statements":[{"expression":{"arguments":[{"id":1368,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"8052:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1369,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"8064:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1367,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"8044:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1371,"nodeType":"ExpressionStatement","src":"8044:33:5"}]},"id":1373,"nodeType":"IfStatement","src":"7670:418:5","trueBody":{"id":1366,"nodeType":"Block","src":"7683:341:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1351,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"7701:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:5","memberName":"length","nodeType":"MemberAccess","src":"7701:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1363,"nodeType":"IfStatement","src":"7697:286:5","trueBody":{"id":1362,"nodeType":"Block","src":"7725:258:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1357,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"7927:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1356,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"7916:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7908:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1361,"nodeType":"ExpressionStatement","src":"7908:60:5"}]}},{"expression":{"id":1364,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"8003:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1349,"id":1365,"nodeType":"Return","src":"7996:17:5"}]}}]},"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"7184:277:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:5","nodeType":"FunctionDefinition","parameters":{"id":1346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"target","nameLocation":"7519:6:5","nodeType":"VariableDeclaration","scope":1375,"src":"7511:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"success","nameLocation":"7540:7:5","nodeType":"VariableDeclaration","scope":1375,"src":"7535:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1340,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:5","nodeType":"VariableDeclaration","scope":1375,"src":"7557:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1342,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1345,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:5","nodeType":"VariableDeclaration","scope":1375,"src":"7590:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1344,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:5"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"7646:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1347,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:5"},"scope":1420,"src":"7466:628:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1398,"nodeType":"Block","src":"8475:135:5","statements":[{"condition":{"id":1387,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"8489:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1396,"nodeType":"Block","src":"8546:58:5","statements":[{"expression":{"arguments":[{"id":1392,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"8568:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1393,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"8580:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1391,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"8560:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1395,"nodeType":"ExpressionStatement","src":"8560:33:5"}]},"id":1397,"nodeType":"IfStatement","src":"8485:119:5","trueBody":{"id":1390,"nodeType":"Block","src":"8498:42:5","statements":[{"expression":{"id":1388,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"8519:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1386,"id":1389,"nodeType":"Return","src":"8512:17:5"}]}}]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"8100:210:5","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1399,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:5","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"success","nameLocation":"8355:7:5","nodeType":"VariableDeclaration","scope":1399,"src":"8350:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1377,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:5","nodeType":"VariableDeclaration","scope":1399,"src":"8372:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1379,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:5","nodeType":"VariableDeclaration","scope":1399,"src":"8405:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1381,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:5"},"returnParameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1399,"src":"8461:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1384,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:5"},"scope":1420,"src":"8315:295:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1418,"nodeType":"Block","src":"8699:457:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1406,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"8775:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:5","memberName":"length","nodeType":"MemberAccess","src":"8775:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1416,"nodeType":"Block","src":"9105:45:5","statements":[{"expression":{"arguments":[{"id":1413,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"9126:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1412,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1415,"nodeType":"ExpressionStatement","src":"9119:20:5"}]},"id":1417,"nodeType":"IfStatement","src":"8771:379:5","trueBody":{"id":1411,"nodeType":"Block","src":"8798:301:5","statements":[{"AST":{"nativeSrc":"8956:133:5","nodeType":"YulBlock","src":"8956:133:5","statements":[{"nativeSrc":"8974:40:5","nodeType":"YulVariableDeclaration","src":"8974:40:5","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:5","nodeType":"YulIdentifier","src":"9003:10:5"}],"functionName":{"name":"mload","nativeSrc":"8997:5:5","nodeType":"YulIdentifier","src":"8997:5:5"},"nativeSrc":"8997:17:5","nodeType":"YulFunctionCall","src":"8997:17:5"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:5","nodeType":"YulTypedName","src":"8978:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:5","nodeType":"YulLiteral","src":"9042:2:5","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:5","nodeType":"YulIdentifier","src":"9046:10:5"}],"functionName":{"name":"add","nativeSrc":"9038:3:5","nodeType":"YulIdentifier","src":"9038:3:5"},"nativeSrc":"9038:19:5","nodeType":"YulFunctionCall","src":"9038:19:5"},{"name":"returndata_size","nativeSrc":"9059:15:5","nodeType":"YulIdentifier","src":"9059:15:5"}],"functionName":{"name":"revert","nativeSrc":"9031:6:5","nodeType":"YulIdentifier","src":"9031:6:5"},"nativeSrc":"9031:44:5","nodeType":"YulFunctionCall","src":"9031:44:5"},"nativeSrc":"9031:44:5","nodeType":"YulExpressionStatement","src":"9031:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1401,"isOffset":false,"isSlot":false,"src":"9003:10:5","valueSize":1},{"declaration":1401,"isOffset":false,"isSlot":false,"src":"9046:10:5","valueSize":1}],"id":1410,"nodeType":"InlineAssembly","src":"8947:142:5"}]}}]},"id":1419,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:5","nodeType":"FunctionDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:5","nodeType":"VariableDeclaration","scope":1419,"src":"8633:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1400,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:5","nodeType":"VariableDeclaration","scope":1419,"src":"8658:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1402,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:5"},"returnParameters":{"id":1405,"nodeType":"ParameterList","parameters":[],"src":"8699:0:5"},"scope":1420,"src":"8616:540:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1421,"src":"194:8964:5","usedErrors":[],"usedEvents":[]}],"src":"101:9058:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1442]},"id":1443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1422,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"111:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1442,"linearizedBaseContracts":[1442],"name":"Context","nameLocation":"626:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1431,"nodeType":"Block","src":"702:34:6","statements":[{"expression":{"expression":{"id":1428,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:6","memberName":"sender","nodeType":"MemberAccess","src":"719:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1427,"id":1430,"nodeType":"Return","src":"712:17:6"}]},"id":1432,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:6","nodeType":"FunctionDefinition","parameters":{"id":1424,"nodeType":"ParameterList","parameters":[],"src":"659:2:6"},"returnParameters":{"id":1427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1432,"src":"693:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:6"},"scope":1442,"src":"640:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1440,"nodeType":"Block","src":"809:32:6","statements":[{"expression":{"expression":{"id":1437,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:6","memberName":"data","nodeType":"MemberAccess","src":"826:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1436,"id":1439,"nodeType":"Return","src":"819:15:6"}]},"id":1441,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:6","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[],"src":"759:2:6"},"returnParameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1441,"src":"793:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1434,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:6"},"scope":1442,"src":"742:99:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1443,"src":"608:235:6","usedErrors":[],"usedEvents":[]}],"src":"86:758:6"},"id":6},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2518],"Strings":[1617]},"id":1618,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1444,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1618,"sourceUnit":2519,"src":"126:25:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1446,"nodeType":"StructuredDocumentation","src":"153:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1617,"linearizedBaseContracts":[1617],"name":"Strings","nameLocation":"196:7:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1449,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:7","nodeType":"VariableDeclaration","scope":1617,"src":"210:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1447,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1452,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:7","nodeType":"VariableDeclaration","scope":1617,"src":"270:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1450,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1499,"nodeType":"Block","src":"486:625:7","statements":[{"id":1498,"nodeType":"UncheckedBlock","src":"496:609:7","statements":[{"assignments":[1461],"declarations":[{"constant":false,"id":1461,"mutability":"mutable","name":"length","nameLocation":"528:6:7","nodeType":"VariableDeclaration","scope":1498,"src":"520:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1468,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"548:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1462,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"537:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2518_$","typeString":"type(library Math)"}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:7","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2355,"src":"537:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:7"},{"assignments":[1470],"declarations":[{"constant":false,"id":1470,"mutability":"mutable","name":"buffer","nameLocation":"586:6:7","nodeType":"VariableDeclaration","scope":1498,"src":"572:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1469,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1475,"initialValue":{"arguments":[{"id":1473,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"606:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1471,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:7"},{"assignments":[1477],"declarations":[{"constant":false,"id":1477,"mutability":"mutable","name":"ptr","nameLocation":"635:3:7","nodeType":"VariableDeclaration","scope":1498,"src":"627:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1478,"nodeType":"VariableDeclarationStatement","src":"627:11:7"},{"AST":{"nativeSrc":"708:67:7","nodeType":"YulBlock","src":"708:67:7","statements":[{"nativeSrc":"726:35:7","nodeType":"YulAssignment","src":"726:35:7","value":{"arguments":[{"name":"buffer","nativeSrc":"737:6:7","nodeType":"YulIdentifier","src":"737:6:7"},{"arguments":[{"kind":"number","nativeSrc":"749:2:7","nodeType":"YulLiteral","src":"749:2:7","type":"","value":"32"},{"name":"length","nativeSrc":"753:6:7","nodeType":"YulIdentifier","src":"753:6:7"}],"functionName":{"name":"add","nativeSrc":"745:3:7","nodeType":"YulIdentifier","src":"745:3:7"},"nativeSrc":"745:15:7","nodeType":"YulFunctionCall","src":"745:15:7"}],"functionName":{"name":"add","nativeSrc":"733:3:7","nodeType":"YulIdentifier","src":"733:3:7"},"nativeSrc":"733:28:7","nodeType":"YulFunctionCall","src":"733:28:7"},"variableNames":[{"name":"ptr","nativeSrc":"726:3:7","nodeType":"YulIdentifier","src":"726:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1470,"isOffset":false,"isSlot":false,"src":"737:6:7","valueSize":1},{"declaration":1461,"isOffset":false,"isSlot":false,"src":"753:6:7","valueSize":1},{"declaration":1477,"isOffset":false,"isSlot":false,"src":"726:3:7","valueSize":1}],"id":1479,"nodeType":"InlineAssembly","src":"699:76:7"},{"body":{"id":1494,"nodeType":"Block","src":"801:267:7","statements":[{"expression":{"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:7","subExpression":{"id":1481,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"819:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1483,"nodeType":"ExpressionStatement","src":"819:5:7"},{"AST":{"nativeSrc":"902:84:7","nodeType":"YulBlock","src":"902:84:7","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"932:3:7","nodeType":"YulIdentifier","src":"932:3:7"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"946:5:7","nodeType":"YulIdentifier","src":"946:5:7"},{"kind":"number","nativeSrc":"953:2:7","nodeType":"YulLiteral","src":"953:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"942:3:7","nodeType":"YulIdentifier","src":"942:3:7"},"nativeSrc":"942:14:7","nodeType":"YulFunctionCall","src":"942:14:7"},{"name":"_SYMBOLS","nativeSrc":"958:8:7","nodeType":"YulIdentifier","src":"958:8:7"}],"functionName":{"name":"byte","nativeSrc":"937:4:7","nodeType":"YulIdentifier","src":"937:4:7"},"nativeSrc":"937:30:7","nodeType":"YulFunctionCall","src":"937:30:7"}],"functionName":{"name":"mstore8","nativeSrc":"924:7:7","nodeType":"YulIdentifier","src":"924:7:7"},"nativeSrc":"924:44:7","nodeType":"YulFunctionCall","src":"924:44:7"},"nativeSrc":"924:44:7","nodeType":"YulExpressionStatement","src":"924:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1449,"isOffset":false,"isSlot":false,"src":"958:8:7","valueSize":1},{"declaration":1477,"isOffset":false,"isSlot":false,"src":"932:3:7","valueSize":1},{"declaration":1455,"isOffset":false,"isSlot":false,"src":"946:5:7","valueSize":1}],"id":1484,"nodeType":"InlineAssembly","src":"893:93:7"},{"expression":{"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"1003:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1488,"nodeType":"ExpressionStatement","src":"1003:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"1036:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1493,"nodeType":"IfStatement","src":"1032:21:7","trueBody":{"id":1492,"nodeType":"Break","src":"1048:5:7"}}]},"condition":{"hexValue":"74727565","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1495,"nodeType":"WhileStatement","src":"788:280:7"},{"expression":{"id":1496,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"1088:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1459,"id":1497,"nodeType":"Return","src":"1081:13:7"}]}]},"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"320:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1500,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:7","nodeType":"FunctionDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"value","nameLocation":"441:5:7","nodeType":"VariableDeclaration","scope":1500,"src":"433:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:7"},"returnParameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1500,"src":"471:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1457,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:7"},"scope":1617,"src":"415:696:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1519,"nodeType":"Block","src":"1290:100:7","statements":[{"id":1518,"nodeType":"UncheckedBlock","src":"1300:84:7","statements":[{"expression":{"arguments":[{"id":1509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"1343:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"1362:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1510,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"1350:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2518_$","typeString":"type(library Math)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:7","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2478,"src":"1350:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1508,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1520,1596,1616],"referencedDeclaration":1596,"src":"1331:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1507,"id":1517,"nodeType":"Return","src":"1324:49:7"}]}]},"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"1117:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1520,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:7","nodeType":"FunctionDefinition","parameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"value","nameLocation":"1245:5:7","nodeType":"VariableDeclaration","scope":1520,"src":"1237:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1502,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:7"},"returnParameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1520,"src":"1275:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1505,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:7"},"scope":1617,"src":"1216:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1595,"nodeType":"Block","src":"1603:347:7","statements":[{"assignments":[1531],"declarations":[{"constant":false,"id":1531,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:7","nodeType":"VariableDeclaration","scope":1595,"src":"1613:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1530,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1540,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1535,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"1649:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1532,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:7"},{"expression":{"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1541,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1670:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1543,"indexExpression":{"hexValue":"30","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1546,"nodeType":"ExpressionStatement","src":"1670:15:7"},{"expression":{"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1547,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1695:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1549,"indexExpression":{"hexValue":"31","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1552,"nodeType":"ExpressionStatement","src":"1695:15:7"},{"body":{"id":1581,"nodeType":"Block","src":"1765:83:7","statements":[{"expression":{"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1567,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1779:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1569,"indexExpression":{"id":1568,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"1786:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1570,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"1791:8:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1574,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"1800:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1576,"nodeType":"ExpressionStatement","src":"1779:33:7"},{"expression":{"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"1826:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1580,"nodeType":"ExpressionStatement","src":"1826:11:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1561,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"1753:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1582,"initializationExpression":{"assignments":[1554],"declarations":[{"constant":false,"id":1554,"mutability":"mutable","name":"i","nameLocation":"1733:1:7","nodeType":"VariableDeclaration","scope":1582,"src":"1725:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1560,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1556,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"1741:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:7"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:7","subExpression":{"id":1564,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"1762:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1566,"nodeType":"ExpressionStatement","src":"1760:3:7"},"nodeType":"ForStatement","src":"1720:128:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1584,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"1865:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1857:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1589,"nodeType":"ExpressionStatement","src":"1857:55:7"},{"expression":{"arguments":[{"id":1592,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1936:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1590,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:7","typeDescriptions":{}}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1529,"id":1594,"nodeType":"Return","src":"1922:21:7"}]},"documentation":{"id":1521,"nodeType":"StructuredDocumentation","src":"1396:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1596,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:7","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1523,"mutability":"mutable","name":"value","nameLocation":"1542:5:7","nodeType":"VariableDeclaration","scope":1596,"src":"1534:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1522,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"length","nameLocation":"1557:6:7","nodeType":"VariableDeclaration","scope":1596,"src":"1549:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:7"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1596,"src":"1588:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1527,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:7"},"scope":1617,"src":"1513:437:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1615,"nodeType":"Block","src":"2175:76:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1609,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"2220:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1607,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:7","typeDescriptions":{}}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:7","typeDescriptions":{}}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1612,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"2228:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1604,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1520,1596,1616],"referencedDeclaration":1596,"src":"2192:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1603,"id":1614,"nodeType":"Return","src":"2185:59:7"}]},"documentation":{"id":1597,"nodeType":"StructuredDocumentation","src":"1956:141:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1616,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:7","nodeType":"FunctionDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"addr","nameLocation":"2131:4:7","nodeType":"VariableDeclaration","scope":1616,"src":"2123:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1598,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:7"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1616,"src":"2160:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1601,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:7"},"scope":1617,"src":"2102:149:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1618,"src":"188:2065:7","usedErrors":[],"usedEvents":[]}],"src":"101:2153:7"},"id":7},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1641],"IERC165":[1653]},"id":1642,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1619,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1620,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1642,"sourceUnit":1654,"src":"124:23:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1622,"name":"IERC165","nameLocations":["754:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1653,"src":"754:7:8"},"id":1623,"nodeType":"InheritanceSpecifier","src":"754:7:8"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1621,"nodeType":"StructuredDocumentation","src":"149:576:8","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1641,"linearizedBaseContracts":[1641,1653],"name":"ERC165","nameLocation":"744:6:8","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1652],"body":{"id":1639,"nodeType":"Block","src":"920:64:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"937:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1634,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"957:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1653_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1653_$","typeString":"type(contract IERC165)"}],"id":1633,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1653","typeString":"type(contract IERC165)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1631,"id":1638,"nodeType":"Return","src":"930:47:8"}]},"documentation":{"id":1624,"nodeType":"StructuredDocumentation","src":"768:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1640,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:8","nodeType":"FunctionDefinition","overrides":{"id":1628,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:8"},"parameters":{"id":1627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1626,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:8","nodeType":"VariableDeclaration","scope":1640,"src":"856:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1625,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:8"},"returnParameters":{"id":1631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1640,"src":"914:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1629,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:8"},"scope":1641,"src":"829:155:8","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1642,"src":"726:260:8","usedErrors":[],"usedEvents":[]}],"src":"99:888:8"},"id":8},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1653]},"id":1654,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1643,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"125:279:9","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1653,"linearizedBaseContracts":[1653],"name":"IERC165","nameLocation":"415:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1645,"nodeType":"StructuredDocumentation","src":"429:340:9","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1652,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:9","nodeType":"FunctionDefinition","parameters":{"id":1648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1647,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:9","nodeType":"VariableDeclaration","scope":1652,"src":"801:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1646,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:9"},"returnParameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1652,"src":"844:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1649,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:9"},"scope":1653,"src":"774:76:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1654,"src":"405:447:9","usedErrors":[],"usedEvents":[]}],"src":"100:753:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2518]},"id":2519,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1655,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2518,"linearizedBaseContracts":[2518],"name":"Math","nameLocation":"210:4:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1660,"members":[{"id":1657,"name":"Down","nameLocation":"245:4:10","nodeType":"EnumValue","src":"245:4:10"},{"id":1658,"name":"Up","nameLocation":"287:2:10","nodeType":"EnumValue","src":"287:2:10"},{"id":1659,"name":"Zero","nameLocation":"318:4:10","nodeType":"EnumValue","src":"318:4:10"}],"name":"Rounding","nameLocation":"226:8:10","nodeType":"EnumDefinition","src":"221:122:10"},{"body":{"id":1677,"nodeType":"Block","src":"480:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1670,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"497:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1671,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"501:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1674,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"509:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:10","trueExpression":{"id":1673,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"505:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1669,"id":1676,"nodeType":"Return","src":"490:20:10"}]},"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"349:59:10","text":" @dev Returns the largest of two numbers."},"id":1678,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:10","nodeType":"FunctionDefinition","parameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"a","nameLocation":"434:1:10","nodeType":"VariableDeclaration","scope":1678,"src":"426:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"b","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1678,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:10"},"returnParameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1678,"src":"471:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1667,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:10"},"scope":2518,"src":"413:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1695,"nodeType":"Block","src":"655:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"672:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1689,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"676:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1692,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"684:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:10","trueExpression":{"id":1691,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"680:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1687,"id":1694,"nodeType":"Return","src":"665:20:10"}]},"documentation":{"id":1679,"nodeType":"StructuredDocumentation","src":"523:60:10","text":" @dev Returns the smallest of two numbers."},"id":1696,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:10","nodeType":"FunctionDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1681,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":1696,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1680,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1696,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1682,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1696,"src":"646:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:10"},"scope":2518,"src":"588:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1718,"nodeType":"Block","src":"876:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1706,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"931:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1707,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"935:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1709,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1710,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1711,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"945:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1705,"id":1717,"nodeType":"Return","src":"923:28:10"}]},"documentation":{"id":1697,"nodeType":"StructuredDocumentation","src":"698:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1719,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:10","nodeType":"FunctionDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1699,"mutability":"mutable","name":"a","nameLocation":"830:1:10","nodeType":"VariableDeclaration","scope":1719,"src":"822:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1698,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1701,"mutability":"mutable","name":"b","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1719,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:10"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1719,"src":"867:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:10"},"scope":2518,"src":"805:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1743,"nodeType":"Block","src":"1228:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1729,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"1316:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1733,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"1330:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1736,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1737,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"1339:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:10","trueExpression":{"hexValue":"30","id":1732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1728,"id":1742,"nodeType":"Return","src":"1309:35:10"}]},"documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"964:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1744,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:10","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"a","nameLocation":"1182:1:10","nodeType":"VariableDeclaration","scope":1744,"src":"1174:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"b","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1744,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1723,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:10"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1744,"src":"1219:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:10"},"scope":2518,"src":"1157:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1865,"nodeType":"Block","src":"1795:3797:10","statements":[{"id":1864,"nodeType":"UncheckedBlock","src":"1805:3781:10","statements":[{"assignments":[1757],"declarations":[{"constant":false,"id":1757,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:10","nodeType":"VariableDeclaration","scope":1864,"src":"2126:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1756,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1758,"nodeType":"VariableDeclarationStatement","src":"2126:13:10"},{"assignments":[1760],"declarations":[{"constant":false,"id":1760,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:10","nodeType":"VariableDeclaration","scope":1864,"src":"2198:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1761,"nodeType":"VariableDeclarationStatement","src":"2198:13:10"},{"AST":{"nativeSrc":"2278:157:10","nodeType":"YulBlock","src":"2278:157:10","statements":[{"nativeSrc":"2296:30:10","nodeType":"YulVariableDeclaration","src":"2296:30:10","value":{"arguments":[{"name":"x","nativeSrc":"2313:1:10","nodeType":"YulIdentifier","src":"2313:1:10"},{"name":"y","nativeSrc":"2316:1:10","nodeType":"YulIdentifier","src":"2316:1:10"},{"arguments":[{"kind":"number","nativeSrc":"2323:1:10","nodeType":"YulLiteral","src":"2323:1:10","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2319:3:10","nodeType":"YulIdentifier","src":"2319:3:10"},"nativeSrc":"2319:6:10","nodeType":"YulFunctionCall","src":"2319:6:10"}],"functionName":{"name":"mulmod","nativeSrc":"2306:6:10","nodeType":"YulIdentifier","src":"2306:6:10"},"nativeSrc":"2306:20:10","nodeType":"YulFunctionCall","src":"2306:20:10"},"variables":[{"name":"mm","nativeSrc":"2300:2:10","nodeType":"YulTypedName","src":"2300:2:10","type":""}]},{"nativeSrc":"2343:18:10","nodeType":"YulAssignment","src":"2343:18:10","value":{"arguments":[{"name":"x","nativeSrc":"2356:1:10","nodeType":"YulIdentifier","src":"2356:1:10"},{"name":"y","nativeSrc":"2359:1:10","nodeType":"YulIdentifier","src":"2359:1:10"}],"functionName":{"name":"mul","nativeSrc":"2352:3:10","nodeType":"YulIdentifier","src":"2352:3:10"},"nativeSrc":"2352:9:10","nodeType":"YulFunctionCall","src":"2352:9:10"},"variableNames":[{"name":"prod0","nativeSrc":"2343:5:10","nodeType":"YulIdentifier","src":"2343:5:10"}]},{"nativeSrc":"2378:43:10","nodeType":"YulAssignment","src":"2378:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2395:2:10","nodeType":"YulIdentifier","src":"2395:2:10"},{"name":"prod0","nativeSrc":"2399:5:10","nodeType":"YulIdentifier","src":"2399:5:10"}],"functionName":{"name":"sub","nativeSrc":"2391:3:10","nodeType":"YulIdentifier","src":"2391:3:10"},"nativeSrc":"2391:14:10","nodeType":"YulFunctionCall","src":"2391:14:10"},{"arguments":[{"name":"mm","nativeSrc":"2410:2:10","nodeType":"YulIdentifier","src":"2410:2:10"},{"name":"prod0","nativeSrc":"2414:5:10","nodeType":"YulIdentifier","src":"2414:5:10"}],"functionName":{"name":"lt","nativeSrc":"2407:2:10","nodeType":"YulIdentifier","src":"2407:2:10"},"nativeSrc":"2407:13:10","nodeType":"YulFunctionCall","src":"2407:13:10"}],"functionName":{"name":"sub","nativeSrc":"2387:3:10","nodeType":"YulIdentifier","src":"2387:3:10"},"nativeSrc":"2387:34:10","nodeType":"YulFunctionCall","src":"2387:34:10"},"variableNames":[{"name":"prod1","nativeSrc":"2378:5:10","nodeType":"YulIdentifier","src":"2378:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1757,"isOffset":false,"isSlot":false,"src":"2343:5:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"2399:5:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"2414:5:10","valueSize":1},{"declaration":1760,"isOffset":false,"isSlot":false,"src":"2378:5:10","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"2313:1:10","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"2356:1:10","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"2316:1:10","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"2359:1:10","valueSize":1}],"id":1762,"nodeType":"InlineAssembly","src":"2269:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1763,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2516:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1771,"nodeType":"IfStatement","src":"2512:75:10","trueBody":{"id":1770,"nodeType":"Block","src":"2528:59:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1766,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"2553:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1767,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"2561:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1755,"id":1769,"nodeType":"Return","src":"2546:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1773,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"2697:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1774,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2711:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1772,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2689:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1777,"nodeType":"ExpressionStatement","src":"2689:28:10"},{"assignments":[1779],"declarations":[{"constant":false,"id":1779,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:10","nodeType":"VariableDeclaration","scope":1864,"src":"2973:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1780,"nodeType":"VariableDeclarationStatement","src":"2973:17:10"},{"AST":{"nativeSrc":"3013:291:10","nodeType":"YulBlock","src":"3013:291:10","statements":[{"nativeSrc":"3082:38:10","nodeType":"YulAssignment","src":"3082:38:10","value":{"arguments":[{"name":"x","nativeSrc":"3102:1:10","nodeType":"YulIdentifier","src":"3102:1:10"},{"name":"y","nativeSrc":"3105:1:10","nodeType":"YulIdentifier","src":"3105:1:10"},{"name":"denominator","nativeSrc":"3108:11:10","nodeType":"YulIdentifier","src":"3108:11:10"}],"functionName":{"name":"mulmod","nativeSrc":"3095:6:10","nodeType":"YulIdentifier","src":"3095:6:10"},"nativeSrc":"3095:25:10","nodeType":"YulFunctionCall","src":"3095:25:10"},"variableNames":[{"name":"remainder","nativeSrc":"3082:9:10","nodeType":"YulIdentifier","src":"3082:9:10"}]},{"nativeSrc":"3202:41:10","nodeType":"YulAssignment","src":"3202:41:10","value":{"arguments":[{"name":"prod1","nativeSrc":"3215:5:10","nodeType":"YulIdentifier","src":"3215:5:10"},{"arguments":[{"name":"remainder","nativeSrc":"3225:9:10","nodeType":"YulIdentifier","src":"3225:9:10"},{"name":"prod0","nativeSrc":"3236:5:10","nodeType":"YulIdentifier","src":"3236:5:10"}],"functionName":{"name":"gt","nativeSrc":"3222:2:10","nodeType":"YulIdentifier","src":"3222:2:10"},"nativeSrc":"3222:20:10","nodeType":"YulFunctionCall","src":"3222:20:10"}],"functionName":{"name":"sub","nativeSrc":"3211:3:10","nodeType":"YulIdentifier","src":"3211:3:10"},"nativeSrc":"3211:32:10","nodeType":"YulFunctionCall","src":"3211:32:10"},"variableNames":[{"name":"prod1","nativeSrc":"3202:5:10","nodeType":"YulIdentifier","src":"3202:5:10"}]},{"nativeSrc":"3260:30:10","nodeType":"YulAssignment","src":"3260:30:10","value":{"arguments":[{"name":"prod0","nativeSrc":"3273:5:10","nodeType":"YulIdentifier","src":"3273:5:10"},{"name":"remainder","nativeSrc":"3280:9:10","nodeType":"YulIdentifier","src":"3280:9:10"}],"functionName":{"name":"sub","nativeSrc":"3269:3:10","nodeType":"YulIdentifier","src":"3269:3:10"},"nativeSrc":"3269:21:10","nodeType":"YulFunctionCall","src":"3269:21:10"},"variableNames":[{"name":"prod0","nativeSrc":"3260:5:10","nodeType":"YulIdentifier","src":"3260:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1751,"isOffset":false,"isSlot":false,"src":"3108:11:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"3236:5:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"3260:5:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"3273:5:10","valueSize":1},{"declaration":1760,"isOffset":false,"isSlot":false,"src":"3202:5:10","valueSize":1},{"declaration":1760,"isOffset":false,"isSlot":false,"src":"3215:5:10","valueSize":1},{"declaration":1779,"isOffset":false,"isSlot":false,"src":"3082:9:10","valueSize":1},{"declaration":1779,"isOffset":false,"isSlot":false,"src":"3225:9:10","valueSize":1},{"declaration":1779,"isOffset":false,"isSlot":false,"src":"3280:9:10","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"3102:1:10","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"3105:1:10","valueSize":1}],"id":1781,"nodeType":"InlineAssembly","src":"3004:300:10"},{"assignments":[1783],"declarations":[{"constant":false,"id":1783,"mutability":"mutable","name":"twos","nameLocation":"3619:4:10","nodeType":"VariableDeclaration","scope":1864,"src":"3611:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1791,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1784,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"3626:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:10","subExpression":{"id":1785,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"3642:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:10"},{"AST":{"nativeSrc":"3681:362:10","nodeType":"YulBlock","src":"3681:362:10","statements":[{"nativeSrc":"3746:37:10","nodeType":"YulAssignment","src":"3746:37:10","value":{"arguments":[{"name":"denominator","nativeSrc":"3765:11:10","nodeType":"YulIdentifier","src":"3765:11:10"},{"name":"twos","nativeSrc":"3778:4:10","nodeType":"YulIdentifier","src":"3778:4:10"}],"functionName":{"name":"div","nativeSrc":"3761:3:10","nodeType":"YulIdentifier","src":"3761:3:10"},"nativeSrc":"3761:22:10","nodeType":"YulFunctionCall","src":"3761:22:10"},"variableNames":[{"name":"denominator","nativeSrc":"3746:11:10","nodeType":"YulIdentifier","src":"3746:11:10"}]},{"nativeSrc":"3850:25:10","nodeType":"YulAssignment","src":"3850:25:10","value":{"arguments":[{"name":"prod0","nativeSrc":"3863:5:10","nodeType":"YulIdentifier","src":"3863:5:10"},{"name":"twos","nativeSrc":"3870:4:10","nodeType":"YulIdentifier","src":"3870:4:10"}],"functionName":{"name":"div","nativeSrc":"3859:3:10","nodeType":"YulIdentifier","src":"3859:3:10"},"nativeSrc":"3859:16:10","nodeType":"YulFunctionCall","src":"3859:16:10"},"variableNames":[{"name":"prod0","nativeSrc":"3850:5:10","nodeType":"YulIdentifier","src":"3850:5:10"}]},{"nativeSrc":"3990:39:10","nodeType":"YulAssignment","src":"3990:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4010:1:10","nodeType":"YulLiteral","src":"4010:1:10","type":"","value":"0"},{"name":"twos","nativeSrc":"4013:4:10","nodeType":"YulIdentifier","src":"4013:4:10"}],"functionName":{"name":"sub","nativeSrc":"4006:3:10","nodeType":"YulIdentifier","src":"4006:3:10"},"nativeSrc":"4006:12:10","nodeType":"YulFunctionCall","src":"4006:12:10"},{"name":"twos","nativeSrc":"4020:4:10","nodeType":"YulIdentifier","src":"4020:4:10"}],"functionName":{"name":"div","nativeSrc":"4002:3:10","nodeType":"YulIdentifier","src":"4002:3:10"},"nativeSrc":"4002:23:10","nodeType":"YulFunctionCall","src":"4002:23:10"},{"kind":"number","nativeSrc":"4027:1:10","nodeType":"YulLiteral","src":"4027:1:10","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3998:3:10","nodeType":"YulIdentifier","src":"3998:3:10"},"nativeSrc":"3998:31:10","nodeType":"YulFunctionCall","src":"3998:31:10"},"variableNames":[{"name":"twos","nativeSrc":"3990:4:10","nodeType":"YulIdentifier","src":"3990:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1751,"isOffset":false,"isSlot":false,"src":"3746:11:10","valueSize":1},{"declaration":1751,"isOffset":false,"isSlot":false,"src":"3765:11:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"3850:5:10","valueSize":1},{"declaration":1757,"isOffset":false,"isSlot":false,"src":"3863:5:10","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"3778:4:10","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"3870:4:10","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"3990:4:10","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"4013:4:10","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"4020:4:10","valueSize":1}],"id":1792,"nodeType":"InlineAssembly","src":"3672:371:10"},{"expression":{"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1793,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"4109:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1794,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"4118:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1795,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"4126:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1798,"nodeType":"ExpressionStatement","src":"4109:21:10"},{"assignments":[1800],"declarations":[{"constant":false,"id":1800,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:10","nodeType":"VariableDeclaration","scope":1864,"src":"4448:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1807,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1802,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"4471:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1804,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:10"},{"expression":{"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1808,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1810,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"4719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1811,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4733:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1815,"nodeType":"ExpressionStatement","src":"4704:36:10"},{"expression":{"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1816,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1818,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"4788:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1819,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1823,"nodeType":"ExpressionStatement","src":"4773:36:10"},{"expression":{"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1824,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4843:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1826,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"4858:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1827,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4872:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1831,"nodeType":"ExpressionStatement","src":"4843:36:10"},{"expression":{"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1832,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4913:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1834,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"4928:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1835,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1839,"nodeType":"ExpressionStatement","src":"4913:36:10"},{"expression":{"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1840,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4983:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"4998:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1843,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"5012:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1847,"nodeType":"ExpressionStatement","src":"4983:36:10"},{"expression":{"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1848,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"5054:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1850,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"5069:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1851,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"5083:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1855,"nodeType":"ExpressionStatement","src":"5054:36:10"},{"expression":{"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1856,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"5524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1857,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"5533:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1858,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"5541:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1861,"nodeType":"ExpressionStatement","src":"5524:24:10"},{"expression":{"id":1862,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"5569:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1755,"id":1863,"nodeType":"Return","src":"5562:13:10"}]}]},"documentation":{"id":1745,"nodeType":"StructuredDocumentation","src":"1357:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1866,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:10","nodeType":"FunctionDefinition","parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"x","nameLocation":"1700:1:10","nodeType":"VariableDeclaration","scope":1866,"src":"1692:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1749,"mutability":"mutable","name":"y","nameLocation":"1719:1:10","nodeType":"VariableDeclaration","scope":1866,"src":"1711:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1751,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:10","nodeType":"VariableDeclaration","scope":1866,"src":"1730:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1750,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:10"},"returnParameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"result","nameLocation":"1787:6:10","nodeType":"VariableDeclaration","scope":1866,"src":"1779:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1753,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:10"},"scope":2518,"src":"1667:3925:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1909,"nodeType":"Block","src":"5872:189:10","statements":[{"assignments":[1882],"declarations":[{"constant":false,"id":1882,"mutability":"mutable","name":"result","nameLocation":"5890:6:10","nodeType":"VariableDeclaration","scope":1909,"src":"5882:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1881,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1888,"initialValue":{"arguments":[{"id":1884,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"5906:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1885,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"5909:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1886,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"5912:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1883,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1866,1910],"referencedDeclaration":1866,"src":"5899:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1889,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"5938:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1890,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"5950:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1660_$","typeString":"type(enum Math.Rounding)"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1658,"src":"5950:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"src":"5938:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1894,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"5972:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1895,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"5975:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1896,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"5978:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1893,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1906,"nodeType":"IfStatement","src":"5934:98:10","trueBody":{"id":1905,"nodeType":"Block","src":"5996:36:10","statements":[{"expression":{"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1901,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"6010:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1904,"nodeType":"ExpressionStatement","src":"6010:11:10"}]}},{"expression":{"id":1907,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"6048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1880,"id":1908,"nodeType":"Return","src":"6041:13:10"}]},"documentation":{"id":1867,"nodeType":"StructuredDocumentation","src":"5598:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:10","nodeType":"FunctionDefinition","parameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"x","nameLocation":"5757:1:10","nodeType":"VariableDeclaration","scope":1910,"src":"5749:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"y","nameLocation":"5776:1:10","nodeType":"VariableDeclaration","scope":1910,"src":"5768:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1873,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:10","nodeType":"VariableDeclaration","scope":1910,"src":"5787:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:10","nodeType":"VariableDeclaration","scope":1910,"src":"5816:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"typeName":{"id":1875,"nodeType":"UserDefinedTypeName","pathNode":{"id":1874,"name":"Rounding","nameLocations":["5816:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1660,"src":"5816:8:10"},"referencedDeclaration":1660,"src":"5816:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:10"},"returnParameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"5863:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:10"},"scope":2518,"src":"5724:337:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2021,"nodeType":"Block","src":"6337:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1918,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"6351:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1924,"nodeType":"IfStatement","src":"6347:45:10","trueBody":{"id":1923,"nodeType":"Block","src":"6359:33:10","statements":[{"expression":{"hexValue":"30","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1917,"id":1922,"nodeType":"Return","src":"6373:8:10"}]}},{"assignments":[1926],"declarations":[{"constant":false,"id":1926,"mutability":"mutable","name":"result","nameLocation":"7079:6:10","nodeType":"VariableDeclaration","scope":2021,"src":"7071:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1935,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1929,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7099:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1928,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2190,2226],"referencedDeclaration":2190,"src":"7094:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1933,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:10"},{"id":2020,"nodeType":"UncheckedBlock","src":"7508:408:10","statements":[{"expression":{"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1936,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7532:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7542:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1939,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7555:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1942,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1946,"nodeType":"ExpressionStatement","src":"7532:35:10"},{"expression":{"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1947,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7581:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1948,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7591:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7600:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7604:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1953,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1957,"nodeType":"ExpressionStatement","src":"7581:35:10"},{"expression":{"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1958,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7630:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1959,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7640:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1960,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7653:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1964,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1968,"nodeType":"ExpressionStatement","src":"7630:35:10"},{"expression":{"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1969,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7679:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7689:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1971,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7698:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1972,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7702:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1979,"nodeType":"ExpressionStatement","src":"7679:35:10"},{"expression":{"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7728:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1981,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7738:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1982,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7747:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1983,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7751:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1986,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1990,"nodeType":"ExpressionStatement","src":"7728:35:10"},{"expression":{"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1992,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7787:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1993,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7796:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1994,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7800:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1997,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2001,"nodeType":"ExpressionStatement","src":"7777:35:10"},{"expression":{"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2002,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7826:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2003,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7836:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2004,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7845:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2005,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2008,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"7826:35:10"},{"expression":{"arguments":[{"id":2014,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7886:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7894:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2016,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"7898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2013,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"7882:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1917,"id":2019,"nodeType":"Return","src":"7875:30:10"}]}]},"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"6067:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2022,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:10","nodeType":"FunctionDefinition","parameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"a","nameLocation":"6302:1:10","nodeType":"VariableDeclaration","scope":2022,"src":"6294:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:10"},"returnParameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2022,"src":"6328:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:10"},"scope":2518,"src":"6280:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2057,"nodeType":"Block","src":"8098:161:10","statements":[{"id":2056,"nodeType":"UncheckedBlock","src":"8108:145:10","statements":[{"assignments":[2034],"declarations":[{"constant":false,"id":2034,"mutability":"mutable","name":"result","nameLocation":"8140:6:10","nodeType":"VariableDeclaration","scope":2056,"src":"8132:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2038,"initialValue":{"arguments":[{"id":2036,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"8154:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2035,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2022,2058],"referencedDeclaration":2022,"src":"8149:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"8177:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2040,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"8187:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2041,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"8199:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1660_$","typeString":"type(enum Math.Rounding)"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1658,"src":"8199:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"src":"8187:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"8214:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"8223:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2047,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"8232:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:10","trueExpression":{"hexValue":"31","id":2050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2053,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2032,"id":2055,"nodeType":"Return","src":"8170:72:10"}]}]},"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"7928:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2058,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:10","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2025,"mutability":"mutable","name":"a","nameLocation":"8044:1:10","nodeType":"VariableDeclaration","scope":2058,"src":"8036:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:10","nodeType":"VariableDeclaration","scope":2058,"src":"8047:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"typeName":{"id":2027,"nodeType":"UserDefinedTypeName","pathNode":{"id":2026,"name":"Rounding","nameLocations":["8047:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1660,"src":"8047:8:10"},"referencedDeclaration":1660,"src":"8047:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:10"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2058,"src":"8089:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:10"},"scope":2518,"src":"8022:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2189,"nodeType":"Block","src":"8444:922:10","statements":[{"assignments":[2067],"declarations":[{"constant":false,"id":2067,"mutability":"mutable","name":"result","nameLocation":"8462:6:10","nodeType":"VariableDeclaration","scope":2189,"src":"8454:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2069,"initialValue":{"hexValue":"30","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:10"},{"id":2186,"nodeType":"UncheckedBlock","src":"8482:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2084,"nodeType":"IfStatement","src":"8506:99:10","trueBody":{"id":2083,"nodeType":"Block","src":"8528:77:10","statements":[{"expression":{"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8546:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2078,"nodeType":"ExpressionStatement","src":"8546:13:10"},{"expression":{"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2079,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"8577:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2082,"nodeType":"ExpressionStatement","src":"8577:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8622:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2099,"nodeType":"IfStatement","src":"8618:96:10","trueBody":{"id":2098,"nodeType":"Block","src":"8639:75:10","statements":[{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8657:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2093,"nodeType":"ExpressionStatement","src":"8657:12:10"},{"expression":{"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"8687:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2097,"nodeType":"ExpressionStatement","src":"8687:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8731:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2114,"nodeType":"IfStatement","src":"8727:96:10","trueBody":{"id":2113,"nodeType":"Block","src":"8748:75:10","statements":[{"expression":{"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8766:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2108,"nodeType":"ExpressionStatement","src":"8766:12:10"},{"expression":{"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2109,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"8796:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2112,"nodeType":"ExpressionStatement","src":"8796:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8840:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2129,"nodeType":"IfStatement","src":"8836:96:10","trueBody":{"id":2128,"nodeType":"Block","src":"8857:75:10","statements":[{"expression":{"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8875:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2123,"nodeType":"ExpressionStatement","src":"8875:12:10"},{"expression":{"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"8905:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2127,"nodeType":"ExpressionStatement","src":"8905:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8949:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2144,"nodeType":"IfStatement","src":"8945:93:10","trueBody":{"id":2143,"nodeType":"Block","src":"8965:73:10","statements":[{"expression":{"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8983:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2138,"nodeType":"ExpressionStatement","src":"8983:11:10"},{"expression":{"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"9012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2142,"nodeType":"ExpressionStatement","src":"9012:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"9055:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2159,"nodeType":"IfStatement","src":"9051:93:10","trueBody":{"id":2158,"nodeType":"Block","src":"9071:73:10","statements":[{"expression":{"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"9089:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2153,"nodeType":"ExpressionStatement","src":"9089:11:10"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2154,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"9118:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"9118:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"9161:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2174,"nodeType":"IfStatement","src":"9157:93:10","trueBody":{"id":2173,"nodeType":"Block","src":"9177:73:10","statements":[{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"9195:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ExpressionStatement","src":"9195:11:10"},{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"9224:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2172,"nodeType":"ExpressionStatement","src":"9224:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"9267:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2185,"nodeType":"IfStatement","src":"9263:64:10","trueBody":{"id":2184,"nodeType":"Block","src":"9283:44:10","statements":[{"expression":{"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"9301:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"nodeType":"ExpressionStatement","src":"9301:11:10"}]}}]},{"expression":{"id":2187,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"9353:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2065,"id":2188,"nodeType":"Return","src":"9346:13:10"}]},"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"8265:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2190,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:10","nodeType":"FunctionDefinition","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"value","nameLocation":"8405:5:10","nodeType":"VariableDeclaration","scope":2190,"src":"8397:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2060,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:10"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2190,"src":"8435:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2063,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:10"},"scope":2518,"src":"8383:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2225,"nodeType":"Block","src":"9599:165:10","statements":[{"id":2224,"nodeType":"UncheckedBlock","src":"9609:149:10","statements":[{"assignments":[2202],"declarations":[{"constant":false,"id":2202,"mutability":"mutable","name":"result","nameLocation":"9641:6:10","nodeType":"VariableDeclaration","scope":2224,"src":"9633:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2201,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2206,"initialValue":{"arguments":[{"id":2204,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"9655:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2203,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2190,2226],"referencedDeclaration":2190,"src":"9650:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"9682:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2208,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"9692:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2209,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"9704:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1660_$","typeString":"type(enum Math.Rounding)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1658,"src":"9704:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"src":"9692:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"9724:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"9733:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:10","trueExpression":{"hexValue":"31","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2221,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2200,"id":2223,"nodeType":"Return","src":"9675:72:10"}]}]},"documentation":{"id":2191,"nodeType":"StructuredDocumentation","src":"9372:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2226,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:10","nodeType":"FunctionDefinition","parameters":{"id":2197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2193,"mutability":"mutable","name":"value","nameLocation":"9541:5:10","nodeType":"VariableDeclaration","scope":2226,"src":"9533:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2196,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:10","nodeType":"VariableDeclaration","scope":2226,"src":"9548:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"typeName":{"id":2195,"nodeType":"UserDefinedTypeName","pathNode":{"id":2194,"name":"Rounding","nameLocations":["9548:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1660,"src":"9548:8:10"},"referencedDeclaration":1660,"src":"9548:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:10"},"returnParameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2226,"src":"9590:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2198,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:10"},"scope":2518,"src":"9519:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2354,"nodeType":"Block","src":"9951:828:10","statements":[{"assignments":[2235],"declarations":[{"constant":false,"id":2235,"mutability":"mutable","name":"result","nameLocation":"9969:6:10","nodeType":"VariableDeclaration","scope":2354,"src":"9961:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2234,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2237,"initialValue":{"hexValue":"30","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:10"},{"id":2351,"nodeType":"UncheckedBlock","src":"9989:761:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10017:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2254,"nodeType":"IfStatement","src":"10013:99:10","trueBody":{"id":2253,"nodeType":"Block","src":"10034:78:10","statements":[{"expression":{"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2248,"nodeType":"ExpressionStatement","src":"10052:15:10"},{"expression":{"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2249,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10085:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2252,"nodeType":"ExpressionStatement","src":"10085:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10129:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2271,"nodeType":"IfStatement","src":"10125:99:10","trueBody":{"id":2270,"nodeType":"Block","src":"10146:78:10","statements":[{"expression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10164:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2265,"nodeType":"ExpressionStatement","src":"10164:15:10"},{"expression":{"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10197:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2269,"nodeType":"ExpressionStatement","src":"10197:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10241:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2288,"nodeType":"IfStatement","src":"10237:99:10","trueBody":{"id":2287,"nodeType":"Block","src":"10258:78:10","statements":[{"expression":{"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2277,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10276:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2282,"nodeType":"ExpressionStatement","src":"10276:15:10"},{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2286,"nodeType":"ExpressionStatement","src":"10309:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10353:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2305,"nodeType":"IfStatement","src":"10349:96:10","trueBody":{"id":2304,"nodeType":"Block","src":"10369:76:10","statements":[{"expression":{"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2299,"nodeType":"ExpressionStatement","src":"10387:14:10"},{"expression":{"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2300,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10419:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2303,"nodeType":"ExpressionStatement","src":"10419:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10462:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2322,"nodeType":"IfStatement","src":"10458:96:10","trueBody":{"id":2321,"nodeType":"Block","src":"10478:76:10","statements":[{"expression":{"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2311,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10496:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2316,"nodeType":"ExpressionStatement","src":"10496:14:10"},{"expression":{"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10528:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2320,"nodeType":"ExpressionStatement","src":"10528:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10571:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2339,"nodeType":"IfStatement","src":"10567:96:10","trueBody":{"id":2338,"nodeType":"Block","src":"10587:76:10","statements":[{"expression":{"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10605:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2333,"nodeType":"ExpressionStatement","src":"10605:14:10"},{"expression":{"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2334,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10637:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2337,"nodeType":"ExpressionStatement","src":"10637:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10680:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2350,"nodeType":"IfStatement","src":"10676:64:10","trueBody":{"id":2349,"nodeType":"Block","src":"10696:44:10","statements":[{"expression":{"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10714:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2348,"nodeType":"ExpressionStatement","src":"10714:11:10"}]}}]},{"expression":{"id":2352,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"10766:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2233,"id":2353,"nodeType":"Return","src":"10759:13:10"}]},"documentation":{"id":2227,"nodeType":"StructuredDocumentation","src":"9770:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2355,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:10","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"value","nameLocation":"9912:5:10","nodeType":"VariableDeclaration","scope":2355,"src":"9904:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2228,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:10"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2355,"src":"9942:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:10"},"scope":2518,"src":"9889:890:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2390,"nodeType":"Block","src":"11014:165:10","statements":[{"id":2389,"nodeType":"UncheckedBlock","src":"11024:149:10","statements":[{"assignments":[2367],"declarations":[{"constant":false,"id":2367,"mutability":"mutable","name":"result","nameLocation":"11056:6:10","nodeType":"VariableDeclaration","scope":2389,"src":"11048:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2366,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2371,"initialValue":{"arguments":[{"id":2369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11071:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2368,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2355,2391],"referencedDeclaration":2355,"src":"11065:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"11098:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"11108:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2374,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"11120:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1660_$","typeString":"type(enum Math.Rounding)"}},"id":2375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1658,"src":"11120:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"src":"11108:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"11139:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11148:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:10","trueExpression":{"hexValue":"31","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2365,"id":2388,"nodeType":"Return","src":"11091:71:10"}]}]},"documentation":{"id":2356,"nodeType":"StructuredDocumentation","src":"10785:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2391,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:10","nodeType":"FunctionDefinition","parameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"value","nameLocation":"10956:5:10","nodeType":"VariableDeclaration","scope":2391,"src":"10948:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2361,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:10","nodeType":"VariableDeclaration","scope":2391,"src":"10963:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"typeName":{"id":2360,"nodeType":"UserDefinedTypeName","pathNode":{"id":2359,"name":"Rounding","nameLocations":["10963:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1660,"src":"10963:8:10"},"referencedDeclaration":1660,"src":"10963:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:10"},"returnParameters":{"id":2365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2391,"src":"11005:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:10"},"scope":2518,"src":"10933:246:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2477,"nodeType":"Block","src":"11493:600:10","statements":[{"assignments":[2400],"declarations":[{"constant":false,"id":2400,"mutability":"mutable","name":"result","nameLocation":"11511:6:10","nodeType":"VariableDeclaration","scope":2477,"src":"11503:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2399,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2402,"initialValue":{"hexValue":"30","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:10"},{"id":2474,"nodeType":"UncheckedBlock","src":"11531:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11559:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2417,"nodeType":"IfStatement","src":"11555:98:10","trueBody":{"id":2416,"nodeType":"Block","src":"11577:76:10","statements":[{"expression":{"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2411,"nodeType":"ExpressionStatement","src":"11595:13:10"},{"expression":{"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"11626:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2415,"nodeType":"ExpressionStatement","src":"11626:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11670:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2432,"nodeType":"IfStatement","src":"11666:95:10","trueBody":{"id":2431,"nodeType":"Block","src":"11687:74:10","statements":[{"expression":{"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11705:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"11705:12:10"},{"expression":{"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2427,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"11735:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2430,"nodeType":"ExpressionStatement","src":"11735:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11778:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2447,"nodeType":"IfStatement","src":"11774:95:10","trueBody":{"id":2446,"nodeType":"Block","src":"11795:74:10","statements":[{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11813:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ExpressionStatement","src":"11813:12:10"},{"expression":{"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2442,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"11843:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2445,"nodeType":"ExpressionStatement","src":"11843:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11886:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2462,"nodeType":"IfStatement","src":"11882:95:10","trueBody":{"id":2461,"nodeType":"Block","src":"11903:74:10","statements":[{"expression":{"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2456,"nodeType":"ExpressionStatement","src":"11921:12:10"},{"expression":{"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"11951:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2460,"nodeType":"ExpressionStatement","src":"11951:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2473,"nodeType":"IfStatement","src":"11990:64:10","trueBody":{"id":2472,"nodeType":"Block","src":"12010:44:10","statements":[{"expression":{"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"12028:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2471,"nodeType":"ExpressionStatement","src":"12028:11:10"}]}}]},{"expression":{"id":2475,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"12080:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2398,"id":2476,"nodeType":"Return","src":"12073:13:10"}]},"documentation":{"id":2392,"nodeType":"StructuredDocumentation","src":"11185:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2478,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:10","nodeType":"FunctionDefinition","parameters":{"id":2395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"value","nameLocation":"11454:5:10","nodeType":"VariableDeclaration","scope":2478,"src":"11446:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2393,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:10"},"returnParameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2478,"src":"11484:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:10"},"scope":2518,"src":"11430:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2516,"nodeType":"Block","src":"12329:173:10","statements":[{"id":2515,"nodeType":"UncheckedBlock","src":"12339:157:10","statements":[{"assignments":[2490],"declarations":[{"constant":false,"id":2490,"mutability":"mutable","name":"result","nameLocation":"12371:6:10","nodeType":"VariableDeclaration","scope":2515,"src":"12363:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2494,"initialValue":{"arguments":[{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"12387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2491,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2478,2517],"referencedDeclaration":2478,"src":"12380:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2496,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"12424:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2497,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"12436:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1660_$","typeString":"type(enum Math.Rounding)"}},"id":2498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1658,"src":"12436:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"src":"12424:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"12457:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2504,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"12471:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:10","trueExpression":{"hexValue":"31","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2512,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2488,"id":2514,"nodeType":"Return","src":"12407:78:10"}]}]},"documentation":{"id":2479,"nodeType":"StructuredDocumentation","src":"12099:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2517,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:10","nodeType":"FunctionDefinition","parameters":{"id":2485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"value","nameLocation":"12271:5:10","nodeType":"VariableDeclaration","scope":2517,"src":"12263:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2484,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:10","nodeType":"VariableDeclaration","scope":2517,"src":"12278:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"},"typeName":{"id":2483,"nodeType":"UserDefinedTypeName","pathNode":{"id":2482,"name":"Rounding","nameLocations":["12278:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1660,"src":"12278:8:10"},"referencedDeclaration":1660,"src":"12278:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1660","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:10"},"returnParameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2517,"src":"12320:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2486,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:10"},"scope":2518,"src":"12247:255:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2519,"src":"202:12302:10","usedErrors":[],"usedEvents":[]}],"src":"103:12402:10"},"id":10},"contracts/riddles/Attacker2.sol":{"ast":{"absolutePath":"contracts/riddles/Attacker2.sol","exportedSymbols":{"Address":[1420],"Attacker2":[2560],"Context":[1442],"ERC165":[1641],"ERC721":[929],"IERC165":[1653],"IERC721":[1045],"IERC721Metadata":[1090],"IERC721Receiver":[1063],"Math":[2518],"Overmint1":[2627],"Strings":[1617]},"id":2561,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2520,"literals":["solidity","^","0.8",".27"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721Receiver.sol","file":"@openzeppelin/contracts/interfaces/IERC721Receiver.sol","id":2522,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2561,"sourceUnit":3,"src":"58:87:11","symbolAliases":[{"foreign":{"id":2521,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"66:15:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":2524,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2561,"sourceUnit":1046,"src":"146:73:11","symbolAliases":[{"foreign":{"id":2523,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"154:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/riddles/Overmint1.sol","file":"./Overmint1.sol","id":2525,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2561,"sourceUnit":2628,"src":"220:25:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Attacker2","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2560,"linearizedBaseContracts":[2560],"name":"Attacker2","nameLocation":"256:9:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"144166ae","id":2528,"mutability":"mutable","name":"vulnerableContract","nameLocation":"289:18:11","nodeType":"VariableDeclaration","scope":2560,"src":"272:35:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"},"typeName":{"id":2527,"nodeType":"UserDefinedTypeName","pathNode":{"id":2526,"name":"Overmint1","nameLocations":["272:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":2627,"src":"272:9:11"},"referencedDeclaration":2627,"src":"272:9:11","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"visibility":"public"},{"body":{"id":2539,"nodeType":"Block","src":"355:68:11","statements":[{"expression":{"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2533,"name":"vulnerableContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"365:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2535,"name":"vulnerableContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"396:19:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2534,"name":"Overmint1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"386:9:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Overmint1_$2627_$","typeString":"type(contract Overmint1)"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"386:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"src":"365:51:11","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"id":2538,"nodeType":"ExpressionStatement","src":"365:51:11"}]},"id":2540,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2530,"mutability":"mutable","name":"vulnerableContract_","nameLocation":"334:19:11","nodeType":"VariableDeclaration","scope":2540,"src":"326:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2529,"name":"address","nodeType":"ElementaryTypeName","src":"326:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"325:29:11"},"returnParameters":{"id":2532,"nodeType":"ParameterList","parameters":[],"src":"355:0:11"},"scope":2560,"src":"314:109:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2558,"nodeType":"Block","src":"455:112:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2543,"name":"vulnerableContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"465:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"484:4:11","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2612,"src":"465:23:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"465:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2547,"nodeType":"ExpressionStatement","src":"465:25:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2548,"name":"vulnerableContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"500:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"519:4:11","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2612,"src":"500:23:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"500:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2552,"nodeType":"ExpressionStatement","src":"500:25:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2553,"name":"vulnerableContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"535:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_Overmint1_$2627","typeString":"contract Overmint1"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"554:4:11","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2612,"src":"535:23:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"535:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2557,"nodeType":"ExpressionStatement","src":"535:25:11"}]},"functionSelector":"9e5faafc","id":2559,"implemented":true,"kind":"function","modifiers":[],"name":"attack","nameLocation":"437:6:11","nodeType":"FunctionDefinition","parameters":{"id":2541,"nodeType":"ParameterList","parameters":[],"src":"443:2:11"},"returnParameters":{"id":2542,"nodeType":"ParameterList","parameters":[],"src":"455:0:11"},"scope":2560,"src":"428:139:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2561,"src":"247:322:11","usedErrors":[],"usedEvents":[]}],"src":"32:538:11"},"id":11},"contracts/riddles/Overmint1.sol":{"ast":{"absolutePath":"contracts/riddles/Overmint1.sol","exportedSymbols":{"Address":[1420],"Context":[1442],"ERC165":[1641],"ERC721":[929],"IERC165":[1653],"IERC721":[1045],"IERC721Metadata":[1090],"IERC721Receiver":[1063],"Math":[2518],"Overmint1":[2627],"Strings":[1617]},"id":2628,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":2562,"literals":["solidity","^","0.8",".27"],"nodeType":"PragmaDirective","src":"36:24:12"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2563,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2628,"sourceUnit":1421,"src":"61:51:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2628,"sourceUnit":930,"src":"113:57:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2565,"name":"ERC721","nameLocations":["194:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":929,"src":"194:6:12"},"id":2566,"nodeType":"InheritanceSpecifier","src":"194:6:12"}],"canonicalName":"Overmint1","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2627,"linearizedBaseContracts":[2627,929,1090,1045,1641,1653,1442],"name":"Overmint1","nameLocation":"181:9:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2569,"libraryName":{"id":2567,"name":"Address","nameLocations":["213:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"213:7:12"},"nodeType":"UsingForDirective","src":"207:26:12","typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"225:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"functionSelector":"438a67e7","id":2573,"mutability":"mutable","name":"amountMinted","nameLocation":"273:12:12","nodeType":"VariableDeclaration","scope":2627,"src":"238:47:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2572,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2570,"name":"address","nodeType":"ElementaryTypeName","src":"246:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"238:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2571,"name":"uint256","nodeType":"ElementaryTypeName","src":"257:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"18160ddd","id":2575,"mutability":"mutable","name":"totalSupply","nameLocation":"306:11:12","nodeType":"VariableDeclaration","scope":2627,"src":"291:26:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"291:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":2582,"nodeType":"Block","src":"364:2:12","statements":[]},"id":2583,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4f7665726d696e7431","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"345:11:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_916737047b97d7ae691be7bf3e528c1a2ce8c2e97dd6a54973f8b7e8a285f37f","typeString":"literal_string \"Overmint1\""},"value":"Overmint1"},{"hexValue":"4154","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"358:4:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8c99d5e49aa4886aab7e746e6ccf40ef835d5be3e9d13a082471f2568edaf5d7","typeString":"literal_string \"AT\""},"value":"AT"}],"id":2580,"kind":"baseConstructorSpecifier","modifierName":{"id":2577,"name":"ERC721","nameLocations":["338:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":929,"src":"338:6:12"},"nodeType":"ModifierInvocation","src":"338:25:12"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2576,"nodeType":"ParameterList","parameters":[],"src":"335:2:12"},"returnParameters":{"id":2581,"nodeType":"ParameterList","parameters":[],"src":"364:0:12"},"scope":2627,"src":"324:42:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2611,"nodeType":"Block","src":"397:172:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2587,"name":"amountMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"415:12:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2590,"indexExpression":{"expression":{"id":2588,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"428:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"432:6:12","memberName":"sender","nodeType":"MemberAccess","src":"428:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"415:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"33","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"415:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6d61782033204e465473","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"446:12:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d","typeString":"literal_string \"max 3 NFTs\""},"value":"max 3 NFTs"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d","typeString":"literal_string \"max 3 NFTs\""}],"id":2586,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"407:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"407:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2595,"nodeType":"ExpressionStatement","src":"407:52:12"},{"expression":{"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"469:13:12","subExpression":{"id":2596,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"469:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2598,"nodeType":"ExpressionStatement","src":"469:13:12"},{"expression":{"arguments":[{"expression":{"id":2600,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"502:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"506:6:12","memberName":"sender","nodeType":"MemberAccess","src":"502:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2602,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"514:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2599,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[497,526],"referencedDeclaration":497,"src":"492:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2604,"nodeType":"ExpressionStatement","src":"492:34:12"},{"expression":{"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"536:26:12","subExpression":{"baseExpression":{"id":2605,"name":"amountMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"536:12:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2608,"indexExpression":{"expression":{"id":2606,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"549:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"553:6:12","memberName":"sender","nodeType":"MemberAccess","src":"549:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"536:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2610,"nodeType":"ExpressionStatement","src":"536:26:12"}]},"functionSelector":"1249c58b","id":2612,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"381:4:12","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[],"src":"385:2:12"},"returnParameters":{"id":2585,"nodeType":"ParameterList","parameters":[],"src":"397:0:12"},"scope":2627,"src":"372:197:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2625,"nodeType":"Block","src":"640:49:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2620,"name":"_attacker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"667:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2619,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"657:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"657:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"681:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"657:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2618,"id":2624,"nodeType":"Return","src":"650:32:12"}]},"functionSelector":"26e4baae","id":2626,"implemented":true,"kind":"function","modifiers":[],"name":"success","nameLocation":"584:7:12","nodeType":"FunctionDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"_attacker","nameLocation":"600:9:12","nodeType":"VariableDeclaration","scope":2626,"src":"592:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2613,"name":"address","nodeType":"ElementaryTypeName","src":"592:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"591:19:12"},"returnParameters":{"id":2618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2626,"src":"634:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2616,"name":"bool","nodeType":"ElementaryTypeName","src":"634:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"633:6:12"},"scope":2627,"src":"575:114:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2628,"src":"172:519:12","usedErrors":[],"usedEvents":[944,953,962]}],"src":"36:656:12"},"id":12}},"contracts":{"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_65":{"entryPoint":null,"id":65,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":350,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":416,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":462,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":232,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":89,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":259,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":689,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":582,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":986,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":821,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":951,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":841,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1127,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":308,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":710,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":640,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1099,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":183,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":831,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1069,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":593,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":136,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":875,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":104,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":119,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":726,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1056,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":927,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":739,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":885,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":922,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:8576:13","nodeType":"YulBlock","src":"0:8576:13","statements":[{"body":{"nativeSrc":"47:35:13","nodeType":"YulBlock","src":"47:35:13","statements":[{"nativeSrc":"57:19:13","nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:13","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:13","nodeType":"YulIdentifier","src":"67:5:13"},"nativeSrc":"67:9:13","nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:13","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:13","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:13","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nativeSrc":"177:28:13","nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:13","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:13","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:13","nodeType":"YulIdentifier","src":"187:6:13"},"nativeSrc":"187:12:13","nodeType":"YulFunctionCall","src":"187:12:13"},"nativeSrc":"187:12:13","nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:13","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nativeSrc":"300:28:13","nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:13","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:13","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:13","nodeType":"YulIdentifier","src":"310:6:13"},"nativeSrc":"310:12:13","nodeType":"YulFunctionCall","src":"310:12:13"},"nativeSrc":"310:12:13","nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:13","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nativeSrc":"423:28:13","nodeType":"YulBlock","src":"423:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"440:1:13","nodeType":"YulLiteral","src":"440:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"443:1:13","nodeType":"YulLiteral","src":"443:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"433:6:13","nodeType":"YulIdentifier","src":"433:6:13"},"nativeSrc":"433:12:13","nodeType":"YulFunctionCall","src":"433:12:13"},"nativeSrc":"433:12:13","nodeType":"YulExpressionStatement","src":"433:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"334:117:13","nodeType":"YulFunctionDefinition","src":"334:117:13"},{"body":{"nativeSrc":"546:28:13","nodeType":"YulBlock","src":"546:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"563:1:13","nodeType":"YulLiteral","src":"563:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"566:1:13","nodeType":"YulLiteral","src":"566:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"556:6:13","nodeType":"YulIdentifier","src":"556:6:13"},"nativeSrc":"556:12:13","nodeType":"YulFunctionCall","src":"556:12:13"},"nativeSrc":"556:12:13","nodeType":"YulExpressionStatement","src":"556:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"457:117:13","nodeType":"YulFunctionDefinition","src":"457:117:13"},{"body":{"nativeSrc":"628:54:13","nodeType":"YulBlock","src":"628:54:13","statements":[{"nativeSrc":"638:38:13","nodeType":"YulAssignment","src":"638:38:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"656:5:13","nodeType":"YulIdentifier","src":"656:5:13"},{"kind":"number","nativeSrc":"663:2:13","nodeType":"YulLiteral","src":"663:2:13","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"652:3:13","nodeType":"YulIdentifier","src":"652:3:13"},"nativeSrc":"652:14:13","nodeType":"YulFunctionCall","src":"652:14:13"},{"arguments":[{"kind":"number","nativeSrc":"672:2:13","nodeType":"YulLiteral","src":"672:2:13","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"668:3:13","nodeType":"YulIdentifier","src":"668:3:13"},"nativeSrc":"668:7:13","nodeType":"YulFunctionCall","src":"668:7:13"}],"functionName":{"name":"and","nativeSrc":"648:3:13","nodeType":"YulIdentifier","src":"648:3:13"},"nativeSrc":"648:28:13","nodeType":"YulFunctionCall","src":"648:28:13"},"variableNames":[{"name":"result","nativeSrc":"638:6:13","nodeType":"YulIdentifier","src":"638:6:13"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"580:102:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"611:5:13","nodeType":"YulTypedName","src":"611:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"621:6:13","nodeType":"YulTypedName","src":"621:6:13","type":""}],"src":"580:102:13"},{"body":{"nativeSrc":"716:152:13","nodeType":"YulBlock","src":"716:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"733:1:13","nodeType":"YulLiteral","src":"733:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"736:77:13","nodeType":"YulLiteral","src":"736:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"726:6:13","nodeType":"YulIdentifier","src":"726:6:13"},"nativeSrc":"726:88:13","nodeType":"YulFunctionCall","src":"726:88:13"},"nativeSrc":"726:88:13","nodeType":"YulExpressionStatement","src":"726:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"830:1:13","nodeType":"YulLiteral","src":"830:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"833:4:13","nodeType":"YulLiteral","src":"833:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"823:6:13","nodeType":"YulIdentifier","src":"823:6:13"},"nativeSrc":"823:15:13","nodeType":"YulFunctionCall","src":"823:15:13"},"nativeSrc":"823:15:13","nodeType":"YulExpressionStatement","src":"823:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"854:1:13","nodeType":"YulLiteral","src":"854:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"857:4:13","nodeType":"YulLiteral","src":"857:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"847:6:13","nodeType":"YulIdentifier","src":"847:6:13"},"nativeSrc":"847:15:13","nodeType":"YulFunctionCall","src":"847:15:13"},"nativeSrc":"847:15:13","nodeType":"YulExpressionStatement","src":"847:15:13"}]},"name":"panic_error_0x41","nativeSrc":"688:180:13","nodeType":"YulFunctionDefinition","src":"688:180:13"},{"body":{"nativeSrc":"917:238:13","nodeType":"YulBlock","src":"917:238:13","statements":[{"nativeSrc":"927:58:13","nodeType":"YulVariableDeclaration","src":"927:58:13","value":{"arguments":[{"name":"memPtr","nativeSrc":"949:6:13","nodeType":"YulIdentifier","src":"949:6:13"},{"arguments":[{"name":"size","nativeSrc":"979:4:13","nodeType":"YulIdentifier","src":"979:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"957:21:13","nodeType":"YulIdentifier","src":"957:21:13"},"nativeSrc":"957:27:13","nodeType":"YulFunctionCall","src":"957:27:13"}],"functionName":{"name":"add","nativeSrc":"945:3:13","nodeType":"YulIdentifier","src":"945:3:13"},"nativeSrc":"945:40:13","nodeType":"YulFunctionCall","src":"945:40:13"},"variables":[{"name":"newFreePtr","nativeSrc":"931:10:13","nodeType":"YulTypedName","src":"931:10:13","type":""}]},{"body":{"nativeSrc":"1096:22:13","nodeType":"YulBlock","src":"1096:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1098:16:13","nodeType":"YulIdentifier","src":"1098:16:13"},"nativeSrc":"1098:18:13","nodeType":"YulFunctionCall","src":"1098:18:13"},"nativeSrc":"1098:18:13","nodeType":"YulExpressionStatement","src":"1098:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1039:10:13","nodeType":"YulIdentifier","src":"1039:10:13"},{"kind":"number","nativeSrc":"1051:18:13","nodeType":"YulLiteral","src":"1051:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1036:2:13","nodeType":"YulIdentifier","src":"1036:2:13"},"nativeSrc":"1036:34:13","nodeType":"YulFunctionCall","src":"1036:34:13"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1075:10:13","nodeType":"YulIdentifier","src":"1075:10:13"},{"name":"memPtr","nativeSrc":"1087:6:13","nodeType":"YulIdentifier","src":"1087:6:13"}],"functionName":{"name":"lt","nativeSrc":"1072:2:13","nodeType":"YulIdentifier","src":"1072:2:13"},"nativeSrc":"1072:22:13","nodeType":"YulFunctionCall","src":"1072:22:13"}],"functionName":{"name":"or","nativeSrc":"1033:2:13","nodeType":"YulIdentifier","src":"1033:2:13"},"nativeSrc":"1033:62:13","nodeType":"YulFunctionCall","src":"1033:62:13"},"nativeSrc":"1030:88:13","nodeType":"YulIf","src":"1030:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1134:2:13","nodeType":"YulLiteral","src":"1134:2:13","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1138:10:13","nodeType":"YulIdentifier","src":"1138:10:13"}],"functionName":{"name":"mstore","nativeSrc":"1127:6:13","nodeType":"YulIdentifier","src":"1127:6:13"},"nativeSrc":"1127:22:13","nodeType":"YulFunctionCall","src":"1127:22:13"},"nativeSrc":"1127:22:13","nodeType":"YulExpressionStatement","src":"1127:22:13"}]},"name":"finalize_allocation","nativeSrc":"874:281:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"903:6:13","nodeType":"YulTypedName","src":"903:6:13","type":""},{"name":"size","nativeSrc":"911:4:13","nodeType":"YulTypedName","src":"911:4:13","type":""}],"src":"874:281:13"},{"body":{"nativeSrc":"1202:88:13","nodeType":"YulBlock","src":"1202:88:13","statements":[{"nativeSrc":"1212:30:13","nodeType":"YulAssignment","src":"1212:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1222:18:13","nodeType":"YulIdentifier","src":"1222:18:13"},"nativeSrc":"1222:20:13","nodeType":"YulFunctionCall","src":"1222:20:13"},"variableNames":[{"name":"memPtr","nativeSrc":"1212:6:13","nodeType":"YulIdentifier","src":"1212:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1271:6:13","nodeType":"YulIdentifier","src":"1271:6:13"},{"name":"size","nativeSrc":"1279:4:13","nodeType":"YulIdentifier","src":"1279:4:13"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1251:19:13","nodeType":"YulIdentifier","src":"1251:19:13"},"nativeSrc":"1251:33:13","nodeType":"YulFunctionCall","src":"1251:33:13"},"nativeSrc":"1251:33:13","nodeType":"YulExpressionStatement","src":"1251:33:13"}]},"name":"allocate_memory","nativeSrc":"1161:129:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1186:4:13","nodeType":"YulTypedName","src":"1186:4:13","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1195:6:13","nodeType":"YulTypedName","src":"1195:6:13","type":""}],"src":"1161:129:13"},{"body":{"nativeSrc":"1363:241:13","nodeType":"YulBlock","src":"1363:241:13","statements":[{"body":{"nativeSrc":"1468:22:13","nodeType":"YulBlock","src":"1468:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1470:16:13","nodeType":"YulIdentifier","src":"1470:16:13"},"nativeSrc":"1470:18:13","nodeType":"YulFunctionCall","src":"1470:18:13"},"nativeSrc":"1470:18:13","nodeType":"YulExpressionStatement","src":"1470:18:13"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1440:6:13","nodeType":"YulIdentifier","src":"1440:6:13"},{"kind":"number","nativeSrc":"1448:18:13","nodeType":"YulLiteral","src":"1448:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1437:2:13","nodeType":"YulIdentifier","src":"1437:2:13"},"nativeSrc":"1437:30:13","nodeType":"YulFunctionCall","src":"1437:30:13"},"nativeSrc":"1434:56:13","nodeType":"YulIf","src":"1434:56:13"},{"nativeSrc":"1500:37:13","nodeType":"YulAssignment","src":"1500:37:13","value":{"arguments":[{"name":"length","nativeSrc":"1530:6:13","nodeType":"YulIdentifier","src":"1530:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1508:21:13","nodeType":"YulIdentifier","src":"1508:21:13"},"nativeSrc":"1508:29:13","nodeType":"YulFunctionCall","src":"1508:29:13"},"variableNames":[{"name":"size","nativeSrc":"1500:4:13","nodeType":"YulIdentifier","src":"1500:4:13"}]},{"nativeSrc":"1574:23:13","nodeType":"YulAssignment","src":"1574:23:13","value":{"arguments":[{"name":"size","nativeSrc":"1586:4:13","nodeType":"YulIdentifier","src":"1586:4:13"},{"kind":"number","nativeSrc":"1592:4:13","nodeType":"YulLiteral","src":"1592:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1582:3:13","nodeType":"YulIdentifier","src":"1582:3:13"},"nativeSrc":"1582:15:13","nodeType":"YulFunctionCall","src":"1582:15:13"},"variableNames":[{"name":"size","nativeSrc":"1574:4:13","nodeType":"YulIdentifier","src":"1574:4:13"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1296:308:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1347:6:13","nodeType":"YulTypedName","src":"1347:6:13","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1358:4:13","nodeType":"YulTypedName","src":"1358:4:13","type":""}],"src":"1296:308:13"},{"body":{"nativeSrc":"1672:186:13","nodeType":"YulBlock","src":"1672:186:13","statements":[{"nativeSrc":"1683:10:13","nodeType":"YulVariableDeclaration","src":"1683:10:13","value":{"kind":"number","nativeSrc":"1692:1:13","nodeType":"YulLiteral","src":"1692:1:13","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1687:1:13","nodeType":"YulTypedName","src":"1687:1:13","type":""}]},{"body":{"nativeSrc":"1752:63:13","nodeType":"YulBlock","src":"1752:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1777:3:13","nodeType":"YulIdentifier","src":"1777:3:13"},{"name":"i","nativeSrc":"1782:1:13","nodeType":"YulIdentifier","src":"1782:1:13"}],"functionName":{"name":"add","nativeSrc":"1773:3:13","nodeType":"YulIdentifier","src":"1773:3:13"},"nativeSrc":"1773:11:13","nodeType":"YulFunctionCall","src":"1773:11:13"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1796:3:13","nodeType":"YulIdentifier","src":"1796:3:13"},{"name":"i","nativeSrc":"1801:1:13","nodeType":"YulIdentifier","src":"1801:1:13"}],"functionName":{"name":"add","nativeSrc":"1792:3:13","nodeType":"YulIdentifier","src":"1792:3:13"},"nativeSrc":"1792:11:13","nodeType":"YulFunctionCall","src":"1792:11:13"}],"functionName":{"name":"mload","nativeSrc":"1786:5:13","nodeType":"YulIdentifier","src":"1786:5:13"},"nativeSrc":"1786:18:13","nodeType":"YulFunctionCall","src":"1786:18:13"}],"functionName":{"name":"mstore","nativeSrc":"1766:6:13","nodeType":"YulIdentifier","src":"1766:6:13"},"nativeSrc":"1766:39:13","nodeType":"YulFunctionCall","src":"1766:39:13"},"nativeSrc":"1766:39:13","nodeType":"YulExpressionStatement","src":"1766:39:13"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1713:1:13","nodeType":"YulIdentifier","src":"1713:1:13"},{"name":"length","nativeSrc":"1716:6:13","nodeType":"YulIdentifier","src":"1716:6:13"}],"functionName":{"name":"lt","nativeSrc":"1710:2:13","nodeType":"YulIdentifier","src":"1710:2:13"},"nativeSrc":"1710:13:13","nodeType":"YulFunctionCall","src":"1710:13:13"},"nativeSrc":"1702:113:13","nodeType":"YulForLoop","post":{"nativeSrc":"1724:19:13","nodeType":"YulBlock","src":"1724:19:13","statements":[{"nativeSrc":"1726:15:13","nodeType":"YulAssignment","src":"1726:15:13","value":{"arguments":[{"name":"i","nativeSrc":"1735:1:13","nodeType":"YulIdentifier","src":"1735:1:13"},{"kind":"number","nativeSrc":"1738:2:13","nodeType":"YulLiteral","src":"1738:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1731:3:13","nodeType":"YulIdentifier","src":"1731:3:13"},"nativeSrc":"1731:10:13","nodeType":"YulFunctionCall","src":"1731:10:13"},"variableNames":[{"name":"i","nativeSrc":"1726:1:13","nodeType":"YulIdentifier","src":"1726:1:13"}]}]},"pre":{"nativeSrc":"1706:3:13","nodeType":"YulBlock","src":"1706:3:13","statements":[]},"src":"1702:113:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1835:3:13","nodeType":"YulIdentifier","src":"1835:3:13"},{"name":"length","nativeSrc":"1840:6:13","nodeType":"YulIdentifier","src":"1840:6:13"}],"functionName":{"name":"add","nativeSrc":"1831:3:13","nodeType":"YulIdentifier","src":"1831:3:13"},"nativeSrc":"1831:16:13","nodeType":"YulFunctionCall","src":"1831:16:13"},{"kind":"number","nativeSrc":"1849:1:13","nodeType":"YulLiteral","src":"1849:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1824:6:13","nodeType":"YulIdentifier","src":"1824:6:13"},"nativeSrc":"1824:27:13","nodeType":"YulFunctionCall","src":"1824:27:13"},"nativeSrc":"1824:27:13","nodeType":"YulExpressionStatement","src":"1824:27:13"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1610:248:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1654:3:13","nodeType":"YulTypedName","src":"1654:3:13","type":""},{"name":"dst","nativeSrc":"1659:3:13","nodeType":"YulTypedName","src":"1659:3:13","type":""},{"name":"length","nativeSrc":"1664:6:13","nodeType":"YulTypedName","src":"1664:6:13","type":""}],"src":"1610:248:13"},{"body":{"nativeSrc":"1959:339:13","nodeType":"YulBlock","src":"1959:339:13","statements":[{"nativeSrc":"1969:75:13","nodeType":"YulAssignment","src":"1969:75:13","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2036:6:13","nodeType":"YulIdentifier","src":"2036:6:13"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1994:41:13","nodeType":"YulIdentifier","src":"1994:41:13"},"nativeSrc":"1994:49:13","nodeType":"YulFunctionCall","src":"1994:49:13"}],"functionName":{"name":"allocate_memory","nativeSrc":"1978:15:13","nodeType":"YulIdentifier","src":"1978:15:13"},"nativeSrc":"1978:66:13","nodeType":"YulFunctionCall","src":"1978:66:13"},"variableNames":[{"name":"array","nativeSrc":"1969:5:13","nodeType":"YulIdentifier","src":"1969:5:13"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2060:5:13","nodeType":"YulIdentifier","src":"2060:5:13"},{"name":"length","nativeSrc":"2067:6:13","nodeType":"YulIdentifier","src":"2067:6:13"}],"functionName":{"name":"mstore","nativeSrc":"2053:6:13","nodeType":"YulIdentifier","src":"2053:6:13"},"nativeSrc":"2053:21:13","nodeType":"YulFunctionCall","src":"2053:21:13"},"nativeSrc":"2053:21:13","nodeType":"YulExpressionStatement","src":"2053:21:13"},{"nativeSrc":"2083:27:13","nodeType":"YulVariableDeclaration","src":"2083:27:13","value":{"arguments":[{"name":"array","nativeSrc":"2098:5:13","nodeType":"YulIdentifier","src":"2098:5:13"},{"kind":"number","nativeSrc":"2105:4:13","nodeType":"YulLiteral","src":"2105:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2094:3:13","nodeType":"YulIdentifier","src":"2094:3:13"},"nativeSrc":"2094:16:13","nodeType":"YulFunctionCall","src":"2094:16:13"},"variables":[{"name":"dst","nativeSrc":"2087:3:13","nodeType":"YulTypedName","src":"2087:3:13","type":""}]},{"body":{"nativeSrc":"2148:83:13","nodeType":"YulBlock","src":"2148:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"2150:77:13","nodeType":"YulIdentifier","src":"2150:77:13"},"nativeSrc":"2150:79:13","nodeType":"YulFunctionCall","src":"2150:79:13"},"nativeSrc":"2150:79:13","nodeType":"YulExpressionStatement","src":"2150:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2129:3:13","nodeType":"YulIdentifier","src":"2129:3:13"},{"name":"length","nativeSrc":"2134:6:13","nodeType":"YulIdentifier","src":"2134:6:13"}],"functionName":{"name":"add","nativeSrc":"2125:3:13","nodeType":"YulIdentifier","src":"2125:3:13"},"nativeSrc":"2125:16:13","nodeType":"YulFunctionCall","src":"2125:16:13"},{"name":"end","nativeSrc":"2143:3:13","nodeType":"YulIdentifier","src":"2143:3:13"}],"functionName":{"name":"gt","nativeSrc":"2122:2:13","nodeType":"YulIdentifier","src":"2122:2:13"},"nativeSrc":"2122:25:13","nodeType":"YulFunctionCall","src":"2122:25:13"},"nativeSrc":"2119:112:13","nodeType":"YulIf","src":"2119:112:13"},{"expression":{"arguments":[{"name":"src","nativeSrc":"2275:3:13","nodeType":"YulIdentifier","src":"2275:3:13"},{"name":"dst","nativeSrc":"2280:3:13","nodeType":"YulIdentifier","src":"2280:3:13"},{"name":"length","nativeSrc":"2285:6:13","nodeType":"YulIdentifier","src":"2285:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2240:34:13","nodeType":"YulIdentifier","src":"2240:34:13"},"nativeSrc":"2240:52:13","nodeType":"YulFunctionCall","src":"2240:52:13"},"nativeSrc":"2240:52:13","nodeType":"YulExpressionStatement","src":"2240:52:13"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"1864:434:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1932:3:13","nodeType":"YulTypedName","src":"1932:3:13","type":""},{"name":"length","nativeSrc":"1937:6:13","nodeType":"YulTypedName","src":"1937:6:13","type":""},{"name":"end","nativeSrc":"1945:3:13","nodeType":"YulTypedName","src":"1945:3:13","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1953:5:13","nodeType":"YulTypedName","src":"1953:5:13","type":""}],"src":"1864:434:13"},{"body":{"nativeSrc":"2391:282:13","nodeType":"YulBlock","src":"2391:282:13","statements":[{"body":{"nativeSrc":"2440:83:13","nodeType":"YulBlock","src":"2440:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2442:77:13","nodeType":"YulIdentifier","src":"2442:77:13"},"nativeSrc":"2442:79:13","nodeType":"YulFunctionCall","src":"2442:79:13"},"nativeSrc":"2442:79:13","nodeType":"YulExpressionStatement","src":"2442:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2419:6:13","nodeType":"YulIdentifier","src":"2419:6:13"},{"kind":"number","nativeSrc":"2427:4:13","nodeType":"YulLiteral","src":"2427:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2415:3:13","nodeType":"YulIdentifier","src":"2415:3:13"},"nativeSrc":"2415:17:13","nodeType":"YulFunctionCall","src":"2415:17:13"},{"name":"end","nativeSrc":"2434:3:13","nodeType":"YulIdentifier","src":"2434:3:13"}],"functionName":{"name":"slt","nativeSrc":"2411:3:13","nodeType":"YulIdentifier","src":"2411:3:13"},"nativeSrc":"2411:27:13","nodeType":"YulFunctionCall","src":"2411:27:13"}],"functionName":{"name":"iszero","nativeSrc":"2404:6:13","nodeType":"YulIdentifier","src":"2404:6:13"},"nativeSrc":"2404:35:13","nodeType":"YulFunctionCall","src":"2404:35:13"},"nativeSrc":"2401:122:13","nodeType":"YulIf","src":"2401:122:13"},{"nativeSrc":"2532:27:13","nodeType":"YulVariableDeclaration","src":"2532:27:13","value":{"arguments":[{"name":"offset","nativeSrc":"2552:6:13","nodeType":"YulIdentifier","src":"2552:6:13"}],"functionName":{"name":"mload","nativeSrc":"2546:5:13","nodeType":"YulIdentifier","src":"2546:5:13"},"nativeSrc":"2546:13:13","nodeType":"YulFunctionCall","src":"2546:13:13"},"variables":[{"name":"length","nativeSrc":"2536:6:13","nodeType":"YulTypedName","src":"2536:6:13","type":""}]},{"nativeSrc":"2568:99:13","nodeType":"YulAssignment","src":"2568:99:13","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2640:6:13","nodeType":"YulIdentifier","src":"2640:6:13"},{"kind":"number","nativeSrc":"2648:4:13","nodeType":"YulLiteral","src":"2648:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2636:3:13","nodeType":"YulIdentifier","src":"2636:3:13"},"nativeSrc":"2636:17:13","nodeType":"YulFunctionCall","src":"2636:17:13"},{"name":"length","nativeSrc":"2655:6:13","nodeType":"YulIdentifier","src":"2655:6:13"},{"name":"end","nativeSrc":"2663:3:13","nodeType":"YulIdentifier","src":"2663:3:13"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"2577:58:13","nodeType":"YulIdentifier","src":"2577:58:13"},"nativeSrc":"2577:90:13","nodeType":"YulFunctionCall","src":"2577:90:13"},"variableNames":[{"name":"array","nativeSrc":"2568:5:13","nodeType":"YulIdentifier","src":"2568:5:13"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"2318:355:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2369:6:13","nodeType":"YulTypedName","src":"2369:6:13","type":""},{"name":"end","nativeSrc":"2377:3:13","nodeType":"YulTypedName","src":"2377:3:13","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2385:5:13","nodeType":"YulTypedName","src":"2385:5:13","type":""}],"src":"2318:355:13"},{"body":{"nativeSrc":"2793:739:13","nodeType":"YulBlock","src":"2793:739:13","statements":[{"body":{"nativeSrc":"2839:83:13","nodeType":"YulBlock","src":"2839:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"2841:77:13","nodeType":"YulIdentifier","src":"2841:77:13"},"nativeSrc":"2841:79:13","nodeType":"YulFunctionCall","src":"2841:79:13"},"nativeSrc":"2841:79:13","nodeType":"YulExpressionStatement","src":"2841:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2814:7:13","nodeType":"YulIdentifier","src":"2814:7:13"},{"name":"headStart","nativeSrc":"2823:9:13","nodeType":"YulIdentifier","src":"2823:9:13"}],"functionName":{"name":"sub","nativeSrc":"2810:3:13","nodeType":"YulIdentifier","src":"2810:3:13"},"nativeSrc":"2810:23:13","nodeType":"YulFunctionCall","src":"2810:23:13"},{"kind":"number","nativeSrc":"2835:2:13","nodeType":"YulLiteral","src":"2835:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2806:3:13","nodeType":"YulIdentifier","src":"2806:3:13"},"nativeSrc":"2806:32:13","nodeType":"YulFunctionCall","src":"2806:32:13"},"nativeSrc":"2803:119:13","nodeType":"YulIf","src":"2803:119:13"},{"nativeSrc":"2932:291:13","nodeType":"YulBlock","src":"2932:291:13","statements":[{"nativeSrc":"2947:38:13","nodeType":"YulVariableDeclaration","src":"2947:38:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2971:9:13","nodeType":"YulIdentifier","src":"2971:9:13"},{"kind":"number","nativeSrc":"2982:1:13","nodeType":"YulLiteral","src":"2982:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2967:3:13","nodeType":"YulIdentifier","src":"2967:3:13"},"nativeSrc":"2967:17:13","nodeType":"YulFunctionCall","src":"2967:17:13"}],"functionName":{"name":"mload","nativeSrc":"2961:5:13","nodeType":"YulIdentifier","src":"2961:5:13"},"nativeSrc":"2961:24:13","nodeType":"YulFunctionCall","src":"2961:24:13"},"variables":[{"name":"offset","nativeSrc":"2951:6:13","nodeType":"YulTypedName","src":"2951:6:13","type":""}]},{"body":{"nativeSrc":"3032:83:13","nodeType":"YulBlock","src":"3032:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3034:77:13","nodeType":"YulIdentifier","src":"3034:77:13"},"nativeSrc":"3034:79:13","nodeType":"YulFunctionCall","src":"3034:79:13"},"nativeSrc":"3034:79:13","nodeType":"YulExpressionStatement","src":"3034:79:13"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3004:6:13","nodeType":"YulIdentifier","src":"3004:6:13"},{"kind":"number","nativeSrc":"3012:18:13","nodeType":"YulLiteral","src":"3012:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3001:2:13","nodeType":"YulIdentifier","src":"3001:2:13"},"nativeSrc":"3001:30:13","nodeType":"YulFunctionCall","src":"3001:30:13"},"nativeSrc":"2998:117:13","nodeType":"YulIf","src":"2998:117:13"},{"nativeSrc":"3129:84:13","nodeType":"YulAssignment","src":"3129:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3185:9:13","nodeType":"YulIdentifier","src":"3185:9:13"},{"name":"offset","nativeSrc":"3196:6:13","nodeType":"YulIdentifier","src":"3196:6:13"}],"functionName":{"name":"add","nativeSrc":"3181:3:13","nodeType":"YulIdentifier","src":"3181:3:13"},"nativeSrc":"3181:22:13","nodeType":"YulFunctionCall","src":"3181:22:13"},{"name":"dataEnd","nativeSrc":"3205:7:13","nodeType":"YulIdentifier","src":"3205:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3139:41:13","nodeType":"YulIdentifier","src":"3139:41:13"},"nativeSrc":"3139:74:13","nodeType":"YulFunctionCall","src":"3139:74:13"},"variableNames":[{"name":"value0","nativeSrc":"3129:6:13","nodeType":"YulIdentifier","src":"3129:6:13"}]}]},{"nativeSrc":"3233:292:13","nodeType":"YulBlock","src":"3233:292:13","statements":[{"nativeSrc":"3248:39:13","nodeType":"YulVariableDeclaration","src":"3248:39:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3272:9:13","nodeType":"YulIdentifier","src":"3272:9:13"},{"kind":"number","nativeSrc":"3283:2:13","nodeType":"YulLiteral","src":"3283:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3268:3:13","nodeType":"YulIdentifier","src":"3268:3:13"},"nativeSrc":"3268:18:13","nodeType":"YulFunctionCall","src":"3268:18:13"}],"functionName":{"name":"mload","nativeSrc":"3262:5:13","nodeType":"YulIdentifier","src":"3262:5:13"},"nativeSrc":"3262:25:13","nodeType":"YulFunctionCall","src":"3262:25:13"},"variables":[{"name":"offset","nativeSrc":"3252:6:13","nodeType":"YulTypedName","src":"3252:6:13","type":""}]},{"body":{"nativeSrc":"3334:83:13","nodeType":"YulBlock","src":"3334:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3336:77:13","nodeType":"YulIdentifier","src":"3336:77:13"},"nativeSrc":"3336:79:13","nodeType":"YulFunctionCall","src":"3336:79:13"},"nativeSrc":"3336:79:13","nodeType":"YulExpressionStatement","src":"3336:79:13"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3306:6:13","nodeType":"YulIdentifier","src":"3306:6:13"},{"kind":"number","nativeSrc":"3314:18:13","nodeType":"YulLiteral","src":"3314:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3303:2:13","nodeType":"YulIdentifier","src":"3303:2:13"},"nativeSrc":"3303:30:13","nodeType":"YulFunctionCall","src":"3303:30:13"},"nativeSrc":"3300:117:13","nodeType":"YulIf","src":"3300:117:13"},{"nativeSrc":"3431:84:13","nodeType":"YulAssignment","src":"3431:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3487:9:13","nodeType":"YulIdentifier","src":"3487:9:13"},{"name":"offset","nativeSrc":"3498:6:13","nodeType":"YulIdentifier","src":"3498:6:13"}],"functionName":{"name":"add","nativeSrc":"3483:3:13","nodeType":"YulIdentifier","src":"3483:3:13"},"nativeSrc":"3483:22:13","nodeType":"YulFunctionCall","src":"3483:22:13"},{"name":"dataEnd","nativeSrc":"3507:7:13","nodeType":"YulIdentifier","src":"3507:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3441:41:13","nodeType":"YulIdentifier","src":"3441:41:13"},"nativeSrc":"3441:74:13","nodeType":"YulFunctionCall","src":"3441:74:13"},"variableNames":[{"name":"value1","nativeSrc":"3431:6:13","nodeType":"YulIdentifier","src":"3431:6:13"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nativeSrc":"2679:853:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2755:9:13","nodeType":"YulTypedName","src":"2755:9:13","type":""},{"name":"dataEnd","nativeSrc":"2766:7:13","nodeType":"YulTypedName","src":"2766:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2778:6:13","nodeType":"YulTypedName","src":"2778:6:13","type":""},{"name":"value1","nativeSrc":"2786:6:13","nodeType":"YulTypedName","src":"2786:6:13","type":""}],"src":"2679:853:13"},{"body":{"nativeSrc":"3597:40:13","nodeType":"YulBlock","src":"3597:40:13","statements":[{"nativeSrc":"3608:22:13","nodeType":"YulAssignment","src":"3608:22:13","value":{"arguments":[{"name":"value","nativeSrc":"3624:5:13","nodeType":"YulIdentifier","src":"3624:5:13"}],"functionName":{"name":"mload","nativeSrc":"3618:5:13","nodeType":"YulIdentifier","src":"3618:5:13"},"nativeSrc":"3618:12:13","nodeType":"YulFunctionCall","src":"3618:12:13"},"variableNames":[{"name":"length","nativeSrc":"3608:6:13","nodeType":"YulIdentifier","src":"3608:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"3538:99:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:13","nodeType":"YulTypedName","src":"3580:5:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"3590:6:13","nodeType":"YulTypedName","src":"3590:6:13","type":""}],"src":"3538:99:13"},{"body":{"nativeSrc":"3671:152:13","nodeType":"YulBlock","src":"3671:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3688:1:13","nodeType":"YulLiteral","src":"3688:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"3691:77:13","nodeType":"YulLiteral","src":"3691:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3681:6:13","nodeType":"YulIdentifier","src":"3681:6:13"},"nativeSrc":"3681:88:13","nodeType":"YulFunctionCall","src":"3681:88:13"},"nativeSrc":"3681:88:13","nodeType":"YulExpressionStatement","src":"3681:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3785:1:13","nodeType":"YulLiteral","src":"3785:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"3788:4:13","nodeType":"YulLiteral","src":"3788:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"3778:6:13","nodeType":"YulIdentifier","src":"3778:6:13"},"nativeSrc":"3778:15:13","nodeType":"YulFunctionCall","src":"3778:15:13"},"nativeSrc":"3778:15:13","nodeType":"YulExpressionStatement","src":"3778:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3809:1:13","nodeType":"YulLiteral","src":"3809:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"3812:4:13","nodeType":"YulLiteral","src":"3812:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3802:6:13","nodeType":"YulIdentifier","src":"3802:6:13"},"nativeSrc":"3802:15:13","nodeType":"YulFunctionCall","src":"3802:15:13"},"nativeSrc":"3802:15:13","nodeType":"YulExpressionStatement","src":"3802:15:13"}]},"name":"panic_error_0x22","nativeSrc":"3643:180:13","nodeType":"YulFunctionDefinition","src":"3643:180:13"},{"body":{"nativeSrc":"3880:269:13","nodeType":"YulBlock","src":"3880:269:13","statements":[{"nativeSrc":"3890:22:13","nodeType":"YulAssignment","src":"3890:22:13","value":{"arguments":[{"name":"data","nativeSrc":"3904:4:13","nodeType":"YulIdentifier","src":"3904:4:13"},{"kind":"number","nativeSrc":"3910:1:13","nodeType":"YulLiteral","src":"3910:1:13","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"3900:3:13","nodeType":"YulIdentifier","src":"3900:3:13"},"nativeSrc":"3900:12:13","nodeType":"YulFunctionCall","src":"3900:12:13"},"variableNames":[{"name":"length","nativeSrc":"3890:6:13","nodeType":"YulIdentifier","src":"3890:6:13"}]},{"nativeSrc":"3921:38:13","nodeType":"YulVariableDeclaration","src":"3921:38:13","value":{"arguments":[{"name":"data","nativeSrc":"3951:4:13","nodeType":"YulIdentifier","src":"3951:4:13"},{"kind":"number","nativeSrc":"3957:1:13","nodeType":"YulLiteral","src":"3957:1:13","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"3947:3:13","nodeType":"YulIdentifier","src":"3947:3:13"},"nativeSrc":"3947:12:13","nodeType":"YulFunctionCall","src":"3947:12:13"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"3925:18:13","nodeType":"YulTypedName","src":"3925:18:13","type":""}]},{"body":{"nativeSrc":"3998:51:13","nodeType":"YulBlock","src":"3998:51:13","statements":[{"nativeSrc":"4012:27:13","nodeType":"YulAssignment","src":"4012:27:13","value":{"arguments":[{"name":"length","nativeSrc":"4026:6:13","nodeType":"YulIdentifier","src":"4026:6:13"},{"kind":"number","nativeSrc":"4034:4:13","nodeType":"YulLiteral","src":"4034:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"4022:3:13","nodeType":"YulIdentifier","src":"4022:3:13"},"nativeSrc":"4022:17:13","nodeType":"YulFunctionCall","src":"4022:17:13"},"variableNames":[{"name":"length","nativeSrc":"4012:6:13","nodeType":"YulIdentifier","src":"4012:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"3978:18:13","nodeType":"YulIdentifier","src":"3978:18:13"}],"functionName":{"name":"iszero","nativeSrc":"3971:6:13","nodeType":"YulIdentifier","src":"3971:6:13"},"nativeSrc":"3971:26:13","nodeType":"YulFunctionCall","src":"3971:26:13"},"nativeSrc":"3968:81:13","nodeType":"YulIf","src":"3968:81:13"},{"body":{"nativeSrc":"4101:42:13","nodeType":"YulBlock","src":"4101:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"4115:16:13","nodeType":"YulIdentifier","src":"4115:16:13"},"nativeSrc":"4115:18:13","nodeType":"YulFunctionCall","src":"4115:18:13"},"nativeSrc":"4115:18:13","nodeType":"YulExpressionStatement","src":"4115:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"4065:18:13","nodeType":"YulIdentifier","src":"4065:18:13"},{"arguments":[{"name":"length","nativeSrc":"4088:6:13","nodeType":"YulIdentifier","src":"4088:6:13"},{"kind":"number","nativeSrc":"4096:2:13","nodeType":"YulLiteral","src":"4096:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"4085:2:13","nodeType":"YulIdentifier","src":"4085:2:13"},"nativeSrc":"4085:14:13","nodeType":"YulFunctionCall","src":"4085:14:13"}],"functionName":{"name":"eq","nativeSrc":"4062:2:13","nodeType":"YulIdentifier","src":"4062:2:13"},"nativeSrc":"4062:38:13","nodeType":"YulFunctionCall","src":"4062:38:13"},"nativeSrc":"4059:84:13","nodeType":"YulIf","src":"4059:84:13"}]},"name":"extract_byte_array_length","nativeSrc":"3829:320:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3864:4:13","nodeType":"YulTypedName","src":"3864:4:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"3873:6:13","nodeType":"YulTypedName","src":"3873:6:13","type":""}],"src":"3829:320:13"},{"body":{"nativeSrc":"4209:87:13","nodeType":"YulBlock","src":"4209:87:13","statements":[{"nativeSrc":"4219:11:13","nodeType":"YulAssignment","src":"4219:11:13","value":{"name":"ptr","nativeSrc":"4227:3:13","nodeType":"YulIdentifier","src":"4227:3:13"},"variableNames":[{"name":"data","nativeSrc":"4219:4:13","nodeType":"YulIdentifier","src":"4219:4:13"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4247:1:13","nodeType":"YulLiteral","src":"4247:1:13","type":"","value":"0"},{"name":"ptr","nativeSrc":"4250:3:13","nodeType":"YulIdentifier","src":"4250:3:13"}],"functionName":{"name":"mstore","nativeSrc":"4240:6:13","nodeType":"YulIdentifier","src":"4240:6:13"},"nativeSrc":"4240:14:13","nodeType":"YulFunctionCall","src":"4240:14:13"},"nativeSrc":"4240:14:13","nodeType":"YulExpressionStatement","src":"4240:14:13"},{"nativeSrc":"4263:26:13","nodeType":"YulAssignment","src":"4263:26:13","value":{"arguments":[{"kind":"number","nativeSrc":"4281:1:13","nodeType":"YulLiteral","src":"4281:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"4284:4:13","nodeType":"YulLiteral","src":"4284:4:13","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"4271:9:13","nodeType":"YulIdentifier","src":"4271:9:13"},"nativeSrc":"4271:18:13","nodeType":"YulFunctionCall","src":"4271:18:13"},"variableNames":[{"name":"data","nativeSrc":"4263:4:13","nodeType":"YulIdentifier","src":"4263:4:13"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"4155:141:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"4196:3:13","nodeType":"YulTypedName","src":"4196:3:13","type":""}],"returnVariables":[{"name":"data","nativeSrc":"4204:4:13","nodeType":"YulTypedName","src":"4204:4:13","type":""}],"src":"4155:141:13"},{"body":{"nativeSrc":"4346:49:13","nodeType":"YulBlock","src":"4346:49:13","statements":[{"nativeSrc":"4356:33:13","nodeType":"YulAssignment","src":"4356:33:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4374:5:13","nodeType":"YulIdentifier","src":"4374:5:13"},{"kind":"number","nativeSrc":"4381:2:13","nodeType":"YulLiteral","src":"4381:2:13","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"4370:3:13","nodeType":"YulIdentifier","src":"4370:3:13"},"nativeSrc":"4370:14:13","nodeType":"YulFunctionCall","src":"4370:14:13"},{"kind":"number","nativeSrc":"4386:2:13","nodeType":"YulLiteral","src":"4386:2:13","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"4366:3:13","nodeType":"YulIdentifier","src":"4366:3:13"},"nativeSrc":"4366:23:13","nodeType":"YulFunctionCall","src":"4366:23:13"},"variableNames":[{"name":"result","nativeSrc":"4356:6:13","nodeType":"YulIdentifier","src":"4356:6:13"}]}]},"name":"divide_by_32_ceil","nativeSrc":"4302:93:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4329:5:13","nodeType":"YulTypedName","src":"4329:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4339:6:13","nodeType":"YulTypedName","src":"4339:6:13","type":""}],"src":"4302:93:13"},{"body":{"nativeSrc":"4454:54:13","nodeType":"YulBlock","src":"4454:54:13","statements":[{"nativeSrc":"4464:37:13","nodeType":"YulAssignment","src":"4464:37:13","value":{"arguments":[{"name":"bits","nativeSrc":"4489:4:13","nodeType":"YulIdentifier","src":"4489:4:13"},{"name":"value","nativeSrc":"4495:5:13","nodeType":"YulIdentifier","src":"4495:5:13"}],"functionName":{"name":"shl","nativeSrc":"4485:3:13","nodeType":"YulIdentifier","src":"4485:3:13"},"nativeSrc":"4485:16:13","nodeType":"YulFunctionCall","src":"4485:16:13"},"variableNames":[{"name":"newValue","nativeSrc":"4464:8:13","nodeType":"YulIdentifier","src":"4464:8:13"}]}]},"name":"shift_left_dynamic","nativeSrc":"4401:107:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"4429:4:13","nodeType":"YulTypedName","src":"4429:4:13","type":""},{"name":"value","nativeSrc":"4435:5:13","nodeType":"YulTypedName","src":"4435:5:13","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"4445:8:13","nodeType":"YulTypedName","src":"4445:8:13","type":""}],"src":"4401:107:13"},{"body":{"nativeSrc":"4590:317:13","nodeType":"YulBlock","src":"4590:317:13","statements":[{"nativeSrc":"4600:35:13","nodeType":"YulVariableDeclaration","src":"4600:35:13","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"4621:10:13","nodeType":"YulIdentifier","src":"4621:10:13"},{"kind":"number","nativeSrc":"4633:1:13","nodeType":"YulLiteral","src":"4633:1:13","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"4617:3:13","nodeType":"YulIdentifier","src":"4617:3:13"},"nativeSrc":"4617:18:13","nodeType":"YulFunctionCall","src":"4617:18:13"},"variables":[{"name":"shiftBits","nativeSrc":"4604:9:13","nodeType":"YulTypedName","src":"4604:9:13","type":""}]},{"nativeSrc":"4644:109:13","nodeType":"YulVariableDeclaration","src":"4644:109:13","value":{"arguments":[{"name":"shiftBits","nativeSrc":"4675:9:13","nodeType":"YulIdentifier","src":"4675:9:13"},{"kind":"number","nativeSrc":"4686:66:13","nodeType":"YulLiteral","src":"4686:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"4656:18:13","nodeType":"YulIdentifier","src":"4656:18:13"},"nativeSrc":"4656:97:13","nodeType":"YulFunctionCall","src":"4656:97:13"},"variables":[{"name":"mask","nativeSrc":"4648:4:13","nodeType":"YulTypedName","src":"4648:4:13","type":""}]},{"nativeSrc":"4762:51:13","nodeType":"YulAssignment","src":"4762:51:13","value":{"arguments":[{"name":"shiftBits","nativeSrc":"4793:9:13","nodeType":"YulIdentifier","src":"4793:9:13"},{"name":"toInsert","nativeSrc":"4804:8:13","nodeType":"YulIdentifier","src":"4804:8:13"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"4774:18:13","nodeType":"YulIdentifier","src":"4774:18:13"},"nativeSrc":"4774:39:13","nodeType":"YulFunctionCall","src":"4774:39:13"},"variableNames":[{"name":"toInsert","nativeSrc":"4762:8:13","nodeType":"YulIdentifier","src":"4762:8:13"}]},{"nativeSrc":"4822:30:13","nodeType":"YulAssignment","src":"4822:30:13","value":{"arguments":[{"name":"value","nativeSrc":"4835:5:13","nodeType":"YulIdentifier","src":"4835:5:13"},{"arguments":[{"name":"mask","nativeSrc":"4846:4:13","nodeType":"YulIdentifier","src":"4846:4:13"}],"functionName":{"name":"not","nativeSrc":"4842:3:13","nodeType":"YulIdentifier","src":"4842:3:13"},"nativeSrc":"4842:9:13","nodeType":"YulFunctionCall","src":"4842:9:13"}],"functionName":{"name":"and","nativeSrc":"4831:3:13","nodeType":"YulIdentifier","src":"4831:3:13"},"nativeSrc":"4831:21:13","nodeType":"YulFunctionCall","src":"4831:21:13"},"variableNames":[{"name":"value","nativeSrc":"4822:5:13","nodeType":"YulIdentifier","src":"4822:5:13"}]},{"nativeSrc":"4861:40:13","nodeType":"YulAssignment","src":"4861:40:13","value":{"arguments":[{"name":"value","nativeSrc":"4874:5:13","nodeType":"YulIdentifier","src":"4874:5:13"},{"arguments":[{"name":"toInsert","nativeSrc":"4885:8:13","nodeType":"YulIdentifier","src":"4885:8:13"},{"name":"mask","nativeSrc":"4895:4:13","nodeType":"YulIdentifier","src":"4895:4:13"}],"functionName":{"name":"and","nativeSrc":"4881:3:13","nodeType":"YulIdentifier","src":"4881:3:13"},"nativeSrc":"4881:19:13","nodeType":"YulFunctionCall","src":"4881:19:13"}],"functionName":{"name":"or","nativeSrc":"4871:2:13","nodeType":"YulIdentifier","src":"4871:2:13"},"nativeSrc":"4871:30:13","nodeType":"YulFunctionCall","src":"4871:30:13"},"variableNames":[{"name":"result","nativeSrc":"4861:6:13","nodeType":"YulIdentifier","src":"4861:6:13"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"4514:393:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4551:5:13","nodeType":"YulTypedName","src":"4551:5:13","type":""},{"name":"shiftBytes","nativeSrc":"4558:10:13","nodeType":"YulTypedName","src":"4558:10:13","type":""},{"name":"toInsert","nativeSrc":"4570:8:13","nodeType":"YulTypedName","src":"4570:8:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4583:6:13","nodeType":"YulTypedName","src":"4583:6:13","type":""}],"src":"4514:393:13"},{"body":{"nativeSrc":"4958:32:13","nodeType":"YulBlock","src":"4958:32:13","statements":[{"nativeSrc":"4968:16:13","nodeType":"YulAssignment","src":"4968:16:13","value":{"name":"value","nativeSrc":"4979:5:13","nodeType":"YulIdentifier","src":"4979:5:13"},"variableNames":[{"name":"cleaned","nativeSrc":"4968:7:13","nodeType":"YulIdentifier","src":"4968:7:13"}]}]},"name":"cleanup_t_uint256","nativeSrc":"4913:77:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4940:5:13","nodeType":"YulTypedName","src":"4940:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4950:7:13","nodeType":"YulTypedName","src":"4950:7:13","type":""}],"src":"4913:77:13"},{"body":{"nativeSrc":"5028:28:13","nodeType":"YulBlock","src":"5028:28:13","statements":[{"nativeSrc":"5038:12:13","nodeType":"YulAssignment","src":"5038:12:13","value":{"name":"value","nativeSrc":"5045:5:13","nodeType":"YulIdentifier","src":"5045:5:13"},"variableNames":[{"name":"ret","nativeSrc":"5038:3:13","nodeType":"YulIdentifier","src":"5038:3:13"}]}]},"name":"identity","nativeSrc":"4996:60:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5014:5:13","nodeType":"YulTypedName","src":"5014:5:13","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5024:3:13","nodeType":"YulTypedName","src":"5024:3:13","type":""}],"src":"4996:60:13"},{"body":{"nativeSrc":"5122:82:13","nodeType":"YulBlock","src":"5122:82:13","statements":[{"nativeSrc":"5132:66:13","nodeType":"YulAssignment","src":"5132:66:13","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5190:5:13","nodeType":"YulIdentifier","src":"5190:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5172:17:13","nodeType":"YulIdentifier","src":"5172:17:13"},"nativeSrc":"5172:24:13","nodeType":"YulFunctionCall","src":"5172:24:13"}],"functionName":{"name":"identity","nativeSrc":"5163:8:13","nodeType":"YulIdentifier","src":"5163:8:13"},"nativeSrc":"5163:34:13","nodeType":"YulFunctionCall","src":"5163:34:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5145:17:13","nodeType":"YulIdentifier","src":"5145:17:13"},"nativeSrc":"5145:53:13","nodeType":"YulFunctionCall","src":"5145:53:13"},"variableNames":[{"name":"converted","nativeSrc":"5132:9:13","nodeType":"YulIdentifier","src":"5132:9:13"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"5062:142:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5102:5:13","nodeType":"YulTypedName","src":"5102:5:13","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"5112:9:13","nodeType":"YulTypedName","src":"5112:9:13","type":""}],"src":"5062:142:13"},{"body":{"nativeSrc":"5257:28:13","nodeType":"YulBlock","src":"5257:28:13","statements":[{"nativeSrc":"5267:12:13","nodeType":"YulAssignment","src":"5267:12:13","value":{"name":"value","nativeSrc":"5274:5:13","nodeType":"YulIdentifier","src":"5274:5:13"},"variableNames":[{"name":"ret","nativeSrc":"5267:3:13","nodeType":"YulIdentifier","src":"5267:3:13"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"5210:75:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5243:5:13","nodeType":"YulTypedName","src":"5243:5:13","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5253:3:13","nodeType":"YulTypedName","src":"5253:3:13","type":""}],"src":"5210:75:13"},{"body":{"nativeSrc":"5367:193:13","nodeType":"YulBlock","src":"5367:193:13","statements":[{"nativeSrc":"5377:63:13","nodeType":"YulVariableDeclaration","src":"5377:63:13","value":{"arguments":[{"name":"value_0","nativeSrc":"5432:7:13","nodeType":"YulIdentifier","src":"5432:7:13"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"5401:30:13","nodeType":"YulIdentifier","src":"5401:30:13"},"nativeSrc":"5401:39:13","nodeType":"YulFunctionCall","src":"5401:39:13"},"variables":[{"name":"convertedValue_0","nativeSrc":"5381:16:13","nodeType":"YulTypedName","src":"5381:16:13","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5456:4:13","nodeType":"YulIdentifier","src":"5456:4:13"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"5496:4:13","nodeType":"YulIdentifier","src":"5496:4:13"}],"functionName":{"name":"sload","nativeSrc":"5490:5:13","nodeType":"YulIdentifier","src":"5490:5:13"},"nativeSrc":"5490:11:13","nodeType":"YulFunctionCall","src":"5490:11:13"},{"name":"offset","nativeSrc":"5503:6:13","nodeType":"YulIdentifier","src":"5503:6:13"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"5535:16:13","nodeType":"YulIdentifier","src":"5535:16:13"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"5511:23:13","nodeType":"YulIdentifier","src":"5511:23:13"},"nativeSrc":"5511:41:13","nodeType":"YulFunctionCall","src":"5511:41:13"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"5462:27:13","nodeType":"YulIdentifier","src":"5462:27:13"},"nativeSrc":"5462:91:13","nodeType":"YulFunctionCall","src":"5462:91:13"}],"functionName":{"name":"sstore","nativeSrc":"5449:6:13","nodeType":"YulIdentifier","src":"5449:6:13"},"nativeSrc":"5449:105:13","nodeType":"YulFunctionCall","src":"5449:105:13"},"nativeSrc":"5449:105:13","nodeType":"YulExpressionStatement","src":"5449:105:13"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"5291:269:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5344:4:13","nodeType":"YulTypedName","src":"5344:4:13","type":""},{"name":"offset","nativeSrc":"5350:6:13","nodeType":"YulTypedName","src":"5350:6:13","type":""},{"name":"value_0","nativeSrc":"5358:7:13","nodeType":"YulTypedName","src":"5358:7:13","type":""}],"src":"5291:269:13"},{"body":{"nativeSrc":"5615:24:13","nodeType":"YulBlock","src":"5615:24:13","statements":[{"nativeSrc":"5625:8:13","nodeType":"YulAssignment","src":"5625:8:13","value":{"kind":"number","nativeSrc":"5632:1:13","nodeType":"YulLiteral","src":"5632:1:13","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"5625:3:13","nodeType":"YulIdentifier","src":"5625:3:13"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"5566:73:13","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"5611:3:13","nodeType":"YulTypedName","src":"5611:3:13","type":""}],"src":"5566:73:13"},{"body":{"nativeSrc":"5698:136:13","nodeType":"YulBlock","src":"5698:136:13","statements":[{"nativeSrc":"5708:46:13","nodeType":"YulVariableDeclaration","src":"5708:46:13","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"5722:30:13","nodeType":"YulIdentifier","src":"5722:30:13"},"nativeSrc":"5722:32:13","nodeType":"YulFunctionCall","src":"5722:32:13"},"variables":[{"name":"zero_0","nativeSrc":"5712:6:13","nodeType":"YulTypedName","src":"5712:6:13","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5807:4:13","nodeType":"YulIdentifier","src":"5807:4:13"},{"name":"offset","nativeSrc":"5813:6:13","nodeType":"YulIdentifier","src":"5813:6:13"},{"name":"zero_0","nativeSrc":"5821:6:13","nodeType":"YulIdentifier","src":"5821:6:13"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"5763:43:13","nodeType":"YulIdentifier","src":"5763:43:13"},"nativeSrc":"5763:65:13","nodeType":"YulFunctionCall","src":"5763:65:13"},"nativeSrc":"5763:65:13","nodeType":"YulExpressionStatement","src":"5763:65:13"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"5645:189:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5684:4:13","nodeType":"YulTypedName","src":"5684:4:13","type":""},{"name":"offset","nativeSrc":"5690:6:13","nodeType":"YulTypedName","src":"5690:6:13","type":""}],"src":"5645:189:13"},{"body":{"nativeSrc":"5890:136:13","nodeType":"YulBlock","src":"5890:136:13","statements":[{"body":{"nativeSrc":"5957:63:13","nodeType":"YulBlock","src":"5957:63:13","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"6001:5:13","nodeType":"YulIdentifier","src":"6001:5:13"},{"kind":"number","nativeSrc":"6008:1:13","nodeType":"YulLiteral","src":"6008:1:13","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"5971:29:13","nodeType":"YulIdentifier","src":"5971:29:13"},"nativeSrc":"5971:39:13","nodeType":"YulFunctionCall","src":"5971:39:13"},"nativeSrc":"5971:39:13","nodeType":"YulExpressionStatement","src":"5971:39:13"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"5910:5:13","nodeType":"YulIdentifier","src":"5910:5:13"},{"name":"end","nativeSrc":"5917:3:13","nodeType":"YulIdentifier","src":"5917:3:13"}],"functionName":{"name":"lt","nativeSrc":"5907:2:13","nodeType":"YulIdentifier","src":"5907:2:13"},"nativeSrc":"5907:14:13","nodeType":"YulFunctionCall","src":"5907:14:13"},"nativeSrc":"5900:120:13","nodeType":"YulForLoop","post":{"nativeSrc":"5922:26:13","nodeType":"YulBlock","src":"5922:26:13","statements":[{"nativeSrc":"5924:22:13","nodeType":"YulAssignment","src":"5924:22:13","value":{"arguments":[{"name":"start","nativeSrc":"5937:5:13","nodeType":"YulIdentifier","src":"5937:5:13"},{"kind":"number","nativeSrc":"5944:1:13","nodeType":"YulLiteral","src":"5944:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5933:3:13","nodeType":"YulIdentifier","src":"5933:3:13"},"nativeSrc":"5933:13:13","nodeType":"YulFunctionCall","src":"5933:13:13"},"variableNames":[{"name":"start","nativeSrc":"5924:5:13","nodeType":"YulIdentifier","src":"5924:5:13"}]}]},"pre":{"nativeSrc":"5904:2:13","nodeType":"YulBlock","src":"5904:2:13","statements":[]},"src":"5900:120:13"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"5840:186:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"5878:5:13","nodeType":"YulTypedName","src":"5878:5:13","type":""},{"name":"end","nativeSrc":"5885:3:13","nodeType":"YulTypedName","src":"5885:3:13","type":""}],"src":"5840:186:13"},{"body":{"nativeSrc":"6111:464:13","nodeType":"YulBlock","src":"6111:464:13","statements":[{"body":{"nativeSrc":"6137:431:13","nodeType":"YulBlock","src":"6137:431:13","statements":[{"nativeSrc":"6151:54:13","nodeType":"YulVariableDeclaration","src":"6151:54:13","value":{"arguments":[{"name":"array","nativeSrc":"6199:5:13","nodeType":"YulIdentifier","src":"6199:5:13"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"6167:31:13","nodeType":"YulIdentifier","src":"6167:31:13"},"nativeSrc":"6167:38:13","nodeType":"YulFunctionCall","src":"6167:38:13"},"variables":[{"name":"dataArea","nativeSrc":"6155:8:13","nodeType":"YulTypedName","src":"6155:8:13","type":""}]},{"nativeSrc":"6218:63:13","nodeType":"YulVariableDeclaration","src":"6218:63:13","value":{"arguments":[{"name":"dataArea","nativeSrc":"6241:8:13","nodeType":"YulIdentifier","src":"6241:8:13"},{"arguments":[{"name":"startIndex","nativeSrc":"6269:10:13","nodeType":"YulIdentifier","src":"6269:10:13"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"6251:17:13","nodeType":"YulIdentifier","src":"6251:17:13"},"nativeSrc":"6251:29:13","nodeType":"YulFunctionCall","src":"6251:29:13"}],"functionName":{"name":"add","nativeSrc":"6237:3:13","nodeType":"YulIdentifier","src":"6237:3:13"},"nativeSrc":"6237:44:13","nodeType":"YulFunctionCall","src":"6237:44:13"},"variables":[{"name":"deleteStart","nativeSrc":"6222:11:13","nodeType":"YulTypedName","src":"6222:11:13","type":""}]},{"body":{"nativeSrc":"6438:27:13","nodeType":"YulBlock","src":"6438:27:13","statements":[{"nativeSrc":"6440:23:13","nodeType":"YulAssignment","src":"6440:23:13","value":{"name":"dataArea","nativeSrc":"6455:8:13","nodeType":"YulIdentifier","src":"6455:8:13"},"variableNames":[{"name":"deleteStart","nativeSrc":"6440:11:13","nodeType":"YulIdentifier","src":"6440:11:13"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"6422:10:13","nodeType":"YulIdentifier","src":"6422:10:13"},{"kind":"number","nativeSrc":"6434:2:13","nodeType":"YulLiteral","src":"6434:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"6419:2:13","nodeType":"YulIdentifier","src":"6419:2:13"},"nativeSrc":"6419:18:13","nodeType":"YulFunctionCall","src":"6419:18:13"},"nativeSrc":"6416:49:13","nodeType":"YulIf","src":"6416:49:13"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"6507:11:13","nodeType":"YulIdentifier","src":"6507:11:13"},{"arguments":[{"name":"dataArea","nativeSrc":"6524:8:13","nodeType":"YulIdentifier","src":"6524:8:13"},{"arguments":[{"name":"len","nativeSrc":"6552:3:13","nodeType":"YulIdentifier","src":"6552:3:13"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"6534:17:13","nodeType":"YulIdentifier","src":"6534:17:13"},"nativeSrc":"6534:22:13","nodeType":"YulFunctionCall","src":"6534:22:13"}],"functionName":{"name":"add","nativeSrc":"6520:3:13","nodeType":"YulIdentifier","src":"6520:3:13"},"nativeSrc":"6520:37:13","nodeType":"YulFunctionCall","src":"6520:37:13"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"6478:28:13","nodeType":"YulIdentifier","src":"6478:28:13"},"nativeSrc":"6478:80:13","nodeType":"YulFunctionCall","src":"6478:80:13"},"nativeSrc":"6478:80:13","nodeType":"YulExpressionStatement","src":"6478:80:13"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"6128:3:13","nodeType":"YulIdentifier","src":"6128:3:13"},{"kind":"number","nativeSrc":"6133:2:13","nodeType":"YulLiteral","src":"6133:2:13","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"6125:2:13","nodeType":"YulIdentifier","src":"6125:2:13"},"nativeSrc":"6125:11:13","nodeType":"YulFunctionCall","src":"6125:11:13"},"nativeSrc":"6122:446:13","nodeType":"YulIf","src":"6122:446:13"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"6032:543:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"6087:5:13","nodeType":"YulTypedName","src":"6087:5:13","type":""},{"name":"len","nativeSrc":"6094:3:13","nodeType":"YulTypedName","src":"6094:3:13","type":""},{"name":"startIndex","nativeSrc":"6099:10:13","nodeType":"YulTypedName","src":"6099:10:13","type":""}],"src":"6032:543:13"},{"body":{"nativeSrc":"6644:54:13","nodeType":"YulBlock","src":"6644:54:13","statements":[{"nativeSrc":"6654:37:13","nodeType":"YulAssignment","src":"6654:37:13","value":{"arguments":[{"name":"bits","nativeSrc":"6679:4:13","nodeType":"YulIdentifier","src":"6679:4:13"},{"name":"value","nativeSrc":"6685:5:13","nodeType":"YulIdentifier","src":"6685:5:13"}],"functionName":{"name":"shr","nativeSrc":"6675:3:13","nodeType":"YulIdentifier","src":"6675:3:13"},"nativeSrc":"6675:16:13","nodeType":"YulFunctionCall","src":"6675:16:13"},"variableNames":[{"name":"newValue","nativeSrc":"6654:8:13","nodeType":"YulIdentifier","src":"6654:8:13"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"6581:117:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"6619:4:13","nodeType":"YulTypedName","src":"6619:4:13","type":""},{"name":"value","nativeSrc":"6625:5:13","nodeType":"YulTypedName","src":"6625:5:13","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"6635:8:13","nodeType":"YulTypedName","src":"6635:8:13","type":""}],"src":"6581:117:13"},{"body":{"nativeSrc":"6755:118:13","nodeType":"YulBlock","src":"6755:118:13","statements":[{"nativeSrc":"6765:68:13","nodeType":"YulVariableDeclaration","src":"6765:68:13","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6814:1:13","nodeType":"YulLiteral","src":"6814:1:13","type":"","value":"8"},{"name":"bytes","nativeSrc":"6817:5:13","nodeType":"YulIdentifier","src":"6817:5:13"}],"functionName":{"name":"mul","nativeSrc":"6810:3:13","nodeType":"YulIdentifier","src":"6810:3:13"},"nativeSrc":"6810:13:13","nodeType":"YulFunctionCall","src":"6810:13:13"},{"arguments":[{"kind":"number","nativeSrc":"6829:1:13","nodeType":"YulLiteral","src":"6829:1:13","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"6825:3:13","nodeType":"YulIdentifier","src":"6825:3:13"},"nativeSrc":"6825:6:13","nodeType":"YulFunctionCall","src":"6825:6:13"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"6781:28:13","nodeType":"YulIdentifier","src":"6781:28:13"},"nativeSrc":"6781:51:13","nodeType":"YulFunctionCall","src":"6781:51:13"}],"functionName":{"name":"not","nativeSrc":"6777:3:13","nodeType":"YulIdentifier","src":"6777:3:13"},"nativeSrc":"6777:56:13","nodeType":"YulFunctionCall","src":"6777:56:13"},"variables":[{"name":"mask","nativeSrc":"6769:4:13","nodeType":"YulTypedName","src":"6769:4:13","type":""}]},{"nativeSrc":"6842:25:13","nodeType":"YulAssignment","src":"6842:25:13","value":{"arguments":[{"name":"data","nativeSrc":"6856:4:13","nodeType":"YulIdentifier","src":"6856:4:13"},{"name":"mask","nativeSrc":"6862:4:13","nodeType":"YulIdentifier","src":"6862:4:13"}],"functionName":{"name":"and","nativeSrc":"6852:3:13","nodeType":"YulIdentifier","src":"6852:3:13"},"nativeSrc":"6852:15:13","nodeType":"YulFunctionCall","src":"6852:15:13"},"variableNames":[{"name":"result","nativeSrc":"6842:6:13","nodeType":"YulIdentifier","src":"6842:6:13"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"6704:169:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"6732:4:13","nodeType":"YulTypedName","src":"6732:4:13","type":""},{"name":"bytes","nativeSrc":"6738:5:13","nodeType":"YulTypedName","src":"6738:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"6748:6:13","nodeType":"YulTypedName","src":"6748:6:13","type":""}],"src":"6704:169:13"},{"body":{"nativeSrc":"6959:214:13","nodeType":"YulBlock","src":"6959:214:13","statements":[{"nativeSrc":"7092:37:13","nodeType":"YulAssignment","src":"7092:37:13","value":{"arguments":[{"name":"data","nativeSrc":"7119:4:13","nodeType":"YulIdentifier","src":"7119:4:13"},{"name":"len","nativeSrc":"7125:3:13","nodeType":"YulIdentifier","src":"7125:3:13"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"7100:18:13","nodeType":"YulIdentifier","src":"7100:18:13"},"nativeSrc":"7100:29:13","nodeType":"YulFunctionCall","src":"7100:29:13"},"variableNames":[{"name":"data","nativeSrc":"7092:4:13","nodeType":"YulIdentifier","src":"7092:4:13"}]},{"nativeSrc":"7138:29:13","nodeType":"YulAssignment","src":"7138:29:13","value":{"arguments":[{"name":"data","nativeSrc":"7149:4:13","nodeType":"YulIdentifier","src":"7149:4:13"},{"arguments":[{"kind":"number","nativeSrc":"7159:1:13","nodeType":"YulLiteral","src":"7159:1:13","type":"","value":"2"},{"name":"len","nativeSrc":"7162:3:13","nodeType":"YulIdentifier","src":"7162:3:13"}],"functionName":{"name":"mul","nativeSrc":"7155:3:13","nodeType":"YulIdentifier","src":"7155:3:13"},"nativeSrc":"7155:11:13","nodeType":"YulFunctionCall","src":"7155:11:13"}],"functionName":{"name":"or","nativeSrc":"7146:2:13","nodeType":"YulIdentifier","src":"7146:2:13"},"nativeSrc":"7146:21:13","nodeType":"YulFunctionCall","src":"7146:21:13"},"variableNames":[{"name":"used","nativeSrc":"7138:4:13","nodeType":"YulIdentifier","src":"7138:4:13"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"6878:295:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"6940:4:13","nodeType":"YulTypedName","src":"6940:4:13","type":""},{"name":"len","nativeSrc":"6946:3:13","nodeType":"YulTypedName","src":"6946:3:13","type":""}],"returnVariables":[{"name":"used","nativeSrc":"6954:4:13","nodeType":"YulTypedName","src":"6954:4:13","type":""}],"src":"6878:295:13"},{"body":{"nativeSrc":"7270:1303:13","nodeType":"YulBlock","src":"7270:1303:13","statements":[{"nativeSrc":"7281:51:13","nodeType":"YulVariableDeclaration","src":"7281:51:13","value":{"arguments":[{"name":"src","nativeSrc":"7328:3:13","nodeType":"YulIdentifier","src":"7328:3:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"7295:32:13","nodeType":"YulIdentifier","src":"7295:32:13"},"nativeSrc":"7295:37:13","nodeType":"YulFunctionCall","src":"7295:37:13"},"variables":[{"name":"newLen","nativeSrc":"7285:6:13","nodeType":"YulTypedName","src":"7285:6:13","type":""}]},{"body":{"nativeSrc":"7417:22:13","nodeType":"YulBlock","src":"7417:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7419:16:13","nodeType":"YulIdentifier","src":"7419:16:13"},"nativeSrc":"7419:18:13","nodeType":"YulFunctionCall","src":"7419:18:13"},"nativeSrc":"7419:18:13","nodeType":"YulExpressionStatement","src":"7419:18:13"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"7389:6:13","nodeType":"YulIdentifier","src":"7389:6:13"},{"kind":"number","nativeSrc":"7397:18:13","nodeType":"YulLiteral","src":"7397:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7386:2:13","nodeType":"YulIdentifier","src":"7386:2:13"},"nativeSrc":"7386:30:13","nodeType":"YulFunctionCall","src":"7386:30:13"},"nativeSrc":"7383:56:13","nodeType":"YulIf","src":"7383:56:13"},{"nativeSrc":"7449:52:13","nodeType":"YulVariableDeclaration","src":"7449:52:13","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"7495:4:13","nodeType":"YulIdentifier","src":"7495:4:13"}],"functionName":{"name":"sload","nativeSrc":"7489:5:13","nodeType":"YulIdentifier","src":"7489:5:13"},"nativeSrc":"7489:11:13","nodeType":"YulFunctionCall","src":"7489:11:13"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"7463:25:13","nodeType":"YulIdentifier","src":"7463:25:13"},"nativeSrc":"7463:38:13","nodeType":"YulFunctionCall","src":"7463:38:13"},"variables":[{"name":"oldLen","nativeSrc":"7453:6:13","nodeType":"YulTypedName","src":"7453:6:13","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"7594:4:13","nodeType":"YulIdentifier","src":"7594:4:13"},{"name":"oldLen","nativeSrc":"7600:6:13","nodeType":"YulIdentifier","src":"7600:6:13"},{"name":"newLen","nativeSrc":"7608:6:13","nodeType":"YulIdentifier","src":"7608:6:13"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"7548:45:13","nodeType":"YulIdentifier","src":"7548:45:13"},"nativeSrc":"7548:67:13","nodeType":"YulFunctionCall","src":"7548:67:13"},"nativeSrc":"7548:67:13","nodeType":"YulExpressionStatement","src":"7548:67:13"},{"nativeSrc":"7625:18:13","nodeType":"YulVariableDeclaration","src":"7625:18:13","value":{"kind":"number","nativeSrc":"7642:1:13","nodeType":"YulLiteral","src":"7642:1:13","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"7629:9:13","nodeType":"YulTypedName","src":"7629:9:13","type":""}]},{"nativeSrc":"7653:17:13","nodeType":"YulAssignment","src":"7653:17:13","value":{"kind":"number","nativeSrc":"7666:4:13","nodeType":"YulLiteral","src":"7666:4:13","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"7653:9:13","nodeType":"YulIdentifier","src":"7653:9:13"}]},{"cases":[{"body":{"nativeSrc":"7717:611:13","nodeType":"YulBlock","src":"7717:611:13","statements":[{"nativeSrc":"7731:37:13","nodeType":"YulVariableDeclaration","src":"7731:37:13","value":{"arguments":[{"name":"newLen","nativeSrc":"7750:6:13","nodeType":"YulIdentifier","src":"7750:6:13"},{"arguments":[{"kind":"number","nativeSrc":"7762:4:13","nodeType":"YulLiteral","src":"7762:4:13","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"7758:3:13","nodeType":"YulIdentifier","src":"7758:3:13"},"nativeSrc":"7758:9:13","nodeType":"YulFunctionCall","src":"7758:9:13"}],"functionName":{"name":"and","nativeSrc":"7746:3:13","nodeType":"YulIdentifier","src":"7746:3:13"},"nativeSrc":"7746:22:13","nodeType":"YulFunctionCall","src":"7746:22:13"},"variables":[{"name":"loopEnd","nativeSrc":"7735:7:13","nodeType":"YulTypedName","src":"7735:7:13","type":""}]},{"nativeSrc":"7782:51:13","nodeType":"YulVariableDeclaration","src":"7782:51:13","value":{"arguments":[{"name":"slot","nativeSrc":"7828:4:13","nodeType":"YulIdentifier","src":"7828:4:13"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"7796:31:13","nodeType":"YulIdentifier","src":"7796:31:13"},"nativeSrc":"7796:37:13","nodeType":"YulFunctionCall","src":"7796:37:13"},"variables":[{"name":"dstPtr","nativeSrc":"7786:6:13","nodeType":"YulTypedName","src":"7786:6:13","type":""}]},{"nativeSrc":"7846:10:13","nodeType":"YulVariableDeclaration","src":"7846:10:13","value":{"kind":"number","nativeSrc":"7855:1:13","nodeType":"YulLiteral","src":"7855:1:13","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7850:1:13","nodeType":"YulTypedName","src":"7850:1:13","type":""}]},{"body":{"nativeSrc":"7914:163:13","nodeType":"YulBlock","src":"7914:163:13","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"7939:6:13","nodeType":"YulIdentifier","src":"7939:6:13"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"7957:3:13","nodeType":"YulIdentifier","src":"7957:3:13"},{"name":"srcOffset","nativeSrc":"7962:9:13","nodeType":"YulIdentifier","src":"7962:9:13"}],"functionName":{"name":"add","nativeSrc":"7953:3:13","nodeType":"YulIdentifier","src":"7953:3:13"},"nativeSrc":"7953:19:13","nodeType":"YulFunctionCall","src":"7953:19:13"}],"functionName":{"name":"mload","nativeSrc":"7947:5:13","nodeType":"YulIdentifier","src":"7947:5:13"},"nativeSrc":"7947:26:13","nodeType":"YulFunctionCall","src":"7947:26:13"}],"functionName":{"name":"sstore","nativeSrc":"7932:6:13","nodeType":"YulIdentifier","src":"7932:6:13"},"nativeSrc":"7932:42:13","nodeType":"YulFunctionCall","src":"7932:42:13"},"nativeSrc":"7932:42:13","nodeType":"YulExpressionStatement","src":"7932:42:13"},{"nativeSrc":"7991:24:13","nodeType":"YulAssignment","src":"7991:24:13","value":{"arguments":[{"name":"dstPtr","nativeSrc":"8005:6:13","nodeType":"YulIdentifier","src":"8005:6:13"},{"kind":"number","nativeSrc":"8013:1:13","nodeType":"YulLiteral","src":"8013:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8001:3:13","nodeType":"YulIdentifier","src":"8001:3:13"},"nativeSrc":"8001:14:13","nodeType":"YulFunctionCall","src":"8001:14:13"},"variableNames":[{"name":"dstPtr","nativeSrc":"7991:6:13","nodeType":"YulIdentifier","src":"7991:6:13"}]},{"nativeSrc":"8032:31:13","nodeType":"YulAssignment","src":"8032:31:13","value":{"arguments":[{"name":"srcOffset","nativeSrc":"8049:9:13","nodeType":"YulIdentifier","src":"8049:9:13"},{"kind":"number","nativeSrc":"8060:2:13","nodeType":"YulLiteral","src":"8060:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8045:3:13","nodeType":"YulIdentifier","src":"8045:3:13"},"nativeSrc":"8045:18:13","nodeType":"YulFunctionCall","src":"8045:18:13"},"variableNames":[{"name":"srcOffset","nativeSrc":"8032:9:13","nodeType":"YulIdentifier","src":"8032:9:13"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7880:1:13","nodeType":"YulIdentifier","src":"7880:1:13"},{"name":"loopEnd","nativeSrc":"7883:7:13","nodeType":"YulIdentifier","src":"7883:7:13"}],"functionName":{"name":"lt","nativeSrc":"7877:2:13","nodeType":"YulIdentifier","src":"7877:2:13"},"nativeSrc":"7877:14:13","nodeType":"YulFunctionCall","src":"7877:14:13"},"nativeSrc":"7869:208:13","nodeType":"YulForLoop","post":{"nativeSrc":"7892:21:13","nodeType":"YulBlock","src":"7892:21:13","statements":[{"nativeSrc":"7894:17:13","nodeType":"YulAssignment","src":"7894:17:13","value":{"arguments":[{"name":"i","nativeSrc":"7903:1:13","nodeType":"YulIdentifier","src":"7903:1:13"},{"kind":"number","nativeSrc":"7906:4:13","nodeType":"YulLiteral","src":"7906:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7899:3:13","nodeType":"YulIdentifier","src":"7899:3:13"},"nativeSrc":"7899:12:13","nodeType":"YulFunctionCall","src":"7899:12:13"},"variableNames":[{"name":"i","nativeSrc":"7894:1:13","nodeType":"YulIdentifier","src":"7894:1:13"}]}]},"pre":{"nativeSrc":"7873:3:13","nodeType":"YulBlock","src":"7873:3:13","statements":[]},"src":"7869:208:13"},{"body":{"nativeSrc":"8113:156:13","nodeType":"YulBlock","src":"8113:156:13","statements":[{"nativeSrc":"8131:43:13","nodeType":"YulVariableDeclaration","src":"8131:43:13","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8158:3:13","nodeType":"YulIdentifier","src":"8158:3:13"},{"name":"srcOffset","nativeSrc":"8163:9:13","nodeType":"YulIdentifier","src":"8163:9:13"}],"functionName":{"name":"add","nativeSrc":"8154:3:13","nodeType":"YulIdentifier","src":"8154:3:13"},"nativeSrc":"8154:19:13","nodeType":"YulFunctionCall","src":"8154:19:13"}],"functionName":{"name":"mload","nativeSrc":"8148:5:13","nodeType":"YulIdentifier","src":"8148:5:13"},"nativeSrc":"8148:26:13","nodeType":"YulFunctionCall","src":"8148:26:13"},"variables":[{"name":"lastValue","nativeSrc":"8135:9:13","nodeType":"YulTypedName","src":"8135:9:13","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"8198:6:13","nodeType":"YulIdentifier","src":"8198:6:13"},{"arguments":[{"name":"lastValue","nativeSrc":"8225:9:13","nodeType":"YulIdentifier","src":"8225:9:13"},{"arguments":[{"name":"newLen","nativeSrc":"8240:6:13","nodeType":"YulIdentifier","src":"8240:6:13"},{"kind":"number","nativeSrc":"8248:4:13","nodeType":"YulLiteral","src":"8248:4:13","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"8236:3:13","nodeType":"YulIdentifier","src":"8236:3:13"},"nativeSrc":"8236:17:13","nodeType":"YulFunctionCall","src":"8236:17:13"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"8206:18:13","nodeType":"YulIdentifier","src":"8206:18:13"},"nativeSrc":"8206:48:13","nodeType":"YulFunctionCall","src":"8206:48:13"}],"functionName":{"name":"sstore","nativeSrc":"8191:6:13","nodeType":"YulIdentifier","src":"8191:6:13"},"nativeSrc":"8191:64:13","nodeType":"YulFunctionCall","src":"8191:64:13"},"nativeSrc":"8191:64:13","nodeType":"YulExpressionStatement","src":"8191:64:13"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"8096:7:13","nodeType":"YulIdentifier","src":"8096:7:13"},{"name":"newLen","nativeSrc":"8105:6:13","nodeType":"YulIdentifier","src":"8105:6:13"}],"functionName":{"name":"lt","nativeSrc":"8093:2:13","nodeType":"YulIdentifier","src":"8093:2:13"},"nativeSrc":"8093:19:13","nodeType":"YulFunctionCall","src":"8093:19:13"},"nativeSrc":"8090:179:13","nodeType":"YulIf","src":"8090:179:13"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8289:4:13","nodeType":"YulIdentifier","src":"8289:4:13"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"8303:6:13","nodeType":"YulIdentifier","src":"8303:6:13"},{"kind":"number","nativeSrc":"8311:1:13","nodeType":"YulLiteral","src":"8311:1:13","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"8299:3:13","nodeType":"YulIdentifier","src":"8299:3:13"},"nativeSrc":"8299:14:13","nodeType":"YulFunctionCall","src":"8299:14:13"},{"kind":"number","nativeSrc":"8315:1:13","nodeType":"YulLiteral","src":"8315:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8295:3:13","nodeType":"YulIdentifier","src":"8295:3:13"},"nativeSrc":"8295:22:13","nodeType":"YulFunctionCall","src":"8295:22:13"}],"functionName":{"name":"sstore","nativeSrc":"8282:6:13","nodeType":"YulIdentifier","src":"8282:6:13"},"nativeSrc":"8282:36:13","nodeType":"YulFunctionCall","src":"8282:36:13"},"nativeSrc":"8282:36:13","nodeType":"YulExpressionStatement","src":"8282:36:13"}]},"nativeSrc":"7710:618:13","nodeType":"YulCase","src":"7710:618:13","value":{"kind":"number","nativeSrc":"7715:1:13","nodeType":"YulLiteral","src":"7715:1:13","type":"","value":"1"}},{"body":{"nativeSrc":"8345:222:13","nodeType":"YulBlock","src":"8345:222:13","statements":[{"nativeSrc":"8359:14:13","nodeType":"YulVariableDeclaration","src":"8359:14:13","value":{"kind":"number","nativeSrc":"8372:1:13","nodeType":"YulLiteral","src":"8372:1:13","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"8363:5:13","nodeType":"YulTypedName","src":"8363:5:13","type":""}]},{"body":{"nativeSrc":"8396:67:13","nodeType":"YulBlock","src":"8396:67:13","statements":[{"nativeSrc":"8414:35:13","nodeType":"YulAssignment","src":"8414:35:13","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8433:3:13","nodeType":"YulIdentifier","src":"8433:3:13"},{"name":"srcOffset","nativeSrc":"8438:9:13","nodeType":"YulIdentifier","src":"8438:9:13"}],"functionName":{"name":"add","nativeSrc":"8429:3:13","nodeType":"YulIdentifier","src":"8429:3:13"},"nativeSrc":"8429:19:13","nodeType":"YulFunctionCall","src":"8429:19:13"}],"functionName":{"name":"mload","nativeSrc":"8423:5:13","nodeType":"YulIdentifier","src":"8423:5:13"},"nativeSrc":"8423:26:13","nodeType":"YulFunctionCall","src":"8423:26:13"},"variableNames":[{"name":"value","nativeSrc":"8414:5:13","nodeType":"YulIdentifier","src":"8414:5:13"}]}]},"condition":{"name":"newLen","nativeSrc":"8389:6:13","nodeType":"YulIdentifier","src":"8389:6:13"},"nativeSrc":"8386:77:13","nodeType":"YulIf","src":"8386:77:13"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8483:4:13","nodeType":"YulIdentifier","src":"8483:4:13"},{"arguments":[{"name":"value","nativeSrc":"8542:5:13","nodeType":"YulIdentifier","src":"8542:5:13"},{"name":"newLen","nativeSrc":"8549:6:13","nodeType":"YulIdentifier","src":"8549:6:13"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"8489:52:13","nodeType":"YulIdentifier","src":"8489:52:13"},"nativeSrc":"8489:67:13","nodeType":"YulFunctionCall","src":"8489:67:13"}],"functionName":{"name":"sstore","nativeSrc":"8476:6:13","nodeType":"YulIdentifier","src":"8476:6:13"},"nativeSrc":"8476:81:13","nodeType":"YulFunctionCall","src":"8476:81:13"},"nativeSrc":"8476:81:13","nodeType":"YulExpressionStatement","src":"8476:81:13"}]},"nativeSrc":"8337:230:13","nodeType":"YulCase","src":"8337:230:13","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"7690:6:13","nodeType":"YulIdentifier","src":"7690:6:13"},{"kind":"number","nativeSrc":"7698:2:13","nodeType":"YulLiteral","src":"7698:2:13","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"7687:2:13","nodeType":"YulIdentifier","src":"7687:2:13"},"nativeSrc":"7687:14:13","nodeType":"YulFunctionCall","src":"7687:14:13"},"nativeSrc":"7680:887:13","nodeType":"YulSwitch","src":"7680:887:13"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"7178:1395:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"7259:4:13","nodeType":"YulTypedName","src":"7259:4:13","type":""},{"name":"src","nativeSrc":"7265:3:13","nodeType":"YulTypedName","src":"7265:3:13","type":""}],"src":"7178:1395:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051612668380380612668833981810160405281019061003291906101ce565b81600090816100419190610467565b5080600190816100519190610467565b505050610539565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100c082610077565b810181811067ffffffffffffffff821117156100df576100de610088565b5b80604052505050565b60006100f2610059565b90506100fe82826100b7565b919050565b600067ffffffffffffffff82111561011e5761011d610088565b5b61012782610077565b9050602081019050919050565b60005b83811015610152578082015181840152602081019050610137565b60008484015250505050565b600061017161016c84610103565b6100e8565b90508281526020810184848401111561018d5761018c610072565b5b610198848285610134565b509392505050565b600082601f8301126101b5576101b461006d565b5b81516101c584826020860161015e565b91505092915050565b600080604083850312156101e5576101e4610063565b5b600083015167ffffffffffffffff81111561020357610202610068565b5b61020f858286016101a0565b925050602083015167ffffffffffffffff8111156102305761022f610068565b5b61023c858286016101a0565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029857607f821691505b6020821081036102ab576102aa610251565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102d6565b61031d86836102d6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061036461035f61035a84610335565b61033f565b610335565b9050919050565b6000819050919050565b61037e83610349565b61039261038a8261036b565b8484546102e3565b825550505050565b600090565b6103a761039a565b6103b2818484610375565b505050565b5b818110156103d6576103cb60008261039f565b6001810190506103b8565b5050565b601f82111561041b576103ec816102b1565b6103f5846102c6565b81016020851015610404578190505b610418610410856102c6565b8301826103b7565b50505b505050565b600082821c905092915050565b600061043e60001984600802610420565b1980831691505092915050565b6000610457838361042d565b9150826002028217905092915050565b61047082610246565b67ffffffffffffffff81111561048957610488610088565b5b6104938254610280565b61049e8282856103da565b600060209050601f8311600181146104d157600084156104bf578287015190505b6104c9858261044b565b865550610531565b601f1984166104df866102b1565b60005b82811015610507578489015182556001820191506020850194506020810190506104e2565b868310156105245784890151610520601f89168261042d565b8355505b6001600288020188555050505b505050505050565b612120806105486000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e991906114f4565b6102bc565b6040516100fb919061153c565b60405180910390f35b61010c61039e565b60405161011991906115e7565b60405180910390f35b61013c6004803603810190610137919061163f565b610430565b60405161014991906116ad565b60405180910390f35b61016c600480360381019061016791906116f4565b610476565b005b61018860048036038101906101839190611734565b61058d565b005b6101a4600480360381019061019f9190611734565b6105ed565b005b6101c060048036038101906101bb919061163f565b61060d565b6040516101cd91906116ad565b60405180910390f35b6101f060048036038101906101eb9190611787565b610693565b6040516101fd91906117c3565b60405180910390f35b61020e61074a565b60405161021b91906115e7565b60405180910390f35b61023e6004803603810190610239919061180a565b6107dc565b005b61025a6004803603810190610255919061197f565b6107f2565b005b6102766004803603810190610271919061163f565b610854565b60405161028391906115e7565b60405180910390f35b6102a660048036038101906102a19190611a02565b6108bc565b6040516102b3919061153c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611a71565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611a71565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611b14565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611ba6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611c38565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611ca4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611d36565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611a71565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611a71565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611c38565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611d92565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611ca4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611eba565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611e28565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f8383836001611185565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690611f26565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061153c565b60405180910390a3505050565b611008848484610b5b565b6110148484848461118b565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90611fb8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611312565b01905060008167ffffffffffffffff81111561109e5761109d611854565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112757611126611fd8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006111ac8473ffffffffffffffffffffffffffffffffffffffff16611465565b15611305578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111d5610a05565b8786866040518563ffffffff1660e01b81526004016111f7949392919061205c565b6020604051808303816000875af192505050801561123357506040513d601f19601f8201168201806040525081019061123091906120bd565b60015b6112b5573d8060008114611263576040519150601f19603f3d011682016040523d82523d6000602084013e611268565b606091505b5060008151036112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490611fb8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061130a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611370577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161136657611365611fd8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113ad576d04ee2d6d415b85acef810000000083816113a3576113a2611fd8565b5b0492506020810190505b662386f26fc1000083106113dc57662386f26fc1000083816113d2576113d1611fd8565b5b0492506010810190505b6305f5e1008310611405576305f5e10083816113fb576113fa611fd8565b5b0492506008810190505b612710831061142a5761271083816114205761141f611fd8565b5b0492506004810190505b6064831061144d576064838161144357611442611fd8565b5b0492506002810190505b600a831061145c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d18161149c565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b60006020828403121561150a57611509611492565b5b6000611518848285016114df565b91505092915050565b60008115159050919050565b61153681611521565b82525050565b6000602082019050611551600083018461152d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611591578082015181840152602081019050611576565b60008484015250505050565b6000601f19601f8301169050919050565b60006115b982611557565b6115c38185611562565b93506115d3818560208601611573565b6115dc8161159d565b840191505092915050565b6000602082019050818103600083015261160181846115ae565b905092915050565b6000819050919050565b61161c81611609565b811461162757600080fd5b50565b60008135905061163981611613565b92915050565b60006020828403121561165557611654611492565b5b60006116638482850161162a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b82525050565b60006020820190506116c2600083018461169e565b92915050565b6116d18161168c565b81146116dc57600080fd5b50565b6000813590506116ee816116c8565b92915050565b6000806040838503121561170b5761170a611492565b5b6000611719858286016116df565b925050602061172a8582860161162a565b9150509250929050565b60008060006060848603121561174d5761174c611492565b5b600061175b868287016116df565b935050602061176c868287016116df565b925050604061177d8682870161162a565b9150509250925092565b60006020828403121561179d5761179c611492565b5b60006117ab848285016116df565b91505092915050565b6117bd81611609565b82525050565b60006020820190506117d860008301846117b4565b92915050565b6117e781611521565b81146117f257600080fd5b50565b600081359050611804816117de565b92915050565b6000806040838503121561182157611820611492565b5b600061182f858286016116df565b9250506020611840858286016117f5565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61188c8261159d565b810181811067ffffffffffffffff821117156118ab576118aa611854565b5b80604052505050565b60006118be611488565b90506118ca8282611883565b919050565b600067ffffffffffffffff8211156118ea576118e9611854565b5b6118f38261159d565b9050602081019050919050565b82818337600083830152505050565b600061192261191d846118cf565b6118b4565b90508281526020810184848401111561193e5761193d61184f565b5b611949848285611900565b509392505050565b600082601f8301126119665761196561184a565b5b813561197684826020860161190f565b91505092915050565b6000806000806080858703121561199957611998611492565b5b60006119a7878288016116df565b94505060206119b8878288016116df565b93505060406119c98782880161162a565b925050606085013567ffffffffffffffff8111156119ea576119e9611497565b5b6119f687828801611951565b91505092959194509250565b60008060408385031215611a1957611a18611492565b5b6000611a27858286016116df565b9250506020611a38858286016116df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a8957607f821691505b602082108103611a9c57611a9b611a42565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611afe602183611562565b9150611b0982611aa2565b604082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611b90603d83611562565b9150611b9b82611b34565b604082019050919050565b60006020820190508181036000830152611bbf81611b83565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611c22602d83611562565b9150611c2d82611bc6565b604082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611c8e601883611562565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611d20602983611562565b9150611d2b82611cc4565b604082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b600081905092915050565b6000611d6c82611557565b611d768185611d56565b9350611d86818560208601611573565b80840191505092915050565b6000611d9e8285611d61565b9150611daa8284611d61565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611e12602583611562565b9150611e1d82611db6565b604082019050919050565b60006020820190508181036000830152611e4181611e05565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611ea4602483611562565b9150611eaf82611e48565b604082019050919050565b60006020820190508181036000830152611ed381611e97565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f10601983611562565b9150611f1b82611eda565b602082019050919050565b60006020820190508181036000830152611f3f81611f03565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fa2603283611562565b9150611fad82611f46565b604082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061202e82612007565b6120388185612012565b9350612048818560208601611573565b6120518161159d565b840191505092915050565b6000608082019050612071600083018761169e565b61207e602083018661169e565b61208b60408301856117b4565b818103606083015261209d8184612023565b905095945050505050565b6000815190506120b7816114c8565b92915050565b6000602082840312156120d3576120d2611492565b5b60006120e1848285016120a8565b9150509291505056fea2646970667358221220603c65e4f474c18fa0972eb056314251faca87c6dcd4068871c10c1be48f0bd564736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2668 CODESIZE SUB DUP1 PUSH2 0x2668 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x1CE JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH2 0x41 SWAP2 SWAP1 PUSH2 0x467 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x51 SWAP2 SWAP1 PUSH2 0x467 JUMP JUMPDEST POP POP POP PUSH2 0x539 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xC0 DUP3 PUSH2 0x77 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xDF JUMPI PUSH2 0xDE PUSH2 0x88 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2 PUSH2 0x59 JUMP JUMPDEST SWAP1 POP PUSH2 0xFE DUP3 DUP3 PUSH2 0xB7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11E JUMPI PUSH2 0x11D PUSH2 0x88 JUMP JUMPDEST JUMPDEST PUSH2 0x127 DUP3 PUSH2 0x77 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x152 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x137 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x171 PUSH2 0x16C DUP5 PUSH2 0x103 JUMP JUMPDEST PUSH2 0xE8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x18D JUMPI PUSH2 0x18C PUSH2 0x72 JUMP JUMPDEST JUMPDEST PUSH2 0x198 DUP5 DUP3 DUP6 PUSH2 0x134 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B5 JUMPI PUSH2 0x1B4 PUSH2 0x6D JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x1C5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E5 JUMPI PUSH2 0x1E4 PUSH2 0x63 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x203 JUMPI PUSH2 0x202 PUSH2 0x68 JUMP JUMPDEST JUMPDEST PUSH2 0x20F DUP6 DUP3 DUP7 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x230 JUMPI PUSH2 0x22F PUSH2 0x68 JUMP JUMPDEST JUMPDEST PUSH2 0x23C DUP6 DUP3 DUP7 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x298 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2AB JUMPI PUSH2 0x2AA PUSH2 0x251 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x313 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2D6 JUMP JUMPDEST PUSH2 0x31D DUP7 DUP4 PUSH2 0x2D6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x364 PUSH2 0x35F PUSH2 0x35A DUP5 PUSH2 0x335 JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37E DUP4 PUSH2 0x349 JUMP JUMPDEST PUSH2 0x392 PUSH2 0x38A DUP3 PUSH2 0x36B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2E3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3A7 PUSH2 0x39A JUMP JUMPDEST PUSH2 0x3B2 DUP2 DUP5 DUP5 PUSH2 0x375 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3CB PUSH1 0x0 DUP3 PUSH2 0x39F JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x41B JUMPI PUSH2 0x3EC DUP2 PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x3F5 DUP5 PUSH2 0x2C6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x404 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x418 PUSH2 0x410 DUP6 PUSH2 0x2C6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3B7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x420 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x457 DUP4 DUP4 PUSH2 0x42D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x470 DUP3 PUSH2 0x246 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x489 JUMPI PUSH2 0x488 PUSH2 0x88 JUMP JUMPDEST JUMPDEST PUSH2 0x493 DUP3 SLOAD PUSH2 0x280 JUMP JUMPDEST PUSH2 0x49E DUP3 DUP3 DUP6 PUSH2 0x3DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x4D1 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4BF JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x4C9 DUP6 DUP3 PUSH2 0x44B JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4DF DUP7 PUSH2 0x2B1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x507 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4E2 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x524 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x520 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x42D JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2120 DUP1 PUSH2 0x548 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x180A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1D36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1185 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1312 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11AC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1465 JUMP JUMPDEST ISZERO PUSH2 0x1305 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11D5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1230 SWAP2 SWAP1 PUSH2 0x20BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12B5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x130A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1370 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1366 JUMPI PUSH2 0x1365 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13AD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13DC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13D2 JUMPI PUSH2 0x13D1 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1405 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x13FB JUMPI PUSH2 0x13FA PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x142A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1420 JUMPI PUSH2 0x141F PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x144D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1443 JUMPI PUSH2 0x1442 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x145C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14D1 DUP2 PUSH2 0x149C JUMP JUMPDEST DUP2 EQ PUSH2 0x14DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14EE DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x150A JUMPI PUSH2 0x1509 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1518 DUP5 DUP3 DUP6 ADD PUSH2 0x14DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1536 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1551 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x152D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1576 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B9 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x15C3 DUP2 DUP6 PUSH2 0x1562 JUMP JUMPDEST SWAP4 POP PUSH2 0x15D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x15DC DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1601 DUP2 DUP5 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x161C DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP2 EQ PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1639 DUP2 PUSH2 0x1613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI PUSH2 0x1654 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1663 DUP5 DUP3 DUP6 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1697 DUP3 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16A7 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D1 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP2 EQ PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16EE DUP2 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x170B JUMPI PUSH2 0x170A PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1719 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x172A DUP6 DUP3 DUP7 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174D JUMPI PUSH2 0x174C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x176C DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x177D DUP7 DUP3 DUP8 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17BD DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1804 DUP2 PUSH2 0x17DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1821 JUMPI PUSH2 0x1820 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x182F DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1840 DUP6 DUP3 DUP7 ADD PUSH2 0x17F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x188C DUP3 PUSH2 0x159D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x1854 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BE PUSH2 0x1488 JUMP JUMPDEST SWAP1 POP PUSH2 0x18CA DUP3 DUP3 PUSH2 0x1883 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EA JUMPI PUSH2 0x18E9 PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH2 0x18F3 DUP3 PUSH2 0x159D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH2 0x191D DUP5 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x193E JUMPI PUSH2 0x193D PUSH2 0x184F JUMP JUMPDEST JUMPDEST PUSH2 0x1949 DUP5 DUP3 DUP6 PUSH2 0x1900 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1966 JUMPI PUSH2 0x1965 PUSH2 0x184A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1976 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x190F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1999 JUMPI PUSH2 0x1998 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B8 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19C9 DUP8 DUP3 DUP9 ADD PUSH2 0x162A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST PUSH2 0x19F6 DUP8 DUP3 DUP9 ADD PUSH2 0x1951 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A18 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A27 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A38 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1A89 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A9C JUMPI PUSH2 0x1A9B PUSH2 0x1A42 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x21 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x1AA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B2D DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B90 PUSH1 0x3D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B9B DUP3 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BBF DUP2 PUSH2 0x1B83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C22 PUSH1 0x2D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C2D DUP3 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C51 DUP2 PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8E PUSH1 0x18 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C99 DUP3 PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CBD DUP2 PUSH2 0x1C81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH1 0x29 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2B DUP3 PUSH2 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D4F DUP2 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6C DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x1D76 DUP2 DUP6 PUSH2 0x1D56 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D86 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9E DUP3 DUP6 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DAA DUP3 DUP5 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E12 PUSH1 0x25 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1D DUP3 PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x1E05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH1 0x24 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAF DUP3 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED3 DUP2 PUSH2 0x1E97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F10 PUSH1 0x19 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F1B DUP3 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3F DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FA2 PUSH1 0x32 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAD DUP3 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FD1 DUP2 PUSH2 0x1F95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202E DUP3 PUSH2 0x2007 JUMP JUMPDEST PUSH2 0x2038 DUP2 DUP6 PUSH2 0x2012 JUMP JUMPDEST SWAP4 POP PUSH2 0x2048 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x2051 DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x209D DUP2 DUP5 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20B7 DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D3 JUMPI PUSH2 0x20D2 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20E1 DUP5 DUP3 DUP6 ADD PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x3C PUSH6 0xE4F474C18FA0 SWAP8 0x2E 0xB0 JUMP BALANCE TIMESTAMP MLOAD STATICCALL 0xCA DUP8 0xC6 0xDC 0xD4 MOD DUP9 PUSH18 0xC10C1BE48F0BD564736F6C634300081B0033 ","sourceMap":"628:16679:1:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;628:16679;;7:75:13;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:248::-;1692:1;1702:113;1716:6;1713:1;1710:13;1702:113;;;1801:1;1796:3;1792:11;1786:18;1782:1;1777:3;1773:11;1766:39;1738:2;1735:1;1731:10;1726:15;;1702:113;;;1849:1;1840:6;1835:3;1831:16;1824:27;1672:186;1610:248;;;:::o;1864:434::-;1953:5;1978:66;1994:49;2036:6;1994:49;:::i;:::-;1978:66;:::i;:::-;1969:75;;2067:6;2060:5;2053:21;2105:4;2098:5;2094:16;2143:3;2134:6;2129:3;2125:16;2122:25;2119:112;;;2150:79;;:::i;:::-;2119:112;2240:52;2285:6;2280:3;2275;2240:52;:::i;:::-;1959:339;1864:434;;;;;:::o;2318:355::-;2385:5;2434:3;2427:4;2419:6;2415:17;2411:27;2401:122;;2442:79;;:::i;:::-;2401:122;2552:6;2546:13;2577:90;2663:3;2655:6;2648:4;2640:6;2636:17;2577:90;:::i;:::-;2568:99;;2391:282;2318:355;;;;:::o;2679:853::-;2778:6;2786;2835:2;2823:9;2814:7;2810:23;2806:32;2803:119;;;2841:79;;:::i;:::-;2803:119;2982:1;2971:9;2967:17;2961:24;3012:18;3004:6;3001:30;2998:117;;;3034:79;;:::i;:::-;2998:117;3139:74;3205:7;3196:6;3185:9;3181:22;3139:74;:::i;:::-;3129:84;;2932:291;3283:2;3272:9;3268:18;3262:25;3314:18;3306:6;3303:30;3300:117;;;3336:79;;:::i;:::-;3300:117;3441:74;3507:7;3498:6;3487:9;3483:22;3441:74;:::i;:::-;3431:84;;3233:292;2679:853;;;;;:::o;3538:99::-;3590:6;3624:5;3618:12;3608:22;;3538:99;;;:::o;3643:180::-;3691:77;3688:1;3681:88;3788:4;3785:1;3778:15;3812:4;3809:1;3802:15;3829:320;3873:6;3910:1;3904:4;3900:12;3890:22;;3957:1;3951:4;3947:12;3978:18;3968:81;;4034:4;4026:6;4022:17;4012:27;;3968:81;4096:2;4088:6;4085:14;4065:18;4062:38;4059:84;;4115:18;;:::i;:::-;4059:84;3880:269;3829:320;;;:::o;4155:141::-;4204:4;4227:3;4219:11;;4250:3;4247:1;4240:14;4284:4;4281:1;4271:18;4263:26;;4155:141;;;:::o;4302:93::-;4339:6;4386:2;4381;4374:5;4370:14;4366:23;4356:33;;4302:93;;;:::o;4401:107::-;4445:8;4495:5;4489:4;4485:16;4464:37;;4401:107;;;;:::o;4514:393::-;4583:6;4633:1;4621:10;4617:18;4656:97;4686:66;4675:9;4656:97;:::i;:::-;4774:39;4804:8;4793:9;4774:39;:::i;:::-;4762:51;;4846:4;4842:9;4835:5;4831:21;4822:30;;4895:4;4885:8;4881:19;4874:5;4871:30;4861:40;;4590:317;;4514:393;;;;;:::o;4913:77::-;4950:7;4979:5;4968:16;;4913:77;;;:::o;4996:60::-;5024:3;5045:5;5038:12;;4996:60;;;:::o;5062:142::-;5112:9;5145:53;5163:34;5172:24;5190:5;5172:24;:::i;:::-;5163:34;:::i;:::-;5145:53;:::i;:::-;5132:66;;5062:142;;;:::o;5210:75::-;5253:3;5274:5;5267:12;;5210:75;;;:::o;5291:269::-;5401:39;5432:7;5401:39;:::i;:::-;5462:91;5511:41;5535:16;5511:41;:::i;:::-;5503:6;5496:4;5490:11;5462:91;:::i;:::-;5456:4;5449:105;5367:193;5291:269;;;:::o;5566:73::-;5611:3;5566:73;:::o;5645:189::-;5722:32;;:::i;:::-;5763:65;5821:6;5813;5807:4;5763:65;:::i;:::-;5698:136;5645:189;;:::o;5840:186::-;5900:120;5917:3;5910:5;5907:14;5900:120;;;5971:39;6008:1;6001:5;5971:39;:::i;:::-;5944:1;5937:5;5933:13;5924:22;;5900:120;;;5840:186;;:::o;6032:543::-;6133:2;6128:3;6125:11;6122:446;;;6167:38;6199:5;6167:38;:::i;:::-;6251:29;6269:10;6251:29;:::i;:::-;6241:8;6237:44;6434:2;6422:10;6419:18;6416:49;;;6455:8;6440:23;;6416:49;6478:80;6534:22;6552:3;6534:22;:::i;:::-;6524:8;6520:37;6507:11;6478:80;:::i;:::-;6137:431;;6122:446;6032:543;;;:::o;6581:117::-;6635:8;6685:5;6679:4;6675:16;6654:37;;6581:117;;;;:::o;6704:169::-;6748:6;6781:51;6829:1;6825:6;6817:5;6814:1;6810:13;6781:51;:::i;:::-;6777:56;6862:4;6856;6852:15;6842:25;;6755:118;6704:169;;;;:::o;6878:295::-;6954:4;7100:29;7125:3;7119:4;7100:29;:::i;:::-;7092:37;;7162:3;7159:1;7155:11;7149:4;7146:21;7138:29;;6878:295;;;;:::o;7178:1395::-;7295:37;7328:3;7295:37;:::i;:::-;7397:18;7389:6;7386:30;7383:56;;;7419:18;;:::i;:::-;7383:56;7463:38;7495:4;7489:11;7463:38;:::i;:::-;7548:67;7608:6;7600;7594:4;7548:67;:::i;:::-;7642:1;7666:4;7653:17;;7698:2;7690:6;7687:14;7715:1;7710:618;;;;8372:1;8389:6;8386:77;;;8438:9;8433:3;8429:19;8423:26;8414:35;;8386:77;8489:67;8549:6;8542:5;8489:67;:::i;:::-;8483:4;8476:81;8345:222;7680:887;;7710:618;7762:4;7758:9;7750:6;7746:22;7796:37;7828:4;7796:37;:::i;:::-;7855:1;7869:208;7883:7;7880:1;7877:14;7869:208;;;7962:9;7957:3;7953:19;7947:26;7939:6;7932:42;8013:1;8005:6;8001:14;7991:24;;8060:2;8049:9;8045:18;8032:31;;7906:4;7903:1;7899:12;7894:17;;7869:208;;;8105:6;8096:7;8093:19;8090:179;;;8163:9;8158:3;8154:19;8148:26;8206:48;8248:4;8240:6;8236:17;8225:9;8206:48;:::i;:::-;8198:6;8191:64;8113:156;8090:179;8315:1;8311;8303:6;8299:14;8295:22;8289:4;8282:36;7717:611;;;7680:887;;7270:1303;;;7178:1395;;:::o;628:16679:1:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_913":{"entryPoint":4485,"id":913,"parameterSlots":4,"returnSlots":0},"@_approve_779":{"entryPoint":2573,"id":779,"parameterSlots":2,"returnSlots":0},"@_baseURI_216":{"entryPoint":4185,"id":216,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_900":{"entryPoint":4479,"id":900,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_887":{"entryPoint":4491,"id":887,"parameterSlots":4,"returnSlots":1},"@_exists_448":{"entryPoint":4414,"id":448,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_482":{"entryPoint":2758,"id":482,"parameterSlots":2,"returnSlots":1},"@_msgSender_1432":{"entryPoint":2565,"id":1432,"parameterSlots":0,"returnSlots":1},"@_ownerOf_430":{"entryPoint":3668,"id":430,"parameterSlots":1,"returnSlots":1},"@_requireMinted_825":{"entryPoint":2490,"id":825,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_417":{"entryPoint":4093,"id":417,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_811":{"entryPoint":3729,"id":811,"parameterSlots":3,"returnSlots":0},"@_transfer_755":{"entryPoint":2907,"id":755,"parameterSlots":3,"returnSlots":0},"@approve_259":{"entryPoint":1142,"id":259,"parameterSlots":2,"returnSlots":0},"@balanceOf_120":{"entryPoint":1683,"id":120,"parameterSlots":1,"returnSlots":1},"@getApproved_277":{"entryPoint":1072,"id":277,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_312":{"entryPoint":2236,"id":312,"parameterSlots":2,"returnSlots":1},"@isContract_1108":{"entryPoint":5221,"id":1108,"parameterSlots":1,"returnSlots":1},"@log10_2355":{"entryPoint":4882,"id":2355,"parameterSlots":1,"returnSlots":1},"@name_158":{"entryPoint":926,"id":158,"parameterSlots":0,"returnSlots":1},"@ownerOf_148":{"entryPoint":1549,"id":148,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_358":{"entryPoint":1517,"id":358,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_388":{"entryPoint":2034,"id":388,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_294":{"entryPoint":2012,"id":294,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1640":{"entryPoint":2384,"id":1640,"parameterSlots":1,"returnSlots":1},"@supportsInterface_96":{"entryPoint":700,"id":96,"parameterSlots":1,"returnSlots":1},"@symbol_168":{"entryPoint":1866,"id":168,"parameterSlots":0,"returnSlots":1},"@toString_1500":{"entryPoint":4208,"id":1500,"parameterSlots":1,"returnSlots":1},"@tokenURI_207":{"entryPoint":2132,"id":207,"parameterSlots":1,"returnSlots":1},"@transferFrom_339":{"entryPoint":1421,"id":339,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6415,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6133,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6481,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5674,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6658,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5940,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6527,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6154,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5876,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8381,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5695,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5790,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5421,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8227,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5550,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7521,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7189,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8085,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":7685,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":7831,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":7939,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7443,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7043,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6068,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7570,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5805,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8284,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5607,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7224,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8120,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7866,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7974,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7478,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7332,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7078,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6083,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6324,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5256,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6351,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8199,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5463,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8210,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5474,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7510,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5772,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5409,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5276,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5740,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5641,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6400,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5491,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6769,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6275,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x12":{"entryPoint":8152,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6722,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6228,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6218,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6223,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5271,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5266,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5533,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7110,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8006,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7606,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":7752,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":7898,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7364,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7256,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":6818,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":6964,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5832,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6110,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5320,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5651,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:23154:13","nodeType":"YulBlock","src":"0:23154:13","statements":[{"body":{"nativeSrc":"47:35:13","nodeType":"YulBlock","src":"47:35:13","statements":[{"nativeSrc":"57:19:13","nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:13","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:13","nodeType":"YulIdentifier","src":"67:5:13"},"nativeSrc":"67:9:13","nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:13","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:13","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:13","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nativeSrc":"177:28:13","nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:13","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:13","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:13","nodeType":"YulIdentifier","src":"187:6:13"},"nativeSrc":"187:12:13","nodeType":"YulFunctionCall","src":"187:12:13"},"nativeSrc":"187:12:13","nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:13","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nativeSrc":"300:28:13","nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:13","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:13","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:13","nodeType":"YulIdentifier","src":"310:6:13"},"nativeSrc":"310:12:13","nodeType":"YulFunctionCall","src":"310:12:13"},"nativeSrc":"310:12:13","nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:13","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nativeSrc":"378:105:13","nodeType":"YulBlock","src":"378:105:13","statements":[{"nativeSrc":"388:89:13","nodeType":"YulAssignment","src":"388:89:13","value":{"arguments":[{"name":"value","nativeSrc":"403:5:13","nodeType":"YulIdentifier","src":"403:5:13"},{"kind":"number","nativeSrc":"410:66:13","nodeType":"YulLiteral","src":"410:66:13","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:13","nodeType":"YulIdentifier","src":"399:3:13"},"nativeSrc":"399:78:13","nodeType":"YulFunctionCall","src":"399:78:13"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:13","nodeType":"YulIdentifier","src":"388:7:13"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:13","nodeType":"YulTypedName","src":"360:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:13","nodeType":"YulTypedName","src":"370:7:13","type":""}],"src":"334:149:13"},{"body":{"nativeSrc":"531:78:13","nodeType":"YulBlock","src":"531:78:13","statements":[{"body":{"nativeSrc":"587:16:13","nodeType":"YulBlock","src":"587:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:13","nodeType":"YulLiteral","src":"596:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:13","nodeType":"YulLiteral","src":"599:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:13","nodeType":"YulIdentifier","src":"589:6:13"},"nativeSrc":"589:12:13","nodeType":"YulFunctionCall","src":"589:12:13"},"nativeSrc":"589:12:13","nodeType":"YulExpressionStatement","src":"589:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:13","nodeType":"YulIdentifier","src":"554:5:13"},{"arguments":[{"name":"value","nativeSrc":"578:5:13","nodeType":"YulIdentifier","src":"578:5:13"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:13","nodeType":"YulIdentifier","src":"561:16:13"},"nativeSrc":"561:23:13","nodeType":"YulFunctionCall","src":"561:23:13"}],"functionName":{"name":"eq","nativeSrc":"551:2:13","nodeType":"YulIdentifier","src":"551:2:13"},"nativeSrc":"551:34:13","nodeType":"YulFunctionCall","src":"551:34:13"}],"functionName":{"name":"iszero","nativeSrc":"544:6:13","nodeType":"YulIdentifier","src":"544:6:13"},"nativeSrc":"544:42:13","nodeType":"YulFunctionCall","src":"544:42:13"},"nativeSrc":"541:62:13","nodeType":"YulIf","src":"541:62:13"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:13","nodeType":"YulTypedName","src":"524:5:13","type":""}],"src":"489:120:13"},{"body":{"nativeSrc":"666:86:13","nodeType":"YulBlock","src":"666:86:13","statements":[{"nativeSrc":"676:29:13","nodeType":"YulAssignment","src":"676:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:13","nodeType":"YulIdentifier","src":"698:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:13","nodeType":"YulIdentifier","src":"685:12:13"},"nativeSrc":"685:20:13","nodeType":"YulFunctionCall","src":"685:20:13"},"variableNames":[{"name":"value","nativeSrc":"676:5:13","nodeType":"YulIdentifier","src":"676:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:13","nodeType":"YulIdentifier","src":"740:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:13","nodeType":"YulIdentifier","src":"714:25:13"},"nativeSrc":"714:32:13","nodeType":"YulFunctionCall","src":"714:32:13"},"nativeSrc":"714:32:13","nodeType":"YulExpressionStatement","src":"714:32:13"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:13","nodeType":"YulTypedName","src":"644:6:13","type":""},{"name":"end","nativeSrc":"652:3:13","nodeType":"YulTypedName","src":"652:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:13","nodeType":"YulTypedName","src":"660:5:13","type":""}],"src":"615:137:13"},{"body":{"nativeSrc":"823:262:13","nodeType":"YulBlock","src":"823:262:13","statements":[{"body":{"nativeSrc":"869:83:13","nodeType":"YulBlock","src":"869:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:13","nodeType":"YulIdentifier","src":"871:77:13"},"nativeSrc":"871:79:13","nodeType":"YulFunctionCall","src":"871:79:13"},"nativeSrc":"871:79:13","nodeType":"YulExpressionStatement","src":"871:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:13","nodeType":"YulIdentifier","src":"844:7:13"},{"name":"headStart","nativeSrc":"853:9:13","nodeType":"YulIdentifier","src":"853:9:13"}],"functionName":{"name":"sub","nativeSrc":"840:3:13","nodeType":"YulIdentifier","src":"840:3:13"},"nativeSrc":"840:23:13","nodeType":"YulFunctionCall","src":"840:23:13"},{"kind":"number","nativeSrc":"865:2:13","nodeType":"YulLiteral","src":"865:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:13","nodeType":"YulIdentifier","src":"836:3:13"},"nativeSrc":"836:32:13","nodeType":"YulFunctionCall","src":"836:32:13"},"nativeSrc":"833:119:13","nodeType":"YulIf","src":"833:119:13"},{"nativeSrc":"962:116:13","nodeType":"YulBlock","src":"962:116:13","statements":[{"nativeSrc":"977:15:13","nodeType":"YulVariableDeclaration","src":"977:15:13","value":{"kind":"number","nativeSrc":"991:1:13","nodeType":"YulLiteral","src":"991:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:13","nodeType":"YulTypedName","src":"981:6:13","type":""}]},{"nativeSrc":"1006:62:13","nodeType":"YulAssignment","src":"1006:62:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:13","nodeType":"YulIdentifier","src":"1040:9:13"},{"name":"offset","nativeSrc":"1051:6:13","nodeType":"YulIdentifier","src":"1051:6:13"}],"functionName":{"name":"add","nativeSrc":"1036:3:13","nodeType":"YulIdentifier","src":"1036:3:13"},"nativeSrc":"1036:22:13","nodeType":"YulFunctionCall","src":"1036:22:13"},{"name":"dataEnd","nativeSrc":"1060:7:13","nodeType":"YulIdentifier","src":"1060:7:13"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:13","nodeType":"YulIdentifier","src":"1016:19:13"},"nativeSrc":"1016:52:13","nodeType":"YulFunctionCall","src":"1016:52:13"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:13","nodeType":"YulIdentifier","src":"1006:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:13","nodeType":"YulTypedName","src":"793:9:13","type":""},{"name":"dataEnd","nativeSrc":"804:7:13","nodeType":"YulTypedName","src":"804:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:13","nodeType":"YulTypedName","src":"816:6:13","type":""}],"src":"758:327:13"},{"body":{"nativeSrc":"1133:48:13","nodeType":"YulBlock","src":"1133:48:13","statements":[{"nativeSrc":"1143:32:13","nodeType":"YulAssignment","src":"1143:32:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:13","nodeType":"YulIdentifier","src":"1168:5:13"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:13","nodeType":"YulIdentifier","src":"1161:6:13"},"nativeSrc":"1161:13:13","nodeType":"YulFunctionCall","src":"1161:13:13"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:13","nodeType":"YulIdentifier","src":"1154:6:13"},"nativeSrc":"1154:21:13","nodeType":"YulFunctionCall","src":"1154:21:13"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:13","nodeType":"YulIdentifier","src":"1143:7:13"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:13","nodeType":"YulTypedName","src":"1115:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:13","nodeType":"YulTypedName","src":"1125:7:13","type":""}],"src":"1091:90:13"},{"body":{"nativeSrc":"1246:50:13","nodeType":"YulBlock","src":"1246:50:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:13","nodeType":"YulIdentifier","src":"1263:3:13"},{"arguments":[{"name":"value","nativeSrc":"1283:5:13","nodeType":"YulIdentifier","src":"1283:5:13"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:13","nodeType":"YulIdentifier","src":"1268:14:13"},"nativeSrc":"1268:21:13","nodeType":"YulFunctionCall","src":"1268:21:13"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:13","nodeType":"YulIdentifier","src":"1256:6:13"},"nativeSrc":"1256:34:13","nodeType":"YulFunctionCall","src":"1256:34:13"},"nativeSrc":"1256:34:13","nodeType":"YulExpressionStatement","src":"1256:34:13"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:13","nodeType":"YulTypedName","src":"1234:5:13","type":""},{"name":"pos","nativeSrc":"1241:3:13","nodeType":"YulTypedName","src":"1241:3:13","type":""}],"src":"1187:109:13"},{"body":{"nativeSrc":"1394:118:13","nodeType":"YulBlock","src":"1394:118:13","statements":[{"nativeSrc":"1404:26:13","nodeType":"YulAssignment","src":"1404:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:13","nodeType":"YulIdentifier","src":"1416:9:13"},{"kind":"number","nativeSrc":"1427:2:13","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:13","nodeType":"YulIdentifier","src":"1412:3:13"},"nativeSrc":"1412:18:13","nodeType":"YulFunctionCall","src":"1412:18:13"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:13","nodeType":"YulIdentifier","src":"1404:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:13","nodeType":"YulIdentifier","src":"1478:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:13","nodeType":"YulIdentifier","src":"1491:9:13"},{"kind":"number","nativeSrc":"1502:1:13","nodeType":"YulLiteral","src":"1502:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:13","nodeType":"YulIdentifier","src":"1487:3:13"},"nativeSrc":"1487:17:13","nodeType":"YulFunctionCall","src":"1487:17:13"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:13","nodeType":"YulIdentifier","src":"1440:37:13"},"nativeSrc":"1440:65:13","nodeType":"YulFunctionCall","src":"1440:65:13"},"nativeSrc":"1440:65:13","nodeType":"YulExpressionStatement","src":"1440:65:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:13","nodeType":"YulTypedName","src":"1366:9:13","type":""},{"name":"value0","nativeSrc":"1378:6:13","nodeType":"YulTypedName","src":"1378:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:13","nodeType":"YulTypedName","src":"1389:4:13","type":""}],"src":"1302:210:13"},{"body":{"nativeSrc":"1577:40:13","nodeType":"YulBlock","src":"1577:40:13","statements":[{"nativeSrc":"1588:22:13","nodeType":"YulAssignment","src":"1588:22:13","value":{"arguments":[{"name":"value","nativeSrc":"1604:5:13","nodeType":"YulIdentifier","src":"1604:5:13"}],"functionName":{"name":"mload","nativeSrc":"1598:5:13","nodeType":"YulIdentifier","src":"1598:5:13"},"nativeSrc":"1598:12:13","nodeType":"YulFunctionCall","src":"1598:12:13"},"variableNames":[{"name":"length","nativeSrc":"1588:6:13","nodeType":"YulIdentifier","src":"1588:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1518:99:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1560:5:13","nodeType":"YulTypedName","src":"1560:5:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1570:6:13","nodeType":"YulTypedName","src":"1570:6:13","type":""}],"src":"1518:99:13"},{"body":{"nativeSrc":"1719:73:13","nodeType":"YulBlock","src":"1719:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1736:3:13","nodeType":"YulIdentifier","src":"1736:3:13"},{"name":"length","nativeSrc":"1741:6:13","nodeType":"YulIdentifier","src":"1741:6:13"}],"functionName":{"name":"mstore","nativeSrc":"1729:6:13","nodeType":"YulIdentifier","src":"1729:6:13"},"nativeSrc":"1729:19:13","nodeType":"YulFunctionCall","src":"1729:19:13"},"nativeSrc":"1729:19:13","nodeType":"YulExpressionStatement","src":"1729:19:13"},{"nativeSrc":"1757:29:13","nodeType":"YulAssignment","src":"1757:29:13","value":{"arguments":[{"name":"pos","nativeSrc":"1776:3:13","nodeType":"YulIdentifier","src":"1776:3:13"},{"kind":"number","nativeSrc":"1781:4:13","nodeType":"YulLiteral","src":"1781:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1772:3:13","nodeType":"YulIdentifier","src":"1772:3:13"},"nativeSrc":"1772:14:13","nodeType":"YulFunctionCall","src":"1772:14:13"},"variableNames":[{"name":"updated_pos","nativeSrc":"1757:11:13","nodeType":"YulIdentifier","src":"1757:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1623:169:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:13","nodeType":"YulTypedName","src":"1691:3:13","type":""},{"name":"length","nativeSrc":"1696:6:13","nodeType":"YulTypedName","src":"1696:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1707:11:13","nodeType":"YulTypedName","src":"1707:11:13","type":""}],"src":"1623:169:13"},{"body":{"nativeSrc":"1860:186:13","nodeType":"YulBlock","src":"1860:186:13","statements":[{"nativeSrc":"1871:10:13","nodeType":"YulVariableDeclaration","src":"1871:10:13","value":{"kind":"number","nativeSrc":"1880:1:13","nodeType":"YulLiteral","src":"1880:1:13","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1875:1:13","nodeType":"YulTypedName","src":"1875:1:13","type":""}]},{"body":{"nativeSrc":"1940:63:13","nodeType":"YulBlock","src":"1940:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1965:3:13","nodeType":"YulIdentifier","src":"1965:3:13"},{"name":"i","nativeSrc":"1970:1:13","nodeType":"YulIdentifier","src":"1970:1:13"}],"functionName":{"name":"add","nativeSrc":"1961:3:13","nodeType":"YulIdentifier","src":"1961:3:13"},"nativeSrc":"1961:11:13","nodeType":"YulFunctionCall","src":"1961:11:13"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1984:3:13","nodeType":"YulIdentifier","src":"1984:3:13"},{"name":"i","nativeSrc":"1989:1:13","nodeType":"YulIdentifier","src":"1989:1:13"}],"functionName":{"name":"add","nativeSrc":"1980:3:13","nodeType":"YulIdentifier","src":"1980:3:13"},"nativeSrc":"1980:11:13","nodeType":"YulFunctionCall","src":"1980:11:13"}],"functionName":{"name":"mload","nativeSrc":"1974:5:13","nodeType":"YulIdentifier","src":"1974:5:13"},"nativeSrc":"1974:18:13","nodeType":"YulFunctionCall","src":"1974:18:13"}],"functionName":{"name":"mstore","nativeSrc":"1954:6:13","nodeType":"YulIdentifier","src":"1954:6:13"},"nativeSrc":"1954:39:13","nodeType":"YulFunctionCall","src":"1954:39:13"},"nativeSrc":"1954:39:13","nodeType":"YulExpressionStatement","src":"1954:39:13"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1901:1:13","nodeType":"YulIdentifier","src":"1901:1:13"},{"name":"length","nativeSrc":"1904:6:13","nodeType":"YulIdentifier","src":"1904:6:13"}],"functionName":{"name":"lt","nativeSrc":"1898:2:13","nodeType":"YulIdentifier","src":"1898:2:13"},"nativeSrc":"1898:13:13","nodeType":"YulFunctionCall","src":"1898:13:13"},"nativeSrc":"1890:113:13","nodeType":"YulForLoop","post":{"nativeSrc":"1912:19:13","nodeType":"YulBlock","src":"1912:19:13","statements":[{"nativeSrc":"1914:15:13","nodeType":"YulAssignment","src":"1914:15:13","value":{"arguments":[{"name":"i","nativeSrc":"1923:1:13","nodeType":"YulIdentifier","src":"1923:1:13"},{"kind":"number","nativeSrc":"1926:2:13","nodeType":"YulLiteral","src":"1926:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1919:3:13","nodeType":"YulIdentifier","src":"1919:3:13"},"nativeSrc":"1919:10:13","nodeType":"YulFunctionCall","src":"1919:10:13"},"variableNames":[{"name":"i","nativeSrc":"1914:1:13","nodeType":"YulIdentifier","src":"1914:1:13"}]}]},"pre":{"nativeSrc":"1894:3:13","nodeType":"YulBlock","src":"1894:3:13","statements":[]},"src":"1890:113:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2023:3:13","nodeType":"YulIdentifier","src":"2023:3:13"},{"name":"length","nativeSrc":"2028:6:13","nodeType":"YulIdentifier","src":"2028:6:13"}],"functionName":{"name":"add","nativeSrc":"2019:3:13","nodeType":"YulIdentifier","src":"2019:3:13"},"nativeSrc":"2019:16:13","nodeType":"YulFunctionCall","src":"2019:16:13"},{"kind":"number","nativeSrc":"2037:1:13","nodeType":"YulLiteral","src":"2037:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2012:6:13","nodeType":"YulIdentifier","src":"2012:6:13"},"nativeSrc":"2012:27:13","nodeType":"YulFunctionCall","src":"2012:27:13"},"nativeSrc":"2012:27:13","nodeType":"YulExpressionStatement","src":"2012:27:13"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1798:248:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1842:3:13","nodeType":"YulTypedName","src":"1842:3:13","type":""},{"name":"dst","nativeSrc":"1847:3:13","nodeType":"YulTypedName","src":"1847:3:13","type":""},{"name":"length","nativeSrc":"1852:6:13","nodeType":"YulTypedName","src":"1852:6:13","type":""}],"src":"1798:248:13"},{"body":{"nativeSrc":"2100:54:13","nodeType":"YulBlock","src":"2100:54:13","statements":[{"nativeSrc":"2110:38:13","nodeType":"YulAssignment","src":"2110:38:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2128:5:13","nodeType":"YulIdentifier","src":"2128:5:13"},{"kind":"number","nativeSrc":"2135:2:13","nodeType":"YulLiteral","src":"2135:2:13","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2124:3:13","nodeType":"YulIdentifier","src":"2124:3:13"},"nativeSrc":"2124:14:13","nodeType":"YulFunctionCall","src":"2124:14:13"},{"arguments":[{"kind":"number","nativeSrc":"2144:2:13","nodeType":"YulLiteral","src":"2144:2:13","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2140:3:13","nodeType":"YulIdentifier","src":"2140:3:13"},"nativeSrc":"2140:7:13","nodeType":"YulFunctionCall","src":"2140:7:13"}],"functionName":{"name":"and","nativeSrc":"2120:3:13","nodeType":"YulIdentifier","src":"2120:3:13"},"nativeSrc":"2120:28:13","nodeType":"YulFunctionCall","src":"2120:28:13"},"variableNames":[{"name":"result","nativeSrc":"2110:6:13","nodeType":"YulIdentifier","src":"2110:6:13"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"2052:102:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2083:5:13","nodeType":"YulTypedName","src":"2083:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2093:6:13","nodeType":"YulTypedName","src":"2093:6:13","type":""}],"src":"2052:102:13"},{"body":{"nativeSrc":"2252:285:13","nodeType":"YulBlock","src":"2252:285:13","statements":[{"nativeSrc":"2262:53:13","nodeType":"YulVariableDeclaration","src":"2262:53:13","value":{"arguments":[{"name":"value","nativeSrc":"2309:5:13","nodeType":"YulIdentifier","src":"2309:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"2276:32:13","nodeType":"YulIdentifier","src":"2276:32:13"},"nativeSrc":"2276:39:13","nodeType":"YulFunctionCall","src":"2276:39:13"},"variables":[{"name":"length","nativeSrc":"2266:6:13","nodeType":"YulTypedName","src":"2266:6:13","type":""}]},{"nativeSrc":"2324:78:13","nodeType":"YulAssignment","src":"2324:78:13","value":{"arguments":[{"name":"pos","nativeSrc":"2390:3:13","nodeType":"YulIdentifier","src":"2390:3:13"},{"name":"length","nativeSrc":"2395:6:13","nodeType":"YulIdentifier","src":"2395:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2331:58:13","nodeType":"YulIdentifier","src":"2331:58:13"},"nativeSrc":"2331:71:13","nodeType":"YulFunctionCall","src":"2331:71:13"},"variableNames":[{"name":"pos","nativeSrc":"2324:3:13","nodeType":"YulIdentifier","src":"2324:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2450:5:13","nodeType":"YulIdentifier","src":"2450:5:13"},{"kind":"number","nativeSrc":"2457:4:13","nodeType":"YulLiteral","src":"2457:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2446:3:13","nodeType":"YulIdentifier","src":"2446:3:13"},"nativeSrc":"2446:16:13","nodeType":"YulFunctionCall","src":"2446:16:13"},{"name":"pos","nativeSrc":"2464:3:13","nodeType":"YulIdentifier","src":"2464:3:13"},{"name":"length","nativeSrc":"2469:6:13","nodeType":"YulIdentifier","src":"2469:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2411:34:13","nodeType":"YulIdentifier","src":"2411:34:13"},"nativeSrc":"2411:65:13","nodeType":"YulFunctionCall","src":"2411:65:13"},"nativeSrc":"2411:65:13","nodeType":"YulExpressionStatement","src":"2411:65:13"},{"nativeSrc":"2485:46:13","nodeType":"YulAssignment","src":"2485:46:13","value":{"arguments":[{"name":"pos","nativeSrc":"2496:3:13","nodeType":"YulIdentifier","src":"2496:3:13"},{"arguments":[{"name":"length","nativeSrc":"2523:6:13","nodeType":"YulIdentifier","src":"2523:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2501:21:13","nodeType":"YulIdentifier","src":"2501:21:13"},"nativeSrc":"2501:29:13","nodeType":"YulFunctionCall","src":"2501:29:13"}],"functionName":{"name":"add","nativeSrc":"2492:3:13","nodeType":"YulIdentifier","src":"2492:3:13"},"nativeSrc":"2492:39:13","nodeType":"YulFunctionCall","src":"2492:39:13"},"variableNames":[{"name":"end","nativeSrc":"2485:3:13","nodeType":"YulIdentifier","src":"2485:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2160:377:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2233:5:13","nodeType":"YulTypedName","src":"2233:5:13","type":""},{"name":"pos","nativeSrc":"2240:3:13","nodeType":"YulTypedName","src":"2240:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2248:3:13","nodeType":"YulTypedName","src":"2248:3:13","type":""}],"src":"2160:377:13"},{"body":{"nativeSrc":"2661:195:13","nodeType":"YulBlock","src":"2661:195:13","statements":[{"nativeSrc":"2671:26:13","nodeType":"YulAssignment","src":"2671:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"2683:9:13","nodeType":"YulIdentifier","src":"2683:9:13"},{"kind":"number","nativeSrc":"2694:2:13","nodeType":"YulLiteral","src":"2694:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2679:3:13","nodeType":"YulIdentifier","src":"2679:3:13"},"nativeSrc":"2679:18:13","nodeType":"YulFunctionCall","src":"2679:18:13"},"variableNames":[{"name":"tail","nativeSrc":"2671:4:13","nodeType":"YulIdentifier","src":"2671:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2718:9:13","nodeType":"YulIdentifier","src":"2718:9:13"},{"kind":"number","nativeSrc":"2729:1:13","nodeType":"YulLiteral","src":"2729:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2714:3:13","nodeType":"YulIdentifier","src":"2714:3:13"},"nativeSrc":"2714:17:13","nodeType":"YulFunctionCall","src":"2714:17:13"},{"arguments":[{"name":"tail","nativeSrc":"2737:4:13","nodeType":"YulIdentifier","src":"2737:4:13"},{"name":"headStart","nativeSrc":"2743:9:13","nodeType":"YulIdentifier","src":"2743:9:13"}],"functionName":{"name":"sub","nativeSrc":"2733:3:13","nodeType":"YulIdentifier","src":"2733:3:13"},"nativeSrc":"2733:20:13","nodeType":"YulFunctionCall","src":"2733:20:13"}],"functionName":{"name":"mstore","nativeSrc":"2707:6:13","nodeType":"YulIdentifier","src":"2707:6:13"},"nativeSrc":"2707:47:13","nodeType":"YulFunctionCall","src":"2707:47:13"},"nativeSrc":"2707:47:13","nodeType":"YulExpressionStatement","src":"2707:47:13"},{"nativeSrc":"2763:86:13","nodeType":"YulAssignment","src":"2763:86:13","value":{"arguments":[{"name":"value0","nativeSrc":"2835:6:13","nodeType":"YulIdentifier","src":"2835:6:13"},{"name":"tail","nativeSrc":"2844:4:13","nodeType":"YulIdentifier","src":"2844:4:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2771:63:13","nodeType":"YulIdentifier","src":"2771:63:13"},"nativeSrc":"2771:78:13","nodeType":"YulFunctionCall","src":"2771:78:13"},"variableNames":[{"name":"tail","nativeSrc":"2763:4:13","nodeType":"YulIdentifier","src":"2763:4:13"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2543:313:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2633:9:13","nodeType":"YulTypedName","src":"2633:9:13","type":""},{"name":"value0","nativeSrc":"2645:6:13","nodeType":"YulTypedName","src":"2645:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2656:4:13","nodeType":"YulTypedName","src":"2656:4:13","type":""}],"src":"2543:313:13"},{"body":{"nativeSrc":"2907:32:13","nodeType":"YulBlock","src":"2907:32:13","statements":[{"nativeSrc":"2917:16:13","nodeType":"YulAssignment","src":"2917:16:13","value":{"name":"value","nativeSrc":"2928:5:13","nodeType":"YulIdentifier","src":"2928:5:13"},"variableNames":[{"name":"cleaned","nativeSrc":"2917:7:13","nodeType":"YulIdentifier","src":"2917:7:13"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2862:77:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2889:5:13","nodeType":"YulTypedName","src":"2889:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2899:7:13","nodeType":"YulTypedName","src":"2899:7:13","type":""}],"src":"2862:77:13"},{"body":{"nativeSrc":"2988:79:13","nodeType":"YulBlock","src":"2988:79:13","statements":[{"body":{"nativeSrc":"3045:16:13","nodeType":"YulBlock","src":"3045:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3054:1:13","nodeType":"YulLiteral","src":"3054:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"3057:1:13","nodeType":"YulLiteral","src":"3057:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3047:6:13","nodeType":"YulIdentifier","src":"3047:6:13"},"nativeSrc":"3047:12:13","nodeType":"YulFunctionCall","src":"3047:12:13"},"nativeSrc":"3047:12:13","nodeType":"YulExpressionStatement","src":"3047:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3011:5:13","nodeType":"YulIdentifier","src":"3011:5:13"},{"arguments":[{"name":"value","nativeSrc":"3036:5:13","nodeType":"YulIdentifier","src":"3036:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3018:17:13","nodeType":"YulIdentifier","src":"3018:17:13"},"nativeSrc":"3018:24:13","nodeType":"YulFunctionCall","src":"3018:24:13"}],"functionName":{"name":"eq","nativeSrc":"3008:2:13","nodeType":"YulIdentifier","src":"3008:2:13"},"nativeSrc":"3008:35:13","nodeType":"YulFunctionCall","src":"3008:35:13"}],"functionName":{"name":"iszero","nativeSrc":"3001:6:13","nodeType":"YulIdentifier","src":"3001:6:13"},"nativeSrc":"3001:43:13","nodeType":"YulFunctionCall","src":"3001:43:13"},"nativeSrc":"2998:63:13","nodeType":"YulIf","src":"2998:63:13"}]},"name":"validator_revert_t_uint256","nativeSrc":"2945:122:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2981:5:13","nodeType":"YulTypedName","src":"2981:5:13","type":""}],"src":"2945:122:13"},{"body":{"nativeSrc":"3125:87:13","nodeType":"YulBlock","src":"3125:87:13","statements":[{"nativeSrc":"3135:29:13","nodeType":"YulAssignment","src":"3135:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"3157:6:13","nodeType":"YulIdentifier","src":"3157:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"3144:12:13","nodeType":"YulIdentifier","src":"3144:12:13"},"nativeSrc":"3144:20:13","nodeType":"YulFunctionCall","src":"3144:20:13"},"variableNames":[{"name":"value","nativeSrc":"3135:5:13","nodeType":"YulIdentifier","src":"3135:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3200:5:13","nodeType":"YulIdentifier","src":"3200:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3173:26:13","nodeType":"YulIdentifier","src":"3173:26:13"},"nativeSrc":"3173:33:13","nodeType":"YulFunctionCall","src":"3173:33:13"},"nativeSrc":"3173:33:13","nodeType":"YulExpressionStatement","src":"3173:33:13"}]},"name":"abi_decode_t_uint256","nativeSrc":"3073:139:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3103:6:13","nodeType":"YulTypedName","src":"3103:6:13","type":""},{"name":"end","nativeSrc":"3111:3:13","nodeType":"YulTypedName","src":"3111:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3119:5:13","nodeType":"YulTypedName","src":"3119:5:13","type":""}],"src":"3073:139:13"},{"body":{"nativeSrc":"3284:263:13","nodeType":"YulBlock","src":"3284:263:13","statements":[{"body":{"nativeSrc":"3330:83:13","nodeType":"YulBlock","src":"3330:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3332:77:13","nodeType":"YulIdentifier","src":"3332:77:13"},"nativeSrc":"3332:79:13","nodeType":"YulFunctionCall","src":"3332:79:13"},"nativeSrc":"3332:79:13","nodeType":"YulExpressionStatement","src":"3332:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3305:7:13","nodeType":"YulIdentifier","src":"3305:7:13"},{"name":"headStart","nativeSrc":"3314:9:13","nodeType":"YulIdentifier","src":"3314:9:13"}],"functionName":{"name":"sub","nativeSrc":"3301:3:13","nodeType":"YulIdentifier","src":"3301:3:13"},"nativeSrc":"3301:23:13","nodeType":"YulFunctionCall","src":"3301:23:13"},{"kind":"number","nativeSrc":"3326:2:13","nodeType":"YulLiteral","src":"3326:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3297:3:13","nodeType":"YulIdentifier","src":"3297:3:13"},"nativeSrc":"3297:32:13","nodeType":"YulFunctionCall","src":"3297:32:13"},"nativeSrc":"3294:119:13","nodeType":"YulIf","src":"3294:119:13"},{"nativeSrc":"3423:117:13","nodeType":"YulBlock","src":"3423:117:13","statements":[{"nativeSrc":"3438:15:13","nodeType":"YulVariableDeclaration","src":"3438:15:13","value":{"kind":"number","nativeSrc":"3452:1:13","nodeType":"YulLiteral","src":"3452:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3442:6:13","nodeType":"YulTypedName","src":"3442:6:13","type":""}]},{"nativeSrc":"3467:63:13","nodeType":"YulAssignment","src":"3467:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3502:9:13","nodeType":"YulIdentifier","src":"3502:9:13"},{"name":"offset","nativeSrc":"3513:6:13","nodeType":"YulIdentifier","src":"3513:6:13"}],"functionName":{"name":"add","nativeSrc":"3498:3:13","nodeType":"YulIdentifier","src":"3498:3:13"},"nativeSrc":"3498:22:13","nodeType":"YulFunctionCall","src":"3498:22:13"},{"name":"dataEnd","nativeSrc":"3522:7:13","nodeType":"YulIdentifier","src":"3522:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3477:20:13","nodeType":"YulIdentifier","src":"3477:20:13"},"nativeSrc":"3477:53:13","nodeType":"YulFunctionCall","src":"3477:53:13"},"variableNames":[{"name":"value0","nativeSrc":"3467:6:13","nodeType":"YulIdentifier","src":"3467:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3218:329:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3254:9:13","nodeType":"YulTypedName","src":"3254:9:13","type":""},{"name":"dataEnd","nativeSrc":"3265:7:13","nodeType":"YulTypedName","src":"3265:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3277:6:13","nodeType":"YulTypedName","src":"3277:6:13","type":""}],"src":"3218:329:13"},{"body":{"nativeSrc":"3598:81:13","nodeType":"YulBlock","src":"3598:81:13","statements":[{"nativeSrc":"3608:65:13","nodeType":"YulAssignment","src":"3608:65:13","value":{"arguments":[{"name":"value","nativeSrc":"3623:5:13","nodeType":"YulIdentifier","src":"3623:5:13"},{"kind":"number","nativeSrc":"3630:42:13","nodeType":"YulLiteral","src":"3630:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3619:3:13","nodeType":"YulIdentifier","src":"3619:3:13"},"nativeSrc":"3619:54:13","nodeType":"YulFunctionCall","src":"3619:54:13"},"variableNames":[{"name":"cleaned","nativeSrc":"3608:7:13","nodeType":"YulIdentifier","src":"3608:7:13"}]}]},"name":"cleanup_t_uint160","nativeSrc":"3553:126:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:13","nodeType":"YulTypedName","src":"3580:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3590:7:13","nodeType":"YulTypedName","src":"3590:7:13","type":""}],"src":"3553:126:13"},{"body":{"nativeSrc":"3730:51:13","nodeType":"YulBlock","src":"3730:51:13","statements":[{"nativeSrc":"3740:35:13","nodeType":"YulAssignment","src":"3740:35:13","value":{"arguments":[{"name":"value","nativeSrc":"3769:5:13","nodeType":"YulIdentifier","src":"3769:5:13"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3751:17:13","nodeType":"YulIdentifier","src":"3751:17:13"},"nativeSrc":"3751:24:13","nodeType":"YulFunctionCall","src":"3751:24:13"},"variableNames":[{"name":"cleaned","nativeSrc":"3740:7:13","nodeType":"YulIdentifier","src":"3740:7:13"}]}]},"name":"cleanup_t_address","nativeSrc":"3685:96:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3712:5:13","nodeType":"YulTypedName","src":"3712:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3722:7:13","nodeType":"YulTypedName","src":"3722:7:13","type":""}],"src":"3685:96:13"},{"body":{"nativeSrc":"3852:53:13","nodeType":"YulBlock","src":"3852:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3869:3:13","nodeType":"YulIdentifier","src":"3869:3:13"},{"arguments":[{"name":"value","nativeSrc":"3892:5:13","nodeType":"YulIdentifier","src":"3892:5:13"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"3874:17:13","nodeType":"YulIdentifier","src":"3874:17:13"},"nativeSrc":"3874:24:13","nodeType":"YulFunctionCall","src":"3874:24:13"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:13","nodeType":"YulIdentifier","src":"3862:6:13"},"nativeSrc":"3862:37:13","nodeType":"YulFunctionCall","src":"3862:37:13"},"nativeSrc":"3862:37:13","nodeType":"YulExpressionStatement","src":"3862:37:13"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"3787:118:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3840:5:13","nodeType":"YulTypedName","src":"3840:5:13","type":""},{"name":"pos","nativeSrc":"3847:3:13","nodeType":"YulTypedName","src":"3847:3:13","type":""}],"src":"3787:118:13"},{"body":{"nativeSrc":"4009:124:13","nodeType":"YulBlock","src":"4009:124:13","statements":[{"nativeSrc":"4019:26:13","nodeType":"YulAssignment","src":"4019:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"4031:9:13","nodeType":"YulIdentifier","src":"4031:9:13"},{"kind":"number","nativeSrc":"4042:2:13","nodeType":"YulLiteral","src":"4042:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4027:3:13","nodeType":"YulIdentifier","src":"4027:3:13"},"nativeSrc":"4027:18:13","nodeType":"YulFunctionCall","src":"4027:18:13"},"variableNames":[{"name":"tail","nativeSrc":"4019:4:13","nodeType":"YulIdentifier","src":"4019:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4099:6:13","nodeType":"YulIdentifier","src":"4099:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"4112:9:13","nodeType":"YulIdentifier","src":"4112:9:13"},{"kind":"number","nativeSrc":"4123:1:13","nodeType":"YulLiteral","src":"4123:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4108:3:13","nodeType":"YulIdentifier","src":"4108:3:13"},"nativeSrc":"4108:17:13","nodeType":"YulFunctionCall","src":"4108:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4055:43:13","nodeType":"YulIdentifier","src":"4055:43:13"},"nativeSrc":"4055:71:13","nodeType":"YulFunctionCall","src":"4055:71:13"},"nativeSrc":"4055:71:13","nodeType":"YulExpressionStatement","src":"4055:71:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3911:222:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3981:9:13","nodeType":"YulTypedName","src":"3981:9:13","type":""},{"name":"value0","nativeSrc":"3993:6:13","nodeType":"YulTypedName","src":"3993:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4004:4:13","nodeType":"YulTypedName","src":"4004:4:13","type":""}],"src":"3911:222:13"},{"body":{"nativeSrc":"4182:79:13","nodeType":"YulBlock","src":"4182:79:13","statements":[{"body":{"nativeSrc":"4239:16:13","nodeType":"YulBlock","src":"4239:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4248:1:13","nodeType":"YulLiteral","src":"4248:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"4251:1:13","nodeType":"YulLiteral","src":"4251:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4241:6:13","nodeType":"YulIdentifier","src":"4241:6:13"},"nativeSrc":"4241:12:13","nodeType":"YulFunctionCall","src":"4241:12:13"},"nativeSrc":"4241:12:13","nodeType":"YulExpressionStatement","src":"4241:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4205:5:13","nodeType":"YulIdentifier","src":"4205:5:13"},{"arguments":[{"name":"value","nativeSrc":"4230:5:13","nodeType":"YulIdentifier","src":"4230:5:13"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4212:17:13","nodeType":"YulIdentifier","src":"4212:17:13"},"nativeSrc":"4212:24:13","nodeType":"YulFunctionCall","src":"4212:24:13"}],"functionName":{"name":"eq","nativeSrc":"4202:2:13","nodeType":"YulIdentifier","src":"4202:2:13"},"nativeSrc":"4202:35:13","nodeType":"YulFunctionCall","src":"4202:35:13"}],"functionName":{"name":"iszero","nativeSrc":"4195:6:13","nodeType":"YulIdentifier","src":"4195:6:13"},"nativeSrc":"4195:43:13","nodeType":"YulFunctionCall","src":"4195:43:13"},"nativeSrc":"4192:63:13","nodeType":"YulIf","src":"4192:63:13"}]},"name":"validator_revert_t_address","nativeSrc":"4139:122:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4175:5:13","nodeType":"YulTypedName","src":"4175:5:13","type":""}],"src":"4139:122:13"},{"body":{"nativeSrc":"4319:87:13","nodeType":"YulBlock","src":"4319:87:13","statements":[{"nativeSrc":"4329:29:13","nodeType":"YulAssignment","src":"4329:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"4351:6:13","nodeType":"YulIdentifier","src":"4351:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"4338:12:13","nodeType":"YulIdentifier","src":"4338:12:13"},"nativeSrc":"4338:20:13","nodeType":"YulFunctionCall","src":"4338:20:13"},"variableNames":[{"name":"value","nativeSrc":"4329:5:13","nodeType":"YulIdentifier","src":"4329:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4394:5:13","nodeType":"YulIdentifier","src":"4394:5:13"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4367:26:13","nodeType":"YulIdentifier","src":"4367:26:13"},"nativeSrc":"4367:33:13","nodeType":"YulFunctionCall","src":"4367:33:13"},"nativeSrc":"4367:33:13","nodeType":"YulExpressionStatement","src":"4367:33:13"}]},"name":"abi_decode_t_address","nativeSrc":"4267:139:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4297:6:13","nodeType":"YulTypedName","src":"4297:6:13","type":""},{"name":"end","nativeSrc":"4305:3:13","nodeType":"YulTypedName","src":"4305:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4313:5:13","nodeType":"YulTypedName","src":"4313:5:13","type":""}],"src":"4267:139:13"},{"body":{"nativeSrc":"4495:391:13","nodeType":"YulBlock","src":"4495:391:13","statements":[{"body":{"nativeSrc":"4541:83:13","nodeType":"YulBlock","src":"4541:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4543:77:13","nodeType":"YulIdentifier","src":"4543:77:13"},"nativeSrc":"4543:79:13","nodeType":"YulFunctionCall","src":"4543:79:13"},"nativeSrc":"4543:79:13","nodeType":"YulExpressionStatement","src":"4543:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4516:7:13","nodeType":"YulIdentifier","src":"4516:7:13"},{"name":"headStart","nativeSrc":"4525:9:13","nodeType":"YulIdentifier","src":"4525:9:13"}],"functionName":{"name":"sub","nativeSrc":"4512:3:13","nodeType":"YulIdentifier","src":"4512:3:13"},"nativeSrc":"4512:23:13","nodeType":"YulFunctionCall","src":"4512:23:13"},{"kind":"number","nativeSrc":"4537:2:13","nodeType":"YulLiteral","src":"4537:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4508:3:13","nodeType":"YulIdentifier","src":"4508:3:13"},"nativeSrc":"4508:32:13","nodeType":"YulFunctionCall","src":"4508:32:13"},"nativeSrc":"4505:119:13","nodeType":"YulIf","src":"4505:119:13"},{"nativeSrc":"4634:117:13","nodeType":"YulBlock","src":"4634:117:13","statements":[{"nativeSrc":"4649:15:13","nodeType":"YulVariableDeclaration","src":"4649:15:13","value":{"kind":"number","nativeSrc":"4663:1:13","nodeType":"YulLiteral","src":"4663:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4653:6:13","nodeType":"YulTypedName","src":"4653:6:13","type":""}]},{"nativeSrc":"4678:63:13","nodeType":"YulAssignment","src":"4678:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4713:9:13","nodeType":"YulIdentifier","src":"4713:9:13"},{"name":"offset","nativeSrc":"4724:6:13","nodeType":"YulIdentifier","src":"4724:6:13"}],"functionName":{"name":"add","nativeSrc":"4709:3:13","nodeType":"YulIdentifier","src":"4709:3:13"},"nativeSrc":"4709:22:13","nodeType":"YulFunctionCall","src":"4709:22:13"},{"name":"dataEnd","nativeSrc":"4733:7:13","nodeType":"YulIdentifier","src":"4733:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4688:20:13","nodeType":"YulIdentifier","src":"4688:20:13"},"nativeSrc":"4688:53:13","nodeType":"YulFunctionCall","src":"4688:53:13"},"variableNames":[{"name":"value0","nativeSrc":"4678:6:13","nodeType":"YulIdentifier","src":"4678:6:13"}]}]},{"nativeSrc":"4761:118:13","nodeType":"YulBlock","src":"4761:118:13","statements":[{"nativeSrc":"4776:16:13","nodeType":"YulVariableDeclaration","src":"4776:16:13","value":{"kind":"number","nativeSrc":"4790:2:13","nodeType":"YulLiteral","src":"4790:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4780:6:13","nodeType":"YulTypedName","src":"4780:6:13","type":""}]},{"nativeSrc":"4806:63:13","nodeType":"YulAssignment","src":"4806:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4841:9:13","nodeType":"YulIdentifier","src":"4841:9:13"},{"name":"offset","nativeSrc":"4852:6:13","nodeType":"YulIdentifier","src":"4852:6:13"}],"functionName":{"name":"add","nativeSrc":"4837:3:13","nodeType":"YulIdentifier","src":"4837:3:13"},"nativeSrc":"4837:22:13","nodeType":"YulFunctionCall","src":"4837:22:13"},{"name":"dataEnd","nativeSrc":"4861:7:13","nodeType":"YulIdentifier","src":"4861:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4816:20:13","nodeType":"YulIdentifier","src":"4816:20:13"},"nativeSrc":"4816:53:13","nodeType":"YulFunctionCall","src":"4816:53:13"},"variableNames":[{"name":"value1","nativeSrc":"4806:6:13","nodeType":"YulIdentifier","src":"4806:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4412:474:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4457:9:13","nodeType":"YulTypedName","src":"4457:9:13","type":""},{"name":"dataEnd","nativeSrc":"4468:7:13","nodeType":"YulTypedName","src":"4468:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4480:6:13","nodeType":"YulTypedName","src":"4480:6:13","type":""},{"name":"value1","nativeSrc":"4488:6:13","nodeType":"YulTypedName","src":"4488:6:13","type":""}],"src":"4412:474:13"},{"body":{"nativeSrc":"4992:519:13","nodeType":"YulBlock","src":"4992:519:13","statements":[{"body":{"nativeSrc":"5038:83:13","nodeType":"YulBlock","src":"5038:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5040:77:13","nodeType":"YulIdentifier","src":"5040:77:13"},"nativeSrc":"5040:79:13","nodeType":"YulFunctionCall","src":"5040:79:13"},"nativeSrc":"5040:79:13","nodeType":"YulExpressionStatement","src":"5040:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5013:7:13","nodeType":"YulIdentifier","src":"5013:7:13"},{"name":"headStart","nativeSrc":"5022:9:13","nodeType":"YulIdentifier","src":"5022:9:13"}],"functionName":{"name":"sub","nativeSrc":"5009:3:13","nodeType":"YulIdentifier","src":"5009:3:13"},"nativeSrc":"5009:23:13","nodeType":"YulFunctionCall","src":"5009:23:13"},{"kind":"number","nativeSrc":"5034:2:13","nodeType":"YulLiteral","src":"5034:2:13","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5005:3:13","nodeType":"YulIdentifier","src":"5005:3:13"},"nativeSrc":"5005:32:13","nodeType":"YulFunctionCall","src":"5005:32:13"},"nativeSrc":"5002:119:13","nodeType":"YulIf","src":"5002:119:13"},{"nativeSrc":"5131:117:13","nodeType":"YulBlock","src":"5131:117:13","statements":[{"nativeSrc":"5146:15:13","nodeType":"YulVariableDeclaration","src":"5146:15:13","value":{"kind":"number","nativeSrc":"5160:1:13","nodeType":"YulLiteral","src":"5160:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5150:6:13","nodeType":"YulTypedName","src":"5150:6:13","type":""}]},{"nativeSrc":"5175:63:13","nodeType":"YulAssignment","src":"5175:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5210:9:13","nodeType":"YulIdentifier","src":"5210:9:13"},{"name":"offset","nativeSrc":"5221:6:13","nodeType":"YulIdentifier","src":"5221:6:13"}],"functionName":{"name":"add","nativeSrc":"5206:3:13","nodeType":"YulIdentifier","src":"5206:3:13"},"nativeSrc":"5206:22:13","nodeType":"YulFunctionCall","src":"5206:22:13"},{"name":"dataEnd","nativeSrc":"5230:7:13","nodeType":"YulIdentifier","src":"5230:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5185:20:13","nodeType":"YulIdentifier","src":"5185:20:13"},"nativeSrc":"5185:53:13","nodeType":"YulFunctionCall","src":"5185:53:13"},"variableNames":[{"name":"value0","nativeSrc":"5175:6:13","nodeType":"YulIdentifier","src":"5175:6:13"}]}]},{"nativeSrc":"5258:118:13","nodeType":"YulBlock","src":"5258:118:13","statements":[{"nativeSrc":"5273:16:13","nodeType":"YulVariableDeclaration","src":"5273:16:13","value":{"kind":"number","nativeSrc":"5287:2:13","nodeType":"YulLiteral","src":"5287:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5277:6:13","nodeType":"YulTypedName","src":"5277:6:13","type":""}]},{"nativeSrc":"5303:63:13","nodeType":"YulAssignment","src":"5303:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5338:9:13","nodeType":"YulIdentifier","src":"5338:9:13"},{"name":"offset","nativeSrc":"5349:6:13","nodeType":"YulIdentifier","src":"5349:6:13"}],"functionName":{"name":"add","nativeSrc":"5334:3:13","nodeType":"YulIdentifier","src":"5334:3:13"},"nativeSrc":"5334:22:13","nodeType":"YulFunctionCall","src":"5334:22:13"},{"name":"dataEnd","nativeSrc":"5358:7:13","nodeType":"YulIdentifier","src":"5358:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5313:20:13","nodeType":"YulIdentifier","src":"5313:20:13"},"nativeSrc":"5313:53:13","nodeType":"YulFunctionCall","src":"5313:53:13"},"variableNames":[{"name":"value1","nativeSrc":"5303:6:13","nodeType":"YulIdentifier","src":"5303:6:13"}]}]},{"nativeSrc":"5386:118:13","nodeType":"YulBlock","src":"5386:118:13","statements":[{"nativeSrc":"5401:16:13","nodeType":"YulVariableDeclaration","src":"5401:16:13","value":{"kind":"number","nativeSrc":"5415:2:13","nodeType":"YulLiteral","src":"5415:2:13","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"5405:6:13","nodeType":"YulTypedName","src":"5405:6:13","type":""}]},{"nativeSrc":"5431:63:13","nodeType":"YulAssignment","src":"5431:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5466:9:13","nodeType":"YulIdentifier","src":"5466:9:13"},{"name":"offset","nativeSrc":"5477:6:13","nodeType":"YulIdentifier","src":"5477:6:13"}],"functionName":{"name":"add","nativeSrc":"5462:3:13","nodeType":"YulIdentifier","src":"5462:3:13"},"nativeSrc":"5462:22:13","nodeType":"YulFunctionCall","src":"5462:22:13"},{"name":"dataEnd","nativeSrc":"5486:7:13","nodeType":"YulIdentifier","src":"5486:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5441:20:13","nodeType":"YulIdentifier","src":"5441:20:13"},"nativeSrc":"5441:53:13","nodeType":"YulFunctionCall","src":"5441:53:13"},"variableNames":[{"name":"value2","nativeSrc":"5431:6:13","nodeType":"YulIdentifier","src":"5431:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"4892:619:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4946:9:13","nodeType":"YulTypedName","src":"4946:9:13","type":""},{"name":"dataEnd","nativeSrc":"4957:7:13","nodeType":"YulTypedName","src":"4957:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4969:6:13","nodeType":"YulTypedName","src":"4969:6:13","type":""},{"name":"value1","nativeSrc":"4977:6:13","nodeType":"YulTypedName","src":"4977:6:13","type":""},{"name":"value2","nativeSrc":"4985:6:13","nodeType":"YulTypedName","src":"4985:6:13","type":""}],"src":"4892:619:13"},{"body":{"nativeSrc":"5583:263:13","nodeType":"YulBlock","src":"5583:263:13","statements":[{"body":{"nativeSrc":"5629:83:13","nodeType":"YulBlock","src":"5629:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5631:77:13","nodeType":"YulIdentifier","src":"5631:77:13"},"nativeSrc":"5631:79:13","nodeType":"YulFunctionCall","src":"5631:79:13"},"nativeSrc":"5631:79:13","nodeType":"YulExpressionStatement","src":"5631:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5604:7:13","nodeType":"YulIdentifier","src":"5604:7:13"},{"name":"headStart","nativeSrc":"5613:9:13","nodeType":"YulIdentifier","src":"5613:9:13"}],"functionName":{"name":"sub","nativeSrc":"5600:3:13","nodeType":"YulIdentifier","src":"5600:3:13"},"nativeSrc":"5600:23:13","nodeType":"YulFunctionCall","src":"5600:23:13"},{"kind":"number","nativeSrc":"5625:2:13","nodeType":"YulLiteral","src":"5625:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5596:3:13","nodeType":"YulIdentifier","src":"5596:3:13"},"nativeSrc":"5596:32:13","nodeType":"YulFunctionCall","src":"5596:32:13"},"nativeSrc":"5593:119:13","nodeType":"YulIf","src":"5593:119:13"},{"nativeSrc":"5722:117:13","nodeType":"YulBlock","src":"5722:117:13","statements":[{"nativeSrc":"5737:15:13","nodeType":"YulVariableDeclaration","src":"5737:15:13","value":{"kind":"number","nativeSrc":"5751:1:13","nodeType":"YulLiteral","src":"5751:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5741:6:13","nodeType":"YulTypedName","src":"5741:6:13","type":""}]},{"nativeSrc":"5766:63:13","nodeType":"YulAssignment","src":"5766:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5801:9:13","nodeType":"YulIdentifier","src":"5801:9:13"},{"name":"offset","nativeSrc":"5812:6:13","nodeType":"YulIdentifier","src":"5812:6:13"}],"functionName":{"name":"add","nativeSrc":"5797:3:13","nodeType":"YulIdentifier","src":"5797:3:13"},"nativeSrc":"5797:22:13","nodeType":"YulFunctionCall","src":"5797:22:13"},{"name":"dataEnd","nativeSrc":"5821:7:13","nodeType":"YulIdentifier","src":"5821:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5776:20:13","nodeType":"YulIdentifier","src":"5776:20:13"},"nativeSrc":"5776:53:13","nodeType":"YulFunctionCall","src":"5776:53:13"},"variableNames":[{"name":"value0","nativeSrc":"5766:6:13","nodeType":"YulIdentifier","src":"5766:6:13"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"5517:329:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5553:9:13","nodeType":"YulTypedName","src":"5553:9:13","type":""},{"name":"dataEnd","nativeSrc":"5564:7:13","nodeType":"YulTypedName","src":"5564:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5576:6:13","nodeType":"YulTypedName","src":"5576:6:13","type":""}],"src":"5517:329:13"},{"body":{"nativeSrc":"5917:53:13","nodeType":"YulBlock","src":"5917:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5934:3:13","nodeType":"YulIdentifier","src":"5934:3:13"},{"arguments":[{"name":"value","nativeSrc":"5957:5:13","nodeType":"YulIdentifier","src":"5957:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5939:17:13","nodeType":"YulIdentifier","src":"5939:17:13"},"nativeSrc":"5939:24:13","nodeType":"YulFunctionCall","src":"5939:24:13"}],"functionName":{"name":"mstore","nativeSrc":"5927:6:13","nodeType":"YulIdentifier","src":"5927:6:13"},"nativeSrc":"5927:37:13","nodeType":"YulFunctionCall","src":"5927:37:13"},"nativeSrc":"5927:37:13","nodeType":"YulExpressionStatement","src":"5927:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"5852:118:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5905:5:13","nodeType":"YulTypedName","src":"5905:5:13","type":""},{"name":"pos","nativeSrc":"5912:3:13","nodeType":"YulTypedName","src":"5912:3:13","type":""}],"src":"5852:118:13"},{"body":{"nativeSrc":"6074:124:13","nodeType":"YulBlock","src":"6074:124:13","statements":[{"nativeSrc":"6084:26:13","nodeType":"YulAssignment","src":"6084:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"6096:9:13","nodeType":"YulIdentifier","src":"6096:9:13"},{"kind":"number","nativeSrc":"6107:2:13","nodeType":"YulLiteral","src":"6107:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6092:3:13","nodeType":"YulIdentifier","src":"6092:3:13"},"nativeSrc":"6092:18:13","nodeType":"YulFunctionCall","src":"6092:18:13"},"variableNames":[{"name":"tail","nativeSrc":"6084:4:13","nodeType":"YulIdentifier","src":"6084:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"6164:6:13","nodeType":"YulIdentifier","src":"6164:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"6177:9:13","nodeType":"YulIdentifier","src":"6177:9:13"},{"kind":"number","nativeSrc":"6188:1:13","nodeType":"YulLiteral","src":"6188:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6173:3:13","nodeType":"YulIdentifier","src":"6173:3:13"},"nativeSrc":"6173:17:13","nodeType":"YulFunctionCall","src":"6173:17:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"6120:43:13","nodeType":"YulIdentifier","src":"6120:43:13"},"nativeSrc":"6120:71:13","nodeType":"YulFunctionCall","src":"6120:71:13"},"nativeSrc":"6120:71:13","nodeType":"YulExpressionStatement","src":"6120:71:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5976:222:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6046:9:13","nodeType":"YulTypedName","src":"6046:9:13","type":""},{"name":"value0","nativeSrc":"6058:6:13","nodeType":"YulTypedName","src":"6058:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6069:4:13","nodeType":"YulTypedName","src":"6069:4:13","type":""}],"src":"5976:222:13"},{"body":{"nativeSrc":"6244:76:13","nodeType":"YulBlock","src":"6244:76:13","statements":[{"body":{"nativeSrc":"6298:16:13","nodeType":"YulBlock","src":"6298:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6307:1:13","nodeType":"YulLiteral","src":"6307:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"6310:1:13","nodeType":"YulLiteral","src":"6310:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6300:6:13","nodeType":"YulIdentifier","src":"6300:6:13"},"nativeSrc":"6300:12:13","nodeType":"YulFunctionCall","src":"6300:12:13"},"nativeSrc":"6300:12:13","nodeType":"YulExpressionStatement","src":"6300:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6267:5:13","nodeType":"YulIdentifier","src":"6267:5:13"},{"arguments":[{"name":"value","nativeSrc":"6289:5:13","nodeType":"YulIdentifier","src":"6289:5:13"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"6274:14:13","nodeType":"YulIdentifier","src":"6274:14:13"},"nativeSrc":"6274:21:13","nodeType":"YulFunctionCall","src":"6274:21:13"}],"functionName":{"name":"eq","nativeSrc":"6264:2:13","nodeType":"YulIdentifier","src":"6264:2:13"},"nativeSrc":"6264:32:13","nodeType":"YulFunctionCall","src":"6264:32:13"}],"functionName":{"name":"iszero","nativeSrc":"6257:6:13","nodeType":"YulIdentifier","src":"6257:6:13"},"nativeSrc":"6257:40:13","nodeType":"YulFunctionCall","src":"6257:40:13"},"nativeSrc":"6254:60:13","nodeType":"YulIf","src":"6254:60:13"}]},"name":"validator_revert_t_bool","nativeSrc":"6204:116:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6237:5:13","nodeType":"YulTypedName","src":"6237:5:13","type":""}],"src":"6204:116:13"},{"body":{"nativeSrc":"6375:84:13","nodeType":"YulBlock","src":"6375:84:13","statements":[{"nativeSrc":"6385:29:13","nodeType":"YulAssignment","src":"6385:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"6407:6:13","nodeType":"YulIdentifier","src":"6407:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"6394:12:13","nodeType":"YulIdentifier","src":"6394:12:13"},"nativeSrc":"6394:20:13","nodeType":"YulFunctionCall","src":"6394:20:13"},"variableNames":[{"name":"value","nativeSrc":"6385:5:13","nodeType":"YulIdentifier","src":"6385:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6447:5:13","nodeType":"YulIdentifier","src":"6447:5:13"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"6423:23:13","nodeType":"YulIdentifier","src":"6423:23:13"},"nativeSrc":"6423:30:13","nodeType":"YulFunctionCall","src":"6423:30:13"},"nativeSrc":"6423:30:13","nodeType":"YulExpressionStatement","src":"6423:30:13"}]},"name":"abi_decode_t_bool","nativeSrc":"6326:133:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6353:6:13","nodeType":"YulTypedName","src":"6353:6:13","type":""},{"name":"end","nativeSrc":"6361:3:13","nodeType":"YulTypedName","src":"6361:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6369:5:13","nodeType":"YulTypedName","src":"6369:5:13","type":""}],"src":"6326:133:13"},{"body":{"nativeSrc":"6545:388:13","nodeType":"YulBlock","src":"6545:388:13","statements":[{"body":{"nativeSrc":"6591:83:13","nodeType":"YulBlock","src":"6591:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"6593:77:13","nodeType":"YulIdentifier","src":"6593:77:13"},"nativeSrc":"6593:79:13","nodeType":"YulFunctionCall","src":"6593:79:13"},"nativeSrc":"6593:79:13","nodeType":"YulExpressionStatement","src":"6593:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6566:7:13","nodeType":"YulIdentifier","src":"6566:7:13"},{"name":"headStart","nativeSrc":"6575:9:13","nodeType":"YulIdentifier","src":"6575:9:13"}],"functionName":{"name":"sub","nativeSrc":"6562:3:13","nodeType":"YulIdentifier","src":"6562:3:13"},"nativeSrc":"6562:23:13","nodeType":"YulFunctionCall","src":"6562:23:13"},{"kind":"number","nativeSrc":"6587:2:13","nodeType":"YulLiteral","src":"6587:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6558:3:13","nodeType":"YulIdentifier","src":"6558:3:13"},"nativeSrc":"6558:32:13","nodeType":"YulFunctionCall","src":"6558:32:13"},"nativeSrc":"6555:119:13","nodeType":"YulIf","src":"6555:119:13"},{"nativeSrc":"6684:117:13","nodeType":"YulBlock","src":"6684:117:13","statements":[{"nativeSrc":"6699:15:13","nodeType":"YulVariableDeclaration","src":"6699:15:13","value":{"kind":"number","nativeSrc":"6713:1:13","nodeType":"YulLiteral","src":"6713:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"6703:6:13","nodeType":"YulTypedName","src":"6703:6:13","type":""}]},{"nativeSrc":"6728:63:13","nodeType":"YulAssignment","src":"6728:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6763:9:13","nodeType":"YulIdentifier","src":"6763:9:13"},{"name":"offset","nativeSrc":"6774:6:13","nodeType":"YulIdentifier","src":"6774:6:13"}],"functionName":{"name":"add","nativeSrc":"6759:3:13","nodeType":"YulIdentifier","src":"6759:3:13"},"nativeSrc":"6759:22:13","nodeType":"YulFunctionCall","src":"6759:22:13"},{"name":"dataEnd","nativeSrc":"6783:7:13","nodeType":"YulIdentifier","src":"6783:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6738:20:13","nodeType":"YulIdentifier","src":"6738:20:13"},"nativeSrc":"6738:53:13","nodeType":"YulFunctionCall","src":"6738:53:13"},"variableNames":[{"name":"value0","nativeSrc":"6728:6:13","nodeType":"YulIdentifier","src":"6728:6:13"}]}]},{"nativeSrc":"6811:115:13","nodeType":"YulBlock","src":"6811:115:13","statements":[{"nativeSrc":"6826:16:13","nodeType":"YulVariableDeclaration","src":"6826:16:13","value":{"kind":"number","nativeSrc":"6840:2:13","nodeType":"YulLiteral","src":"6840:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"6830:6:13","nodeType":"YulTypedName","src":"6830:6:13","type":""}]},{"nativeSrc":"6856:60:13","nodeType":"YulAssignment","src":"6856:60:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6888:9:13","nodeType":"YulIdentifier","src":"6888:9:13"},{"name":"offset","nativeSrc":"6899:6:13","nodeType":"YulIdentifier","src":"6899:6:13"}],"functionName":{"name":"add","nativeSrc":"6884:3:13","nodeType":"YulIdentifier","src":"6884:3:13"},"nativeSrc":"6884:22:13","nodeType":"YulFunctionCall","src":"6884:22:13"},{"name":"dataEnd","nativeSrc":"6908:7:13","nodeType":"YulIdentifier","src":"6908:7:13"}],"functionName":{"name":"abi_decode_t_bool","nativeSrc":"6866:17:13","nodeType":"YulIdentifier","src":"6866:17:13"},"nativeSrc":"6866:50:13","nodeType":"YulFunctionCall","src":"6866:50:13"},"variableNames":[{"name":"value1","nativeSrc":"6856:6:13","nodeType":"YulIdentifier","src":"6856:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"6465:468:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6507:9:13","nodeType":"YulTypedName","src":"6507:9:13","type":""},{"name":"dataEnd","nativeSrc":"6518:7:13","nodeType":"YulTypedName","src":"6518:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6530:6:13","nodeType":"YulTypedName","src":"6530:6:13","type":""},{"name":"value1","nativeSrc":"6538:6:13","nodeType":"YulTypedName","src":"6538:6:13","type":""}],"src":"6465:468:13"},{"body":{"nativeSrc":"7028:28:13","nodeType":"YulBlock","src":"7028:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7045:1:13","nodeType":"YulLiteral","src":"7045:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7048:1:13","nodeType":"YulLiteral","src":"7048:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7038:6:13","nodeType":"YulIdentifier","src":"7038:6:13"},"nativeSrc":"7038:12:13","nodeType":"YulFunctionCall","src":"7038:12:13"},"nativeSrc":"7038:12:13","nodeType":"YulExpressionStatement","src":"7038:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"6939:117:13","nodeType":"YulFunctionDefinition","src":"6939:117:13"},{"body":{"nativeSrc":"7151:28:13","nodeType":"YulBlock","src":"7151:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7168:1:13","nodeType":"YulLiteral","src":"7168:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7171:1:13","nodeType":"YulLiteral","src":"7171:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7161:6:13","nodeType":"YulIdentifier","src":"7161:6:13"},"nativeSrc":"7161:12:13","nodeType":"YulFunctionCall","src":"7161:12:13"},"nativeSrc":"7161:12:13","nodeType":"YulExpressionStatement","src":"7161:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"7062:117:13","nodeType":"YulFunctionDefinition","src":"7062:117:13"},{"body":{"nativeSrc":"7213:152:13","nodeType":"YulBlock","src":"7213:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7230:1:13","nodeType":"YulLiteral","src":"7230:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7233:77:13","nodeType":"YulLiteral","src":"7233:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7223:6:13","nodeType":"YulIdentifier","src":"7223:6:13"},"nativeSrc":"7223:88:13","nodeType":"YulFunctionCall","src":"7223:88:13"},"nativeSrc":"7223:88:13","nodeType":"YulExpressionStatement","src":"7223:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7327:1:13","nodeType":"YulLiteral","src":"7327:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"7330:4:13","nodeType":"YulLiteral","src":"7330:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"7320:6:13","nodeType":"YulIdentifier","src":"7320:6:13"},"nativeSrc":"7320:15:13","nodeType":"YulFunctionCall","src":"7320:15:13"},"nativeSrc":"7320:15:13","nodeType":"YulExpressionStatement","src":"7320:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7351:1:13","nodeType":"YulLiteral","src":"7351:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7354:4:13","nodeType":"YulLiteral","src":"7354:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7344:6:13","nodeType":"YulIdentifier","src":"7344:6:13"},"nativeSrc":"7344:15:13","nodeType":"YulFunctionCall","src":"7344:15:13"},"nativeSrc":"7344:15:13","nodeType":"YulExpressionStatement","src":"7344:15:13"}]},"name":"panic_error_0x41","nativeSrc":"7185:180:13","nodeType":"YulFunctionDefinition","src":"7185:180:13"},{"body":{"nativeSrc":"7414:238:13","nodeType":"YulBlock","src":"7414:238:13","statements":[{"nativeSrc":"7424:58:13","nodeType":"YulVariableDeclaration","src":"7424:58:13","value":{"arguments":[{"name":"memPtr","nativeSrc":"7446:6:13","nodeType":"YulIdentifier","src":"7446:6:13"},{"arguments":[{"name":"size","nativeSrc":"7476:4:13","nodeType":"YulIdentifier","src":"7476:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"7454:21:13","nodeType":"YulIdentifier","src":"7454:21:13"},"nativeSrc":"7454:27:13","nodeType":"YulFunctionCall","src":"7454:27:13"}],"functionName":{"name":"add","nativeSrc":"7442:3:13","nodeType":"YulIdentifier","src":"7442:3:13"},"nativeSrc":"7442:40:13","nodeType":"YulFunctionCall","src":"7442:40:13"},"variables":[{"name":"newFreePtr","nativeSrc":"7428:10:13","nodeType":"YulTypedName","src":"7428:10:13","type":""}]},{"body":{"nativeSrc":"7593:22:13","nodeType":"YulBlock","src":"7593:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7595:16:13","nodeType":"YulIdentifier","src":"7595:16:13"},"nativeSrc":"7595:18:13","nodeType":"YulFunctionCall","src":"7595:18:13"},"nativeSrc":"7595:18:13","nodeType":"YulExpressionStatement","src":"7595:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"7536:10:13","nodeType":"YulIdentifier","src":"7536:10:13"},{"kind":"number","nativeSrc":"7548:18:13","nodeType":"YulLiteral","src":"7548:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7533:2:13","nodeType":"YulIdentifier","src":"7533:2:13"},"nativeSrc":"7533:34:13","nodeType":"YulFunctionCall","src":"7533:34:13"},{"arguments":[{"name":"newFreePtr","nativeSrc":"7572:10:13","nodeType":"YulIdentifier","src":"7572:10:13"},{"name":"memPtr","nativeSrc":"7584:6:13","nodeType":"YulIdentifier","src":"7584:6:13"}],"functionName":{"name":"lt","nativeSrc":"7569:2:13","nodeType":"YulIdentifier","src":"7569:2:13"},"nativeSrc":"7569:22:13","nodeType":"YulFunctionCall","src":"7569:22:13"}],"functionName":{"name":"or","nativeSrc":"7530:2:13","nodeType":"YulIdentifier","src":"7530:2:13"},"nativeSrc":"7530:62:13","nodeType":"YulFunctionCall","src":"7530:62:13"},"nativeSrc":"7527:88:13","nodeType":"YulIf","src":"7527:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7631:2:13","nodeType":"YulLiteral","src":"7631:2:13","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"7635:10:13","nodeType":"YulIdentifier","src":"7635:10:13"}],"functionName":{"name":"mstore","nativeSrc":"7624:6:13","nodeType":"YulIdentifier","src":"7624:6:13"},"nativeSrc":"7624:22:13","nodeType":"YulFunctionCall","src":"7624:22:13"},"nativeSrc":"7624:22:13","nodeType":"YulExpressionStatement","src":"7624:22:13"}]},"name":"finalize_allocation","nativeSrc":"7371:281:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"7400:6:13","nodeType":"YulTypedName","src":"7400:6:13","type":""},{"name":"size","nativeSrc":"7408:4:13","nodeType":"YulTypedName","src":"7408:4:13","type":""}],"src":"7371:281:13"},{"body":{"nativeSrc":"7699:88:13","nodeType":"YulBlock","src":"7699:88:13","statements":[{"nativeSrc":"7709:30:13","nodeType":"YulAssignment","src":"7709:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"7719:18:13","nodeType":"YulIdentifier","src":"7719:18:13"},"nativeSrc":"7719:20:13","nodeType":"YulFunctionCall","src":"7719:20:13"},"variableNames":[{"name":"memPtr","nativeSrc":"7709:6:13","nodeType":"YulIdentifier","src":"7709:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"7768:6:13","nodeType":"YulIdentifier","src":"7768:6:13"},{"name":"size","nativeSrc":"7776:4:13","nodeType":"YulIdentifier","src":"7776:4:13"}],"functionName":{"name":"finalize_allocation","nativeSrc":"7748:19:13","nodeType":"YulIdentifier","src":"7748:19:13"},"nativeSrc":"7748:33:13","nodeType":"YulFunctionCall","src":"7748:33:13"},"nativeSrc":"7748:33:13","nodeType":"YulExpressionStatement","src":"7748:33:13"}]},"name":"allocate_memory","nativeSrc":"7658:129:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"7683:4:13","nodeType":"YulTypedName","src":"7683:4:13","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"7692:6:13","nodeType":"YulTypedName","src":"7692:6:13","type":""}],"src":"7658:129:13"},{"body":{"nativeSrc":"7859:241:13","nodeType":"YulBlock","src":"7859:241:13","statements":[{"body":{"nativeSrc":"7964:22:13","nodeType":"YulBlock","src":"7964:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7966:16:13","nodeType":"YulIdentifier","src":"7966:16:13"},"nativeSrc":"7966:18:13","nodeType":"YulFunctionCall","src":"7966:18:13"},"nativeSrc":"7966:18:13","nodeType":"YulExpressionStatement","src":"7966:18:13"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7936:6:13","nodeType":"YulIdentifier","src":"7936:6:13"},{"kind":"number","nativeSrc":"7944:18:13","nodeType":"YulLiteral","src":"7944:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7933:2:13","nodeType":"YulIdentifier","src":"7933:2:13"},"nativeSrc":"7933:30:13","nodeType":"YulFunctionCall","src":"7933:30:13"},"nativeSrc":"7930:56:13","nodeType":"YulIf","src":"7930:56:13"},{"nativeSrc":"7996:37:13","nodeType":"YulAssignment","src":"7996:37:13","value":{"arguments":[{"name":"length","nativeSrc":"8026:6:13","nodeType":"YulIdentifier","src":"8026:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8004:21:13","nodeType":"YulIdentifier","src":"8004:21:13"},"nativeSrc":"8004:29:13","nodeType":"YulFunctionCall","src":"8004:29:13"},"variableNames":[{"name":"size","nativeSrc":"7996:4:13","nodeType":"YulIdentifier","src":"7996:4:13"}]},{"nativeSrc":"8070:23:13","nodeType":"YulAssignment","src":"8070:23:13","value":{"arguments":[{"name":"size","nativeSrc":"8082:4:13","nodeType":"YulIdentifier","src":"8082:4:13"},{"kind":"number","nativeSrc":"8088:4:13","nodeType":"YulLiteral","src":"8088:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8078:3:13","nodeType":"YulIdentifier","src":"8078:3:13"},"nativeSrc":"8078:15:13","nodeType":"YulFunctionCall","src":"8078:15:13"},"variableNames":[{"name":"size","nativeSrc":"8070:4:13","nodeType":"YulIdentifier","src":"8070:4:13"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"7793:307:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"7843:6:13","nodeType":"YulTypedName","src":"7843:6:13","type":""}],"returnVariables":[{"name":"size","nativeSrc":"7854:4:13","nodeType":"YulTypedName","src":"7854:4:13","type":""}],"src":"7793:307:13"},{"body":{"nativeSrc":"8170:84:13","nodeType":"YulBlock","src":"8170:84:13","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"8194:3:13","nodeType":"YulIdentifier","src":"8194:3:13"},{"name":"src","nativeSrc":"8199:3:13","nodeType":"YulIdentifier","src":"8199:3:13"},{"name":"length","nativeSrc":"8204:6:13","nodeType":"YulIdentifier","src":"8204:6:13"}],"functionName":{"name":"calldatacopy","nativeSrc":"8181:12:13","nodeType":"YulIdentifier","src":"8181:12:13"},"nativeSrc":"8181:30:13","nodeType":"YulFunctionCall","src":"8181:30:13"},"nativeSrc":"8181:30:13","nodeType":"YulExpressionStatement","src":"8181:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"8231:3:13","nodeType":"YulIdentifier","src":"8231:3:13"},{"name":"length","nativeSrc":"8236:6:13","nodeType":"YulIdentifier","src":"8236:6:13"}],"functionName":{"name":"add","nativeSrc":"8227:3:13","nodeType":"YulIdentifier","src":"8227:3:13"},"nativeSrc":"8227:16:13","nodeType":"YulFunctionCall","src":"8227:16:13"},{"kind":"number","nativeSrc":"8245:1:13","nodeType":"YulLiteral","src":"8245:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"8220:6:13","nodeType":"YulIdentifier","src":"8220:6:13"},"nativeSrc":"8220:27:13","nodeType":"YulFunctionCall","src":"8220:27:13"},"nativeSrc":"8220:27:13","nodeType":"YulExpressionStatement","src":"8220:27:13"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"8106:148:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8152:3:13","nodeType":"YulTypedName","src":"8152:3:13","type":""},{"name":"dst","nativeSrc":"8157:3:13","nodeType":"YulTypedName","src":"8157:3:13","type":""},{"name":"length","nativeSrc":"8162:6:13","nodeType":"YulTypedName","src":"8162:6:13","type":""}],"src":"8106:148:13"},{"body":{"nativeSrc":"8343:340:13","nodeType":"YulBlock","src":"8343:340:13","statements":[{"nativeSrc":"8353:74:13","nodeType":"YulAssignment","src":"8353:74:13","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"8419:6:13","nodeType":"YulIdentifier","src":"8419:6:13"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"8378:40:13","nodeType":"YulIdentifier","src":"8378:40:13"},"nativeSrc":"8378:48:13","nodeType":"YulFunctionCall","src":"8378:48:13"}],"functionName":{"name":"allocate_memory","nativeSrc":"8362:15:13","nodeType":"YulIdentifier","src":"8362:15:13"},"nativeSrc":"8362:65:13","nodeType":"YulFunctionCall","src":"8362:65:13"},"variableNames":[{"name":"array","nativeSrc":"8353:5:13","nodeType":"YulIdentifier","src":"8353:5:13"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"8443:5:13","nodeType":"YulIdentifier","src":"8443:5:13"},{"name":"length","nativeSrc":"8450:6:13","nodeType":"YulIdentifier","src":"8450:6:13"}],"functionName":{"name":"mstore","nativeSrc":"8436:6:13","nodeType":"YulIdentifier","src":"8436:6:13"},"nativeSrc":"8436:21:13","nodeType":"YulFunctionCall","src":"8436:21:13"},"nativeSrc":"8436:21:13","nodeType":"YulExpressionStatement","src":"8436:21:13"},{"nativeSrc":"8466:27:13","nodeType":"YulVariableDeclaration","src":"8466:27:13","value":{"arguments":[{"name":"array","nativeSrc":"8481:5:13","nodeType":"YulIdentifier","src":"8481:5:13"},{"kind":"number","nativeSrc":"8488:4:13","nodeType":"YulLiteral","src":"8488:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8477:3:13","nodeType":"YulIdentifier","src":"8477:3:13"},"nativeSrc":"8477:16:13","nodeType":"YulFunctionCall","src":"8477:16:13"},"variables":[{"name":"dst","nativeSrc":"8470:3:13","nodeType":"YulTypedName","src":"8470:3:13","type":""}]},{"body":{"nativeSrc":"8531:83:13","nodeType":"YulBlock","src":"8531:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"8533:77:13","nodeType":"YulIdentifier","src":"8533:77:13"},"nativeSrc":"8533:79:13","nodeType":"YulFunctionCall","src":"8533:79:13"},"nativeSrc":"8533:79:13","nodeType":"YulExpressionStatement","src":"8533:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8512:3:13","nodeType":"YulIdentifier","src":"8512:3:13"},{"name":"length","nativeSrc":"8517:6:13","nodeType":"YulIdentifier","src":"8517:6:13"}],"functionName":{"name":"add","nativeSrc":"8508:3:13","nodeType":"YulIdentifier","src":"8508:3:13"},"nativeSrc":"8508:16:13","nodeType":"YulFunctionCall","src":"8508:16:13"},{"name":"end","nativeSrc":"8526:3:13","nodeType":"YulIdentifier","src":"8526:3:13"}],"functionName":{"name":"gt","nativeSrc":"8505:2:13","nodeType":"YulIdentifier","src":"8505:2:13"},"nativeSrc":"8505:25:13","nodeType":"YulFunctionCall","src":"8505:25:13"},"nativeSrc":"8502:112:13","nodeType":"YulIf","src":"8502:112:13"},{"expression":{"arguments":[{"name":"src","nativeSrc":"8660:3:13","nodeType":"YulIdentifier","src":"8660:3:13"},{"name":"dst","nativeSrc":"8665:3:13","nodeType":"YulIdentifier","src":"8665:3:13"},{"name":"length","nativeSrc":"8670:6:13","nodeType":"YulIdentifier","src":"8670:6:13"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"8623:36:13","nodeType":"YulIdentifier","src":"8623:36:13"},"nativeSrc":"8623:54:13","nodeType":"YulFunctionCall","src":"8623:54:13"},"nativeSrc":"8623:54:13","nodeType":"YulExpressionStatement","src":"8623:54:13"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"8260:423:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8316:3:13","nodeType":"YulTypedName","src":"8316:3:13","type":""},{"name":"length","nativeSrc":"8321:6:13","nodeType":"YulTypedName","src":"8321:6:13","type":""},{"name":"end","nativeSrc":"8329:3:13","nodeType":"YulTypedName","src":"8329:3:13","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8337:5:13","nodeType":"YulTypedName","src":"8337:5:13","type":""}],"src":"8260:423:13"},{"body":{"nativeSrc":"8763:277:13","nodeType":"YulBlock","src":"8763:277:13","statements":[{"body":{"nativeSrc":"8812:83:13","nodeType":"YulBlock","src":"8812:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"8814:77:13","nodeType":"YulIdentifier","src":"8814:77:13"},"nativeSrc":"8814:79:13","nodeType":"YulFunctionCall","src":"8814:79:13"},"nativeSrc":"8814:79:13","nodeType":"YulExpressionStatement","src":"8814:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8791:6:13","nodeType":"YulIdentifier","src":"8791:6:13"},{"kind":"number","nativeSrc":"8799:4:13","nodeType":"YulLiteral","src":"8799:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8787:3:13","nodeType":"YulIdentifier","src":"8787:3:13"},"nativeSrc":"8787:17:13","nodeType":"YulFunctionCall","src":"8787:17:13"},{"name":"end","nativeSrc":"8806:3:13","nodeType":"YulIdentifier","src":"8806:3:13"}],"functionName":{"name":"slt","nativeSrc":"8783:3:13","nodeType":"YulIdentifier","src":"8783:3:13"},"nativeSrc":"8783:27:13","nodeType":"YulFunctionCall","src":"8783:27:13"}],"functionName":{"name":"iszero","nativeSrc":"8776:6:13","nodeType":"YulIdentifier","src":"8776:6:13"},"nativeSrc":"8776:35:13","nodeType":"YulFunctionCall","src":"8776:35:13"},"nativeSrc":"8773:122:13","nodeType":"YulIf","src":"8773:122:13"},{"nativeSrc":"8904:34:13","nodeType":"YulVariableDeclaration","src":"8904:34:13","value":{"arguments":[{"name":"offset","nativeSrc":"8931:6:13","nodeType":"YulIdentifier","src":"8931:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"8918:12:13","nodeType":"YulIdentifier","src":"8918:12:13"},"nativeSrc":"8918:20:13","nodeType":"YulFunctionCall","src":"8918:20:13"},"variables":[{"name":"length","nativeSrc":"8908:6:13","nodeType":"YulTypedName","src":"8908:6:13","type":""}]},{"nativeSrc":"8947:87:13","nodeType":"YulAssignment","src":"8947:87:13","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"9007:6:13","nodeType":"YulIdentifier","src":"9007:6:13"},{"kind":"number","nativeSrc":"9015:4:13","nodeType":"YulLiteral","src":"9015:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9003:3:13","nodeType":"YulIdentifier","src":"9003:3:13"},"nativeSrc":"9003:17:13","nodeType":"YulFunctionCall","src":"9003:17:13"},{"name":"length","nativeSrc":"9022:6:13","nodeType":"YulIdentifier","src":"9022:6:13"},{"name":"end","nativeSrc":"9030:3:13","nodeType":"YulIdentifier","src":"9030:3:13"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"8956:46:13","nodeType":"YulIdentifier","src":"8956:46:13"},"nativeSrc":"8956:78:13","nodeType":"YulFunctionCall","src":"8956:78:13"},"variableNames":[{"name":"array","nativeSrc":"8947:5:13","nodeType":"YulIdentifier","src":"8947:5:13"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"8702:338:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8741:6:13","nodeType":"YulTypedName","src":"8741:6:13","type":""},{"name":"end","nativeSrc":"8749:3:13","nodeType":"YulTypedName","src":"8749:3:13","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8757:5:13","nodeType":"YulTypedName","src":"8757:5:13","type":""}],"src":"8702:338:13"},{"body":{"nativeSrc":"9172:817:13","nodeType":"YulBlock","src":"9172:817:13","statements":[{"body":{"nativeSrc":"9219:83:13","nodeType":"YulBlock","src":"9219:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"9221:77:13","nodeType":"YulIdentifier","src":"9221:77:13"},"nativeSrc":"9221:79:13","nodeType":"YulFunctionCall","src":"9221:79:13"},"nativeSrc":"9221:79:13","nodeType":"YulExpressionStatement","src":"9221:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9193:7:13","nodeType":"YulIdentifier","src":"9193:7:13"},{"name":"headStart","nativeSrc":"9202:9:13","nodeType":"YulIdentifier","src":"9202:9:13"}],"functionName":{"name":"sub","nativeSrc":"9189:3:13","nodeType":"YulIdentifier","src":"9189:3:13"},"nativeSrc":"9189:23:13","nodeType":"YulFunctionCall","src":"9189:23:13"},{"kind":"number","nativeSrc":"9214:3:13","nodeType":"YulLiteral","src":"9214:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9185:3:13","nodeType":"YulIdentifier","src":"9185:3:13"},"nativeSrc":"9185:33:13","nodeType":"YulFunctionCall","src":"9185:33:13"},"nativeSrc":"9182:120:13","nodeType":"YulIf","src":"9182:120:13"},{"nativeSrc":"9312:117:13","nodeType":"YulBlock","src":"9312:117:13","statements":[{"nativeSrc":"9327:15:13","nodeType":"YulVariableDeclaration","src":"9327:15:13","value":{"kind":"number","nativeSrc":"9341:1:13","nodeType":"YulLiteral","src":"9341:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"9331:6:13","nodeType":"YulTypedName","src":"9331:6:13","type":""}]},{"nativeSrc":"9356:63:13","nodeType":"YulAssignment","src":"9356:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9391:9:13","nodeType":"YulIdentifier","src":"9391:9:13"},{"name":"offset","nativeSrc":"9402:6:13","nodeType":"YulIdentifier","src":"9402:6:13"}],"functionName":{"name":"add","nativeSrc":"9387:3:13","nodeType":"YulIdentifier","src":"9387:3:13"},"nativeSrc":"9387:22:13","nodeType":"YulFunctionCall","src":"9387:22:13"},{"name":"dataEnd","nativeSrc":"9411:7:13","nodeType":"YulIdentifier","src":"9411:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9366:20:13","nodeType":"YulIdentifier","src":"9366:20:13"},"nativeSrc":"9366:53:13","nodeType":"YulFunctionCall","src":"9366:53:13"},"variableNames":[{"name":"value0","nativeSrc":"9356:6:13","nodeType":"YulIdentifier","src":"9356:6:13"}]}]},{"nativeSrc":"9439:118:13","nodeType":"YulBlock","src":"9439:118:13","statements":[{"nativeSrc":"9454:16:13","nodeType":"YulVariableDeclaration","src":"9454:16:13","value":{"kind":"number","nativeSrc":"9468:2:13","nodeType":"YulLiteral","src":"9468:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"9458:6:13","nodeType":"YulTypedName","src":"9458:6:13","type":""}]},{"nativeSrc":"9484:63:13","nodeType":"YulAssignment","src":"9484:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9519:9:13","nodeType":"YulIdentifier","src":"9519:9:13"},{"name":"offset","nativeSrc":"9530:6:13","nodeType":"YulIdentifier","src":"9530:6:13"}],"functionName":{"name":"add","nativeSrc":"9515:3:13","nodeType":"YulIdentifier","src":"9515:3:13"},"nativeSrc":"9515:22:13","nodeType":"YulFunctionCall","src":"9515:22:13"},{"name":"dataEnd","nativeSrc":"9539:7:13","nodeType":"YulIdentifier","src":"9539:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9494:20:13","nodeType":"YulIdentifier","src":"9494:20:13"},"nativeSrc":"9494:53:13","nodeType":"YulFunctionCall","src":"9494:53:13"},"variableNames":[{"name":"value1","nativeSrc":"9484:6:13","nodeType":"YulIdentifier","src":"9484:6:13"}]}]},{"nativeSrc":"9567:118:13","nodeType":"YulBlock","src":"9567:118:13","statements":[{"nativeSrc":"9582:16:13","nodeType":"YulVariableDeclaration","src":"9582:16:13","value":{"kind":"number","nativeSrc":"9596:2:13","nodeType":"YulLiteral","src":"9596:2:13","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"9586:6:13","nodeType":"YulTypedName","src":"9586:6:13","type":""}]},{"nativeSrc":"9612:63:13","nodeType":"YulAssignment","src":"9612:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9647:9:13","nodeType":"YulIdentifier","src":"9647:9:13"},{"name":"offset","nativeSrc":"9658:6:13","nodeType":"YulIdentifier","src":"9658:6:13"}],"functionName":{"name":"add","nativeSrc":"9643:3:13","nodeType":"YulIdentifier","src":"9643:3:13"},"nativeSrc":"9643:22:13","nodeType":"YulFunctionCall","src":"9643:22:13"},{"name":"dataEnd","nativeSrc":"9667:7:13","nodeType":"YulIdentifier","src":"9667:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"9622:20:13","nodeType":"YulIdentifier","src":"9622:20:13"},"nativeSrc":"9622:53:13","nodeType":"YulFunctionCall","src":"9622:53:13"},"variableNames":[{"name":"value2","nativeSrc":"9612:6:13","nodeType":"YulIdentifier","src":"9612:6:13"}]}]},{"nativeSrc":"9695:287:13","nodeType":"YulBlock","src":"9695:287:13","statements":[{"nativeSrc":"9710:46:13","nodeType":"YulVariableDeclaration","src":"9710:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9741:9:13","nodeType":"YulIdentifier","src":"9741:9:13"},{"kind":"number","nativeSrc":"9752:2:13","nodeType":"YulLiteral","src":"9752:2:13","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9737:3:13","nodeType":"YulIdentifier","src":"9737:3:13"},"nativeSrc":"9737:18:13","nodeType":"YulFunctionCall","src":"9737:18:13"}],"functionName":{"name":"calldataload","nativeSrc":"9724:12:13","nodeType":"YulIdentifier","src":"9724:12:13"},"nativeSrc":"9724:32:13","nodeType":"YulFunctionCall","src":"9724:32:13"},"variables":[{"name":"offset","nativeSrc":"9714:6:13","nodeType":"YulTypedName","src":"9714:6:13","type":""}]},{"body":{"nativeSrc":"9803:83:13","nodeType":"YulBlock","src":"9803:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"9805:77:13","nodeType":"YulIdentifier","src":"9805:77:13"},"nativeSrc":"9805:79:13","nodeType":"YulFunctionCall","src":"9805:79:13"},"nativeSrc":"9805:79:13","nodeType":"YulExpressionStatement","src":"9805:79:13"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9775:6:13","nodeType":"YulIdentifier","src":"9775:6:13"},{"kind":"number","nativeSrc":"9783:18:13","nodeType":"YulLiteral","src":"9783:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9772:2:13","nodeType":"YulIdentifier","src":"9772:2:13"},"nativeSrc":"9772:30:13","nodeType":"YulFunctionCall","src":"9772:30:13"},"nativeSrc":"9769:117:13","nodeType":"YulIf","src":"9769:117:13"},{"nativeSrc":"9900:72:13","nodeType":"YulAssignment","src":"9900:72:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9944:9:13","nodeType":"YulIdentifier","src":"9944:9:13"},{"name":"offset","nativeSrc":"9955:6:13","nodeType":"YulIdentifier","src":"9955:6:13"}],"functionName":{"name":"add","nativeSrc":"9940:3:13","nodeType":"YulIdentifier","src":"9940:3:13"},"nativeSrc":"9940:22:13","nodeType":"YulFunctionCall","src":"9940:22:13"},{"name":"dataEnd","nativeSrc":"9964:7:13","nodeType":"YulIdentifier","src":"9964:7:13"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"9910:29:13","nodeType":"YulIdentifier","src":"9910:29:13"},"nativeSrc":"9910:62:13","nodeType":"YulFunctionCall","src":"9910:62:13"},"variableNames":[{"name":"value3","nativeSrc":"9900:6:13","nodeType":"YulIdentifier","src":"9900:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"9046:943:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9118:9:13","nodeType":"YulTypedName","src":"9118:9:13","type":""},{"name":"dataEnd","nativeSrc":"9129:7:13","nodeType":"YulTypedName","src":"9129:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9141:6:13","nodeType":"YulTypedName","src":"9141:6:13","type":""},{"name":"value1","nativeSrc":"9149:6:13","nodeType":"YulTypedName","src":"9149:6:13","type":""},{"name":"value2","nativeSrc":"9157:6:13","nodeType":"YulTypedName","src":"9157:6:13","type":""},{"name":"value3","nativeSrc":"9165:6:13","nodeType":"YulTypedName","src":"9165:6:13","type":""}],"src":"9046:943:13"},{"body":{"nativeSrc":"10078:391:13","nodeType":"YulBlock","src":"10078:391:13","statements":[{"body":{"nativeSrc":"10124:83:13","nodeType":"YulBlock","src":"10124:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"10126:77:13","nodeType":"YulIdentifier","src":"10126:77:13"},"nativeSrc":"10126:79:13","nodeType":"YulFunctionCall","src":"10126:79:13"},"nativeSrc":"10126:79:13","nodeType":"YulExpressionStatement","src":"10126:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10099:7:13","nodeType":"YulIdentifier","src":"10099:7:13"},{"name":"headStart","nativeSrc":"10108:9:13","nodeType":"YulIdentifier","src":"10108:9:13"}],"functionName":{"name":"sub","nativeSrc":"10095:3:13","nodeType":"YulIdentifier","src":"10095:3:13"},"nativeSrc":"10095:23:13","nodeType":"YulFunctionCall","src":"10095:23:13"},{"kind":"number","nativeSrc":"10120:2:13","nodeType":"YulLiteral","src":"10120:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10091:3:13","nodeType":"YulIdentifier","src":"10091:3:13"},"nativeSrc":"10091:32:13","nodeType":"YulFunctionCall","src":"10091:32:13"},"nativeSrc":"10088:119:13","nodeType":"YulIf","src":"10088:119:13"},{"nativeSrc":"10217:117:13","nodeType":"YulBlock","src":"10217:117:13","statements":[{"nativeSrc":"10232:15:13","nodeType":"YulVariableDeclaration","src":"10232:15:13","value":{"kind":"number","nativeSrc":"10246:1:13","nodeType":"YulLiteral","src":"10246:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"10236:6:13","nodeType":"YulTypedName","src":"10236:6:13","type":""}]},{"nativeSrc":"10261:63:13","nodeType":"YulAssignment","src":"10261:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10296:9:13","nodeType":"YulIdentifier","src":"10296:9:13"},{"name":"offset","nativeSrc":"10307:6:13","nodeType":"YulIdentifier","src":"10307:6:13"}],"functionName":{"name":"add","nativeSrc":"10292:3:13","nodeType":"YulIdentifier","src":"10292:3:13"},"nativeSrc":"10292:22:13","nodeType":"YulFunctionCall","src":"10292:22:13"},{"name":"dataEnd","nativeSrc":"10316:7:13","nodeType":"YulIdentifier","src":"10316:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10271:20:13","nodeType":"YulIdentifier","src":"10271:20:13"},"nativeSrc":"10271:53:13","nodeType":"YulFunctionCall","src":"10271:53:13"},"variableNames":[{"name":"value0","nativeSrc":"10261:6:13","nodeType":"YulIdentifier","src":"10261:6:13"}]}]},{"nativeSrc":"10344:118:13","nodeType":"YulBlock","src":"10344:118:13","statements":[{"nativeSrc":"10359:16:13","nodeType":"YulVariableDeclaration","src":"10359:16:13","value":{"kind":"number","nativeSrc":"10373:2:13","nodeType":"YulLiteral","src":"10373:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"10363:6:13","nodeType":"YulTypedName","src":"10363:6:13","type":""}]},{"nativeSrc":"10389:63:13","nodeType":"YulAssignment","src":"10389:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10424:9:13","nodeType":"YulIdentifier","src":"10424:9:13"},{"name":"offset","nativeSrc":"10435:6:13","nodeType":"YulIdentifier","src":"10435:6:13"}],"functionName":{"name":"add","nativeSrc":"10420:3:13","nodeType":"YulIdentifier","src":"10420:3:13"},"nativeSrc":"10420:22:13","nodeType":"YulFunctionCall","src":"10420:22:13"},{"name":"dataEnd","nativeSrc":"10444:7:13","nodeType":"YulIdentifier","src":"10444:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10399:20:13","nodeType":"YulIdentifier","src":"10399:20:13"},"nativeSrc":"10399:53:13","nodeType":"YulFunctionCall","src":"10399:53:13"},"variableNames":[{"name":"value1","nativeSrc":"10389:6:13","nodeType":"YulIdentifier","src":"10389:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"9995:474:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10040:9:13","nodeType":"YulTypedName","src":"10040:9:13","type":""},{"name":"dataEnd","nativeSrc":"10051:7:13","nodeType":"YulTypedName","src":"10051:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10063:6:13","nodeType":"YulTypedName","src":"10063:6:13","type":""},{"name":"value1","nativeSrc":"10071:6:13","nodeType":"YulTypedName","src":"10071:6:13","type":""}],"src":"9995:474:13"},{"body":{"nativeSrc":"10503:152:13","nodeType":"YulBlock","src":"10503:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10520:1:13","nodeType":"YulLiteral","src":"10520:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"10523:77:13","nodeType":"YulLiteral","src":"10523:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10513:6:13","nodeType":"YulIdentifier","src":"10513:6:13"},"nativeSrc":"10513:88:13","nodeType":"YulFunctionCall","src":"10513:88:13"},"nativeSrc":"10513:88:13","nodeType":"YulExpressionStatement","src":"10513:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10617:1:13","nodeType":"YulLiteral","src":"10617:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"10620:4:13","nodeType":"YulLiteral","src":"10620:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"10610:6:13","nodeType":"YulIdentifier","src":"10610:6:13"},"nativeSrc":"10610:15:13","nodeType":"YulFunctionCall","src":"10610:15:13"},"nativeSrc":"10610:15:13","nodeType":"YulExpressionStatement","src":"10610:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10641:1:13","nodeType":"YulLiteral","src":"10641:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"10644:4:13","nodeType":"YulLiteral","src":"10644:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10634:6:13","nodeType":"YulIdentifier","src":"10634:6:13"},"nativeSrc":"10634:15:13","nodeType":"YulFunctionCall","src":"10634:15:13"},"nativeSrc":"10634:15:13","nodeType":"YulExpressionStatement","src":"10634:15:13"}]},"name":"panic_error_0x22","nativeSrc":"10475:180:13","nodeType":"YulFunctionDefinition","src":"10475:180:13"},{"body":{"nativeSrc":"10712:269:13","nodeType":"YulBlock","src":"10712:269:13","statements":[{"nativeSrc":"10722:22:13","nodeType":"YulAssignment","src":"10722:22:13","value":{"arguments":[{"name":"data","nativeSrc":"10736:4:13","nodeType":"YulIdentifier","src":"10736:4:13"},{"kind":"number","nativeSrc":"10742:1:13","nodeType":"YulLiteral","src":"10742:1:13","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"10732:3:13","nodeType":"YulIdentifier","src":"10732:3:13"},"nativeSrc":"10732:12:13","nodeType":"YulFunctionCall","src":"10732:12:13"},"variableNames":[{"name":"length","nativeSrc":"10722:6:13","nodeType":"YulIdentifier","src":"10722:6:13"}]},{"nativeSrc":"10753:38:13","nodeType":"YulVariableDeclaration","src":"10753:38:13","value":{"arguments":[{"name":"data","nativeSrc":"10783:4:13","nodeType":"YulIdentifier","src":"10783:4:13"},{"kind":"number","nativeSrc":"10789:1:13","nodeType":"YulLiteral","src":"10789:1:13","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"10779:3:13","nodeType":"YulIdentifier","src":"10779:3:13"},"nativeSrc":"10779:12:13","nodeType":"YulFunctionCall","src":"10779:12:13"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"10757:18:13","nodeType":"YulTypedName","src":"10757:18:13","type":""}]},{"body":{"nativeSrc":"10830:51:13","nodeType":"YulBlock","src":"10830:51:13","statements":[{"nativeSrc":"10844:27:13","nodeType":"YulAssignment","src":"10844:27:13","value":{"arguments":[{"name":"length","nativeSrc":"10858:6:13","nodeType":"YulIdentifier","src":"10858:6:13"},{"kind":"number","nativeSrc":"10866:4:13","nodeType":"YulLiteral","src":"10866:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"10854:3:13","nodeType":"YulIdentifier","src":"10854:3:13"},"nativeSrc":"10854:17:13","nodeType":"YulFunctionCall","src":"10854:17:13"},"variableNames":[{"name":"length","nativeSrc":"10844:6:13","nodeType":"YulIdentifier","src":"10844:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10810:18:13","nodeType":"YulIdentifier","src":"10810:18:13"}],"functionName":{"name":"iszero","nativeSrc":"10803:6:13","nodeType":"YulIdentifier","src":"10803:6:13"},"nativeSrc":"10803:26:13","nodeType":"YulFunctionCall","src":"10803:26:13"},"nativeSrc":"10800:81:13","nodeType":"YulIf","src":"10800:81:13"},{"body":{"nativeSrc":"10933:42:13","nodeType":"YulBlock","src":"10933:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"10947:16:13","nodeType":"YulIdentifier","src":"10947:16:13"},"nativeSrc":"10947:18:13","nodeType":"YulFunctionCall","src":"10947:18:13"},"nativeSrc":"10947:18:13","nodeType":"YulExpressionStatement","src":"10947:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10897:18:13","nodeType":"YulIdentifier","src":"10897:18:13"},{"arguments":[{"name":"length","nativeSrc":"10920:6:13","nodeType":"YulIdentifier","src":"10920:6:13"},{"kind":"number","nativeSrc":"10928:2:13","nodeType":"YulLiteral","src":"10928:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"10917:2:13","nodeType":"YulIdentifier","src":"10917:2:13"},"nativeSrc":"10917:14:13","nodeType":"YulFunctionCall","src":"10917:14:13"}],"functionName":{"name":"eq","nativeSrc":"10894:2:13","nodeType":"YulIdentifier","src":"10894:2:13"},"nativeSrc":"10894:38:13","nodeType":"YulFunctionCall","src":"10894:38:13"},"nativeSrc":"10891:84:13","nodeType":"YulIf","src":"10891:84:13"}]},"name":"extract_byte_array_length","nativeSrc":"10661:320:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"10696:4:13","nodeType":"YulTypedName","src":"10696:4:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"10705:6:13","nodeType":"YulTypedName","src":"10705:6:13","type":""}],"src":"10661:320:13"},{"body":{"nativeSrc":"11093:114:13","nodeType":"YulBlock","src":"11093:114:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"11115:6:13","nodeType":"YulIdentifier","src":"11115:6:13"},{"kind":"number","nativeSrc":"11123:1:13","nodeType":"YulLiteral","src":"11123:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11111:3:13","nodeType":"YulIdentifier","src":"11111:3:13"},"nativeSrc":"11111:14:13","nodeType":"YulFunctionCall","src":"11111:14:13"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nativeSrc":"11127:34:13","nodeType":"YulLiteral","src":"11127:34:13","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nativeSrc":"11104:6:13","nodeType":"YulIdentifier","src":"11104:6:13"},"nativeSrc":"11104:58:13","nodeType":"YulFunctionCall","src":"11104:58:13"},"nativeSrc":"11104:58:13","nodeType":"YulExpressionStatement","src":"11104:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"11183:6:13","nodeType":"YulIdentifier","src":"11183:6:13"},{"kind":"number","nativeSrc":"11191:2:13","nodeType":"YulLiteral","src":"11191:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11179:3:13","nodeType":"YulIdentifier","src":"11179:3:13"},"nativeSrc":"11179:15:13","nodeType":"YulFunctionCall","src":"11179:15:13"},{"hexValue":"72","kind":"string","nativeSrc":"11196:3:13","nodeType":"YulLiteral","src":"11196:3:13","type":"","value":"r"}],"functionName":{"name":"mstore","nativeSrc":"11172:6:13","nodeType":"YulIdentifier","src":"11172:6:13"},"nativeSrc":"11172:28:13","nodeType":"YulFunctionCall","src":"11172:28:13"},"nativeSrc":"11172:28:13","nodeType":"YulExpressionStatement","src":"11172:28:13"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"10987:220:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"11085:6:13","nodeType":"YulTypedName","src":"11085:6:13","type":""}],"src":"10987:220:13"},{"body":{"nativeSrc":"11359:220:13","nodeType":"YulBlock","src":"11359:220:13","statements":[{"nativeSrc":"11369:74:13","nodeType":"YulAssignment","src":"11369:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"11435:3:13","nodeType":"YulIdentifier","src":"11435:3:13"},{"kind":"number","nativeSrc":"11440:2:13","nodeType":"YulLiteral","src":"11440:2:13","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"11376:58:13","nodeType":"YulIdentifier","src":"11376:58:13"},"nativeSrc":"11376:67:13","nodeType":"YulFunctionCall","src":"11376:67:13"},"variableNames":[{"name":"pos","nativeSrc":"11369:3:13","nodeType":"YulIdentifier","src":"11369:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"11541:3:13","nodeType":"YulIdentifier","src":"11541:3:13"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"11452:88:13","nodeType":"YulIdentifier","src":"11452:88:13"},"nativeSrc":"11452:93:13","nodeType":"YulFunctionCall","src":"11452:93:13"},"nativeSrc":"11452:93:13","nodeType":"YulExpressionStatement","src":"11452:93:13"},{"nativeSrc":"11554:19:13","nodeType":"YulAssignment","src":"11554:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"11565:3:13","nodeType":"YulIdentifier","src":"11565:3:13"},{"kind":"number","nativeSrc":"11570:2:13","nodeType":"YulLiteral","src":"11570:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11561:3:13","nodeType":"YulIdentifier","src":"11561:3:13"},"nativeSrc":"11561:12:13","nodeType":"YulFunctionCall","src":"11561:12:13"},"variableNames":[{"name":"end","nativeSrc":"11554:3:13","nodeType":"YulIdentifier","src":"11554:3:13"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"11213:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"11347:3:13","nodeType":"YulTypedName","src":"11347:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"11355:3:13","nodeType":"YulTypedName","src":"11355:3:13","type":""}],"src":"11213:366:13"},{"body":{"nativeSrc":"11756:248:13","nodeType":"YulBlock","src":"11756:248:13","statements":[{"nativeSrc":"11766:26:13","nodeType":"YulAssignment","src":"11766:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"11778:9:13","nodeType":"YulIdentifier","src":"11778:9:13"},{"kind":"number","nativeSrc":"11789:2:13","nodeType":"YulLiteral","src":"11789:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11774:3:13","nodeType":"YulIdentifier","src":"11774:3:13"},"nativeSrc":"11774:18:13","nodeType":"YulFunctionCall","src":"11774:18:13"},"variableNames":[{"name":"tail","nativeSrc":"11766:4:13","nodeType":"YulIdentifier","src":"11766:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11813:9:13","nodeType":"YulIdentifier","src":"11813:9:13"},{"kind":"number","nativeSrc":"11824:1:13","nodeType":"YulLiteral","src":"11824:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11809:3:13","nodeType":"YulIdentifier","src":"11809:3:13"},"nativeSrc":"11809:17:13","nodeType":"YulFunctionCall","src":"11809:17:13"},{"arguments":[{"name":"tail","nativeSrc":"11832:4:13","nodeType":"YulIdentifier","src":"11832:4:13"},{"name":"headStart","nativeSrc":"11838:9:13","nodeType":"YulIdentifier","src":"11838:9:13"}],"functionName":{"name":"sub","nativeSrc":"11828:3:13","nodeType":"YulIdentifier","src":"11828:3:13"},"nativeSrc":"11828:20:13","nodeType":"YulFunctionCall","src":"11828:20:13"}],"functionName":{"name":"mstore","nativeSrc":"11802:6:13","nodeType":"YulIdentifier","src":"11802:6:13"},"nativeSrc":"11802:47:13","nodeType":"YulFunctionCall","src":"11802:47:13"},"nativeSrc":"11802:47:13","nodeType":"YulExpressionStatement","src":"11802:47:13"},{"nativeSrc":"11858:139:13","nodeType":"YulAssignment","src":"11858:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"11992:4:13","nodeType":"YulIdentifier","src":"11992:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"11866:124:13","nodeType":"YulIdentifier","src":"11866:124:13"},"nativeSrc":"11866:131:13","nodeType":"YulFunctionCall","src":"11866:131:13"},"variableNames":[{"name":"tail","nativeSrc":"11858:4:13","nodeType":"YulIdentifier","src":"11858:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11585:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11736:9:13","nodeType":"YulTypedName","src":"11736:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11751:4:13","nodeType":"YulTypedName","src":"11751:4:13","type":""}],"src":"11585:419:13"},{"body":{"nativeSrc":"12116:142:13","nodeType":"YulBlock","src":"12116:142:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"12138:6:13","nodeType":"YulIdentifier","src":"12138:6:13"},{"kind":"number","nativeSrc":"12146:1:13","nodeType":"YulLiteral","src":"12146:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12134:3:13","nodeType":"YulIdentifier","src":"12134:3:13"},"nativeSrc":"12134:14:13","nodeType":"YulFunctionCall","src":"12134:14:13"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nativeSrc":"12150:34:13","nodeType":"YulLiteral","src":"12150:34:13","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nativeSrc":"12127:6:13","nodeType":"YulIdentifier","src":"12127:6:13"},"nativeSrc":"12127:58:13","nodeType":"YulFunctionCall","src":"12127:58:13"},"nativeSrc":"12127:58:13","nodeType":"YulExpressionStatement","src":"12127:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"12206:6:13","nodeType":"YulIdentifier","src":"12206:6:13"},{"kind":"number","nativeSrc":"12214:2:13","nodeType":"YulLiteral","src":"12214:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12202:3:13","nodeType":"YulIdentifier","src":"12202:3:13"},"nativeSrc":"12202:15:13","nodeType":"YulFunctionCall","src":"12202:15:13"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nativeSrc":"12219:31:13","nodeType":"YulLiteral","src":"12219:31:13","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nativeSrc":"12195:6:13","nodeType":"YulIdentifier","src":"12195:6:13"},"nativeSrc":"12195:56:13","nodeType":"YulFunctionCall","src":"12195:56:13"},"nativeSrc":"12195:56:13","nodeType":"YulExpressionStatement","src":"12195:56:13"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"12010:248:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"12108:6:13","nodeType":"YulTypedName","src":"12108:6:13","type":""}],"src":"12010:248:13"},{"body":{"nativeSrc":"12410:220:13","nodeType":"YulBlock","src":"12410:220:13","statements":[{"nativeSrc":"12420:74:13","nodeType":"YulAssignment","src":"12420:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"12486:3:13","nodeType":"YulIdentifier","src":"12486:3:13"},{"kind":"number","nativeSrc":"12491:2:13","nodeType":"YulLiteral","src":"12491:2:13","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"12427:58:13","nodeType":"YulIdentifier","src":"12427:58:13"},"nativeSrc":"12427:67:13","nodeType":"YulFunctionCall","src":"12427:67:13"},"variableNames":[{"name":"pos","nativeSrc":"12420:3:13","nodeType":"YulIdentifier","src":"12420:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"12592:3:13","nodeType":"YulIdentifier","src":"12592:3:13"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"12503:88:13","nodeType":"YulIdentifier","src":"12503:88:13"},"nativeSrc":"12503:93:13","nodeType":"YulFunctionCall","src":"12503:93:13"},"nativeSrc":"12503:93:13","nodeType":"YulExpressionStatement","src":"12503:93:13"},{"nativeSrc":"12605:19:13","nodeType":"YulAssignment","src":"12605:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"12616:3:13","nodeType":"YulIdentifier","src":"12616:3:13"},{"kind":"number","nativeSrc":"12621:2:13","nodeType":"YulLiteral","src":"12621:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12612:3:13","nodeType":"YulIdentifier","src":"12612:3:13"},"nativeSrc":"12612:12:13","nodeType":"YulFunctionCall","src":"12612:12:13"},"variableNames":[{"name":"end","nativeSrc":"12605:3:13","nodeType":"YulIdentifier","src":"12605:3:13"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"12264:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"12398:3:13","nodeType":"YulTypedName","src":"12398:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12406:3:13","nodeType":"YulTypedName","src":"12406:3:13","type":""}],"src":"12264:366:13"},{"body":{"nativeSrc":"12807:248:13","nodeType":"YulBlock","src":"12807:248:13","statements":[{"nativeSrc":"12817:26:13","nodeType":"YulAssignment","src":"12817:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"12829:9:13","nodeType":"YulIdentifier","src":"12829:9:13"},{"kind":"number","nativeSrc":"12840:2:13","nodeType":"YulLiteral","src":"12840:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12825:3:13","nodeType":"YulIdentifier","src":"12825:3:13"},"nativeSrc":"12825:18:13","nodeType":"YulFunctionCall","src":"12825:18:13"},"variableNames":[{"name":"tail","nativeSrc":"12817:4:13","nodeType":"YulIdentifier","src":"12817:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12864:9:13","nodeType":"YulIdentifier","src":"12864:9:13"},{"kind":"number","nativeSrc":"12875:1:13","nodeType":"YulLiteral","src":"12875:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12860:3:13","nodeType":"YulIdentifier","src":"12860:3:13"},"nativeSrc":"12860:17:13","nodeType":"YulFunctionCall","src":"12860:17:13"},{"arguments":[{"name":"tail","nativeSrc":"12883:4:13","nodeType":"YulIdentifier","src":"12883:4:13"},{"name":"headStart","nativeSrc":"12889:9:13","nodeType":"YulIdentifier","src":"12889:9:13"}],"functionName":{"name":"sub","nativeSrc":"12879:3:13","nodeType":"YulIdentifier","src":"12879:3:13"},"nativeSrc":"12879:20:13","nodeType":"YulFunctionCall","src":"12879:20:13"}],"functionName":{"name":"mstore","nativeSrc":"12853:6:13","nodeType":"YulIdentifier","src":"12853:6:13"},"nativeSrc":"12853:47:13","nodeType":"YulFunctionCall","src":"12853:47:13"},"nativeSrc":"12853:47:13","nodeType":"YulExpressionStatement","src":"12853:47:13"},{"nativeSrc":"12909:139:13","nodeType":"YulAssignment","src":"12909:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"13043:4:13","nodeType":"YulIdentifier","src":"13043:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"12917:124:13","nodeType":"YulIdentifier","src":"12917:124:13"},"nativeSrc":"12917:131:13","nodeType":"YulFunctionCall","src":"12917:131:13"},"variableNames":[{"name":"tail","nativeSrc":"12909:4:13","nodeType":"YulIdentifier","src":"12909:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12636:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12787:9:13","nodeType":"YulTypedName","src":"12787:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12802:4:13","nodeType":"YulTypedName","src":"12802:4:13","type":""}],"src":"12636:419:13"},{"body":{"nativeSrc":"13167:126:13","nodeType":"YulBlock","src":"13167:126:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13189:6:13","nodeType":"YulIdentifier","src":"13189:6:13"},{"kind":"number","nativeSrc":"13197:1:13","nodeType":"YulLiteral","src":"13197:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13185:3:13","nodeType":"YulIdentifier","src":"13185:3:13"},"nativeSrc":"13185:14:13","nodeType":"YulFunctionCall","src":"13185:14:13"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nativeSrc":"13201:34:13","nodeType":"YulLiteral","src":"13201:34:13","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nativeSrc":"13178:6:13","nodeType":"YulIdentifier","src":"13178:6:13"},"nativeSrc":"13178:58:13","nodeType":"YulFunctionCall","src":"13178:58:13"},"nativeSrc":"13178:58:13","nodeType":"YulExpressionStatement","src":"13178:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13257:6:13","nodeType":"YulIdentifier","src":"13257:6:13"},{"kind":"number","nativeSrc":"13265:2:13","nodeType":"YulLiteral","src":"13265:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13253:3:13","nodeType":"YulIdentifier","src":"13253:3:13"},"nativeSrc":"13253:15:13","nodeType":"YulFunctionCall","src":"13253:15:13"},{"hexValue":"72206f7220617070726f766564","kind":"string","nativeSrc":"13270:15:13","nodeType":"YulLiteral","src":"13270:15:13","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nativeSrc":"13246:6:13","nodeType":"YulIdentifier","src":"13246:6:13"},"nativeSrc":"13246:40:13","nodeType":"YulFunctionCall","src":"13246:40:13"},"nativeSrc":"13246:40:13","nodeType":"YulExpressionStatement","src":"13246:40:13"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"13061:232:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"13159:6:13","nodeType":"YulTypedName","src":"13159:6:13","type":""}],"src":"13061:232:13"},{"body":{"nativeSrc":"13445:220:13","nodeType":"YulBlock","src":"13445:220:13","statements":[{"nativeSrc":"13455:74:13","nodeType":"YulAssignment","src":"13455:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"13521:3:13","nodeType":"YulIdentifier","src":"13521:3:13"},{"kind":"number","nativeSrc":"13526:2:13","nodeType":"YulLiteral","src":"13526:2:13","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"13462:58:13","nodeType":"YulIdentifier","src":"13462:58:13"},"nativeSrc":"13462:67:13","nodeType":"YulFunctionCall","src":"13462:67:13"},"variableNames":[{"name":"pos","nativeSrc":"13455:3:13","nodeType":"YulIdentifier","src":"13455:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13627:3:13","nodeType":"YulIdentifier","src":"13627:3:13"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"13538:88:13","nodeType":"YulIdentifier","src":"13538:88:13"},"nativeSrc":"13538:93:13","nodeType":"YulFunctionCall","src":"13538:93:13"},"nativeSrc":"13538:93:13","nodeType":"YulExpressionStatement","src":"13538:93:13"},{"nativeSrc":"13640:19:13","nodeType":"YulAssignment","src":"13640:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"13651:3:13","nodeType":"YulIdentifier","src":"13651:3:13"},{"kind":"number","nativeSrc":"13656:2:13","nodeType":"YulLiteral","src":"13656:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13647:3:13","nodeType":"YulIdentifier","src":"13647:3:13"},"nativeSrc":"13647:12:13","nodeType":"YulFunctionCall","src":"13647:12:13"},"variableNames":[{"name":"end","nativeSrc":"13640:3:13","nodeType":"YulIdentifier","src":"13640:3:13"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"13299:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13433:3:13","nodeType":"YulTypedName","src":"13433:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13441:3:13","nodeType":"YulTypedName","src":"13441:3:13","type":""}],"src":"13299:366:13"},{"body":{"nativeSrc":"13842:248:13","nodeType":"YulBlock","src":"13842:248:13","statements":[{"nativeSrc":"13852:26:13","nodeType":"YulAssignment","src":"13852:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"13864:9:13","nodeType":"YulIdentifier","src":"13864:9:13"},{"kind":"number","nativeSrc":"13875:2:13","nodeType":"YulLiteral","src":"13875:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13860:3:13","nodeType":"YulIdentifier","src":"13860:3:13"},"nativeSrc":"13860:18:13","nodeType":"YulFunctionCall","src":"13860:18:13"},"variableNames":[{"name":"tail","nativeSrc":"13852:4:13","nodeType":"YulIdentifier","src":"13852:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13899:9:13","nodeType":"YulIdentifier","src":"13899:9:13"},{"kind":"number","nativeSrc":"13910:1:13","nodeType":"YulLiteral","src":"13910:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13895:3:13","nodeType":"YulIdentifier","src":"13895:3:13"},"nativeSrc":"13895:17:13","nodeType":"YulFunctionCall","src":"13895:17:13"},{"arguments":[{"name":"tail","nativeSrc":"13918:4:13","nodeType":"YulIdentifier","src":"13918:4:13"},{"name":"headStart","nativeSrc":"13924:9:13","nodeType":"YulIdentifier","src":"13924:9:13"}],"functionName":{"name":"sub","nativeSrc":"13914:3:13","nodeType":"YulIdentifier","src":"13914:3:13"},"nativeSrc":"13914:20:13","nodeType":"YulFunctionCall","src":"13914:20:13"}],"functionName":{"name":"mstore","nativeSrc":"13888:6:13","nodeType":"YulIdentifier","src":"13888:6:13"},"nativeSrc":"13888:47:13","nodeType":"YulFunctionCall","src":"13888:47:13"},"nativeSrc":"13888:47:13","nodeType":"YulExpressionStatement","src":"13888:47:13"},{"nativeSrc":"13944:139:13","nodeType":"YulAssignment","src":"13944:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"14078:4:13","nodeType":"YulIdentifier","src":"14078:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"13952:124:13","nodeType":"YulIdentifier","src":"13952:124:13"},"nativeSrc":"13952:131:13","nodeType":"YulFunctionCall","src":"13952:131:13"},"variableNames":[{"name":"tail","nativeSrc":"13944:4:13","nodeType":"YulIdentifier","src":"13944:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13671:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13822:9:13","nodeType":"YulTypedName","src":"13822:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13837:4:13","nodeType":"YulTypedName","src":"13837:4:13","type":""}],"src":"13671:419:13"},{"body":{"nativeSrc":"14202:68:13","nodeType":"YulBlock","src":"14202:68:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"14224:6:13","nodeType":"YulIdentifier","src":"14224:6:13"},{"kind":"number","nativeSrc":"14232:1:13","nodeType":"YulLiteral","src":"14232:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14220:3:13","nodeType":"YulIdentifier","src":"14220:3:13"},"nativeSrc":"14220:14:13","nodeType":"YulFunctionCall","src":"14220:14:13"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nativeSrc":"14236:26:13","nodeType":"YulLiteral","src":"14236:26:13","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nativeSrc":"14213:6:13","nodeType":"YulIdentifier","src":"14213:6:13"},"nativeSrc":"14213:50:13","nodeType":"YulFunctionCall","src":"14213:50:13"},"nativeSrc":"14213:50:13","nodeType":"YulExpressionStatement","src":"14213:50:13"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"14096:174:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"14194:6:13","nodeType":"YulTypedName","src":"14194:6:13","type":""}],"src":"14096:174:13"},{"body":{"nativeSrc":"14422:220:13","nodeType":"YulBlock","src":"14422:220:13","statements":[{"nativeSrc":"14432:74:13","nodeType":"YulAssignment","src":"14432:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"14498:3:13","nodeType":"YulIdentifier","src":"14498:3:13"},{"kind":"number","nativeSrc":"14503:2:13","nodeType":"YulLiteral","src":"14503:2:13","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"14439:58:13","nodeType":"YulIdentifier","src":"14439:58:13"},"nativeSrc":"14439:67:13","nodeType":"YulFunctionCall","src":"14439:67:13"},"variableNames":[{"name":"pos","nativeSrc":"14432:3:13","nodeType":"YulIdentifier","src":"14432:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"14604:3:13","nodeType":"YulIdentifier","src":"14604:3:13"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"14515:88:13","nodeType":"YulIdentifier","src":"14515:88:13"},"nativeSrc":"14515:93:13","nodeType":"YulFunctionCall","src":"14515:93:13"},"nativeSrc":"14515:93:13","nodeType":"YulExpressionStatement","src":"14515:93:13"},{"nativeSrc":"14617:19:13","nodeType":"YulAssignment","src":"14617:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"14628:3:13","nodeType":"YulIdentifier","src":"14628:3:13"},{"kind":"number","nativeSrc":"14633:2:13","nodeType":"YulLiteral","src":"14633:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14624:3:13","nodeType":"YulIdentifier","src":"14624:3:13"},"nativeSrc":"14624:12:13","nodeType":"YulFunctionCall","src":"14624:12:13"},"variableNames":[{"name":"end","nativeSrc":"14617:3:13","nodeType":"YulIdentifier","src":"14617:3:13"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"14276:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14410:3:13","nodeType":"YulTypedName","src":"14410:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14418:3:13","nodeType":"YulTypedName","src":"14418:3:13","type":""}],"src":"14276:366:13"},{"body":{"nativeSrc":"14819:248:13","nodeType":"YulBlock","src":"14819:248:13","statements":[{"nativeSrc":"14829:26:13","nodeType":"YulAssignment","src":"14829:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"14841:9:13","nodeType":"YulIdentifier","src":"14841:9:13"},{"kind":"number","nativeSrc":"14852:2:13","nodeType":"YulLiteral","src":"14852:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14837:3:13","nodeType":"YulIdentifier","src":"14837:3:13"},"nativeSrc":"14837:18:13","nodeType":"YulFunctionCall","src":"14837:18:13"},"variableNames":[{"name":"tail","nativeSrc":"14829:4:13","nodeType":"YulIdentifier","src":"14829:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14876:9:13","nodeType":"YulIdentifier","src":"14876:9:13"},{"kind":"number","nativeSrc":"14887:1:13","nodeType":"YulLiteral","src":"14887:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14872:3:13","nodeType":"YulIdentifier","src":"14872:3:13"},"nativeSrc":"14872:17:13","nodeType":"YulFunctionCall","src":"14872:17:13"},{"arguments":[{"name":"tail","nativeSrc":"14895:4:13","nodeType":"YulIdentifier","src":"14895:4:13"},{"name":"headStart","nativeSrc":"14901:9:13","nodeType":"YulIdentifier","src":"14901:9:13"}],"functionName":{"name":"sub","nativeSrc":"14891:3:13","nodeType":"YulIdentifier","src":"14891:3:13"},"nativeSrc":"14891:20:13","nodeType":"YulFunctionCall","src":"14891:20:13"}],"functionName":{"name":"mstore","nativeSrc":"14865:6:13","nodeType":"YulIdentifier","src":"14865:6:13"},"nativeSrc":"14865:47:13","nodeType":"YulFunctionCall","src":"14865:47:13"},"nativeSrc":"14865:47:13","nodeType":"YulExpressionStatement","src":"14865:47:13"},{"nativeSrc":"14921:139:13","nodeType":"YulAssignment","src":"14921:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"15055:4:13","nodeType":"YulIdentifier","src":"15055:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"14929:124:13","nodeType":"YulIdentifier","src":"14929:124:13"},"nativeSrc":"14929:131:13","nodeType":"YulFunctionCall","src":"14929:131:13"},"variableNames":[{"name":"tail","nativeSrc":"14921:4:13","nodeType":"YulIdentifier","src":"14921:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14648:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14799:9:13","nodeType":"YulTypedName","src":"14799:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14814:4:13","nodeType":"YulTypedName","src":"14814:4:13","type":""}],"src":"14648:419:13"},{"body":{"nativeSrc":"15179:122:13","nodeType":"YulBlock","src":"15179:122:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"15201:6:13","nodeType":"YulIdentifier","src":"15201:6:13"},{"kind":"number","nativeSrc":"15209:1:13","nodeType":"YulLiteral","src":"15209:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15197:3:13","nodeType":"YulIdentifier","src":"15197:3:13"},"nativeSrc":"15197:14:13","nodeType":"YulFunctionCall","src":"15197:14:13"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nativeSrc":"15213:34:13","nodeType":"YulLiteral","src":"15213:34:13","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nativeSrc":"15190:6:13","nodeType":"YulIdentifier","src":"15190:6:13"},"nativeSrc":"15190:58:13","nodeType":"YulFunctionCall","src":"15190:58:13"},"nativeSrc":"15190:58:13","nodeType":"YulExpressionStatement","src":"15190:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"15269:6:13","nodeType":"YulIdentifier","src":"15269:6:13"},{"kind":"number","nativeSrc":"15277:2:13","nodeType":"YulLiteral","src":"15277:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15265:3:13","nodeType":"YulIdentifier","src":"15265:3:13"},"nativeSrc":"15265:15:13","nodeType":"YulFunctionCall","src":"15265:15:13"},{"hexValue":"6c6964206f776e6572","kind":"string","nativeSrc":"15282:11:13","nodeType":"YulLiteral","src":"15282:11:13","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nativeSrc":"15258:6:13","nodeType":"YulIdentifier","src":"15258:6:13"},"nativeSrc":"15258:36:13","nodeType":"YulFunctionCall","src":"15258:36:13"},"nativeSrc":"15258:36:13","nodeType":"YulExpressionStatement","src":"15258:36:13"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"15073:228:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"15171:6:13","nodeType":"YulTypedName","src":"15171:6:13","type":""}],"src":"15073:228:13"},{"body":{"nativeSrc":"15453:220:13","nodeType":"YulBlock","src":"15453:220:13","statements":[{"nativeSrc":"15463:74:13","nodeType":"YulAssignment","src":"15463:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"15529:3:13","nodeType":"YulIdentifier","src":"15529:3:13"},{"kind":"number","nativeSrc":"15534:2:13","nodeType":"YulLiteral","src":"15534:2:13","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"15470:58:13","nodeType":"YulIdentifier","src":"15470:58:13"},"nativeSrc":"15470:67:13","nodeType":"YulFunctionCall","src":"15470:67:13"},"variableNames":[{"name":"pos","nativeSrc":"15463:3:13","nodeType":"YulIdentifier","src":"15463:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"15635:3:13","nodeType":"YulIdentifier","src":"15635:3:13"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"15546:88:13","nodeType":"YulIdentifier","src":"15546:88:13"},"nativeSrc":"15546:93:13","nodeType":"YulFunctionCall","src":"15546:93:13"},"nativeSrc":"15546:93:13","nodeType":"YulExpressionStatement","src":"15546:93:13"},{"nativeSrc":"15648:19:13","nodeType":"YulAssignment","src":"15648:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"15659:3:13","nodeType":"YulIdentifier","src":"15659:3:13"},{"kind":"number","nativeSrc":"15664:2:13","nodeType":"YulLiteral","src":"15664:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15655:3:13","nodeType":"YulIdentifier","src":"15655:3:13"},"nativeSrc":"15655:12:13","nodeType":"YulFunctionCall","src":"15655:12:13"},"variableNames":[{"name":"end","nativeSrc":"15648:3:13","nodeType":"YulIdentifier","src":"15648:3:13"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"15307:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15441:3:13","nodeType":"YulTypedName","src":"15441:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15449:3:13","nodeType":"YulTypedName","src":"15449:3:13","type":""}],"src":"15307:366:13"},{"body":{"nativeSrc":"15850:248:13","nodeType":"YulBlock","src":"15850:248:13","statements":[{"nativeSrc":"15860:26:13","nodeType":"YulAssignment","src":"15860:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"15872:9:13","nodeType":"YulIdentifier","src":"15872:9:13"},{"kind":"number","nativeSrc":"15883:2:13","nodeType":"YulLiteral","src":"15883:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15868:3:13","nodeType":"YulIdentifier","src":"15868:3:13"},"nativeSrc":"15868:18:13","nodeType":"YulFunctionCall","src":"15868:18:13"},"variableNames":[{"name":"tail","nativeSrc":"15860:4:13","nodeType":"YulIdentifier","src":"15860:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15907:9:13","nodeType":"YulIdentifier","src":"15907:9:13"},{"kind":"number","nativeSrc":"15918:1:13","nodeType":"YulLiteral","src":"15918:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15903:3:13","nodeType":"YulIdentifier","src":"15903:3:13"},"nativeSrc":"15903:17:13","nodeType":"YulFunctionCall","src":"15903:17:13"},{"arguments":[{"name":"tail","nativeSrc":"15926:4:13","nodeType":"YulIdentifier","src":"15926:4:13"},{"name":"headStart","nativeSrc":"15932:9:13","nodeType":"YulIdentifier","src":"15932:9:13"}],"functionName":{"name":"sub","nativeSrc":"15922:3:13","nodeType":"YulIdentifier","src":"15922:3:13"},"nativeSrc":"15922:20:13","nodeType":"YulFunctionCall","src":"15922:20:13"}],"functionName":{"name":"mstore","nativeSrc":"15896:6:13","nodeType":"YulIdentifier","src":"15896:6:13"},"nativeSrc":"15896:47:13","nodeType":"YulFunctionCall","src":"15896:47:13"},"nativeSrc":"15896:47:13","nodeType":"YulExpressionStatement","src":"15896:47:13"},{"nativeSrc":"15952:139:13","nodeType":"YulAssignment","src":"15952:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"16086:4:13","nodeType":"YulIdentifier","src":"16086:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"15960:124:13","nodeType":"YulIdentifier","src":"15960:124:13"},"nativeSrc":"15960:131:13","nodeType":"YulFunctionCall","src":"15960:131:13"},"variableNames":[{"name":"tail","nativeSrc":"15952:4:13","nodeType":"YulIdentifier","src":"15952:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15679:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15830:9:13","nodeType":"YulTypedName","src":"15830:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15845:4:13","nodeType":"YulTypedName","src":"15845:4:13","type":""}],"src":"15679:419:13"},{"body":{"nativeSrc":"16218:34:13","nodeType":"YulBlock","src":"16218:34:13","statements":[{"nativeSrc":"16228:18:13","nodeType":"YulAssignment","src":"16228:18:13","value":{"name":"pos","nativeSrc":"16243:3:13","nodeType":"YulIdentifier","src":"16243:3:13"},"variableNames":[{"name":"updated_pos","nativeSrc":"16228:11:13","nodeType":"YulIdentifier","src":"16228:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16104:148:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16190:3:13","nodeType":"YulTypedName","src":"16190:3:13","type":""},{"name":"length","nativeSrc":"16195:6:13","nodeType":"YulTypedName","src":"16195:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"16206:11:13","nodeType":"YulTypedName","src":"16206:11:13","type":""}],"src":"16104:148:13"},{"body":{"nativeSrc":"16368:280:13","nodeType":"YulBlock","src":"16368:280:13","statements":[{"nativeSrc":"16378:53:13","nodeType":"YulVariableDeclaration","src":"16378:53:13","value":{"arguments":[{"name":"value","nativeSrc":"16425:5:13","nodeType":"YulIdentifier","src":"16425:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"16392:32:13","nodeType":"YulIdentifier","src":"16392:32:13"},"nativeSrc":"16392:39:13","nodeType":"YulFunctionCall","src":"16392:39:13"},"variables":[{"name":"length","nativeSrc":"16382:6:13","nodeType":"YulTypedName","src":"16382:6:13","type":""}]},{"nativeSrc":"16440:96:13","nodeType":"YulAssignment","src":"16440:96:13","value":{"arguments":[{"name":"pos","nativeSrc":"16524:3:13","nodeType":"YulIdentifier","src":"16524:3:13"},{"name":"length","nativeSrc":"16529:6:13","nodeType":"YulIdentifier","src":"16529:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16447:76:13","nodeType":"YulIdentifier","src":"16447:76:13"},"nativeSrc":"16447:89:13","nodeType":"YulFunctionCall","src":"16447:89:13"},"variableNames":[{"name":"pos","nativeSrc":"16440:3:13","nodeType":"YulIdentifier","src":"16440:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"16584:5:13","nodeType":"YulIdentifier","src":"16584:5:13"},{"kind":"number","nativeSrc":"16591:4:13","nodeType":"YulLiteral","src":"16591:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16580:3:13","nodeType":"YulIdentifier","src":"16580:3:13"},"nativeSrc":"16580:16:13","nodeType":"YulFunctionCall","src":"16580:16:13"},{"name":"pos","nativeSrc":"16598:3:13","nodeType":"YulIdentifier","src":"16598:3:13"},{"name":"length","nativeSrc":"16603:6:13","nodeType":"YulIdentifier","src":"16603:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"16545:34:13","nodeType":"YulIdentifier","src":"16545:34:13"},"nativeSrc":"16545:65:13","nodeType":"YulFunctionCall","src":"16545:65:13"},"nativeSrc":"16545:65:13","nodeType":"YulExpressionStatement","src":"16545:65:13"},{"nativeSrc":"16619:23:13","nodeType":"YulAssignment","src":"16619:23:13","value":{"arguments":[{"name":"pos","nativeSrc":"16630:3:13","nodeType":"YulIdentifier","src":"16630:3:13"},{"name":"length","nativeSrc":"16635:6:13","nodeType":"YulIdentifier","src":"16635:6:13"}],"functionName":{"name":"add","nativeSrc":"16626:3:13","nodeType":"YulIdentifier","src":"16626:3:13"},"nativeSrc":"16626:16:13","nodeType":"YulFunctionCall","src":"16626:16:13"},"variableNames":[{"name":"end","nativeSrc":"16619:3:13","nodeType":"YulIdentifier","src":"16619:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16258:390:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"16349:5:13","nodeType":"YulTypedName","src":"16349:5:13","type":""},{"name":"pos","nativeSrc":"16356:3:13","nodeType":"YulTypedName","src":"16356:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16364:3:13","nodeType":"YulTypedName","src":"16364:3:13","type":""}],"src":"16258:390:13"},{"body":{"nativeSrc":"16838:251:13","nodeType":"YulBlock","src":"16838:251:13","statements":[{"nativeSrc":"16849:102:13","nodeType":"YulAssignment","src":"16849:102:13","value":{"arguments":[{"name":"value0","nativeSrc":"16938:6:13","nodeType":"YulIdentifier","src":"16938:6:13"},{"name":"pos","nativeSrc":"16947:3:13","nodeType":"YulIdentifier","src":"16947:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16856:81:13","nodeType":"YulIdentifier","src":"16856:81:13"},"nativeSrc":"16856:95:13","nodeType":"YulFunctionCall","src":"16856:95:13"},"variableNames":[{"name":"pos","nativeSrc":"16849:3:13","nodeType":"YulIdentifier","src":"16849:3:13"}]},{"nativeSrc":"16961:102:13","nodeType":"YulAssignment","src":"16961:102:13","value":{"arguments":[{"name":"value1","nativeSrc":"17050:6:13","nodeType":"YulIdentifier","src":"17050:6:13"},{"name":"pos","nativeSrc":"17059:3:13","nodeType":"YulIdentifier","src":"17059:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"16968:81:13","nodeType":"YulIdentifier","src":"16968:81:13"},"nativeSrc":"16968:95:13","nodeType":"YulFunctionCall","src":"16968:95:13"},"variableNames":[{"name":"pos","nativeSrc":"16961:3:13","nodeType":"YulIdentifier","src":"16961:3:13"}]},{"nativeSrc":"17073:10:13","nodeType":"YulAssignment","src":"17073:10:13","value":{"name":"pos","nativeSrc":"17080:3:13","nodeType":"YulIdentifier","src":"17080:3:13"},"variableNames":[{"name":"end","nativeSrc":"17073:3:13","nodeType":"YulIdentifier","src":"17073:3:13"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"16654:435:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16809:3:13","nodeType":"YulTypedName","src":"16809:3:13","type":""},{"name":"value1","nativeSrc":"16815:6:13","nodeType":"YulTypedName","src":"16815:6:13","type":""},{"name":"value0","nativeSrc":"16823:6:13","nodeType":"YulTypedName","src":"16823:6:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16834:3:13","nodeType":"YulTypedName","src":"16834:3:13","type":""}],"src":"16654:435:13"},{"body":{"nativeSrc":"17201:118:13","nodeType":"YulBlock","src":"17201:118:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17223:6:13","nodeType":"YulIdentifier","src":"17223:6:13"},{"kind":"number","nativeSrc":"17231:1:13","nodeType":"YulLiteral","src":"17231:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17219:3:13","nodeType":"YulIdentifier","src":"17219:3:13"},"nativeSrc":"17219:14:13","nodeType":"YulFunctionCall","src":"17219:14:13"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nativeSrc":"17235:34:13","nodeType":"YulLiteral","src":"17235:34:13","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nativeSrc":"17212:6:13","nodeType":"YulIdentifier","src":"17212:6:13"},"nativeSrc":"17212:58:13","nodeType":"YulFunctionCall","src":"17212:58:13"},"nativeSrc":"17212:58:13","nodeType":"YulExpressionStatement","src":"17212:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17291:6:13","nodeType":"YulIdentifier","src":"17291:6:13"},{"kind":"number","nativeSrc":"17299:2:13","nodeType":"YulLiteral","src":"17299:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17287:3:13","nodeType":"YulIdentifier","src":"17287:3:13"},"nativeSrc":"17287:15:13","nodeType":"YulFunctionCall","src":"17287:15:13"},{"hexValue":"6f776e6572","kind":"string","nativeSrc":"17304:7:13","nodeType":"YulLiteral","src":"17304:7:13","type":"","value":"owner"}],"functionName":{"name":"mstore","nativeSrc":"17280:6:13","nodeType":"YulIdentifier","src":"17280:6:13"},"nativeSrc":"17280:32:13","nodeType":"YulFunctionCall","src":"17280:32:13"},"nativeSrc":"17280:32:13","nodeType":"YulExpressionStatement","src":"17280:32:13"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"17095:224:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"17193:6:13","nodeType":"YulTypedName","src":"17193:6:13","type":""}],"src":"17095:224:13"},{"body":{"nativeSrc":"17471:220:13","nodeType":"YulBlock","src":"17471:220:13","statements":[{"nativeSrc":"17481:74:13","nodeType":"YulAssignment","src":"17481:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"17547:3:13","nodeType":"YulIdentifier","src":"17547:3:13"},{"kind":"number","nativeSrc":"17552:2:13","nodeType":"YulLiteral","src":"17552:2:13","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"17488:58:13","nodeType":"YulIdentifier","src":"17488:58:13"},"nativeSrc":"17488:67:13","nodeType":"YulFunctionCall","src":"17488:67:13"},"variableNames":[{"name":"pos","nativeSrc":"17481:3:13","nodeType":"YulIdentifier","src":"17481:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"17653:3:13","nodeType":"YulIdentifier","src":"17653:3:13"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"17564:88:13","nodeType":"YulIdentifier","src":"17564:88:13"},"nativeSrc":"17564:93:13","nodeType":"YulFunctionCall","src":"17564:93:13"},"nativeSrc":"17564:93:13","nodeType":"YulExpressionStatement","src":"17564:93:13"},{"nativeSrc":"17666:19:13","nodeType":"YulAssignment","src":"17666:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"17677:3:13","nodeType":"YulIdentifier","src":"17677:3:13"},{"kind":"number","nativeSrc":"17682:2:13","nodeType":"YulLiteral","src":"17682:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17673:3:13","nodeType":"YulIdentifier","src":"17673:3:13"},"nativeSrc":"17673:12:13","nodeType":"YulFunctionCall","src":"17673:12:13"},"variableNames":[{"name":"end","nativeSrc":"17666:3:13","nodeType":"YulIdentifier","src":"17666:3:13"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"17325:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17459:3:13","nodeType":"YulTypedName","src":"17459:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17467:3:13","nodeType":"YulTypedName","src":"17467:3:13","type":""}],"src":"17325:366:13"},{"body":{"nativeSrc":"17868:248:13","nodeType":"YulBlock","src":"17868:248:13","statements":[{"nativeSrc":"17878:26:13","nodeType":"YulAssignment","src":"17878:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"17890:9:13","nodeType":"YulIdentifier","src":"17890:9:13"},{"kind":"number","nativeSrc":"17901:2:13","nodeType":"YulLiteral","src":"17901:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17886:3:13","nodeType":"YulIdentifier","src":"17886:3:13"},"nativeSrc":"17886:18:13","nodeType":"YulFunctionCall","src":"17886:18:13"},"variableNames":[{"name":"tail","nativeSrc":"17878:4:13","nodeType":"YulIdentifier","src":"17878:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17925:9:13","nodeType":"YulIdentifier","src":"17925:9:13"},{"kind":"number","nativeSrc":"17936:1:13","nodeType":"YulLiteral","src":"17936:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17921:3:13","nodeType":"YulIdentifier","src":"17921:3:13"},"nativeSrc":"17921:17:13","nodeType":"YulFunctionCall","src":"17921:17:13"},{"arguments":[{"name":"tail","nativeSrc":"17944:4:13","nodeType":"YulIdentifier","src":"17944:4:13"},{"name":"headStart","nativeSrc":"17950:9:13","nodeType":"YulIdentifier","src":"17950:9:13"}],"functionName":{"name":"sub","nativeSrc":"17940:3:13","nodeType":"YulIdentifier","src":"17940:3:13"},"nativeSrc":"17940:20:13","nodeType":"YulFunctionCall","src":"17940:20:13"}],"functionName":{"name":"mstore","nativeSrc":"17914:6:13","nodeType":"YulIdentifier","src":"17914:6:13"},"nativeSrc":"17914:47:13","nodeType":"YulFunctionCall","src":"17914:47:13"},"nativeSrc":"17914:47:13","nodeType":"YulExpressionStatement","src":"17914:47:13"},{"nativeSrc":"17970:139:13","nodeType":"YulAssignment","src":"17970:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"18104:4:13","nodeType":"YulIdentifier","src":"18104:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"17978:124:13","nodeType":"YulIdentifier","src":"17978:124:13"},"nativeSrc":"17978:131:13","nodeType":"YulFunctionCall","src":"17978:131:13"},"variableNames":[{"name":"tail","nativeSrc":"17970:4:13","nodeType":"YulIdentifier","src":"17970:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17697:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17848:9:13","nodeType":"YulTypedName","src":"17848:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17863:4:13","nodeType":"YulTypedName","src":"17863:4:13","type":""}],"src":"17697:419:13"},{"body":{"nativeSrc":"18228:117:13","nodeType":"YulBlock","src":"18228:117:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18250:6:13","nodeType":"YulIdentifier","src":"18250:6:13"},{"kind":"number","nativeSrc":"18258:1:13","nodeType":"YulLiteral","src":"18258:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18246:3:13","nodeType":"YulIdentifier","src":"18246:3:13"},"nativeSrc":"18246:14:13","nodeType":"YulFunctionCall","src":"18246:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nativeSrc":"18262:34:13","nodeType":"YulLiteral","src":"18262:34:13","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nativeSrc":"18239:6:13","nodeType":"YulIdentifier","src":"18239:6:13"},"nativeSrc":"18239:58:13","nodeType":"YulFunctionCall","src":"18239:58:13"},"nativeSrc":"18239:58:13","nodeType":"YulExpressionStatement","src":"18239:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18318:6:13","nodeType":"YulIdentifier","src":"18318:6:13"},{"kind":"number","nativeSrc":"18326:2:13","nodeType":"YulLiteral","src":"18326:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18314:3:13","nodeType":"YulIdentifier","src":"18314:3:13"},"nativeSrc":"18314:15:13","nodeType":"YulFunctionCall","src":"18314:15:13"},{"hexValue":"72657373","kind":"string","nativeSrc":"18331:6:13","nodeType":"YulLiteral","src":"18331:6:13","type":"","value":"ress"}],"functionName":{"name":"mstore","nativeSrc":"18307:6:13","nodeType":"YulIdentifier","src":"18307:6:13"},"nativeSrc":"18307:31:13","nodeType":"YulFunctionCall","src":"18307:31:13"},"nativeSrc":"18307:31:13","nodeType":"YulExpressionStatement","src":"18307:31:13"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"18122:223:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"18220:6:13","nodeType":"YulTypedName","src":"18220:6:13","type":""}],"src":"18122:223:13"},{"body":{"nativeSrc":"18497:220:13","nodeType":"YulBlock","src":"18497:220:13","statements":[{"nativeSrc":"18507:74:13","nodeType":"YulAssignment","src":"18507:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"18573:3:13","nodeType":"YulIdentifier","src":"18573:3:13"},{"kind":"number","nativeSrc":"18578:2:13","nodeType":"YulLiteral","src":"18578:2:13","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"18514:58:13","nodeType":"YulIdentifier","src":"18514:58:13"},"nativeSrc":"18514:67:13","nodeType":"YulFunctionCall","src":"18514:67:13"},"variableNames":[{"name":"pos","nativeSrc":"18507:3:13","nodeType":"YulIdentifier","src":"18507:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"18679:3:13","nodeType":"YulIdentifier","src":"18679:3:13"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"18590:88:13","nodeType":"YulIdentifier","src":"18590:88:13"},"nativeSrc":"18590:93:13","nodeType":"YulFunctionCall","src":"18590:93:13"},"nativeSrc":"18590:93:13","nodeType":"YulExpressionStatement","src":"18590:93:13"},{"nativeSrc":"18692:19:13","nodeType":"YulAssignment","src":"18692:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"18703:3:13","nodeType":"YulIdentifier","src":"18703:3:13"},{"kind":"number","nativeSrc":"18708:2:13","nodeType":"YulLiteral","src":"18708:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18699:3:13","nodeType":"YulIdentifier","src":"18699:3:13"},"nativeSrc":"18699:12:13","nodeType":"YulFunctionCall","src":"18699:12:13"},"variableNames":[{"name":"end","nativeSrc":"18692:3:13","nodeType":"YulIdentifier","src":"18692:3:13"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"18351:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18485:3:13","nodeType":"YulTypedName","src":"18485:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18493:3:13","nodeType":"YulTypedName","src":"18493:3:13","type":""}],"src":"18351:366:13"},{"body":{"nativeSrc":"18894:248:13","nodeType":"YulBlock","src":"18894:248:13","statements":[{"nativeSrc":"18904:26:13","nodeType":"YulAssignment","src":"18904:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"18916:9:13","nodeType":"YulIdentifier","src":"18916:9:13"},{"kind":"number","nativeSrc":"18927:2:13","nodeType":"YulLiteral","src":"18927:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18912:3:13","nodeType":"YulIdentifier","src":"18912:3:13"},"nativeSrc":"18912:18:13","nodeType":"YulFunctionCall","src":"18912:18:13"},"variableNames":[{"name":"tail","nativeSrc":"18904:4:13","nodeType":"YulIdentifier","src":"18904:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18951:9:13","nodeType":"YulIdentifier","src":"18951:9:13"},{"kind":"number","nativeSrc":"18962:1:13","nodeType":"YulLiteral","src":"18962:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18947:3:13","nodeType":"YulIdentifier","src":"18947:3:13"},"nativeSrc":"18947:17:13","nodeType":"YulFunctionCall","src":"18947:17:13"},{"arguments":[{"name":"tail","nativeSrc":"18970:4:13","nodeType":"YulIdentifier","src":"18970:4:13"},{"name":"headStart","nativeSrc":"18976:9:13","nodeType":"YulIdentifier","src":"18976:9:13"}],"functionName":{"name":"sub","nativeSrc":"18966:3:13","nodeType":"YulIdentifier","src":"18966:3:13"},"nativeSrc":"18966:20:13","nodeType":"YulFunctionCall","src":"18966:20:13"}],"functionName":{"name":"mstore","nativeSrc":"18940:6:13","nodeType":"YulIdentifier","src":"18940:6:13"},"nativeSrc":"18940:47:13","nodeType":"YulFunctionCall","src":"18940:47:13"},"nativeSrc":"18940:47:13","nodeType":"YulExpressionStatement","src":"18940:47:13"},{"nativeSrc":"18996:139:13","nodeType":"YulAssignment","src":"18996:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"19130:4:13","nodeType":"YulIdentifier","src":"19130:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"19004:124:13","nodeType":"YulIdentifier","src":"19004:124:13"},"nativeSrc":"19004:131:13","nodeType":"YulFunctionCall","src":"19004:131:13"},"variableNames":[{"name":"tail","nativeSrc":"18996:4:13","nodeType":"YulIdentifier","src":"18996:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18723:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18874:9:13","nodeType":"YulTypedName","src":"18874:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18889:4:13","nodeType":"YulTypedName","src":"18889:4:13","type":""}],"src":"18723:419:13"},{"body":{"nativeSrc":"19254:69:13","nodeType":"YulBlock","src":"19254:69:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"19276:6:13","nodeType":"YulIdentifier","src":"19276:6:13"},{"kind":"number","nativeSrc":"19284:1:13","nodeType":"YulLiteral","src":"19284:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19272:3:13","nodeType":"YulIdentifier","src":"19272:3:13"},"nativeSrc":"19272:14:13","nodeType":"YulFunctionCall","src":"19272:14:13"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nativeSrc":"19288:27:13","nodeType":"YulLiteral","src":"19288:27:13","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nativeSrc":"19265:6:13","nodeType":"YulIdentifier","src":"19265:6:13"},"nativeSrc":"19265:51:13","nodeType":"YulFunctionCall","src":"19265:51:13"},"nativeSrc":"19265:51:13","nodeType":"YulExpressionStatement","src":"19265:51:13"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"19148:175:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"19246:6:13","nodeType":"YulTypedName","src":"19246:6:13","type":""}],"src":"19148:175:13"},{"body":{"nativeSrc":"19475:220:13","nodeType":"YulBlock","src":"19475:220:13","statements":[{"nativeSrc":"19485:74:13","nodeType":"YulAssignment","src":"19485:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"19551:3:13","nodeType":"YulIdentifier","src":"19551:3:13"},{"kind":"number","nativeSrc":"19556:2:13","nodeType":"YulLiteral","src":"19556:2:13","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"19492:58:13","nodeType":"YulIdentifier","src":"19492:58:13"},"nativeSrc":"19492:67:13","nodeType":"YulFunctionCall","src":"19492:67:13"},"variableNames":[{"name":"pos","nativeSrc":"19485:3:13","nodeType":"YulIdentifier","src":"19485:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19657:3:13","nodeType":"YulIdentifier","src":"19657:3:13"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"19568:88:13","nodeType":"YulIdentifier","src":"19568:88:13"},"nativeSrc":"19568:93:13","nodeType":"YulFunctionCall","src":"19568:93:13"},"nativeSrc":"19568:93:13","nodeType":"YulExpressionStatement","src":"19568:93:13"},{"nativeSrc":"19670:19:13","nodeType":"YulAssignment","src":"19670:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"19681:3:13","nodeType":"YulIdentifier","src":"19681:3:13"},{"kind":"number","nativeSrc":"19686:2:13","nodeType":"YulLiteral","src":"19686:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19677:3:13","nodeType":"YulIdentifier","src":"19677:3:13"},"nativeSrc":"19677:12:13","nodeType":"YulFunctionCall","src":"19677:12:13"},"variableNames":[{"name":"end","nativeSrc":"19670:3:13","nodeType":"YulIdentifier","src":"19670:3:13"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"19329:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19463:3:13","nodeType":"YulTypedName","src":"19463:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19471:3:13","nodeType":"YulTypedName","src":"19471:3:13","type":""}],"src":"19329:366:13"},{"body":{"nativeSrc":"19872:248:13","nodeType":"YulBlock","src":"19872:248:13","statements":[{"nativeSrc":"19882:26:13","nodeType":"YulAssignment","src":"19882:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"19894:9:13","nodeType":"YulIdentifier","src":"19894:9:13"},{"kind":"number","nativeSrc":"19905:2:13","nodeType":"YulLiteral","src":"19905:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19890:3:13","nodeType":"YulIdentifier","src":"19890:3:13"},"nativeSrc":"19890:18:13","nodeType":"YulFunctionCall","src":"19890:18:13"},"variableNames":[{"name":"tail","nativeSrc":"19882:4:13","nodeType":"YulIdentifier","src":"19882:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19929:9:13","nodeType":"YulIdentifier","src":"19929:9:13"},{"kind":"number","nativeSrc":"19940:1:13","nodeType":"YulLiteral","src":"19940:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19925:3:13","nodeType":"YulIdentifier","src":"19925:3:13"},"nativeSrc":"19925:17:13","nodeType":"YulFunctionCall","src":"19925:17:13"},{"arguments":[{"name":"tail","nativeSrc":"19948:4:13","nodeType":"YulIdentifier","src":"19948:4:13"},{"name":"headStart","nativeSrc":"19954:9:13","nodeType":"YulIdentifier","src":"19954:9:13"}],"functionName":{"name":"sub","nativeSrc":"19944:3:13","nodeType":"YulIdentifier","src":"19944:3:13"},"nativeSrc":"19944:20:13","nodeType":"YulFunctionCall","src":"19944:20:13"}],"functionName":{"name":"mstore","nativeSrc":"19918:6:13","nodeType":"YulIdentifier","src":"19918:6:13"},"nativeSrc":"19918:47:13","nodeType":"YulFunctionCall","src":"19918:47:13"},"nativeSrc":"19918:47:13","nodeType":"YulExpressionStatement","src":"19918:47:13"},{"nativeSrc":"19974:139:13","nodeType":"YulAssignment","src":"19974:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"20108:4:13","nodeType":"YulIdentifier","src":"20108:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"19982:124:13","nodeType":"YulIdentifier","src":"19982:124:13"},"nativeSrc":"19982:131:13","nodeType":"YulFunctionCall","src":"19982:131:13"},"variableNames":[{"name":"tail","nativeSrc":"19974:4:13","nodeType":"YulIdentifier","src":"19974:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19701:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19852:9:13","nodeType":"YulTypedName","src":"19852:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19867:4:13","nodeType":"YulTypedName","src":"19867:4:13","type":""}],"src":"19701:419:13"},{"body":{"nativeSrc":"20232:131:13","nodeType":"YulBlock","src":"20232:131:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"20254:6:13","nodeType":"YulIdentifier","src":"20254:6:13"},{"kind":"number","nativeSrc":"20262:1:13","nodeType":"YulLiteral","src":"20262:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20250:3:13","nodeType":"YulIdentifier","src":"20250:3:13"},"nativeSrc":"20250:14:13","nodeType":"YulFunctionCall","src":"20250:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nativeSrc":"20266:34:13","nodeType":"YulLiteral","src":"20266:34:13","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nativeSrc":"20243:6:13","nodeType":"YulIdentifier","src":"20243:6:13"},"nativeSrc":"20243:58:13","nodeType":"YulFunctionCall","src":"20243:58:13"},"nativeSrc":"20243:58:13","nodeType":"YulExpressionStatement","src":"20243:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"20322:6:13","nodeType":"YulIdentifier","src":"20322:6:13"},{"kind":"number","nativeSrc":"20330:2:13","nodeType":"YulLiteral","src":"20330:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20318:3:13","nodeType":"YulIdentifier","src":"20318:3:13"},"nativeSrc":"20318:15:13","nodeType":"YulFunctionCall","src":"20318:15:13"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nativeSrc":"20335:20:13","nodeType":"YulLiteral","src":"20335:20:13","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nativeSrc":"20311:6:13","nodeType":"YulIdentifier","src":"20311:6:13"},"nativeSrc":"20311:45:13","nodeType":"YulFunctionCall","src":"20311:45:13"},"nativeSrc":"20311:45:13","nodeType":"YulExpressionStatement","src":"20311:45:13"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"20126:237:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"20224:6:13","nodeType":"YulTypedName","src":"20224:6:13","type":""}],"src":"20126:237:13"},{"body":{"nativeSrc":"20515:220:13","nodeType":"YulBlock","src":"20515:220:13","statements":[{"nativeSrc":"20525:74:13","nodeType":"YulAssignment","src":"20525:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"20591:3:13","nodeType":"YulIdentifier","src":"20591:3:13"},{"kind":"number","nativeSrc":"20596:2:13","nodeType":"YulLiteral","src":"20596:2:13","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"20532:58:13","nodeType":"YulIdentifier","src":"20532:58:13"},"nativeSrc":"20532:67:13","nodeType":"YulFunctionCall","src":"20532:67:13"},"variableNames":[{"name":"pos","nativeSrc":"20525:3:13","nodeType":"YulIdentifier","src":"20525:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"20697:3:13","nodeType":"YulIdentifier","src":"20697:3:13"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"20608:88:13","nodeType":"YulIdentifier","src":"20608:88:13"},"nativeSrc":"20608:93:13","nodeType":"YulFunctionCall","src":"20608:93:13"},"nativeSrc":"20608:93:13","nodeType":"YulExpressionStatement","src":"20608:93:13"},{"nativeSrc":"20710:19:13","nodeType":"YulAssignment","src":"20710:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"20721:3:13","nodeType":"YulIdentifier","src":"20721:3:13"},{"kind":"number","nativeSrc":"20726:2:13","nodeType":"YulLiteral","src":"20726:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20717:3:13","nodeType":"YulIdentifier","src":"20717:3:13"},"nativeSrc":"20717:12:13","nodeType":"YulFunctionCall","src":"20717:12:13"},"variableNames":[{"name":"end","nativeSrc":"20710:3:13","nodeType":"YulIdentifier","src":"20710:3:13"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"20369:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20503:3:13","nodeType":"YulTypedName","src":"20503:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20511:3:13","nodeType":"YulTypedName","src":"20511:3:13","type":""}],"src":"20369:366:13"},{"body":{"nativeSrc":"20912:248:13","nodeType":"YulBlock","src":"20912:248:13","statements":[{"nativeSrc":"20922:26:13","nodeType":"YulAssignment","src":"20922:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"20934:9:13","nodeType":"YulIdentifier","src":"20934:9:13"},{"kind":"number","nativeSrc":"20945:2:13","nodeType":"YulLiteral","src":"20945:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20930:3:13","nodeType":"YulIdentifier","src":"20930:3:13"},"nativeSrc":"20930:18:13","nodeType":"YulFunctionCall","src":"20930:18:13"},"variableNames":[{"name":"tail","nativeSrc":"20922:4:13","nodeType":"YulIdentifier","src":"20922:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20969:9:13","nodeType":"YulIdentifier","src":"20969:9:13"},{"kind":"number","nativeSrc":"20980:1:13","nodeType":"YulLiteral","src":"20980:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20965:3:13","nodeType":"YulIdentifier","src":"20965:3:13"},"nativeSrc":"20965:17:13","nodeType":"YulFunctionCall","src":"20965:17:13"},{"arguments":[{"name":"tail","nativeSrc":"20988:4:13","nodeType":"YulIdentifier","src":"20988:4:13"},{"name":"headStart","nativeSrc":"20994:9:13","nodeType":"YulIdentifier","src":"20994:9:13"}],"functionName":{"name":"sub","nativeSrc":"20984:3:13","nodeType":"YulIdentifier","src":"20984:3:13"},"nativeSrc":"20984:20:13","nodeType":"YulFunctionCall","src":"20984:20:13"}],"functionName":{"name":"mstore","nativeSrc":"20958:6:13","nodeType":"YulIdentifier","src":"20958:6:13"},"nativeSrc":"20958:47:13","nodeType":"YulFunctionCall","src":"20958:47:13"},"nativeSrc":"20958:47:13","nodeType":"YulExpressionStatement","src":"20958:47:13"},{"nativeSrc":"21014:139:13","nodeType":"YulAssignment","src":"21014:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"21148:4:13","nodeType":"YulIdentifier","src":"21148:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"21022:124:13","nodeType":"YulIdentifier","src":"21022:124:13"},"nativeSrc":"21022:131:13","nodeType":"YulFunctionCall","src":"21022:131:13"},"variableNames":[{"name":"tail","nativeSrc":"21014:4:13","nodeType":"YulIdentifier","src":"21014:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20741:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20892:9:13","nodeType":"YulTypedName","src":"20892:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20907:4:13","nodeType":"YulTypedName","src":"20907:4:13","type":""}],"src":"20741:419:13"},{"body":{"nativeSrc":"21194:152:13","nodeType":"YulBlock","src":"21194:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21211:1:13","nodeType":"YulLiteral","src":"21211:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"21214:77:13","nodeType":"YulLiteral","src":"21214:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"21204:6:13","nodeType":"YulIdentifier","src":"21204:6:13"},"nativeSrc":"21204:88:13","nodeType":"YulFunctionCall","src":"21204:88:13"},"nativeSrc":"21204:88:13","nodeType":"YulExpressionStatement","src":"21204:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"21308:1:13","nodeType":"YulLiteral","src":"21308:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"21311:4:13","nodeType":"YulLiteral","src":"21311:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"21301:6:13","nodeType":"YulIdentifier","src":"21301:6:13"},"nativeSrc":"21301:15:13","nodeType":"YulFunctionCall","src":"21301:15:13"},"nativeSrc":"21301:15:13","nodeType":"YulExpressionStatement","src":"21301:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"21332:1:13","nodeType":"YulLiteral","src":"21332:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"21335:4:13","nodeType":"YulLiteral","src":"21335:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"21325:6:13","nodeType":"YulIdentifier","src":"21325:6:13"},"nativeSrc":"21325:15:13","nodeType":"YulFunctionCall","src":"21325:15:13"},"nativeSrc":"21325:15:13","nodeType":"YulExpressionStatement","src":"21325:15:13"}]},"name":"panic_error_0x12","nativeSrc":"21166:180:13","nodeType":"YulFunctionDefinition","src":"21166:180:13"},{"body":{"nativeSrc":"21410:40:13","nodeType":"YulBlock","src":"21410:40:13","statements":[{"nativeSrc":"21421:22:13","nodeType":"YulAssignment","src":"21421:22:13","value":{"arguments":[{"name":"value","nativeSrc":"21437:5:13","nodeType":"YulIdentifier","src":"21437:5:13"}],"functionName":{"name":"mload","nativeSrc":"21431:5:13","nodeType":"YulIdentifier","src":"21431:5:13"},"nativeSrc":"21431:12:13","nodeType":"YulFunctionCall","src":"21431:12:13"},"variableNames":[{"name":"length","nativeSrc":"21421:6:13","nodeType":"YulIdentifier","src":"21421:6:13"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"21352:98:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21393:5:13","nodeType":"YulTypedName","src":"21393:5:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"21403:6:13","nodeType":"YulTypedName","src":"21403:6:13","type":""}],"src":"21352:98:13"},{"body":{"nativeSrc":"21551:73:13","nodeType":"YulBlock","src":"21551:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"21568:3:13","nodeType":"YulIdentifier","src":"21568:3:13"},{"name":"length","nativeSrc":"21573:6:13","nodeType":"YulIdentifier","src":"21573:6:13"}],"functionName":{"name":"mstore","nativeSrc":"21561:6:13","nodeType":"YulIdentifier","src":"21561:6:13"},"nativeSrc":"21561:19:13","nodeType":"YulFunctionCall","src":"21561:19:13"},"nativeSrc":"21561:19:13","nodeType":"YulExpressionStatement","src":"21561:19:13"},{"nativeSrc":"21589:29:13","nodeType":"YulAssignment","src":"21589:29:13","value":{"arguments":[{"name":"pos","nativeSrc":"21608:3:13","nodeType":"YulIdentifier","src":"21608:3:13"},{"kind":"number","nativeSrc":"21613:4:13","nodeType":"YulLiteral","src":"21613:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21604:3:13","nodeType":"YulIdentifier","src":"21604:3:13"},"nativeSrc":"21604:14:13","nodeType":"YulFunctionCall","src":"21604:14:13"},"variableNames":[{"name":"updated_pos","nativeSrc":"21589:11:13","nodeType":"YulIdentifier","src":"21589:11:13"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"21456:168:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21523:3:13","nodeType":"YulTypedName","src":"21523:3:13","type":""},{"name":"length","nativeSrc":"21528:6:13","nodeType":"YulTypedName","src":"21528:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"21539:11:13","nodeType":"YulTypedName","src":"21539:11:13","type":""}],"src":"21456:168:13"},{"body":{"nativeSrc":"21720:283:13","nodeType":"YulBlock","src":"21720:283:13","statements":[{"nativeSrc":"21730:52:13","nodeType":"YulVariableDeclaration","src":"21730:52:13","value":{"arguments":[{"name":"value","nativeSrc":"21776:5:13","nodeType":"YulIdentifier","src":"21776:5:13"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"21744:31:13","nodeType":"YulIdentifier","src":"21744:31:13"},"nativeSrc":"21744:38:13","nodeType":"YulFunctionCall","src":"21744:38:13"},"variables":[{"name":"length","nativeSrc":"21734:6:13","nodeType":"YulTypedName","src":"21734:6:13","type":""}]},{"nativeSrc":"21791:77:13","nodeType":"YulAssignment","src":"21791:77:13","value":{"arguments":[{"name":"pos","nativeSrc":"21856:3:13","nodeType":"YulIdentifier","src":"21856:3:13"},{"name":"length","nativeSrc":"21861:6:13","nodeType":"YulIdentifier","src":"21861:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"21798:57:13","nodeType":"YulIdentifier","src":"21798:57:13"},"nativeSrc":"21798:70:13","nodeType":"YulFunctionCall","src":"21798:70:13"},"variableNames":[{"name":"pos","nativeSrc":"21791:3:13","nodeType":"YulIdentifier","src":"21791:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21916:5:13","nodeType":"YulIdentifier","src":"21916:5:13"},{"kind":"number","nativeSrc":"21923:4:13","nodeType":"YulLiteral","src":"21923:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21912:3:13","nodeType":"YulIdentifier","src":"21912:3:13"},"nativeSrc":"21912:16:13","nodeType":"YulFunctionCall","src":"21912:16:13"},{"name":"pos","nativeSrc":"21930:3:13","nodeType":"YulIdentifier","src":"21930:3:13"},{"name":"length","nativeSrc":"21935:6:13","nodeType":"YulIdentifier","src":"21935:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21877:34:13","nodeType":"YulIdentifier","src":"21877:34:13"},"nativeSrc":"21877:65:13","nodeType":"YulFunctionCall","src":"21877:65:13"},"nativeSrc":"21877:65:13","nodeType":"YulExpressionStatement","src":"21877:65:13"},{"nativeSrc":"21951:46:13","nodeType":"YulAssignment","src":"21951:46:13","value":{"arguments":[{"name":"pos","nativeSrc":"21962:3:13","nodeType":"YulIdentifier","src":"21962:3:13"},{"arguments":[{"name":"length","nativeSrc":"21989:6:13","nodeType":"YulIdentifier","src":"21989:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"21967:21:13","nodeType":"YulIdentifier","src":"21967:21:13"},"nativeSrc":"21967:29:13","nodeType":"YulFunctionCall","src":"21967:29:13"}],"functionName":{"name":"add","nativeSrc":"21958:3:13","nodeType":"YulIdentifier","src":"21958:3:13"},"nativeSrc":"21958:39:13","nodeType":"YulFunctionCall","src":"21958:39:13"},"variableNames":[{"name":"end","nativeSrc":"21951:3:13","nodeType":"YulIdentifier","src":"21951:3:13"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"21630:373:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21701:5:13","nodeType":"YulTypedName","src":"21701:5:13","type":""},{"name":"pos","nativeSrc":"21708:3:13","nodeType":"YulTypedName","src":"21708:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21716:3:13","nodeType":"YulTypedName","src":"21716:3:13","type":""}],"src":"21630:373:13"},{"body":{"nativeSrc":"22209:440:13","nodeType":"YulBlock","src":"22209:440:13","statements":[{"nativeSrc":"22219:27:13","nodeType":"YulAssignment","src":"22219:27:13","value":{"arguments":[{"name":"headStart","nativeSrc":"22231:9:13","nodeType":"YulIdentifier","src":"22231:9:13"},{"kind":"number","nativeSrc":"22242:3:13","nodeType":"YulLiteral","src":"22242:3:13","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22227:3:13","nodeType":"YulIdentifier","src":"22227:3:13"},"nativeSrc":"22227:19:13","nodeType":"YulFunctionCall","src":"22227:19:13"},"variableNames":[{"name":"tail","nativeSrc":"22219:4:13","nodeType":"YulIdentifier","src":"22219:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"22300:6:13","nodeType":"YulIdentifier","src":"22300:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"22313:9:13","nodeType":"YulIdentifier","src":"22313:9:13"},{"kind":"number","nativeSrc":"22324:1:13","nodeType":"YulLiteral","src":"22324:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22309:3:13","nodeType":"YulIdentifier","src":"22309:3:13"},"nativeSrc":"22309:17:13","nodeType":"YulFunctionCall","src":"22309:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22256:43:13","nodeType":"YulIdentifier","src":"22256:43:13"},"nativeSrc":"22256:71:13","nodeType":"YulFunctionCall","src":"22256:71:13"},"nativeSrc":"22256:71:13","nodeType":"YulExpressionStatement","src":"22256:71:13"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"22381:6:13","nodeType":"YulIdentifier","src":"22381:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"22394:9:13","nodeType":"YulIdentifier","src":"22394:9:13"},{"kind":"number","nativeSrc":"22405:2:13","nodeType":"YulLiteral","src":"22405:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22390:3:13","nodeType":"YulIdentifier","src":"22390:3:13"},"nativeSrc":"22390:18:13","nodeType":"YulFunctionCall","src":"22390:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22337:43:13","nodeType":"YulIdentifier","src":"22337:43:13"},"nativeSrc":"22337:72:13","nodeType":"YulFunctionCall","src":"22337:72:13"},"nativeSrc":"22337:72:13","nodeType":"YulExpressionStatement","src":"22337:72:13"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"22463:6:13","nodeType":"YulIdentifier","src":"22463:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"22476:9:13","nodeType":"YulIdentifier","src":"22476:9:13"},{"kind":"number","nativeSrc":"22487:2:13","nodeType":"YulLiteral","src":"22487:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22472:3:13","nodeType":"YulIdentifier","src":"22472:3:13"},"nativeSrc":"22472:18:13","nodeType":"YulFunctionCall","src":"22472:18:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"22419:43:13","nodeType":"YulIdentifier","src":"22419:43:13"},"nativeSrc":"22419:72:13","nodeType":"YulFunctionCall","src":"22419:72:13"},"nativeSrc":"22419:72:13","nodeType":"YulExpressionStatement","src":"22419:72:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22512:9:13","nodeType":"YulIdentifier","src":"22512:9:13"},{"kind":"number","nativeSrc":"22523:2:13","nodeType":"YulLiteral","src":"22523:2:13","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22508:3:13","nodeType":"YulIdentifier","src":"22508:3:13"},"nativeSrc":"22508:18:13","nodeType":"YulFunctionCall","src":"22508:18:13"},{"arguments":[{"name":"tail","nativeSrc":"22532:4:13","nodeType":"YulIdentifier","src":"22532:4:13"},{"name":"headStart","nativeSrc":"22538:9:13","nodeType":"YulIdentifier","src":"22538:9:13"}],"functionName":{"name":"sub","nativeSrc":"22528:3:13","nodeType":"YulIdentifier","src":"22528:3:13"},"nativeSrc":"22528:20:13","nodeType":"YulFunctionCall","src":"22528:20:13"}],"functionName":{"name":"mstore","nativeSrc":"22501:6:13","nodeType":"YulIdentifier","src":"22501:6:13"},"nativeSrc":"22501:48:13","nodeType":"YulFunctionCall","src":"22501:48:13"},"nativeSrc":"22501:48:13","nodeType":"YulExpressionStatement","src":"22501:48:13"},{"nativeSrc":"22558:84:13","nodeType":"YulAssignment","src":"22558:84:13","value":{"arguments":[{"name":"value3","nativeSrc":"22628:6:13","nodeType":"YulIdentifier","src":"22628:6:13"},{"name":"tail","nativeSrc":"22637:4:13","nodeType":"YulIdentifier","src":"22637:4:13"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"22566:61:13","nodeType":"YulIdentifier","src":"22566:61:13"},"nativeSrc":"22566:76:13","nodeType":"YulFunctionCall","src":"22566:76:13"},"variableNames":[{"name":"tail","nativeSrc":"22558:4:13","nodeType":"YulIdentifier","src":"22558:4:13"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"22009:640:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22157:9:13","nodeType":"YulTypedName","src":"22157:9:13","type":""},{"name":"value3","nativeSrc":"22169:6:13","nodeType":"YulTypedName","src":"22169:6:13","type":""},{"name":"value2","nativeSrc":"22177:6:13","nodeType":"YulTypedName","src":"22177:6:13","type":""},{"name":"value1","nativeSrc":"22185:6:13","nodeType":"YulTypedName","src":"22185:6:13","type":""},{"name":"value0","nativeSrc":"22193:6:13","nodeType":"YulTypedName","src":"22193:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22204:4:13","nodeType":"YulTypedName","src":"22204:4:13","type":""}],"src":"22009:640:13"},{"body":{"nativeSrc":"22717:79:13","nodeType":"YulBlock","src":"22717:79:13","statements":[{"nativeSrc":"22727:22:13","nodeType":"YulAssignment","src":"22727:22:13","value":{"arguments":[{"name":"offset","nativeSrc":"22742:6:13","nodeType":"YulIdentifier","src":"22742:6:13"}],"functionName":{"name":"mload","nativeSrc":"22736:5:13","nodeType":"YulIdentifier","src":"22736:5:13"},"nativeSrc":"22736:13:13","nodeType":"YulFunctionCall","src":"22736:13:13"},"variableNames":[{"name":"value","nativeSrc":"22727:5:13","nodeType":"YulIdentifier","src":"22727:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"22784:5:13","nodeType":"YulIdentifier","src":"22784:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"22758:25:13","nodeType":"YulIdentifier","src":"22758:25:13"},"nativeSrc":"22758:32:13","nodeType":"YulFunctionCall","src":"22758:32:13"},"nativeSrc":"22758:32:13","nodeType":"YulExpressionStatement","src":"22758:32:13"}]},"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"22655:141:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"22695:6:13","nodeType":"YulTypedName","src":"22695:6:13","type":""},{"name":"end","nativeSrc":"22703:3:13","nodeType":"YulTypedName","src":"22703:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"22711:5:13","nodeType":"YulTypedName","src":"22711:5:13","type":""}],"src":"22655:141:13"},{"body":{"nativeSrc":"22878:273:13","nodeType":"YulBlock","src":"22878:273:13","statements":[{"body":{"nativeSrc":"22924:83:13","nodeType":"YulBlock","src":"22924:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"22926:77:13","nodeType":"YulIdentifier","src":"22926:77:13"},"nativeSrc":"22926:79:13","nodeType":"YulFunctionCall","src":"22926:79:13"},"nativeSrc":"22926:79:13","nodeType":"YulExpressionStatement","src":"22926:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"22899:7:13","nodeType":"YulIdentifier","src":"22899:7:13"},{"name":"headStart","nativeSrc":"22908:9:13","nodeType":"YulIdentifier","src":"22908:9:13"}],"functionName":{"name":"sub","nativeSrc":"22895:3:13","nodeType":"YulIdentifier","src":"22895:3:13"},"nativeSrc":"22895:23:13","nodeType":"YulFunctionCall","src":"22895:23:13"},{"kind":"number","nativeSrc":"22920:2:13","nodeType":"YulLiteral","src":"22920:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"22891:3:13","nodeType":"YulIdentifier","src":"22891:3:13"},"nativeSrc":"22891:32:13","nodeType":"YulFunctionCall","src":"22891:32:13"},"nativeSrc":"22888:119:13","nodeType":"YulIf","src":"22888:119:13"},{"nativeSrc":"23017:127:13","nodeType":"YulBlock","src":"23017:127:13","statements":[{"nativeSrc":"23032:15:13","nodeType":"YulVariableDeclaration","src":"23032:15:13","value":{"kind":"number","nativeSrc":"23046:1:13","nodeType":"YulLiteral","src":"23046:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"23036:6:13","nodeType":"YulTypedName","src":"23036:6:13","type":""}]},{"nativeSrc":"23061:73:13","nodeType":"YulAssignment","src":"23061:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23106:9:13","nodeType":"YulIdentifier","src":"23106:9:13"},{"name":"offset","nativeSrc":"23117:6:13","nodeType":"YulIdentifier","src":"23117:6:13"}],"functionName":{"name":"add","nativeSrc":"23102:3:13","nodeType":"YulIdentifier","src":"23102:3:13"},"nativeSrc":"23102:22:13","nodeType":"YulFunctionCall","src":"23102:22:13"},{"name":"dataEnd","nativeSrc":"23126:7:13","nodeType":"YulIdentifier","src":"23126:7:13"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"23071:30:13","nodeType":"YulIdentifier","src":"23071:30:13"},"nativeSrc":"23071:63:13","nodeType":"YulFunctionCall","src":"23071:63:13"},"variableNames":[{"name":"value0","nativeSrc":"23061:6:13","nodeType":"YulIdentifier","src":"23061:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"22802:349:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22848:9:13","nodeType":"YulTypedName","src":"22848:9:13","type":""},{"name":"dataEnd","nativeSrc":"22859:7:13","nodeType":"YulTypedName","src":"22859:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"22871:6:13","nodeType":"YulTypedName","src":"22871:6:13","type":""}],"src":"22802:349:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e991906114f4565b6102bc565b6040516100fb919061153c565b60405180910390f35b61010c61039e565b60405161011991906115e7565b60405180910390f35b61013c6004803603810190610137919061163f565b610430565b60405161014991906116ad565b60405180910390f35b61016c600480360381019061016791906116f4565b610476565b005b61018860048036038101906101839190611734565b61058d565b005b6101a4600480360381019061019f9190611734565b6105ed565b005b6101c060048036038101906101bb919061163f565b61060d565b6040516101cd91906116ad565b60405180910390f35b6101f060048036038101906101eb9190611787565b610693565b6040516101fd91906117c3565b60405180910390f35b61020e61074a565b60405161021b91906115e7565b60405180910390f35b61023e6004803603810190610239919061180a565b6107dc565b005b61025a6004803603810190610255919061197f565b6107f2565b005b6102766004803603810190610271919061163f565b610854565b60405161028391906115e7565b60405180910390f35b6102a660048036038101906102a19190611a02565b6108bc565b6040516102b3919061153c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611a71565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611a71565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611b14565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611ba6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611c38565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611ca4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611d36565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611a71565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611a71565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611c38565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611d92565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611ca4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611eba565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611e28565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f8383836001611185565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690611f26565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061153c565b60405180910390a3505050565b611008848484610b5b565b6110148484848461118b565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90611fb8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611312565b01905060008167ffffffffffffffff81111561109e5761109d611854565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112757611126611fd8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006111ac8473ffffffffffffffffffffffffffffffffffffffff16611465565b15611305578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111d5610a05565b8786866040518563ffffffff1660e01b81526004016111f7949392919061205c565b6020604051808303816000875af192505050801561123357506040513d601f19601f8201168201806040525081019061123091906120bd565b60015b6112b5573d8060008114611263576040519150601f19603f3d011682016040523d82523d6000602084013e611268565b606091505b5060008151036112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490611fb8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061130a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611370577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161136657611365611fd8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113ad576d04ee2d6d415b85acef810000000083816113a3576113a2611fd8565b5b0492506020810190505b662386f26fc1000083106113dc57662386f26fc1000083816113d2576113d1611fd8565b5b0492506010810190505b6305f5e1008310611405576305f5e10083816113fb576113fa611fd8565b5b0492506008810190505b612710831061142a5761271083816114205761141f611fd8565b5b0492506004810190505b6064831061144d576064838161144357611442611fd8565b5b0492506002810190505b600a831061145c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d18161149c565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b60006020828403121561150a57611509611492565b5b6000611518848285016114df565b91505092915050565b60008115159050919050565b61153681611521565b82525050565b6000602082019050611551600083018461152d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611591578082015181840152602081019050611576565b60008484015250505050565b6000601f19601f8301169050919050565b60006115b982611557565b6115c38185611562565b93506115d3818560208601611573565b6115dc8161159d565b840191505092915050565b6000602082019050818103600083015261160181846115ae565b905092915050565b6000819050919050565b61161c81611609565b811461162757600080fd5b50565b60008135905061163981611613565b92915050565b60006020828403121561165557611654611492565b5b60006116638482850161162a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b82525050565b60006020820190506116c2600083018461169e565b92915050565b6116d18161168c565b81146116dc57600080fd5b50565b6000813590506116ee816116c8565b92915050565b6000806040838503121561170b5761170a611492565b5b6000611719858286016116df565b925050602061172a8582860161162a565b9150509250929050565b60008060006060848603121561174d5761174c611492565b5b600061175b868287016116df565b935050602061176c868287016116df565b925050604061177d8682870161162a565b9150509250925092565b60006020828403121561179d5761179c611492565b5b60006117ab848285016116df565b91505092915050565b6117bd81611609565b82525050565b60006020820190506117d860008301846117b4565b92915050565b6117e781611521565b81146117f257600080fd5b50565b600081359050611804816117de565b92915050565b6000806040838503121561182157611820611492565b5b600061182f858286016116df565b9250506020611840858286016117f5565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61188c8261159d565b810181811067ffffffffffffffff821117156118ab576118aa611854565b5b80604052505050565b60006118be611488565b90506118ca8282611883565b919050565b600067ffffffffffffffff8211156118ea576118e9611854565b5b6118f38261159d565b9050602081019050919050565b82818337600083830152505050565b600061192261191d846118cf565b6118b4565b90508281526020810184848401111561193e5761193d61184f565b5b611949848285611900565b509392505050565b600082601f8301126119665761196561184a565b5b813561197684826020860161190f565b91505092915050565b6000806000806080858703121561199957611998611492565b5b60006119a7878288016116df565b94505060206119b8878288016116df565b93505060406119c98782880161162a565b925050606085013567ffffffffffffffff8111156119ea576119e9611497565b5b6119f687828801611951565b91505092959194509250565b60008060408385031215611a1957611a18611492565b5b6000611a27858286016116df565b9250506020611a38858286016116df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a8957607f821691505b602082108103611a9c57611a9b611a42565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611afe602183611562565b9150611b0982611aa2565b604082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611b90603d83611562565b9150611b9b82611b34565b604082019050919050565b60006020820190508181036000830152611bbf81611b83565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611c22602d83611562565b9150611c2d82611bc6565b604082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611c8e601883611562565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611d20602983611562565b9150611d2b82611cc4565b604082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b600081905092915050565b6000611d6c82611557565b611d768185611d56565b9350611d86818560208601611573565b80840191505092915050565b6000611d9e8285611d61565b9150611daa8284611d61565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611e12602583611562565b9150611e1d82611db6565b604082019050919050565b60006020820190508181036000830152611e4181611e05565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611ea4602483611562565b9150611eaf82611e48565b604082019050919050565b60006020820190508181036000830152611ed381611e97565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f10601983611562565b9150611f1b82611eda565b602082019050919050565b60006020820190508181036000830152611f3f81611f03565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fa2603283611562565b9150611fad82611f46565b604082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061202e82612007565b6120388185612012565b9350612048818560208601611573565b6120518161159d565b840191505092915050565b6000608082019050612071600083018761169e565b61207e602083018661169e565b61208b60408301856117b4565b818103606083015261209d8184612023565b905095945050505050565b6000815190506120b7816114c8565b92915050565b6000602082840312156120d3576120d2611492565b5b60006120e1848285016120a8565b9150509291505056fea2646970667358221220603c65e4f474c18fa0972eb056314251faca87c6dcd4068871c10c1be48f0bd564736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x180A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1D36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1185 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1312 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11AC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1465 JUMP JUMPDEST ISZERO PUSH2 0x1305 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11D5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1230 SWAP2 SWAP1 PUSH2 0x20BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12B5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x130A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1370 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1366 JUMPI PUSH2 0x1365 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13AD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13DC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13D2 JUMPI PUSH2 0x13D1 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1405 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x13FB JUMPI PUSH2 0x13FA PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x142A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1420 JUMPI PUSH2 0x141F PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x144D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1443 JUMPI PUSH2 0x1442 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x145C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14D1 DUP2 PUSH2 0x149C JUMP JUMPDEST DUP2 EQ PUSH2 0x14DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14EE DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x150A JUMPI PUSH2 0x1509 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1518 DUP5 DUP3 DUP6 ADD PUSH2 0x14DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1536 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1551 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x152D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1576 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B9 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x15C3 DUP2 DUP6 PUSH2 0x1562 JUMP JUMPDEST SWAP4 POP PUSH2 0x15D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x15DC DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1601 DUP2 DUP5 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x161C DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP2 EQ PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1639 DUP2 PUSH2 0x1613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI PUSH2 0x1654 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1663 DUP5 DUP3 DUP6 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1697 DUP3 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16A7 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D1 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP2 EQ PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16EE DUP2 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x170B JUMPI PUSH2 0x170A PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1719 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x172A DUP6 DUP3 DUP7 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174D JUMPI PUSH2 0x174C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x176C DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x177D DUP7 DUP3 DUP8 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17BD DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1804 DUP2 PUSH2 0x17DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1821 JUMPI PUSH2 0x1820 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x182F DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1840 DUP6 DUP3 DUP7 ADD PUSH2 0x17F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x188C DUP3 PUSH2 0x159D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x1854 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BE PUSH2 0x1488 JUMP JUMPDEST SWAP1 POP PUSH2 0x18CA DUP3 DUP3 PUSH2 0x1883 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EA JUMPI PUSH2 0x18E9 PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH2 0x18F3 DUP3 PUSH2 0x159D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH2 0x191D DUP5 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x193E JUMPI PUSH2 0x193D PUSH2 0x184F JUMP JUMPDEST JUMPDEST PUSH2 0x1949 DUP5 DUP3 DUP6 PUSH2 0x1900 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1966 JUMPI PUSH2 0x1965 PUSH2 0x184A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1976 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x190F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1999 JUMPI PUSH2 0x1998 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B8 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19C9 DUP8 DUP3 DUP9 ADD PUSH2 0x162A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST PUSH2 0x19F6 DUP8 DUP3 DUP9 ADD PUSH2 0x1951 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A18 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A27 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A38 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1A89 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A9C JUMPI PUSH2 0x1A9B PUSH2 0x1A42 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x21 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x1AA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B2D DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B90 PUSH1 0x3D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B9B DUP3 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BBF DUP2 PUSH2 0x1B83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C22 PUSH1 0x2D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C2D DUP3 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C51 DUP2 PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8E PUSH1 0x18 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C99 DUP3 PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CBD DUP2 PUSH2 0x1C81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH1 0x29 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2B DUP3 PUSH2 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D4F DUP2 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6C DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x1D76 DUP2 DUP6 PUSH2 0x1D56 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D86 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9E DUP3 DUP6 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DAA DUP3 DUP5 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E12 PUSH1 0x25 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1D DUP3 PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x1E05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH1 0x24 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAF DUP3 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED3 DUP2 PUSH2 0x1E97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F10 PUSH1 0x19 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F1B DUP3 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3F DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FA2 PUSH1 0x32 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAD DUP3 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FD1 DUP2 PUSH2 0x1F95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202E DUP3 PUSH2 0x2007 JUMP JUMPDEST PUSH2 0x2038 DUP2 DUP6 PUSH2 0x2012 JUMP JUMPDEST SWAP4 POP PUSH2 0x2048 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x2051 DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x209D DUP2 DUP5 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20B7 DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D3 JUMPI PUSH2 0x20D2 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20E1 DUP5 DUP3 DUP6 ADD PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x3C PUSH6 0xE4F474C18FA0 SWAP8 0x2E 0xB0 JUMP BALANCE TIMESTAMP MLOAD STATICCALL 0xCA DUP8 0xC6 0xDC 0xD4 MOD DUP9 PUSH18 0xC10C1BE48F0BD564736F6C634300081B0033 ","sourceMap":"628:16679:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:8:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:7:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:1:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:154::-;;;;;:::o;16558:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:10:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:5:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:248::-;1880:1;1890:113;1904:6;1901:1;1898:13;1890:113;;;1989:1;1984:3;1980:11;1974:18;1970:1;1965:3;1961:11;1954:39;1926:2;1923:1;1919:10;1914:15;;1890:113;;;2037:1;2028:6;2023:3;2019:16;2012:27;1860:186;1798:248;;;:::o;2052:102::-;2093:6;2144:2;2140:7;2135:2;2128:5;2124:14;2120:28;2110:38;;2052:102;;;:::o;2160:377::-;2248:3;2276:39;2309:5;2276:39;:::i;:::-;2331:71;2395:6;2390:3;2331:71;:::i;:::-;2324:78;;2411:65;2469:6;2464:3;2457:4;2450:5;2446:16;2411:65;:::i;:::-;2501:29;2523:6;2501:29;:::i;:::-;2496:3;2492:39;2485:46;;2252:285;2160:377;;;;:::o;2543:313::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2743:9;2737:4;2733:20;2729:1;2718:9;2714:17;2707:47;2771:78;2844:4;2835:6;2771:78;:::i;:::-;2763:86;;2543:313;;;;:::o;2862:77::-;2899:7;2928:5;2917:16;;2862:77;;;:::o;2945:122::-;3018:24;3036:5;3018:24;:::i;:::-;3011:5;3008:35;2998:63;;3057:1;3054;3047:12;2998:63;2945:122;:::o;3073:139::-;3119:5;3157:6;3144:20;3135:29;;3173:33;3200:5;3173:33;:::i;:::-;3073:139;;;;:::o;3218:329::-;3277:6;3326:2;3314:9;3305:7;3301:23;3297:32;3294:119;;;3332:79;;:::i;:::-;3294:119;3452:1;3477:53;3522:7;3513:6;3502:9;3498:22;3477:53;:::i;:::-;3467:63;;3423:117;3218:329;;;;:::o;3553:126::-;3590:7;3630:42;3623:5;3619:54;3608:65;;3553:126;;;:::o;3685:96::-;3722:7;3751:24;3769:5;3751:24;:::i;:::-;3740:35;;3685:96;;;:::o;3787:118::-;3874:24;3892:5;3874:24;:::i;:::-;3869:3;3862:37;3787:118;;:::o;3911:222::-;4004:4;4042:2;4031:9;4027:18;4019:26;;4055:71;4123:1;4112:9;4108:17;4099:6;4055:71;:::i;:::-;3911:222;;;;:::o;4139:122::-;4212:24;4230:5;4212:24;:::i;:::-;4205:5;4202:35;4192:63;;4251:1;4248;4241:12;4192:63;4139:122;:::o;4267:139::-;4313:5;4351:6;4338:20;4329:29;;4367:33;4394:5;4367:33;:::i;:::-;4267:139;;;;:::o;4412:474::-;4480:6;4488;4537:2;4525:9;4516:7;4512:23;4508:32;4505:119;;;4543:79;;:::i;:::-;4505:119;4663:1;4688:53;4733:7;4724:6;4713:9;4709:22;4688:53;:::i;:::-;4678:63;;4634:117;4790:2;4816:53;4861:7;4852:6;4841:9;4837:22;4816:53;:::i;:::-;4806:63;;4761:118;4412:474;;;;;:::o;4892:619::-;4969:6;4977;4985;5034:2;5022:9;5013:7;5009:23;5005:32;5002:119;;;5040:79;;:::i;:::-;5002:119;5160:1;5185:53;5230:7;5221:6;5210:9;5206:22;5185:53;:::i;:::-;5175:63;;5131:117;5287:2;5313:53;5358:7;5349:6;5338:9;5334:22;5313:53;:::i;:::-;5303:63;;5258:118;5415:2;5441:53;5486:7;5477:6;5466:9;5462:22;5441:53;:::i;:::-;5431:63;;5386:118;4892:619;;;;;:::o;5517:329::-;5576:6;5625:2;5613:9;5604:7;5600:23;5596:32;5593:119;;;5631:79;;:::i;:::-;5593:119;5751:1;5776:53;5821:7;5812:6;5801:9;5797:22;5776:53;:::i;:::-;5766:63;;5722:117;5517:329;;;;:::o;5852:118::-;5939:24;5957:5;5939:24;:::i;:::-;5934:3;5927:37;5852:118;;:::o;5976:222::-;6069:4;6107:2;6096:9;6092:18;6084:26;;6120:71;6188:1;6177:9;6173:17;6164:6;6120:71;:::i;:::-;5976:222;;;;:::o;6204:116::-;6274:21;6289:5;6274:21;:::i;:::-;6267:5;6264:32;6254:60;;6310:1;6307;6300:12;6254:60;6204:116;:::o;6326:133::-;6369:5;6407:6;6394:20;6385:29;;6423:30;6447:5;6423:30;:::i;:::-;6326:133;;;;:::o;6465:468::-;6530:6;6538;6587:2;6575:9;6566:7;6562:23;6558:32;6555:119;;;6593:79;;:::i;:::-;6555:119;6713:1;6738:53;6783:7;6774:6;6763:9;6759:22;6738:53;:::i;:::-;6728:63;;6684:117;6840:2;6866:50;6908:7;6899:6;6888:9;6884:22;6866:50;:::i;:::-;6856:60;;6811:115;6465:468;;;;;:::o;6939:117::-;7048:1;7045;7038:12;7062:117;7171:1;7168;7161:12;7185:180;7233:77;7230:1;7223:88;7330:4;7327:1;7320:15;7354:4;7351:1;7344:15;7371:281;7454:27;7476:4;7454:27;:::i;:::-;7446:6;7442:40;7584:6;7572:10;7569:22;7548:18;7536:10;7533:34;7530:62;7527:88;;;7595:18;;:::i;:::-;7527:88;7635:10;7631:2;7624:22;7414:238;7371:281;;:::o;7658:129::-;7692:6;7719:20;;:::i;:::-;7709:30;;7748:33;7776:4;7768:6;7748:33;:::i;:::-;7658:129;;;:::o;7793:307::-;7854:4;7944:18;7936:6;7933:30;7930:56;;;7966:18;;:::i;:::-;7930:56;8004:29;8026:6;8004:29;:::i;:::-;7996:37;;8088:4;8082;8078:15;8070:23;;7793:307;;;:::o;8106:148::-;8204:6;8199:3;8194;8181:30;8245:1;8236:6;8231:3;8227:16;8220:27;8106:148;;;:::o;8260:423::-;8337:5;8362:65;8378:48;8419:6;8378:48;:::i;:::-;8362:65;:::i;:::-;8353:74;;8450:6;8443:5;8436:21;8488:4;8481:5;8477:16;8526:3;8517:6;8512:3;8508:16;8505:25;8502:112;;;8533:79;;:::i;:::-;8502:112;8623:54;8670:6;8665:3;8660;8623:54;:::i;:::-;8343:340;8260:423;;;;;:::o;8702:338::-;8757:5;8806:3;8799:4;8791:6;8787:17;8783:27;8773:122;;8814:79;;:::i;:::-;8773:122;8931:6;8918:20;8956:78;9030:3;9022:6;9015:4;9007:6;9003:17;8956:78;:::i;:::-;8947:87;;8763:277;8702:338;;;;:::o;9046:943::-;9141:6;9149;9157;9165;9214:3;9202:9;9193:7;9189:23;9185:33;9182:120;;;9221:79;;:::i;:::-;9182:120;9341:1;9366:53;9411:7;9402:6;9391:9;9387:22;9366:53;:::i;:::-;9356:63;;9312:117;9468:2;9494:53;9539:7;9530:6;9519:9;9515:22;9494:53;:::i;:::-;9484:63;;9439:118;9596:2;9622:53;9667:7;9658:6;9647:9;9643:22;9622:53;:::i;:::-;9612:63;;9567:118;9752:2;9741:9;9737:18;9724:32;9783:18;9775:6;9772:30;9769:117;;;9805:79;;:::i;:::-;9769:117;9910:62;9964:7;9955:6;9944:9;9940:22;9910:62;:::i;:::-;9900:72;;9695:287;9046:943;;;;;;;:::o;9995:474::-;10063:6;10071;10120:2;10108:9;10099:7;10095:23;10091:32;10088:119;;;10126:79;;:::i;:::-;10088:119;10246:1;10271:53;10316:7;10307:6;10296:9;10292:22;10271:53;:::i;:::-;10261:63;;10217:117;10373:2;10399:53;10444:7;10435:6;10424:9;10420:22;10399:53;:::i;:::-;10389:63;;10344:118;9995:474;;;;;:::o;10475:180::-;10523:77;10520:1;10513:88;10620:4;10617:1;10610:15;10644:4;10641:1;10634:15;10661:320;10705:6;10742:1;10736:4;10732:12;10722:22;;10789:1;10783:4;10779:12;10810:18;10800:81;;10866:4;10858:6;10854:17;10844:27;;10800:81;10928:2;10920:6;10917:14;10897:18;10894:38;10891:84;;10947:18;;:::i;:::-;10891:84;10712:269;10661:320;;;:::o;10987:220::-;11127:34;11123:1;11115:6;11111:14;11104:58;11196:3;11191:2;11183:6;11179:15;11172:28;10987:220;:::o;11213:366::-;11355:3;11376:67;11440:2;11435:3;11376:67;:::i;:::-;11369:74;;11452:93;11541:3;11452:93;:::i;:::-;11570:2;11565:3;11561:12;11554:19;;11213:366;;;:::o;11585:419::-;11751:4;11789:2;11778:9;11774:18;11766:26;;11838:9;11832:4;11828:20;11824:1;11813:9;11809:17;11802:47;11866:131;11992:4;11866:131;:::i;:::-;11858:139;;11585:419;;;:::o;12010:248::-;12150:34;12146:1;12138:6;12134:14;12127:58;12219:31;12214:2;12206:6;12202:15;12195:56;12010:248;:::o;12264:366::-;12406:3;12427:67;12491:2;12486:3;12427:67;:::i;:::-;12420:74;;12503:93;12592:3;12503:93;:::i;:::-;12621:2;12616:3;12612:12;12605:19;;12264:366;;;:::o;12636:419::-;12802:4;12840:2;12829:9;12825:18;12817:26;;12889:9;12883:4;12879:20;12875:1;12864:9;12860:17;12853:47;12917:131;13043:4;12917:131;:::i;:::-;12909:139;;12636:419;;;:::o;13061:232::-;13201:34;13197:1;13189:6;13185:14;13178:58;13270:15;13265:2;13257:6;13253:15;13246:40;13061:232;:::o;13299:366::-;13441:3;13462:67;13526:2;13521:3;13462:67;:::i;:::-;13455:74;;13538:93;13627:3;13538:93;:::i;:::-;13656:2;13651:3;13647:12;13640:19;;13299:366;;;:::o;13671:419::-;13837:4;13875:2;13864:9;13860:18;13852:26;;13924:9;13918:4;13914:20;13910:1;13899:9;13895:17;13888:47;13952:131;14078:4;13952:131;:::i;:::-;13944:139;;13671:419;;;:::o;14096:174::-;14236:26;14232:1;14224:6;14220:14;14213:50;14096:174;:::o;14276:366::-;14418:3;14439:67;14503:2;14498:3;14439:67;:::i;:::-;14432:74;;14515:93;14604:3;14515:93;:::i;:::-;14633:2;14628:3;14624:12;14617:19;;14276:366;;;:::o;14648:419::-;14814:4;14852:2;14841:9;14837:18;14829:26;;14901:9;14895:4;14891:20;14887:1;14876:9;14872:17;14865:47;14929:131;15055:4;14929:131;:::i;:::-;14921:139;;14648:419;;;:::o;15073:228::-;15213:34;15209:1;15201:6;15197:14;15190:58;15282:11;15277:2;15269:6;15265:15;15258:36;15073:228;:::o;15307:366::-;15449:3;15470:67;15534:2;15529:3;15470:67;:::i;:::-;15463:74;;15546:93;15635:3;15546:93;:::i;:::-;15664:2;15659:3;15655:12;15648:19;;15307:366;;;:::o;15679:419::-;15845:4;15883:2;15872:9;15868:18;15860:26;;15932:9;15926:4;15922:20;15918:1;15907:9;15903:17;15896:47;15960:131;16086:4;15960:131;:::i;:::-;15952:139;;15679:419;;;:::o;16104:148::-;16206:11;16243:3;16228:18;;16104:148;;;;:::o;16258:390::-;16364:3;16392:39;16425:5;16392:39;:::i;:::-;16447:89;16529:6;16524:3;16447:89;:::i;:::-;16440:96;;16545:65;16603:6;16598:3;16591:4;16584:5;16580:16;16545:65;:::i;:::-;16635:6;16630:3;16626:16;16619:23;;16368:280;16258:390;;;;:::o;16654:435::-;16834:3;16856:95;16947:3;16938:6;16856:95;:::i;:::-;16849:102;;16968:95;17059:3;17050:6;16968:95;:::i;:::-;16961:102;;17080:3;17073:10;;16654:435;;;;;:::o;17095:224::-;17235:34;17231:1;17223:6;17219:14;17212:58;17304:7;17299:2;17291:6;17287:15;17280:32;17095:224;:::o;17325:366::-;17467:3;17488:67;17552:2;17547:3;17488:67;:::i;:::-;17481:74;;17564:93;17653:3;17564:93;:::i;:::-;17682:2;17677:3;17673:12;17666:19;;17325:366;;;:::o;17697:419::-;17863:4;17901:2;17890:9;17886:18;17878:26;;17950:9;17944:4;17940:20;17936:1;17925:9;17921:17;17914:47;17978:131;18104:4;17978:131;:::i;:::-;17970:139;;17697:419;;;:::o;18122:223::-;18262:34;18258:1;18250:6;18246:14;18239:58;18331:6;18326:2;18318:6;18314:15;18307:31;18122:223;:::o;18351:366::-;18493:3;18514:67;18578:2;18573:3;18514:67;:::i;:::-;18507:74;;18590:93;18679:3;18590:93;:::i;:::-;18708:2;18703:3;18699:12;18692:19;;18351:366;;;:::o;18723:419::-;18889:4;18927:2;18916:9;18912:18;18904:26;;18976:9;18970:4;18966:20;18962:1;18951:9;18947:17;18940:47;19004:131;19130:4;19004:131;:::i;:::-;18996:139;;18723:419;;;:::o;19148:175::-;19288:27;19284:1;19276:6;19272:14;19265:51;19148:175;:::o;19329:366::-;19471:3;19492:67;19556:2;19551:3;19492:67;:::i;:::-;19485:74;;19568:93;19657:3;19568:93;:::i;:::-;19686:2;19681:3;19677:12;19670:19;;19329:366;;;:::o;19701:419::-;19867:4;19905:2;19894:9;19890:18;19882:26;;19954:9;19948:4;19944:20;19940:1;19929:9;19925:17;19918:47;19982:131;20108:4;19982:131;:::i;:::-;19974:139;;19701:419;;;:::o;20126:237::-;20266:34;20262:1;20254:6;20250:14;20243:58;20335:20;20330:2;20322:6;20318:15;20311:45;20126:237;:::o;20369:366::-;20511:3;20532:67;20596:2;20591:3;20532:67;:::i;:::-;20525:74;;20608:93;20697:3;20608:93;:::i;:::-;20726:2;20721:3;20717:12;20710:19;;20369:366;;;:::o;20741:419::-;20907:4;20945:2;20934:9;20930:18;20922:26;;20994:9;20988:4;20984:20;20980:1;20969:9;20965:17;20958:47;21022:131;21148:4;21022:131;:::i;:::-;21014:139;;20741:419;;;:::o;21166:180::-;21214:77;21211:1;21204:88;21311:4;21308:1;21301:15;21335:4;21332:1;21325:15;21352:98;21403:6;21437:5;21431:12;21421:22;;21352:98;;;:::o;21456:168::-;21539:11;21573:6;21568:3;21561:19;21613:4;21608:3;21604:14;21589:29;;21456:168;;;;:::o;21630:373::-;21716:3;21744:38;21776:5;21744:38;:::i;:::-;21798:70;21861:6;21856:3;21798:70;:::i;:::-;21791:77;;21877:65;21935:6;21930:3;21923:4;21916:5;21912:16;21877:65;:::i;:::-;21967:29;21989:6;21967:29;:::i;:::-;21962:3;21958:39;21951:46;;21720:283;21630:373;;;;:::o;22009:640::-;22204:4;22242:3;22231:9;22227:19;22219:27;;22256:71;22324:1;22313:9;22309:17;22300:6;22256:71;:::i;:::-;22337:72;22405:2;22394:9;22390:18;22381:6;22337:72;:::i;:::-;22419;22487:2;22476:9;22472:18;22463:6;22419:72;:::i;:::-;22538:9;22532:4;22528:20;22523:2;22512:9;22508:18;22501:48;22566:76;22637:4;22628:6;22566:76;:::i;:::-;22558:84;;22009:640;;;;;;;:::o;22655:141::-;22711:5;22742:6;22736:13;22727:22;;22758:32;22784:5;22758:32;:::i;:::-;22655:141;;;;:::o;22802:349::-;22871:6;22920:2;22908:9;22899:7;22895:23;22891:32;22888:119;;;22926:79;;:::i;:::-;22888:119;23046:1;23071:63;23126:7;23117:6;23106:9;23102:22;23071:63;:::i;:::-;23061:73;;23017:127;22802:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1696000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2921","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3022","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3459","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"17","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":28,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":30,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":34,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":38,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":42,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":48,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052986aeb73a356e68de8807792eecf970af09b4fbde6abdf7dc5974ee741abcf64736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SWAP9 PUSH11 0xEB73A356E68DE8807792EE 0xCF SWAP8 EXP CREATE SWAP12 0x4F 0xBD 0xE6 0xAB 0xDF PUSH30 0xC5974EE741ABCF64736F6C634300081B0033000000000000000000000000 ","sourceMap":"194:8964:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052986aeb73a356e68de8807792eecf970af09b4fbde6abdf7dc5974ee741abcf64736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SWAP9 PUSH11 0xEB73A356E68DE8807792EE 0xCF SWAP8 EXP CREATE SWAP12 0x4F 0xBD 0xE6 0xAB 0xDF PUSH30 0xC5974EE741ABCF64736F6C634300081B0033000000000000000000000000 ","sourceMap":"194:8964:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f56b70a696c4620b3a99dcbe1bd18a43f5306eb3587e074412734fec2cd376d864736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 PUSH12 0x70A696C4620B3A99DCBE1BD1 DUP11 NUMBER CREATE2 ADDRESS PUSH15 0xB3587E074412734FEC2CD376D86473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"188:2065:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f56b70a696c4620b3a99dcbe1bd18a43f5306eb3587e074412734fec2cd376d864736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 PUSH12 0x70A696C4620B3A99DCBE1BD1 DUP11 NUMBER CREATE2 ADDRESS PUSH15 0xB3587E074412734FEC2CD376D86473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"188:2065:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004d51bea48eb0ef178af178d3a9edadb57d5899b8b8a7885b18acba6321eb88964736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV 0xD5 SHL 0xEA BASEFEE 0xEB 0xE CALL PUSH25 0xAF178D3A9EDADB57D5899B8B8A7885B18ACBA6321EB8896473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"202:12302:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004d51bea48eb0ef178af178d3a9edadb57d5899b8b8a7885b18acba6321eb88964736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV 0xD5 SHL 0xEA BASEFEE 0xEB 0xE CALL PUSH25 0xAF178D3A9EDADB57D5899B8B8A7885B18ACBA6321EB8896473 PUSH16 0x6C634300081B00330000000000000000 ","sourceMap":"202:12302:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/riddles/Attacker2.sol":{"Attacker2":{"abi":[{"inputs":[{"internalType":"address","name":"vulnerableContract_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"attack","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vulnerableContract","outputs":[{"internalType":"contract Overmint1","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2540":{"entryPoint":null,"id":2540,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":219,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":157,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":125,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":120,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":175,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1199:13","nodeType":"YulBlock","src":"0:1199:13","statements":[{"body":{"nativeSrc":"47:35:13","nodeType":"YulBlock","src":"47:35:13","statements":[{"nativeSrc":"57:19:13","nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:13","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:13","nodeType":"YulIdentifier","src":"67:5:13"},"nativeSrc":"67:9:13","nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:13","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:13","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:13","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nativeSrc":"177:28:13","nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:13","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:13","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:13","nodeType":"YulIdentifier","src":"187:6:13"},"nativeSrc":"187:12:13","nodeType":"YulFunctionCall","src":"187:12:13"},"nativeSrc":"187:12:13","nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:13","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nativeSrc":"300:28:13","nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:13","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:13","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:13","nodeType":"YulIdentifier","src":"310:6:13"},"nativeSrc":"310:12:13","nodeType":"YulFunctionCall","src":"310:12:13"},"nativeSrc":"310:12:13","nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:13","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nativeSrc":"379:81:13","nodeType":"YulBlock","src":"379:81:13","statements":[{"nativeSrc":"389:65:13","nodeType":"YulAssignment","src":"389:65:13","value":{"arguments":[{"name":"value","nativeSrc":"404:5:13","nodeType":"YulIdentifier","src":"404:5:13"},{"kind":"number","nativeSrc":"411:42:13","nodeType":"YulLiteral","src":"411:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:13","nodeType":"YulIdentifier","src":"400:3:13"},"nativeSrc":"400:54:13","nodeType":"YulFunctionCall","src":"400:54:13"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:13","nodeType":"YulIdentifier","src":"389:7:13"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:13","nodeType":"YulTypedName","src":"361:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:13","nodeType":"YulTypedName","src":"371:7:13","type":""}],"src":"334:126:13"},{"body":{"nativeSrc":"511:51:13","nodeType":"YulBlock","src":"511:51:13","statements":[{"nativeSrc":"521:35:13","nodeType":"YulAssignment","src":"521:35:13","value":{"arguments":[{"name":"value","nativeSrc":"550:5:13","nodeType":"YulIdentifier","src":"550:5:13"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:13","nodeType":"YulIdentifier","src":"532:17:13"},"nativeSrc":"532:24:13","nodeType":"YulFunctionCall","src":"532:24:13"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:13","nodeType":"YulIdentifier","src":"521:7:13"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:13","nodeType":"YulTypedName","src":"493:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:13","nodeType":"YulTypedName","src":"503:7:13","type":""}],"src":"466:96:13"},{"body":{"nativeSrc":"611:79:13","nodeType":"YulBlock","src":"611:79:13","statements":[{"body":{"nativeSrc":"668:16:13","nodeType":"YulBlock","src":"668:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:13","nodeType":"YulLiteral","src":"677:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:13","nodeType":"YulLiteral","src":"680:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:13","nodeType":"YulIdentifier","src":"670:6:13"},"nativeSrc":"670:12:13","nodeType":"YulFunctionCall","src":"670:12:13"},"nativeSrc":"670:12:13","nodeType":"YulExpressionStatement","src":"670:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:13","nodeType":"YulIdentifier","src":"634:5:13"},{"arguments":[{"name":"value","nativeSrc":"659:5:13","nodeType":"YulIdentifier","src":"659:5:13"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:13","nodeType":"YulIdentifier","src":"641:17:13"},"nativeSrc":"641:24:13","nodeType":"YulFunctionCall","src":"641:24:13"}],"functionName":{"name":"eq","nativeSrc":"631:2:13","nodeType":"YulIdentifier","src":"631:2:13"},"nativeSrc":"631:35:13","nodeType":"YulFunctionCall","src":"631:35:13"}],"functionName":{"name":"iszero","nativeSrc":"624:6:13","nodeType":"YulIdentifier","src":"624:6:13"},"nativeSrc":"624:43:13","nodeType":"YulFunctionCall","src":"624:43:13"},"nativeSrc":"621:63:13","nodeType":"YulIf","src":"621:63:13"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:13","nodeType":"YulTypedName","src":"604:5:13","type":""}],"src":"568:122:13"},{"body":{"nativeSrc":"759:80:13","nodeType":"YulBlock","src":"759:80:13","statements":[{"nativeSrc":"769:22:13","nodeType":"YulAssignment","src":"769:22:13","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:13","nodeType":"YulIdentifier","src":"784:6:13"}],"functionName":{"name":"mload","nativeSrc":"778:5:13","nodeType":"YulIdentifier","src":"778:5:13"},"nativeSrc":"778:13:13","nodeType":"YulFunctionCall","src":"778:13:13"},"variableNames":[{"name":"value","nativeSrc":"769:5:13","nodeType":"YulIdentifier","src":"769:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:13","nodeType":"YulIdentifier","src":"827:5:13"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:13","nodeType":"YulIdentifier","src":"800:26:13"},"nativeSrc":"800:33:13","nodeType":"YulFunctionCall","src":"800:33:13"},"nativeSrc":"800:33:13","nodeType":"YulExpressionStatement","src":"800:33:13"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:13","nodeType":"YulTypedName","src":"737:6:13","type":""},{"name":"end","nativeSrc":"745:3:13","nodeType":"YulTypedName","src":"745:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:13","nodeType":"YulTypedName","src":"753:5:13","type":""}],"src":"696:143:13"},{"body":{"nativeSrc":"922:274:13","nodeType":"YulBlock","src":"922:274:13","statements":[{"body":{"nativeSrc":"968:83:13","nodeType":"YulBlock","src":"968:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:13","nodeType":"YulIdentifier","src":"970:77:13"},"nativeSrc":"970:79:13","nodeType":"YulFunctionCall","src":"970:79:13"},"nativeSrc":"970:79:13","nodeType":"YulExpressionStatement","src":"970:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:13","nodeType":"YulIdentifier","src":"943:7:13"},{"name":"headStart","nativeSrc":"952:9:13","nodeType":"YulIdentifier","src":"952:9:13"}],"functionName":{"name":"sub","nativeSrc":"939:3:13","nodeType":"YulIdentifier","src":"939:3:13"},"nativeSrc":"939:23:13","nodeType":"YulFunctionCall","src":"939:23:13"},{"kind":"number","nativeSrc":"964:2:13","nodeType":"YulLiteral","src":"964:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:13","nodeType":"YulIdentifier","src":"935:3:13"},"nativeSrc":"935:32:13","nodeType":"YulFunctionCall","src":"935:32:13"},"nativeSrc":"932:119:13","nodeType":"YulIf","src":"932:119:13"},{"nativeSrc":"1061:128:13","nodeType":"YulBlock","src":"1061:128:13","statements":[{"nativeSrc":"1076:15:13","nodeType":"YulVariableDeclaration","src":"1076:15:13","value":{"kind":"number","nativeSrc":"1090:1:13","nodeType":"YulLiteral","src":"1090:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:13","nodeType":"YulTypedName","src":"1080:6:13","type":""}]},{"nativeSrc":"1105:74:13","nodeType":"YulAssignment","src":"1105:74:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:13","nodeType":"YulIdentifier","src":"1151:9:13"},{"name":"offset","nativeSrc":"1162:6:13","nodeType":"YulIdentifier","src":"1162:6:13"}],"functionName":{"name":"add","nativeSrc":"1147:3:13","nodeType":"YulIdentifier","src":"1147:3:13"},"nativeSrc":"1147:22:13","nodeType":"YulFunctionCall","src":"1147:22:13"},{"name":"dataEnd","nativeSrc":"1171:7:13","nodeType":"YulIdentifier","src":"1171:7:13"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:13","nodeType":"YulIdentifier","src":"1115:31:13"},"nativeSrc":"1115:64:13","nodeType":"YulFunctionCall","src":"1115:64:13"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:13","nodeType":"YulIdentifier","src":"1105:6:13"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:13","nodeType":"YulTypedName","src":"892:9:13","type":""},{"name":"dataEnd","nativeSrc":"903:7:13","nodeType":"YulTypedName","src":"903:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:13","nodeType":"YulTypedName","src":"915:6:13","type":""}],"src":"845:351:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516103f03803806103f0833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6102d9806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063144166ae1461003b5780639e5faafc14610059575b600080fd5b610043610063565b6040516100509190610288565b60405180910390f35b610061610087565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100ef57600080fd5b505af1158015610103573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016f57600080fd5b505af1158015610183573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061024e61024961024484610209565b610229565b610209565b9050919050565b600061026082610233565b9050919050565b600061027282610255565b9050919050565b61028281610267565b82525050565b600060208201905061029d6000830184610279565b9291505056fea264697066735822122097beaf25a8c862e4c30d949173cb6c07b5eaabc9e4c73c42b67589a82f6b755664736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3F0 CODESIZE SUB DUP1 PUSH2 0x3F0 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA8 DUP3 PUSH2 0x7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8 DUP2 PUSH2 0x9D JUMP JUMPDEST DUP2 EQ PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD5 DUP2 PUSH2 0xAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0x78 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF DUP5 DUP3 DUP6 ADD PUSH2 0xC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D9 DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x144166AE EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9E5FAAFC EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x288 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x61 PUSH2 0x87 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1249C58B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x103 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1249C58B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x183 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1249C58B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x203 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24E PUSH2 0x249 PUSH2 0x244 DUP5 PUSH2 0x209 JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST PUSH2 0x209 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260 DUP3 PUSH2 0x233 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272 DUP3 PUSH2 0x255 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x282 DUP2 PUSH2 0x267 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x279 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 0xBE 0xAF 0x25 0xA8 0xC8 PUSH3 0xE4C30D SWAP5 SWAP2 PUSH20 0xCB6C07B5EAABC9E4C73C42B67589A82F6B755664 PUSH20 0x6F6C634300081B00330000000000000000000000 ","sourceMap":"247:322:11:-:0;;;314:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;396:19;365:18;;:51;;;;;;;;;;;;;;;;;;314:109;247:322;;88:117:13;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;247:322:11:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@attack_2559":{"entryPoint":135,"id":2559,"parameterSlots":0,"returnSlots":0},"@vulnerableContract_2528":{"entryPoint":99,"id":2528,"parameterSlots":0,"returnSlots":0},"abi_encode_t_contract$_Overmint1_$2627_to_t_address_fromStack":{"entryPoint":633,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_contract$_Overmint1_$2627__to_t_address__fromStack_reversed":{"entryPoint":648,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":521,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_Overmint1_$2627_to_t_address":{"entryPoint":615,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":597,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":563,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":553,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1069:13","nodeType":"YulBlock","src":"0:1069:13","statements":[{"body":{"nativeSrc":"52:81:13","nodeType":"YulBlock","src":"52:81:13","statements":[{"nativeSrc":"62:65:13","nodeType":"YulAssignment","src":"62:65:13","value":{"arguments":[{"name":"value","nativeSrc":"77:5:13","nodeType":"YulIdentifier","src":"77:5:13"},{"kind":"number","nativeSrc":"84:42:13","nodeType":"YulLiteral","src":"84:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:13","nodeType":"YulIdentifier","src":"73:3:13"},"nativeSrc":"73:54:13","nodeType":"YulFunctionCall","src":"73:54:13"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:13","nodeType":"YulIdentifier","src":"62:7:13"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:13","nodeType":"YulTypedName","src":"34:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:13","nodeType":"YulTypedName","src":"44:7:13","type":""}],"src":"7:126:13"},{"body":{"nativeSrc":"171:28:13","nodeType":"YulBlock","src":"171:28:13","statements":[{"nativeSrc":"181:12:13","nodeType":"YulAssignment","src":"181:12:13","value":{"name":"value","nativeSrc":"188:5:13","nodeType":"YulIdentifier","src":"188:5:13"},"variableNames":[{"name":"ret","nativeSrc":"181:3:13","nodeType":"YulIdentifier","src":"181:3:13"}]}]},"name":"identity","nativeSrc":"139:60:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"157:5:13","nodeType":"YulTypedName","src":"157:5:13","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"167:3:13","nodeType":"YulTypedName","src":"167:3:13","type":""}],"src":"139:60:13"},{"body":{"nativeSrc":"265:82:13","nodeType":"YulBlock","src":"265:82:13","statements":[{"nativeSrc":"275:66:13","nodeType":"YulAssignment","src":"275:66:13","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"333:5:13","nodeType":"YulIdentifier","src":"333:5:13"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"315:17:13","nodeType":"YulIdentifier","src":"315:17:13"},"nativeSrc":"315:24:13","nodeType":"YulFunctionCall","src":"315:24:13"}],"functionName":{"name":"identity","nativeSrc":"306:8:13","nodeType":"YulIdentifier","src":"306:8:13"},"nativeSrc":"306:34:13","nodeType":"YulFunctionCall","src":"306:34:13"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"288:17:13","nodeType":"YulIdentifier","src":"288:17:13"},"nativeSrc":"288:53:13","nodeType":"YulFunctionCall","src":"288:53:13"},"variableNames":[{"name":"converted","nativeSrc":"275:9:13","nodeType":"YulIdentifier","src":"275:9:13"}]}]},"name":"convert_t_uint160_to_t_uint160","nativeSrc":"205:142:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"245:5:13","nodeType":"YulTypedName","src":"245:5:13","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"255:9:13","nodeType":"YulTypedName","src":"255:9:13","type":""}],"src":"205:142:13"},{"body":{"nativeSrc":"413:66:13","nodeType":"YulBlock","src":"413:66:13","statements":[{"nativeSrc":"423:50:13","nodeType":"YulAssignment","src":"423:50:13","value":{"arguments":[{"name":"value","nativeSrc":"467:5:13","nodeType":"YulIdentifier","src":"467:5:13"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nativeSrc":"436:30:13","nodeType":"YulIdentifier","src":"436:30:13"},"nativeSrc":"436:37:13","nodeType":"YulFunctionCall","src":"436:37:13"},"variableNames":[{"name":"converted","nativeSrc":"423:9:13","nodeType":"YulIdentifier","src":"423:9:13"}]}]},"name":"convert_t_uint160_to_t_address","nativeSrc":"353:126:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"393:5:13","nodeType":"YulTypedName","src":"393:5:13","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"403:9:13","nodeType":"YulTypedName","src":"403:9:13","type":""}],"src":"353:126:13"},{"body":{"nativeSrc":"563:66:13","nodeType":"YulBlock","src":"563:66:13","statements":[{"nativeSrc":"573:50:13","nodeType":"YulAssignment","src":"573:50:13","value":{"arguments":[{"name":"value","nativeSrc":"617:5:13","nodeType":"YulIdentifier","src":"617:5:13"}],"functionName":{"name":"convert_t_uint160_to_t_address","nativeSrc":"586:30:13","nodeType":"YulIdentifier","src":"586:30:13"},"nativeSrc":"586:37:13","nodeType":"YulFunctionCall","src":"586:37:13"},"variableNames":[{"name":"converted","nativeSrc":"573:9:13","nodeType":"YulIdentifier","src":"573:9:13"}]}]},"name":"convert_t_contract$_Overmint1_$2627_to_t_address","nativeSrc":"485:144:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"543:5:13","nodeType":"YulTypedName","src":"543:5:13","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"553:9:13","nodeType":"YulTypedName","src":"553:9:13","type":""}],"src":"485:144:13"},{"body":{"nativeSrc":"718:84:13","nodeType":"YulBlock","src":"718:84:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"735:3:13","nodeType":"YulIdentifier","src":"735:3:13"},{"arguments":[{"name":"value","nativeSrc":"789:5:13","nodeType":"YulIdentifier","src":"789:5:13"}],"functionName":{"name":"convert_t_contract$_Overmint1_$2627_to_t_address","nativeSrc":"740:48:13","nodeType":"YulIdentifier","src":"740:48:13"},"nativeSrc":"740:55:13","nodeType":"YulFunctionCall","src":"740:55:13"}],"functionName":{"name":"mstore","nativeSrc":"728:6:13","nodeType":"YulIdentifier","src":"728:6:13"},"nativeSrc":"728:68:13","nodeType":"YulFunctionCall","src":"728:68:13"},"nativeSrc":"728:68:13","nodeType":"YulExpressionStatement","src":"728:68:13"}]},"name":"abi_encode_t_contract$_Overmint1_$2627_to_t_address_fromStack","nativeSrc":"635:167:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"706:5:13","nodeType":"YulTypedName","src":"706:5:13","type":""},{"name":"pos","nativeSrc":"713:3:13","nodeType":"YulTypedName","src":"713:3:13","type":""}],"src":"635:167:13"},{"body":{"nativeSrc":"924:142:13","nodeType":"YulBlock","src":"924:142:13","statements":[{"nativeSrc":"934:26:13","nodeType":"YulAssignment","src":"934:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"946:9:13","nodeType":"YulIdentifier","src":"946:9:13"},{"kind":"number","nativeSrc":"957:2:13","nodeType":"YulLiteral","src":"957:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"942:3:13","nodeType":"YulIdentifier","src":"942:3:13"},"nativeSrc":"942:18:13","nodeType":"YulFunctionCall","src":"942:18:13"},"variableNames":[{"name":"tail","nativeSrc":"934:4:13","nodeType":"YulIdentifier","src":"934:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1032:6:13","nodeType":"YulIdentifier","src":"1032:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"1045:9:13","nodeType":"YulIdentifier","src":"1045:9:13"},{"kind":"number","nativeSrc":"1056:1:13","nodeType":"YulLiteral","src":"1056:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1041:3:13","nodeType":"YulIdentifier","src":"1041:3:13"},"nativeSrc":"1041:17:13","nodeType":"YulFunctionCall","src":"1041:17:13"}],"functionName":{"name":"abi_encode_t_contract$_Overmint1_$2627_to_t_address_fromStack","nativeSrc":"970:61:13","nodeType":"YulIdentifier","src":"970:61:13"},"nativeSrc":"970:89:13","nodeType":"YulFunctionCall","src":"970:89:13"},"nativeSrc":"970:89:13","nodeType":"YulExpressionStatement","src":"970:89:13"}]},"name":"abi_encode_tuple_t_contract$_Overmint1_$2627__to_t_address__fromStack_reversed","nativeSrc":"808:258:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"896:9:13","nodeType":"YulTypedName","src":"896:9:13","type":""},{"name":"value0","nativeSrc":"908:6:13","nodeType":"YulTypedName","src":"908:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"919:4:13","nodeType":"YulTypedName","src":"919:4:13","type":""}],"src":"808:258:13"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_Overmint1_$2627_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_Overmint1_$2627_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_Overmint1_$2627_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_Overmint1_$2627__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_Overmint1_$2627_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c8063144166ae1461003b5780639e5faafc14610059575b600080fd5b610043610063565b6040516100509190610288565b60405180910390f35b610061610087565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100ef57600080fd5b505af1158015610103573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016f57600080fd5b505af1158015610183573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061024e61024961024484610209565b610229565b610209565b9050919050565b600061026082610233565b9050919050565b600061027282610255565b9050919050565b61028281610267565b82525050565b600060208201905061029d6000830184610279565b9291505056fea264697066735822122097beaf25a8c862e4c30d949173cb6c07b5eaabc9e4c73c42b67589a82f6b755664736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x144166AE EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9E5FAAFC EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x288 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x61 PUSH2 0x87 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1249C58B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x103 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1249C58B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x183 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1249C58B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x203 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24E PUSH2 0x249 PUSH2 0x244 DUP5 PUSH2 0x209 JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST PUSH2 0x209 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260 DUP3 PUSH2 0x233 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272 DUP3 PUSH2 0x255 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x282 DUP2 PUSH2 0x267 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x279 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 0xBE 0xAF 0x25 0xA8 0xC8 PUSH3 0xE4C30D SWAP5 SWAP2 PUSH20 0xCB6C07B5EAABC9E4C73C42B67589A82F6B755664 PUSH20 0x6F6C634300081B00330000000000000000000000 ","sourceMap":"247:322:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;272:35;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;428:139;;;:::i;:::-;;272:35;;;;;;;;;;;;:::o;428:139::-;465:18;;;;;;;;;;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;500:18;;;;;;;;;;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;535:18;;;;;;;;;;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;428:139::o;7:126:13:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:60::-;167:3;188:5;181:12;;139:60;;;:::o;205:142::-;255:9;288:53;306:34;315:24;333:5;315:24;:::i;:::-;306:34;:::i;:::-;288:53;:::i;:::-;275:66;;205:142;;;:::o;353:126::-;403:9;436:37;467:5;436:37;:::i;:::-;423:50;;353:126;;;:::o;485:144::-;553:9;586:37;617:5;586:37;:::i;:::-;573:50;;485:144;;;:::o;635:167::-;740:55;789:5;740:55;:::i;:::-;735:3;728:68;635:167;;:::o;808:258::-;919:4;957:2;946:9;942:18;934:26;;970:89;1056:1;1045:9;1041:17;1032:6;970:89;:::i;:::-;808:258;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"145800","executionCost":"infinite","totalCost":"infinite"},"external":{"attack()":"infinite","vulnerableContract()":"infinite"}},"methodIdentifiers":{"attack()":"9e5faafc","vulnerableContract()":"144166ae"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vulnerableContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vulnerableContract\",\"outputs\":[{\"internalType\":\"contract Overmint1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/riddles/Attacker2.sol\":\"Attacker2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x7bd5dc796c245d4c52836610455d172cdfcc1f8dcf0d9b1c4cbde212fde02965\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/riddles/Attacker2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./Overmint1.sol\\\";\\n\\ncontract Attacker2 {\\n    Overmint1 public vulnerableContract;\\n\\n    constructor(address vulnerableContract_) {\\n        vulnerableContract = Overmint1(vulnerableContract_);\\n    }\\n    function attack() external {\\n        vulnerableContract.mint();\\n        vulnerableContract.mint();\\n        vulnerableContract.mint();\\n    }\\n}\\n\",\"keccak256\":\"0x85f56752125256e149659ff285a83513f7d6a5e8d71d9462db16405eedf973c1\",\"license\":\"MIT\"},\"contracts/riddles/Overmint1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.27;\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract Overmint1 is ERC721 {\\n    using Address for address;\\n    mapping(address => uint256) public amountMinted;\\n    uint256 public totalSupply;\\n\\n    constructor() ERC721(\\\"Overmint1\\\", \\\"AT\\\") {}\\n\\n    function mint() external {\\n        require(amountMinted[msg.sender] <= 3, \\\"max 3 NFTs\\\");\\n        totalSupply++;\\n        _safeMint(msg.sender, totalSupply);\\n        amountMinted[msg.sender]++;\\n    }\\n\\n    function success(address _attacker) external view returns (bool) {\\n        return balanceOf(_attacker) == 5;\\n    }\\n}\\n\",\"keccak256\":\"0xd8d51110ab9e788ab892f0609d6de6bb9b0fed0641e891f5222f2ae006f12f9d\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2528,"contract":"contracts/riddles/Attacker2.sol:Attacker2","label":"vulnerableContract","offset":0,"slot":"0","type":"t_contract(Overmint1)2627"}],"types":{"t_contract(Overmint1)2627":{"encoding":"inplace","label":"contract Overmint1","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/riddles/Overmint1.sol":{"Overmint1":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"amountMinted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_attacker","type":"address"}],"name":"success","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2583":{"entryPoint":null,"id":2583,"parameterSlots":0,"returnSlots":0},"@_65":{"entryPoint":null,"id":65,"parameterSlots":2,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":318,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":164,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":615,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":450,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":580,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":470,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":756,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":339,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":269,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":728,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":460,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":698,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":222,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":175,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":504,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":355,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":685,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":556,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":368,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":514,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":551,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:5231:13","nodeType":"YulBlock","src":"0:5231:13","statements":[{"body":{"nativeSrc":"66:40:13","nodeType":"YulBlock","src":"66:40:13","statements":[{"nativeSrc":"77:22:13","nodeType":"YulAssignment","src":"77:22:13","value":{"arguments":[{"name":"value","nativeSrc":"93:5:13","nodeType":"YulIdentifier","src":"93:5:13"}],"functionName":{"name":"mload","nativeSrc":"87:5:13","nodeType":"YulIdentifier","src":"87:5:13"},"nativeSrc":"87:12:13","nodeType":"YulFunctionCall","src":"87:12:13"},"variableNames":[{"name":"length","nativeSrc":"77:6:13","nodeType":"YulIdentifier","src":"77:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"7:99:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"49:5:13","nodeType":"YulTypedName","src":"49:5:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"59:6:13","nodeType":"YulTypedName","src":"59:6:13","type":""}],"src":"7:99:13"},{"body":{"nativeSrc":"140:152:13","nodeType":"YulBlock","src":"140:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"157:1:13","nodeType":"YulLiteral","src":"157:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"160:77:13","nodeType":"YulLiteral","src":"160:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"150:6:13","nodeType":"YulIdentifier","src":"150:6:13"},"nativeSrc":"150:88:13","nodeType":"YulFunctionCall","src":"150:88:13"},"nativeSrc":"150:88:13","nodeType":"YulExpressionStatement","src":"150:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"254:1:13","nodeType":"YulLiteral","src":"254:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"257:4:13","nodeType":"YulLiteral","src":"257:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"247:6:13","nodeType":"YulIdentifier","src":"247:6:13"},"nativeSrc":"247:15:13","nodeType":"YulFunctionCall","src":"247:15:13"},"nativeSrc":"247:15:13","nodeType":"YulExpressionStatement","src":"247:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"278:1:13","nodeType":"YulLiteral","src":"278:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"281:4:13","nodeType":"YulLiteral","src":"281:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"271:6:13","nodeType":"YulIdentifier","src":"271:6:13"},"nativeSrc":"271:15:13","nodeType":"YulFunctionCall","src":"271:15:13"},"nativeSrc":"271:15:13","nodeType":"YulExpressionStatement","src":"271:15:13"}]},"name":"panic_error_0x41","nativeSrc":"112:180:13","nodeType":"YulFunctionDefinition","src":"112:180:13"},{"body":{"nativeSrc":"326:152:13","nodeType":"YulBlock","src":"326:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"343:1:13","nodeType":"YulLiteral","src":"343:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"346:77:13","nodeType":"YulLiteral","src":"346:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"336:6:13","nodeType":"YulIdentifier","src":"336:6:13"},"nativeSrc":"336:88:13","nodeType":"YulFunctionCall","src":"336:88:13"},"nativeSrc":"336:88:13","nodeType":"YulExpressionStatement","src":"336:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"440:1:13","nodeType":"YulLiteral","src":"440:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"443:4:13","nodeType":"YulLiteral","src":"443:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"433:6:13","nodeType":"YulIdentifier","src":"433:6:13"},"nativeSrc":"433:15:13","nodeType":"YulFunctionCall","src":"433:15:13"},"nativeSrc":"433:15:13","nodeType":"YulExpressionStatement","src":"433:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"464:1:13","nodeType":"YulLiteral","src":"464:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"467:4:13","nodeType":"YulLiteral","src":"467:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"457:6:13","nodeType":"YulIdentifier","src":"457:6:13"},"nativeSrc":"457:15:13","nodeType":"YulFunctionCall","src":"457:15:13"},"nativeSrc":"457:15:13","nodeType":"YulExpressionStatement","src":"457:15:13"}]},"name":"panic_error_0x22","nativeSrc":"298:180:13","nodeType":"YulFunctionDefinition","src":"298:180:13"},{"body":{"nativeSrc":"535:269:13","nodeType":"YulBlock","src":"535:269:13","statements":[{"nativeSrc":"545:22:13","nodeType":"YulAssignment","src":"545:22:13","value":{"arguments":[{"name":"data","nativeSrc":"559:4:13","nodeType":"YulIdentifier","src":"559:4:13"},{"kind":"number","nativeSrc":"565:1:13","nodeType":"YulLiteral","src":"565:1:13","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"555:3:13","nodeType":"YulIdentifier","src":"555:3:13"},"nativeSrc":"555:12:13","nodeType":"YulFunctionCall","src":"555:12:13"},"variableNames":[{"name":"length","nativeSrc":"545:6:13","nodeType":"YulIdentifier","src":"545:6:13"}]},{"nativeSrc":"576:38:13","nodeType":"YulVariableDeclaration","src":"576:38:13","value":{"arguments":[{"name":"data","nativeSrc":"606:4:13","nodeType":"YulIdentifier","src":"606:4:13"},{"kind":"number","nativeSrc":"612:1:13","nodeType":"YulLiteral","src":"612:1:13","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"602:3:13","nodeType":"YulIdentifier","src":"602:3:13"},"nativeSrc":"602:12:13","nodeType":"YulFunctionCall","src":"602:12:13"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"580:18:13","nodeType":"YulTypedName","src":"580:18:13","type":""}]},{"body":{"nativeSrc":"653:51:13","nodeType":"YulBlock","src":"653:51:13","statements":[{"nativeSrc":"667:27:13","nodeType":"YulAssignment","src":"667:27:13","value":{"arguments":[{"name":"length","nativeSrc":"681:6:13","nodeType":"YulIdentifier","src":"681:6:13"},{"kind":"number","nativeSrc":"689:4:13","nodeType":"YulLiteral","src":"689:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"677:3:13","nodeType":"YulIdentifier","src":"677:3:13"},"nativeSrc":"677:17:13","nodeType":"YulFunctionCall","src":"677:17:13"},"variableNames":[{"name":"length","nativeSrc":"667:6:13","nodeType":"YulIdentifier","src":"667:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"633:18:13","nodeType":"YulIdentifier","src":"633:18:13"}],"functionName":{"name":"iszero","nativeSrc":"626:6:13","nodeType":"YulIdentifier","src":"626:6:13"},"nativeSrc":"626:26:13","nodeType":"YulFunctionCall","src":"626:26:13"},"nativeSrc":"623:81:13","nodeType":"YulIf","src":"623:81:13"},{"body":{"nativeSrc":"756:42:13","nodeType":"YulBlock","src":"756:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"770:16:13","nodeType":"YulIdentifier","src":"770:16:13"},"nativeSrc":"770:18:13","nodeType":"YulFunctionCall","src":"770:18:13"},"nativeSrc":"770:18:13","nodeType":"YulExpressionStatement","src":"770:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"720:18:13","nodeType":"YulIdentifier","src":"720:18:13"},{"arguments":[{"name":"length","nativeSrc":"743:6:13","nodeType":"YulIdentifier","src":"743:6:13"},{"kind":"number","nativeSrc":"751:2:13","nodeType":"YulLiteral","src":"751:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"740:2:13","nodeType":"YulIdentifier","src":"740:2:13"},"nativeSrc":"740:14:13","nodeType":"YulFunctionCall","src":"740:14:13"}],"functionName":{"name":"eq","nativeSrc":"717:2:13","nodeType":"YulIdentifier","src":"717:2:13"},"nativeSrc":"717:38:13","nodeType":"YulFunctionCall","src":"717:38:13"},"nativeSrc":"714:84:13","nodeType":"YulIf","src":"714:84:13"}]},"name":"extract_byte_array_length","nativeSrc":"484:320:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"519:4:13","nodeType":"YulTypedName","src":"519:4:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"528:6:13","nodeType":"YulTypedName","src":"528:6:13","type":""}],"src":"484:320:13"},{"body":{"nativeSrc":"864:87:13","nodeType":"YulBlock","src":"864:87:13","statements":[{"nativeSrc":"874:11:13","nodeType":"YulAssignment","src":"874:11:13","value":{"name":"ptr","nativeSrc":"882:3:13","nodeType":"YulIdentifier","src":"882:3:13"},"variableNames":[{"name":"data","nativeSrc":"874:4:13","nodeType":"YulIdentifier","src":"874:4:13"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"902:1:13","nodeType":"YulLiteral","src":"902:1:13","type":"","value":"0"},{"name":"ptr","nativeSrc":"905:3:13","nodeType":"YulIdentifier","src":"905:3:13"}],"functionName":{"name":"mstore","nativeSrc":"895:6:13","nodeType":"YulIdentifier","src":"895:6:13"},"nativeSrc":"895:14:13","nodeType":"YulFunctionCall","src":"895:14:13"},"nativeSrc":"895:14:13","nodeType":"YulExpressionStatement","src":"895:14:13"},{"nativeSrc":"918:26:13","nodeType":"YulAssignment","src":"918:26:13","value":{"arguments":[{"kind":"number","nativeSrc":"936:1:13","nodeType":"YulLiteral","src":"936:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"939:4:13","nodeType":"YulLiteral","src":"939:4:13","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"926:9:13","nodeType":"YulIdentifier","src":"926:9:13"},"nativeSrc":"926:18:13","nodeType":"YulFunctionCall","src":"926:18:13"},"variableNames":[{"name":"data","nativeSrc":"918:4:13","nodeType":"YulIdentifier","src":"918:4:13"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"810:141:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"851:3:13","nodeType":"YulTypedName","src":"851:3:13","type":""}],"returnVariables":[{"name":"data","nativeSrc":"859:4:13","nodeType":"YulTypedName","src":"859:4:13","type":""}],"src":"810:141:13"},{"body":{"nativeSrc":"1001:49:13","nodeType":"YulBlock","src":"1001:49:13","statements":[{"nativeSrc":"1011:33:13","nodeType":"YulAssignment","src":"1011:33:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1029:5:13","nodeType":"YulIdentifier","src":"1029:5:13"},{"kind":"number","nativeSrc":"1036:2:13","nodeType":"YulLiteral","src":"1036:2:13","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1025:3:13","nodeType":"YulIdentifier","src":"1025:3:13"},"nativeSrc":"1025:14:13","nodeType":"YulFunctionCall","src":"1025:14:13"},{"kind":"number","nativeSrc":"1041:2:13","nodeType":"YulLiteral","src":"1041:2:13","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"1021:3:13","nodeType":"YulIdentifier","src":"1021:3:13"},"nativeSrc":"1021:23:13","nodeType":"YulFunctionCall","src":"1021:23:13"},"variableNames":[{"name":"result","nativeSrc":"1011:6:13","nodeType":"YulIdentifier","src":"1011:6:13"}]}]},"name":"divide_by_32_ceil","nativeSrc":"957:93:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"984:5:13","nodeType":"YulTypedName","src":"984:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"994:6:13","nodeType":"YulTypedName","src":"994:6:13","type":""}],"src":"957:93:13"},{"body":{"nativeSrc":"1109:54:13","nodeType":"YulBlock","src":"1109:54:13","statements":[{"nativeSrc":"1119:37:13","nodeType":"YulAssignment","src":"1119:37:13","value":{"arguments":[{"name":"bits","nativeSrc":"1144:4:13","nodeType":"YulIdentifier","src":"1144:4:13"},{"name":"value","nativeSrc":"1150:5:13","nodeType":"YulIdentifier","src":"1150:5:13"}],"functionName":{"name":"shl","nativeSrc":"1140:3:13","nodeType":"YulIdentifier","src":"1140:3:13"},"nativeSrc":"1140:16:13","nodeType":"YulFunctionCall","src":"1140:16:13"},"variableNames":[{"name":"newValue","nativeSrc":"1119:8:13","nodeType":"YulIdentifier","src":"1119:8:13"}]}]},"name":"shift_left_dynamic","nativeSrc":"1056:107:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"1084:4:13","nodeType":"YulTypedName","src":"1084:4:13","type":""},{"name":"value","nativeSrc":"1090:5:13","nodeType":"YulTypedName","src":"1090:5:13","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"1100:8:13","nodeType":"YulTypedName","src":"1100:8:13","type":""}],"src":"1056:107:13"},{"body":{"nativeSrc":"1245:317:13","nodeType":"YulBlock","src":"1245:317:13","statements":[{"nativeSrc":"1255:35:13","nodeType":"YulVariableDeclaration","src":"1255:35:13","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"1276:10:13","nodeType":"YulIdentifier","src":"1276:10:13"},{"kind":"number","nativeSrc":"1288:1:13","nodeType":"YulLiteral","src":"1288:1:13","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"1272:3:13","nodeType":"YulIdentifier","src":"1272:3:13"},"nativeSrc":"1272:18:13","nodeType":"YulFunctionCall","src":"1272:18:13"},"variables":[{"name":"shiftBits","nativeSrc":"1259:9:13","nodeType":"YulTypedName","src":"1259:9:13","type":""}]},{"nativeSrc":"1299:109:13","nodeType":"YulVariableDeclaration","src":"1299:109:13","value":{"arguments":[{"name":"shiftBits","nativeSrc":"1330:9:13","nodeType":"YulIdentifier","src":"1330:9:13"},{"kind":"number","nativeSrc":"1341:66:13","nodeType":"YulLiteral","src":"1341:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"1311:18:13","nodeType":"YulIdentifier","src":"1311:18:13"},"nativeSrc":"1311:97:13","nodeType":"YulFunctionCall","src":"1311:97:13"},"variables":[{"name":"mask","nativeSrc":"1303:4:13","nodeType":"YulTypedName","src":"1303:4:13","type":""}]},{"nativeSrc":"1417:51:13","nodeType":"YulAssignment","src":"1417:51:13","value":{"arguments":[{"name":"shiftBits","nativeSrc":"1448:9:13","nodeType":"YulIdentifier","src":"1448:9:13"},{"name":"toInsert","nativeSrc":"1459:8:13","nodeType":"YulIdentifier","src":"1459:8:13"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"1429:18:13","nodeType":"YulIdentifier","src":"1429:18:13"},"nativeSrc":"1429:39:13","nodeType":"YulFunctionCall","src":"1429:39:13"},"variableNames":[{"name":"toInsert","nativeSrc":"1417:8:13","nodeType":"YulIdentifier","src":"1417:8:13"}]},{"nativeSrc":"1477:30:13","nodeType":"YulAssignment","src":"1477:30:13","value":{"arguments":[{"name":"value","nativeSrc":"1490:5:13","nodeType":"YulIdentifier","src":"1490:5:13"},{"arguments":[{"name":"mask","nativeSrc":"1501:4:13","nodeType":"YulIdentifier","src":"1501:4:13"}],"functionName":{"name":"not","nativeSrc":"1497:3:13","nodeType":"YulIdentifier","src":"1497:3:13"},"nativeSrc":"1497:9:13","nodeType":"YulFunctionCall","src":"1497:9:13"}],"functionName":{"name":"and","nativeSrc":"1486:3:13","nodeType":"YulIdentifier","src":"1486:3:13"},"nativeSrc":"1486:21:13","nodeType":"YulFunctionCall","src":"1486:21:13"},"variableNames":[{"name":"value","nativeSrc":"1477:5:13","nodeType":"YulIdentifier","src":"1477:5:13"}]},{"nativeSrc":"1516:40:13","nodeType":"YulAssignment","src":"1516:40:13","value":{"arguments":[{"name":"value","nativeSrc":"1529:5:13","nodeType":"YulIdentifier","src":"1529:5:13"},{"arguments":[{"name":"toInsert","nativeSrc":"1540:8:13","nodeType":"YulIdentifier","src":"1540:8:13"},{"name":"mask","nativeSrc":"1550:4:13","nodeType":"YulIdentifier","src":"1550:4:13"}],"functionName":{"name":"and","nativeSrc":"1536:3:13","nodeType":"YulIdentifier","src":"1536:3:13"},"nativeSrc":"1536:19:13","nodeType":"YulFunctionCall","src":"1536:19:13"}],"functionName":{"name":"or","nativeSrc":"1526:2:13","nodeType":"YulIdentifier","src":"1526:2:13"},"nativeSrc":"1526:30:13","nodeType":"YulFunctionCall","src":"1526:30:13"},"variableNames":[{"name":"result","nativeSrc":"1516:6:13","nodeType":"YulIdentifier","src":"1516:6:13"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"1169:393:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1206:5:13","nodeType":"YulTypedName","src":"1206:5:13","type":""},{"name":"shiftBytes","nativeSrc":"1213:10:13","nodeType":"YulTypedName","src":"1213:10:13","type":""},{"name":"toInsert","nativeSrc":"1225:8:13","nodeType":"YulTypedName","src":"1225:8:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1238:6:13","nodeType":"YulTypedName","src":"1238:6:13","type":""}],"src":"1169:393:13"},{"body":{"nativeSrc":"1613:32:13","nodeType":"YulBlock","src":"1613:32:13","statements":[{"nativeSrc":"1623:16:13","nodeType":"YulAssignment","src":"1623:16:13","value":{"name":"value","nativeSrc":"1634:5:13","nodeType":"YulIdentifier","src":"1634:5:13"},"variableNames":[{"name":"cleaned","nativeSrc":"1623:7:13","nodeType":"YulIdentifier","src":"1623:7:13"}]}]},"name":"cleanup_t_uint256","nativeSrc":"1568:77:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1595:5:13","nodeType":"YulTypedName","src":"1595:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1605:7:13","nodeType":"YulTypedName","src":"1605:7:13","type":""}],"src":"1568:77:13"},{"body":{"nativeSrc":"1683:28:13","nodeType":"YulBlock","src":"1683:28:13","statements":[{"nativeSrc":"1693:12:13","nodeType":"YulAssignment","src":"1693:12:13","value":{"name":"value","nativeSrc":"1700:5:13","nodeType":"YulIdentifier","src":"1700:5:13"},"variableNames":[{"name":"ret","nativeSrc":"1693:3:13","nodeType":"YulIdentifier","src":"1693:3:13"}]}]},"name":"identity","nativeSrc":"1651:60:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1669:5:13","nodeType":"YulTypedName","src":"1669:5:13","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1679:3:13","nodeType":"YulTypedName","src":"1679:3:13","type":""}],"src":"1651:60:13"},{"body":{"nativeSrc":"1777:82:13","nodeType":"YulBlock","src":"1777:82:13","statements":[{"nativeSrc":"1787:66:13","nodeType":"YulAssignment","src":"1787:66:13","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1845:5:13","nodeType":"YulIdentifier","src":"1845:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"1827:17:13","nodeType":"YulIdentifier","src":"1827:17:13"},"nativeSrc":"1827:24:13","nodeType":"YulFunctionCall","src":"1827:24:13"}],"functionName":{"name":"identity","nativeSrc":"1818:8:13","nodeType":"YulIdentifier","src":"1818:8:13"},"nativeSrc":"1818:34:13","nodeType":"YulFunctionCall","src":"1818:34:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"1800:17:13","nodeType":"YulIdentifier","src":"1800:17:13"},"nativeSrc":"1800:53:13","nodeType":"YulFunctionCall","src":"1800:53:13"},"variableNames":[{"name":"converted","nativeSrc":"1787:9:13","nodeType":"YulIdentifier","src":"1787:9:13"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"1717:142:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1757:5:13","nodeType":"YulTypedName","src":"1757:5:13","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1767:9:13","nodeType":"YulTypedName","src":"1767:9:13","type":""}],"src":"1717:142:13"},{"body":{"nativeSrc":"1912:28:13","nodeType":"YulBlock","src":"1912:28:13","statements":[{"nativeSrc":"1922:12:13","nodeType":"YulAssignment","src":"1922:12:13","value":{"name":"value","nativeSrc":"1929:5:13","nodeType":"YulIdentifier","src":"1929:5:13"},"variableNames":[{"name":"ret","nativeSrc":"1922:3:13","nodeType":"YulIdentifier","src":"1922:3:13"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"1865:75:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1898:5:13","nodeType":"YulTypedName","src":"1898:5:13","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1908:3:13","nodeType":"YulTypedName","src":"1908:3:13","type":""}],"src":"1865:75:13"},{"body":{"nativeSrc":"2022:193:13","nodeType":"YulBlock","src":"2022:193:13","statements":[{"nativeSrc":"2032:63:13","nodeType":"YulVariableDeclaration","src":"2032:63:13","value":{"arguments":[{"name":"value_0","nativeSrc":"2087:7:13","nodeType":"YulIdentifier","src":"2087:7:13"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"2056:30:13","nodeType":"YulIdentifier","src":"2056:30:13"},"nativeSrc":"2056:39:13","nodeType":"YulFunctionCall","src":"2056:39:13"},"variables":[{"name":"convertedValue_0","nativeSrc":"2036:16:13","nodeType":"YulTypedName","src":"2036:16:13","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2111:4:13","nodeType":"YulIdentifier","src":"2111:4:13"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"2151:4:13","nodeType":"YulIdentifier","src":"2151:4:13"}],"functionName":{"name":"sload","nativeSrc":"2145:5:13","nodeType":"YulIdentifier","src":"2145:5:13"},"nativeSrc":"2145:11:13","nodeType":"YulFunctionCall","src":"2145:11:13"},{"name":"offset","nativeSrc":"2158:6:13","nodeType":"YulIdentifier","src":"2158:6:13"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"2190:16:13","nodeType":"YulIdentifier","src":"2190:16:13"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"2166:23:13","nodeType":"YulIdentifier","src":"2166:23:13"},"nativeSrc":"2166:41:13","nodeType":"YulFunctionCall","src":"2166:41:13"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"2117:27:13","nodeType":"YulIdentifier","src":"2117:27:13"},"nativeSrc":"2117:91:13","nodeType":"YulFunctionCall","src":"2117:91:13"}],"functionName":{"name":"sstore","nativeSrc":"2104:6:13","nodeType":"YulIdentifier","src":"2104:6:13"},"nativeSrc":"2104:105:13","nodeType":"YulFunctionCall","src":"2104:105:13"},"nativeSrc":"2104:105:13","nodeType":"YulExpressionStatement","src":"2104:105:13"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"1946:269:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"1999:4:13","nodeType":"YulTypedName","src":"1999:4:13","type":""},{"name":"offset","nativeSrc":"2005:6:13","nodeType":"YulTypedName","src":"2005:6:13","type":""},{"name":"value_0","nativeSrc":"2013:7:13","nodeType":"YulTypedName","src":"2013:7:13","type":""}],"src":"1946:269:13"},{"body":{"nativeSrc":"2270:24:13","nodeType":"YulBlock","src":"2270:24:13","statements":[{"nativeSrc":"2280:8:13","nodeType":"YulAssignment","src":"2280:8:13","value":{"kind":"number","nativeSrc":"2287:1:13","nodeType":"YulLiteral","src":"2287:1:13","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"2280:3:13","nodeType":"YulIdentifier","src":"2280:3:13"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"2221:73:13","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"2266:3:13","nodeType":"YulTypedName","src":"2266:3:13","type":""}],"src":"2221:73:13"},{"body":{"nativeSrc":"2353:136:13","nodeType":"YulBlock","src":"2353:136:13","statements":[{"nativeSrc":"2363:46:13","nodeType":"YulVariableDeclaration","src":"2363:46:13","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"2377:30:13","nodeType":"YulIdentifier","src":"2377:30:13"},"nativeSrc":"2377:32:13","nodeType":"YulFunctionCall","src":"2377:32:13"},"variables":[{"name":"zero_0","nativeSrc":"2367:6:13","nodeType":"YulTypedName","src":"2367:6:13","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2462:4:13","nodeType":"YulIdentifier","src":"2462:4:13"},{"name":"offset","nativeSrc":"2468:6:13","nodeType":"YulIdentifier","src":"2468:6:13"},{"name":"zero_0","nativeSrc":"2476:6:13","nodeType":"YulIdentifier","src":"2476:6:13"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"2418:43:13","nodeType":"YulIdentifier","src":"2418:43:13"},"nativeSrc":"2418:65:13","nodeType":"YulFunctionCall","src":"2418:65:13"},"nativeSrc":"2418:65:13","nodeType":"YulExpressionStatement","src":"2418:65:13"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"2300:189:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"2339:4:13","nodeType":"YulTypedName","src":"2339:4:13","type":""},{"name":"offset","nativeSrc":"2345:6:13","nodeType":"YulTypedName","src":"2345:6:13","type":""}],"src":"2300:189:13"},{"body":{"nativeSrc":"2545:136:13","nodeType":"YulBlock","src":"2545:136:13","statements":[{"body":{"nativeSrc":"2612:63:13","nodeType":"YulBlock","src":"2612:63:13","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"2656:5:13","nodeType":"YulIdentifier","src":"2656:5:13"},{"kind":"number","nativeSrc":"2663:1:13","nodeType":"YulLiteral","src":"2663:1:13","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"2626:29:13","nodeType":"YulIdentifier","src":"2626:29:13"},"nativeSrc":"2626:39:13","nodeType":"YulFunctionCall","src":"2626:39:13"},"nativeSrc":"2626:39:13","nodeType":"YulExpressionStatement","src":"2626:39:13"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"2565:5:13","nodeType":"YulIdentifier","src":"2565:5:13"},{"name":"end","nativeSrc":"2572:3:13","nodeType":"YulIdentifier","src":"2572:3:13"}],"functionName":{"name":"lt","nativeSrc":"2562:2:13","nodeType":"YulIdentifier","src":"2562:2:13"},"nativeSrc":"2562:14:13","nodeType":"YulFunctionCall","src":"2562:14:13"},"nativeSrc":"2555:120:13","nodeType":"YulForLoop","post":{"nativeSrc":"2577:26:13","nodeType":"YulBlock","src":"2577:26:13","statements":[{"nativeSrc":"2579:22:13","nodeType":"YulAssignment","src":"2579:22:13","value":{"arguments":[{"name":"start","nativeSrc":"2592:5:13","nodeType":"YulIdentifier","src":"2592:5:13"},{"kind":"number","nativeSrc":"2599:1:13","nodeType":"YulLiteral","src":"2599:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2588:3:13","nodeType":"YulIdentifier","src":"2588:3:13"},"nativeSrc":"2588:13:13","nodeType":"YulFunctionCall","src":"2588:13:13"},"variableNames":[{"name":"start","nativeSrc":"2579:5:13","nodeType":"YulIdentifier","src":"2579:5:13"}]}]},"pre":{"nativeSrc":"2559:2:13","nodeType":"YulBlock","src":"2559:2:13","statements":[]},"src":"2555:120:13"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"2495:186:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"2533:5:13","nodeType":"YulTypedName","src":"2533:5:13","type":""},{"name":"end","nativeSrc":"2540:3:13","nodeType":"YulTypedName","src":"2540:3:13","type":""}],"src":"2495:186:13"},{"body":{"nativeSrc":"2766:464:13","nodeType":"YulBlock","src":"2766:464:13","statements":[{"body":{"nativeSrc":"2792:431:13","nodeType":"YulBlock","src":"2792:431:13","statements":[{"nativeSrc":"2806:54:13","nodeType":"YulVariableDeclaration","src":"2806:54:13","value":{"arguments":[{"name":"array","nativeSrc":"2854:5:13","nodeType":"YulIdentifier","src":"2854:5:13"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"2822:31:13","nodeType":"YulIdentifier","src":"2822:31:13"},"nativeSrc":"2822:38:13","nodeType":"YulFunctionCall","src":"2822:38:13"},"variables":[{"name":"dataArea","nativeSrc":"2810:8:13","nodeType":"YulTypedName","src":"2810:8:13","type":""}]},{"nativeSrc":"2873:63:13","nodeType":"YulVariableDeclaration","src":"2873:63:13","value":{"arguments":[{"name":"dataArea","nativeSrc":"2896:8:13","nodeType":"YulIdentifier","src":"2896:8:13"},{"arguments":[{"name":"startIndex","nativeSrc":"2924:10:13","nodeType":"YulIdentifier","src":"2924:10:13"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"2906:17:13","nodeType":"YulIdentifier","src":"2906:17:13"},"nativeSrc":"2906:29:13","nodeType":"YulFunctionCall","src":"2906:29:13"}],"functionName":{"name":"add","nativeSrc":"2892:3:13","nodeType":"YulIdentifier","src":"2892:3:13"},"nativeSrc":"2892:44:13","nodeType":"YulFunctionCall","src":"2892:44:13"},"variables":[{"name":"deleteStart","nativeSrc":"2877:11:13","nodeType":"YulTypedName","src":"2877:11:13","type":""}]},{"body":{"nativeSrc":"3093:27:13","nodeType":"YulBlock","src":"3093:27:13","statements":[{"nativeSrc":"3095:23:13","nodeType":"YulAssignment","src":"3095:23:13","value":{"name":"dataArea","nativeSrc":"3110:8:13","nodeType":"YulIdentifier","src":"3110:8:13"},"variableNames":[{"name":"deleteStart","nativeSrc":"3095:11:13","nodeType":"YulIdentifier","src":"3095:11:13"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"3077:10:13","nodeType":"YulIdentifier","src":"3077:10:13"},{"kind":"number","nativeSrc":"3089:2:13","nodeType":"YulLiteral","src":"3089:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"3074:2:13","nodeType":"YulIdentifier","src":"3074:2:13"},"nativeSrc":"3074:18:13","nodeType":"YulFunctionCall","src":"3074:18:13"},"nativeSrc":"3071:49:13","nodeType":"YulIf","src":"3071:49:13"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"3162:11:13","nodeType":"YulIdentifier","src":"3162:11:13"},{"arguments":[{"name":"dataArea","nativeSrc":"3179:8:13","nodeType":"YulIdentifier","src":"3179:8:13"},{"arguments":[{"name":"len","nativeSrc":"3207:3:13","nodeType":"YulIdentifier","src":"3207:3:13"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"3189:17:13","nodeType":"YulIdentifier","src":"3189:17:13"},"nativeSrc":"3189:22:13","nodeType":"YulFunctionCall","src":"3189:22:13"}],"functionName":{"name":"add","nativeSrc":"3175:3:13","nodeType":"YulIdentifier","src":"3175:3:13"},"nativeSrc":"3175:37:13","nodeType":"YulFunctionCall","src":"3175:37:13"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"3133:28:13","nodeType":"YulIdentifier","src":"3133:28:13"},"nativeSrc":"3133:80:13","nodeType":"YulFunctionCall","src":"3133:80:13"},"nativeSrc":"3133:80:13","nodeType":"YulExpressionStatement","src":"3133:80:13"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"2783:3:13","nodeType":"YulIdentifier","src":"2783:3:13"},{"kind":"number","nativeSrc":"2788:2:13","nodeType":"YulLiteral","src":"2788:2:13","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"2780:2:13","nodeType":"YulIdentifier","src":"2780:2:13"},"nativeSrc":"2780:11:13","nodeType":"YulFunctionCall","src":"2780:11:13"},"nativeSrc":"2777:446:13","nodeType":"YulIf","src":"2777:446:13"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"2687:543:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"2742:5:13","nodeType":"YulTypedName","src":"2742:5:13","type":""},{"name":"len","nativeSrc":"2749:3:13","nodeType":"YulTypedName","src":"2749:3:13","type":""},{"name":"startIndex","nativeSrc":"2754:10:13","nodeType":"YulTypedName","src":"2754:10:13","type":""}],"src":"2687:543:13"},{"body":{"nativeSrc":"3299:54:13","nodeType":"YulBlock","src":"3299:54:13","statements":[{"nativeSrc":"3309:37:13","nodeType":"YulAssignment","src":"3309:37:13","value":{"arguments":[{"name":"bits","nativeSrc":"3334:4:13","nodeType":"YulIdentifier","src":"3334:4:13"},{"name":"value","nativeSrc":"3340:5:13","nodeType":"YulIdentifier","src":"3340:5:13"}],"functionName":{"name":"shr","nativeSrc":"3330:3:13","nodeType":"YulIdentifier","src":"3330:3:13"},"nativeSrc":"3330:16:13","nodeType":"YulFunctionCall","src":"3330:16:13"},"variableNames":[{"name":"newValue","nativeSrc":"3309:8:13","nodeType":"YulIdentifier","src":"3309:8:13"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"3236:117:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"3274:4:13","nodeType":"YulTypedName","src":"3274:4:13","type":""},{"name":"value","nativeSrc":"3280:5:13","nodeType":"YulTypedName","src":"3280:5:13","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"3290:8:13","nodeType":"YulTypedName","src":"3290:8:13","type":""}],"src":"3236:117:13"},{"body":{"nativeSrc":"3410:118:13","nodeType":"YulBlock","src":"3410:118:13","statements":[{"nativeSrc":"3420:68:13","nodeType":"YulVariableDeclaration","src":"3420:68:13","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3469:1:13","nodeType":"YulLiteral","src":"3469:1:13","type":"","value":"8"},{"name":"bytes","nativeSrc":"3472:5:13","nodeType":"YulIdentifier","src":"3472:5:13"}],"functionName":{"name":"mul","nativeSrc":"3465:3:13","nodeType":"YulIdentifier","src":"3465:3:13"},"nativeSrc":"3465:13:13","nodeType":"YulFunctionCall","src":"3465:13:13"},{"arguments":[{"kind":"number","nativeSrc":"3484:1:13","nodeType":"YulLiteral","src":"3484:1:13","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"3480:3:13","nodeType":"YulIdentifier","src":"3480:3:13"},"nativeSrc":"3480:6:13","nodeType":"YulFunctionCall","src":"3480:6:13"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"3436:28:13","nodeType":"YulIdentifier","src":"3436:28:13"},"nativeSrc":"3436:51:13","nodeType":"YulFunctionCall","src":"3436:51:13"}],"functionName":{"name":"not","nativeSrc":"3432:3:13","nodeType":"YulIdentifier","src":"3432:3:13"},"nativeSrc":"3432:56:13","nodeType":"YulFunctionCall","src":"3432:56:13"},"variables":[{"name":"mask","nativeSrc":"3424:4:13","nodeType":"YulTypedName","src":"3424:4:13","type":""}]},{"nativeSrc":"3497:25:13","nodeType":"YulAssignment","src":"3497:25:13","value":{"arguments":[{"name":"data","nativeSrc":"3511:4:13","nodeType":"YulIdentifier","src":"3511:4:13"},{"name":"mask","nativeSrc":"3517:4:13","nodeType":"YulIdentifier","src":"3517:4:13"}],"functionName":{"name":"and","nativeSrc":"3507:3:13","nodeType":"YulIdentifier","src":"3507:3:13"},"nativeSrc":"3507:15:13","nodeType":"YulFunctionCall","src":"3507:15:13"},"variableNames":[{"name":"result","nativeSrc":"3497:6:13","nodeType":"YulIdentifier","src":"3497:6:13"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"3359:169:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3387:4:13","nodeType":"YulTypedName","src":"3387:4:13","type":""},{"name":"bytes","nativeSrc":"3393:5:13","nodeType":"YulTypedName","src":"3393:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"3403:6:13","nodeType":"YulTypedName","src":"3403:6:13","type":""}],"src":"3359:169:13"},{"body":{"nativeSrc":"3614:214:13","nodeType":"YulBlock","src":"3614:214:13","statements":[{"nativeSrc":"3747:37:13","nodeType":"YulAssignment","src":"3747:37:13","value":{"arguments":[{"name":"data","nativeSrc":"3774:4:13","nodeType":"YulIdentifier","src":"3774:4:13"},{"name":"len","nativeSrc":"3780:3:13","nodeType":"YulIdentifier","src":"3780:3:13"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"3755:18:13","nodeType":"YulIdentifier","src":"3755:18:13"},"nativeSrc":"3755:29:13","nodeType":"YulFunctionCall","src":"3755:29:13"},"variableNames":[{"name":"data","nativeSrc":"3747:4:13","nodeType":"YulIdentifier","src":"3747:4:13"}]},{"nativeSrc":"3793:29:13","nodeType":"YulAssignment","src":"3793:29:13","value":{"arguments":[{"name":"data","nativeSrc":"3804:4:13","nodeType":"YulIdentifier","src":"3804:4:13"},{"arguments":[{"kind":"number","nativeSrc":"3814:1:13","nodeType":"YulLiteral","src":"3814:1:13","type":"","value":"2"},{"name":"len","nativeSrc":"3817:3:13","nodeType":"YulIdentifier","src":"3817:3:13"}],"functionName":{"name":"mul","nativeSrc":"3810:3:13","nodeType":"YulIdentifier","src":"3810:3:13"},"nativeSrc":"3810:11:13","nodeType":"YulFunctionCall","src":"3810:11:13"}],"functionName":{"name":"or","nativeSrc":"3801:2:13","nodeType":"YulIdentifier","src":"3801:2:13"},"nativeSrc":"3801:21:13","nodeType":"YulFunctionCall","src":"3801:21:13"},"variableNames":[{"name":"used","nativeSrc":"3793:4:13","nodeType":"YulIdentifier","src":"3793:4:13"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3533:295:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3595:4:13","nodeType":"YulTypedName","src":"3595:4:13","type":""},{"name":"len","nativeSrc":"3601:3:13","nodeType":"YulTypedName","src":"3601:3:13","type":""}],"returnVariables":[{"name":"used","nativeSrc":"3609:4:13","nodeType":"YulTypedName","src":"3609:4:13","type":""}],"src":"3533:295:13"},{"body":{"nativeSrc":"3925:1303:13","nodeType":"YulBlock","src":"3925:1303:13","statements":[{"nativeSrc":"3936:51:13","nodeType":"YulVariableDeclaration","src":"3936:51:13","value":{"arguments":[{"name":"src","nativeSrc":"3983:3:13","nodeType":"YulIdentifier","src":"3983:3:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"3950:32:13","nodeType":"YulIdentifier","src":"3950:32:13"},"nativeSrc":"3950:37:13","nodeType":"YulFunctionCall","src":"3950:37:13"},"variables":[{"name":"newLen","nativeSrc":"3940:6:13","nodeType":"YulTypedName","src":"3940:6:13","type":""}]},{"body":{"nativeSrc":"4072:22:13","nodeType":"YulBlock","src":"4072:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4074:16:13","nodeType":"YulIdentifier","src":"4074:16:13"},"nativeSrc":"4074:18:13","nodeType":"YulFunctionCall","src":"4074:18:13"},"nativeSrc":"4074:18:13","nodeType":"YulExpressionStatement","src":"4074:18:13"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"4044:6:13","nodeType":"YulIdentifier","src":"4044:6:13"},{"kind":"number","nativeSrc":"4052:18:13","nodeType":"YulLiteral","src":"4052:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4041:2:13","nodeType":"YulIdentifier","src":"4041:2:13"},"nativeSrc":"4041:30:13","nodeType":"YulFunctionCall","src":"4041:30:13"},"nativeSrc":"4038:56:13","nodeType":"YulIf","src":"4038:56:13"},{"nativeSrc":"4104:52:13","nodeType":"YulVariableDeclaration","src":"4104:52:13","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"4150:4:13","nodeType":"YulIdentifier","src":"4150:4:13"}],"functionName":{"name":"sload","nativeSrc":"4144:5:13","nodeType":"YulIdentifier","src":"4144:5:13"},"nativeSrc":"4144:11:13","nodeType":"YulFunctionCall","src":"4144:11:13"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"4118:25:13","nodeType":"YulIdentifier","src":"4118:25:13"},"nativeSrc":"4118:38:13","nodeType":"YulFunctionCall","src":"4118:38:13"},"variables":[{"name":"oldLen","nativeSrc":"4108:6:13","nodeType":"YulTypedName","src":"4108:6:13","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4249:4:13","nodeType":"YulIdentifier","src":"4249:4:13"},{"name":"oldLen","nativeSrc":"4255:6:13","nodeType":"YulIdentifier","src":"4255:6:13"},{"name":"newLen","nativeSrc":"4263:6:13","nodeType":"YulIdentifier","src":"4263:6:13"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"4203:45:13","nodeType":"YulIdentifier","src":"4203:45:13"},"nativeSrc":"4203:67:13","nodeType":"YulFunctionCall","src":"4203:67:13"},"nativeSrc":"4203:67:13","nodeType":"YulExpressionStatement","src":"4203:67:13"},{"nativeSrc":"4280:18:13","nodeType":"YulVariableDeclaration","src":"4280:18:13","value":{"kind":"number","nativeSrc":"4297:1:13","nodeType":"YulLiteral","src":"4297:1:13","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"4284:9:13","nodeType":"YulTypedName","src":"4284:9:13","type":""}]},{"nativeSrc":"4308:17:13","nodeType":"YulAssignment","src":"4308:17:13","value":{"kind":"number","nativeSrc":"4321:4:13","nodeType":"YulLiteral","src":"4321:4:13","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"4308:9:13","nodeType":"YulIdentifier","src":"4308:9:13"}]},{"cases":[{"body":{"nativeSrc":"4372:611:13","nodeType":"YulBlock","src":"4372:611:13","statements":[{"nativeSrc":"4386:37:13","nodeType":"YulVariableDeclaration","src":"4386:37:13","value":{"arguments":[{"name":"newLen","nativeSrc":"4405:6:13","nodeType":"YulIdentifier","src":"4405:6:13"},{"arguments":[{"kind":"number","nativeSrc":"4417:4:13","nodeType":"YulLiteral","src":"4417:4:13","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"4413:3:13","nodeType":"YulIdentifier","src":"4413:3:13"},"nativeSrc":"4413:9:13","nodeType":"YulFunctionCall","src":"4413:9:13"}],"functionName":{"name":"and","nativeSrc":"4401:3:13","nodeType":"YulIdentifier","src":"4401:3:13"},"nativeSrc":"4401:22:13","nodeType":"YulFunctionCall","src":"4401:22:13"},"variables":[{"name":"loopEnd","nativeSrc":"4390:7:13","nodeType":"YulTypedName","src":"4390:7:13","type":""}]},{"nativeSrc":"4437:51:13","nodeType":"YulVariableDeclaration","src":"4437:51:13","value":{"arguments":[{"name":"slot","nativeSrc":"4483:4:13","nodeType":"YulIdentifier","src":"4483:4:13"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"4451:31:13","nodeType":"YulIdentifier","src":"4451:31:13"},"nativeSrc":"4451:37:13","nodeType":"YulFunctionCall","src":"4451:37:13"},"variables":[{"name":"dstPtr","nativeSrc":"4441:6:13","nodeType":"YulTypedName","src":"4441:6:13","type":""}]},{"nativeSrc":"4501:10:13","nodeType":"YulVariableDeclaration","src":"4501:10:13","value":{"kind":"number","nativeSrc":"4510:1:13","nodeType":"YulLiteral","src":"4510:1:13","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4505:1:13","nodeType":"YulTypedName","src":"4505:1:13","type":""}]},{"body":{"nativeSrc":"4569:163:13","nodeType":"YulBlock","src":"4569:163:13","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4594:6:13","nodeType":"YulIdentifier","src":"4594:6:13"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4612:3:13","nodeType":"YulIdentifier","src":"4612:3:13"},{"name":"srcOffset","nativeSrc":"4617:9:13","nodeType":"YulIdentifier","src":"4617:9:13"}],"functionName":{"name":"add","nativeSrc":"4608:3:13","nodeType":"YulIdentifier","src":"4608:3:13"},"nativeSrc":"4608:19:13","nodeType":"YulFunctionCall","src":"4608:19:13"}],"functionName":{"name":"mload","nativeSrc":"4602:5:13","nodeType":"YulIdentifier","src":"4602:5:13"},"nativeSrc":"4602:26:13","nodeType":"YulFunctionCall","src":"4602:26:13"}],"functionName":{"name":"sstore","nativeSrc":"4587:6:13","nodeType":"YulIdentifier","src":"4587:6:13"},"nativeSrc":"4587:42:13","nodeType":"YulFunctionCall","src":"4587:42:13"},"nativeSrc":"4587:42:13","nodeType":"YulExpressionStatement","src":"4587:42:13"},{"nativeSrc":"4646:24:13","nodeType":"YulAssignment","src":"4646:24:13","value":{"arguments":[{"name":"dstPtr","nativeSrc":"4660:6:13","nodeType":"YulIdentifier","src":"4660:6:13"},{"kind":"number","nativeSrc":"4668:1:13","nodeType":"YulLiteral","src":"4668:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4656:3:13","nodeType":"YulIdentifier","src":"4656:3:13"},"nativeSrc":"4656:14:13","nodeType":"YulFunctionCall","src":"4656:14:13"},"variableNames":[{"name":"dstPtr","nativeSrc":"4646:6:13","nodeType":"YulIdentifier","src":"4646:6:13"}]},{"nativeSrc":"4687:31:13","nodeType":"YulAssignment","src":"4687:31:13","value":{"arguments":[{"name":"srcOffset","nativeSrc":"4704:9:13","nodeType":"YulIdentifier","src":"4704:9:13"},{"kind":"number","nativeSrc":"4715:2:13","nodeType":"YulLiteral","src":"4715:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4700:3:13","nodeType":"YulIdentifier","src":"4700:3:13"},"nativeSrc":"4700:18:13","nodeType":"YulFunctionCall","src":"4700:18:13"},"variableNames":[{"name":"srcOffset","nativeSrc":"4687:9:13","nodeType":"YulIdentifier","src":"4687:9:13"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4535:1:13","nodeType":"YulIdentifier","src":"4535:1:13"},{"name":"loopEnd","nativeSrc":"4538:7:13","nodeType":"YulIdentifier","src":"4538:7:13"}],"functionName":{"name":"lt","nativeSrc":"4532:2:13","nodeType":"YulIdentifier","src":"4532:2:13"},"nativeSrc":"4532:14:13","nodeType":"YulFunctionCall","src":"4532:14:13"},"nativeSrc":"4524:208:13","nodeType":"YulForLoop","post":{"nativeSrc":"4547:21:13","nodeType":"YulBlock","src":"4547:21:13","statements":[{"nativeSrc":"4549:17:13","nodeType":"YulAssignment","src":"4549:17:13","value":{"arguments":[{"name":"i","nativeSrc":"4558:1:13","nodeType":"YulIdentifier","src":"4558:1:13"},{"kind":"number","nativeSrc":"4561:4:13","nodeType":"YulLiteral","src":"4561:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4554:3:13","nodeType":"YulIdentifier","src":"4554:3:13"},"nativeSrc":"4554:12:13","nodeType":"YulFunctionCall","src":"4554:12:13"},"variableNames":[{"name":"i","nativeSrc":"4549:1:13","nodeType":"YulIdentifier","src":"4549:1:13"}]}]},"pre":{"nativeSrc":"4528:3:13","nodeType":"YulBlock","src":"4528:3:13","statements":[]},"src":"4524:208:13"},{"body":{"nativeSrc":"4768:156:13","nodeType":"YulBlock","src":"4768:156:13","statements":[{"nativeSrc":"4786:43:13","nodeType":"YulVariableDeclaration","src":"4786:43:13","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4813:3:13","nodeType":"YulIdentifier","src":"4813:3:13"},{"name":"srcOffset","nativeSrc":"4818:9:13","nodeType":"YulIdentifier","src":"4818:9:13"}],"functionName":{"name":"add","nativeSrc":"4809:3:13","nodeType":"YulIdentifier","src":"4809:3:13"},"nativeSrc":"4809:19:13","nodeType":"YulFunctionCall","src":"4809:19:13"}],"functionName":{"name":"mload","nativeSrc":"4803:5:13","nodeType":"YulIdentifier","src":"4803:5:13"},"nativeSrc":"4803:26:13","nodeType":"YulFunctionCall","src":"4803:26:13"},"variables":[{"name":"lastValue","nativeSrc":"4790:9:13","nodeType":"YulTypedName","src":"4790:9:13","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4853:6:13","nodeType":"YulIdentifier","src":"4853:6:13"},{"arguments":[{"name":"lastValue","nativeSrc":"4880:9:13","nodeType":"YulIdentifier","src":"4880:9:13"},{"arguments":[{"name":"newLen","nativeSrc":"4895:6:13","nodeType":"YulIdentifier","src":"4895:6:13"},{"kind":"number","nativeSrc":"4903:4:13","nodeType":"YulLiteral","src":"4903:4:13","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"4891:3:13","nodeType":"YulIdentifier","src":"4891:3:13"},"nativeSrc":"4891:17:13","nodeType":"YulFunctionCall","src":"4891:17:13"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"4861:18:13","nodeType":"YulIdentifier","src":"4861:18:13"},"nativeSrc":"4861:48:13","nodeType":"YulFunctionCall","src":"4861:48:13"}],"functionName":{"name":"sstore","nativeSrc":"4846:6:13","nodeType":"YulIdentifier","src":"4846:6:13"},"nativeSrc":"4846:64:13","nodeType":"YulFunctionCall","src":"4846:64:13"},"nativeSrc":"4846:64:13","nodeType":"YulExpressionStatement","src":"4846:64:13"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"4751:7:13","nodeType":"YulIdentifier","src":"4751:7:13"},{"name":"newLen","nativeSrc":"4760:6:13","nodeType":"YulIdentifier","src":"4760:6:13"}],"functionName":{"name":"lt","nativeSrc":"4748:2:13","nodeType":"YulIdentifier","src":"4748:2:13"},"nativeSrc":"4748:19:13","nodeType":"YulFunctionCall","src":"4748:19:13"},"nativeSrc":"4745:179:13","nodeType":"YulIf","src":"4745:179:13"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4944:4:13","nodeType":"YulIdentifier","src":"4944:4:13"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"4958:6:13","nodeType":"YulIdentifier","src":"4958:6:13"},{"kind":"number","nativeSrc":"4966:1:13","nodeType":"YulLiteral","src":"4966:1:13","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"4954:3:13","nodeType":"YulIdentifier","src":"4954:3:13"},"nativeSrc":"4954:14:13","nodeType":"YulFunctionCall","src":"4954:14:13"},{"kind":"number","nativeSrc":"4970:1:13","nodeType":"YulLiteral","src":"4970:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4950:3:13","nodeType":"YulIdentifier","src":"4950:3:13"},"nativeSrc":"4950:22:13","nodeType":"YulFunctionCall","src":"4950:22:13"}],"functionName":{"name":"sstore","nativeSrc":"4937:6:13","nodeType":"YulIdentifier","src":"4937:6:13"},"nativeSrc":"4937:36:13","nodeType":"YulFunctionCall","src":"4937:36:13"},"nativeSrc":"4937:36:13","nodeType":"YulExpressionStatement","src":"4937:36:13"}]},"nativeSrc":"4365:618:13","nodeType":"YulCase","src":"4365:618:13","value":{"kind":"number","nativeSrc":"4370:1:13","nodeType":"YulLiteral","src":"4370:1:13","type":"","value":"1"}},{"body":{"nativeSrc":"5000:222:13","nodeType":"YulBlock","src":"5000:222:13","statements":[{"nativeSrc":"5014:14:13","nodeType":"YulVariableDeclaration","src":"5014:14:13","value":{"kind":"number","nativeSrc":"5027:1:13","nodeType":"YulLiteral","src":"5027:1:13","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"5018:5:13","nodeType":"YulTypedName","src":"5018:5:13","type":""}]},{"body":{"nativeSrc":"5051:67:13","nodeType":"YulBlock","src":"5051:67:13","statements":[{"nativeSrc":"5069:35:13","nodeType":"YulAssignment","src":"5069:35:13","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"5088:3:13","nodeType":"YulIdentifier","src":"5088:3:13"},{"name":"srcOffset","nativeSrc":"5093:9:13","nodeType":"YulIdentifier","src":"5093:9:13"}],"functionName":{"name":"add","nativeSrc":"5084:3:13","nodeType":"YulIdentifier","src":"5084:3:13"},"nativeSrc":"5084:19:13","nodeType":"YulFunctionCall","src":"5084:19:13"}],"functionName":{"name":"mload","nativeSrc":"5078:5:13","nodeType":"YulIdentifier","src":"5078:5:13"},"nativeSrc":"5078:26:13","nodeType":"YulFunctionCall","src":"5078:26:13"},"variableNames":[{"name":"value","nativeSrc":"5069:5:13","nodeType":"YulIdentifier","src":"5069:5:13"}]}]},"condition":{"name":"newLen","nativeSrc":"5044:6:13","nodeType":"YulIdentifier","src":"5044:6:13"},"nativeSrc":"5041:77:13","nodeType":"YulIf","src":"5041:77:13"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5138:4:13","nodeType":"YulIdentifier","src":"5138:4:13"},{"arguments":[{"name":"value","nativeSrc":"5197:5:13","nodeType":"YulIdentifier","src":"5197:5:13"},{"name":"newLen","nativeSrc":"5204:6:13","nodeType":"YulIdentifier","src":"5204:6:13"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"5144:52:13","nodeType":"YulIdentifier","src":"5144:52:13"},"nativeSrc":"5144:67:13","nodeType":"YulFunctionCall","src":"5144:67:13"}],"functionName":{"name":"sstore","nativeSrc":"5131:6:13","nodeType":"YulIdentifier","src":"5131:6:13"},"nativeSrc":"5131:81:13","nodeType":"YulFunctionCall","src":"5131:81:13"},"nativeSrc":"5131:81:13","nodeType":"YulExpressionStatement","src":"5131:81:13"}]},"nativeSrc":"4992:230:13","nodeType":"YulCase","src":"4992:230:13","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"4345:6:13","nodeType":"YulIdentifier","src":"4345:6:13"},{"kind":"number","nativeSrc":"4353:2:13","nodeType":"YulLiteral","src":"4353:2:13","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"4342:2:13","nodeType":"YulIdentifier","src":"4342:2:13"},"nativeSrc":"4342:14:13","nodeType":"YulFunctionCall","src":"4342:14:13"},"nativeSrc":"4335:887:13","nodeType":"YulSwitch","src":"4335:887:13"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"3833:1395:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3914:4:13","nodeType":"YulTypedName","src":"3914:4:13","type":""},{"name":"src","nativeSrc":"3920:3:13","nodeType":"YulTypedName","src":"3920:3:13","type":""}],"src":"3833:1395:13"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4F7665726D696E74310000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4154000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x2F4 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x9C SWAP2 SWAP1 PUSH2 0x2F4 JUMP JUMPDEST POP POP POP PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x125 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x138 JUMPI PUSH2 0x137 PUSH2 0xDE JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x1A0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x163 JUMP JUMPDEST PUSH2 0x1AA DUP7 DUP4 PUSH2 0x163 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F1 PUSH2 0x1EC PUSH2 0x1E7 DUP5 PUSH2 0x1C2 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST PUSH2 0x1C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20B DUP4 PUSH2 0x1D6 JUMP JUMPDEST PUSH2 0x21F PUSH2 0x217 DUP3 PUSH2 0x1F8 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x170 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x227 JUMP JUMPDEST PUSH2 0x23F DUP2 DUP5 DUP5 PUSH2 0x202 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x263 JUMPI PUSH2 0x258 PUSH1 0x0 DUP3 PUSH2 0x22C JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x245 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2A8 JUMPI PUSH2 0x279 DUP2 PUSH2 0x13E JUMP JUMPDEST PUSH2 0x282 DUP5 PUSH2 0x153 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x291 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x2A5 PUSH2 0x29D DUP6 PUSH2 0x153 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x244 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2AD JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E4 DUP4 DUP4 PUSH2 0x2BA JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2FD DUP3 PUSH2 0xA4 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x316 JUMPI PUSH2 0x315 PUSH2 0xAF JUMP JUMPDEST JUMPDEST PUSH2 0x320 DUP3 SLOAD PUSH2 0x10D JUMP JUMPDEST PUSH2 0x32B DUP3 DUP3 DUP6 PUSH2 0x267 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x35E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x34C JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x356 DUP6 DUP3 PUSH2 0x2D8 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3BE JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x36C DUP7 PUSH2 0x13E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x394 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x36F JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3B1 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3AD PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2BA JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2766 DUP1 PUSH2 0x3D5 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42842E0E GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x350 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x438A67E7 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x29A JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1249C58B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x26E4BAAE EQ PUSH2 0x1EE JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x380 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH2 0x462 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x1B7F JUMP JUMPDEST PUSH2 0x53A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x651 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BC PUSH2 0x74F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x755 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x208 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH2 0x7B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x215 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x238 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x233 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x7CA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x254 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24F SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH2 0x7EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x261 SWAP2 SWAP1 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x284 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27F SWAP2 SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x802 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D2 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x302 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FD SWAP2 SWAP1 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x9D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x365 SWAP2 SWAP1 PUSH2 0x1E8D JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x44B JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x45B JUMPI POP PUSH2 0x45A DUP3 PUSH2 0xB45 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x471 SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x49D SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4BF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4EA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4CD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FF DUP3 PUSH2 0xBAF JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x545 DUP3 PUSH2 0x802 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AC SWAP1 PUSH2 0x1F9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5D4 PUSH2 0xBFA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x603 JUMPI POP PUSH2 0x602 DUP2 PUSH2 0x5FD PUSH2 0xBFA JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST JUMPDEST PUSH2 0x642 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x639 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x64C DUP4 DUP4 PUSH2 0xC02 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6CB SWAP1 PUSH2 0x209D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x6E7 SWAP1 PUSH2 0x20EC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x6F8 CALLER PUSH1 0x7 SLOAD PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x748 SWAP1 PUSH2 0x20EC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x766 PUSH2 0x760 PUSH2 0xBFA JUMP JUMPDEST DUP3 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x7A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C SWAP1 PUSH2 0x21A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7B0 DUP4 DUP4 DUP4 PUSH2 0xD6E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH2 0x7C2 DUP4 PUSH2 0x888 JUMP JUMPDEST EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E5 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x80E DUP4 PUSH2 0x1067 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x876 SWAP1 PUSH2 0x2212 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8EF SWAP1 PUSH2 0x22A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x94E SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x97A SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x99C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9E3 PUSH2 0x9DC PUSH2 0xBFA JUMP JUMPDEST DUP4 DUP4 PUSH2 0x10A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9F8 PUSH2 0x9F2 PUSH2 0xBFA JUMP JUMPDEST DUP4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0xA37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2E SWAP1 PUSH2 0x21A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA43 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1210 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA54 DUP3 PUSH2 0xBAF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5E PUSH2 0x126C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAA9 JUMP JUMPDEST DUP1 PUSH2 0xA88 DUP5 PUSH2 0x1283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA99 SWAP3 SWAP2 SWAP1 PUSH2 0x2300 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB8 DUP2 PUSH2 0x1351 JUMP JUMPDEST PUSH2 0xBF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBEE SWAP1 PUSH2 0x2212 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC75 DUP4 PUSH2 0x802 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xCD5 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1392 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCE5 DUP4 PUSH2 0x802 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xD27 JUMPI POP PUSH2 0xD26 DUP2 DUP6 PUSH2 0xAB1 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xD65 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD4D DUP5 PUSH2 0x4F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD8E DUP3 PUSH2 0x802 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDDB SWAP1 PUSH2 0x2396 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE4A SWAP1 PUSH2 0x2428 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE60 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13ED JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE80 DUP3 PUSH2 0x802 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xED6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xECD SWAP1 PUSH2 0x2396 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1062 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1112 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1109 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1203 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x121B DUP5 DUP5 DUP5 PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x1227 DUP5 DUP5 DUP5 DUP5 PUSH2 0x13F9 JUMP JUMPDEST PUSH2 0x1266 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x125D SWAP1 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1292 DUP5 PUSH2 0x1580 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12B1 JUMPI PUSH2 0x12B0 PUSH2 0x1CDF JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12E3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1346 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x133A JUMPI PUSH2 0x1339 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x12F1 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1373 DUP4 PUSH2 0x1067 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x139C DUP4 DUP4 PUSH2 0x16D3 JUMP JUMPDEST PUSH2 0x13A9 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x13F9 JUMP JUMPDEST PUSH2 0x13E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13DF SWAP1 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x141A DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18F0 JUMP JUMPDEST ISZERO PUSH2 0x1573 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1443 PUSH2 0xBFA JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1465 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14A1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x149E SWAP2 SWAP1 PUSH2 0x262B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1523 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14D1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14D6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x151B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1512 SWAP1 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x15DE JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x15D4 JUMPI PUSH2 0x15D3 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x161B JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1611 JUMPI PUSH2 0x1610 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x164A JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1640 JUMPI PUSH2 0x163F PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1673 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1669 JUMPI PUSH2 0x1668 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1698 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x168E JUMPI PUSH2 0x168D PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x16BB JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x16B1 JUMPI PUSH2 0x16B0 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x16CA JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1742 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1739 SWAP1 PUSH2 0x26A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x174B DUP2 PUSH2 0x1351 JUMP JUMPDEST ISZERO PUSH2 0x178B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1782 SWAP1 PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1799 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13ED JUMP JUMPDEST PUSH2 0x17A2 DUP2 PUSH2 0x1351 JUMP JUMPDEST ISZERO PUSH2 0x17E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D9 SWAP1 PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x18EC PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13F3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x195C DUP2 PUSH2 0x1927 JUMP JUMPDEST DUP2 EQ PUSH2 0x1967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1979 DUP2 PUSH2 0x1953 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1995 JUMPI PUSH2 0x1994 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A3 DUP5 DUP3 DUP6 ADD PUSH2 0x196A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19C1 DUP2 PUSH2 0x19AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x19DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A1C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 DUP3 PUSH2 0x19E2 JUMP JUMPDEST PUSH2 0x1A4E DUP2 DUP6 PUSH2 0x19ED JUMP JUMPDEST SWAP4 POP PUSH2 0x1A5E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19FE JUMP JUMPDEST PUSH2 0x1A67 DUP2 PUSH2 0x1A28 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A8C DUP2 DUP5 PUSH2 0x1A39 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA7 DUP2 PUSH2 0x1A94 JUMP JUMPDEST DUP2 EQ PUSH2 0x1AB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AC4 DUP2 PUSH2 0x1A9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AE0 JUMPI PUSH2 0x1ADF PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AEE DUP5 DUP3 DUP6 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B22 DUP3 PUSH2 0x1AF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B32 DUP2 PUSH2 0x1B17 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B4D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1B29 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B5C DUP2 PUSH2 0x1B17 JUMP JUMPDEST DUP2 EQ PUSH2 0x1B67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B79 DUP2 PUSH2 0x1B53 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B96 JUMPI PUSH2 0x1B95 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA4 DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1BB5 DUP6 DUP3 DUP7 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC8 DUP2 PUSH2 0x1A94 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BE3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BBF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C02 JUMPI PUSH2 0x1C01 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C10 DUP7 DUP3 DUP8 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C21 DUP7 DUP3 DUP8 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C32 DUP7 DUP3 DUP8 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C52 JUMPI PUSH2 0x1C51 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C60 DUP5 DUP3 DUP6 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C72 DUP2 PUSH2 0x19AC JUMP JUMPDEST DUP2 EQ PUSH2 0x1C7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C8F DUP2 PUSH2 0x1C69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CAC JUMPI PUSH2 0x1CAB PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CBA DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1CCB DUP6 DUP3 DUP7 ADD PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1D17 DUP3 PUSH2 0x1A28 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1D36 JUMPI PUSH2 0x1D35 PUSH2 0x1CDF JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D49 PUSH2 0x1913 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D55 DUP3 DUP3 PUSH2 0x1D0E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D75 JUMPI PUSH2 0x1D74 PUSH2 0x1CDF JUMP JUMPDEST JUMPDEST PUSH2 0x1D7E DUP3 PUSH2 0x1A28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAD PUSH2 0x1DA8 DUP5 PUSH2 0x1D5A JUMP JUMPDEST PUSH2 0x1D3F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1DC9 JUMPI PUSH2 0x1DC8 PUSH2 0x1CDA JUMP JUMPDEST JUMPDEST PUSH2 0x1DD4 DUP5 DUP3 DUP6 PUSH2 0x1D8B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DF1 JUMPI PUSH2 0x1DF0 PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E01 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D9A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E24 JUMPI PUSH2 0x1E23 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E32 DUP8 DUP3 DUP9 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1E43 DUP8 DUP3 DUP9 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1E54 DUP8 DUP3 DUP9 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E74 PUSH2 0x1922 JUMP JUMPDEST JUMPDEST PUSH2 0x1E81 DUP8 DUP3 DUP9 ADD PUSH2 0x1DDC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EA4 JUMPI PUSH2 0x1EA3 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1EB2 DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1EC3 DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1F14 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F27 JUMPI PUSH2 0x1F26 PUSH2 0x1ECD JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F89 PUSH1 0x21 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x1F94 DUP3 PUSH2 0x1F2D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FB8 DUP2 PUSH2 0x1F7C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x201B PUSH1 0x3D DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2026 DUP3 PUSH2 0x1FBF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204A DUP2 PUSH2 0x200E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6D61782033204E46547300000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2087 PUSH1 0xA DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2092 DUP3 PUSH2 0x2051 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20B6 DUP2 PUSH2 0x207A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x20F7 DUP3 PUSH2 0x1A94 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2129 JUMPI PUSH2 0x2128 PUSH2 0x20BD JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2190 PUSH1 0x2D DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x219B DUP3 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21BF DUP2 PUSH2 0x2183 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21FC PUSH1 0x18 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2207 DUP3 PUSH2 0x21C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x222B DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x228E PUSH1 0x29 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2299 DUP3 PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22BD DUP2 PUSH2 0x2281 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22DA DUP3 PUSH2 0x19E2 JUMP JUMPDEST PUSH2 0x22E4 DUP2 DUP6 PUSH2 0x22C4 JUMP JUMPDEST SWAP4 POP PUSH2 0x22F4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19FE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230C DUP3 DUP6 PUSH2 0x22CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2318 DUP3 DUP5 PUSH2 0x22CF JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2380 PUSH1 0x25 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x238B DUP3 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23AF DUP2 PUSH2 0x2373 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2412 PUSH1 0x24 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x241D DUP3 PUSH2 0x23B6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2441 DUP2 PUSH2 0x2405 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x247E PUSH1 0x19 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2489 DUP3 PUSH2 0x2448 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24AD DUP2 PUSH2 0x2471 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2510 PUSH1 0x32 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x251B DUP3 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x253F DUP2 PUSH2 0x2503 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x259C DUP3 PUSH2 0x2575 JUMP JUMPDEST PUSH2 0x25A6 DUP2 DUP6 PUSH2 0x2580 JUMP JUMPDEST SWAP4 POP PUSH2 0x25B6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19FE JUMP JUMPDEST PUSH2 0x25BF DUP2 PUSH2 0x1A28 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x25DF PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1B29 JUMP JUMPDEST PUSH2 0x25EC PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1B29 JUMP JUMPDEST PUSH2 0x25F9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BBF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x260B DUP2 DUP5 PUSH2 0x2591 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2625 DUP2 PUSH2 0x1953 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2641 JUMPI PUSH2 0x2640 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x264F DUP5 DUP3 DUP6 ADD PUSH2 0x2616 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x268E PUSH1 0x20 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2699 DUP3 PUSH2 0x2658 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26BD DUP2 PUSH2 0x2681 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26FA PUSH1 0x1C DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2705 DUP3 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2729 DUP2 PUSH2 0x26ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0x21 SWAP4 0x28 SHL 0xED 0xB2 LOG0 0xE3 0xB2 SWAP1 PUSH30 0x249AB48377817ABBB9A4BCDFDE9E2EB9DE8BE3E664736F6C634300081B00 CALLER ","sourceMap":"172:519:12:-:0;;;324:42;;;;;;;;;;1390:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;172:519:12;;7:99:13;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;172:519:12:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_913":{"entryPoint":5107,"id":913,"parameterSlots":4,"returnSlots":0},"@_approve_779":{"entryPoint":3074,"id":779,"parameterSlots":2,"returnSlots":0},"@_baseURI_216":{"entryPoint":4716,"id":216,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_900":{"entryPoint":5101,"id":900,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_887":{"entryPoint":5113,"id":887,"parameterSlots":4,"returnSlots":1},"@_exists_448":{"entryPoint":4945,"id":448,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_482":{"entryPoint":3289,"id":482,"parameterSlots":2,"returnSlots":1},"@_mint_603":{"entryPoint":5843,"id":603,"parameterSlots":2,"returnSlots":0},"@_msgSender_1432":{"entryPoint":3066,"id":1432,"parameterSlots":0,"returnSlots":1},"@_ownerOf_430":{"entryPoint":4199,"id":430,"parameterSlots":1,"returnSlots":1},"@_requireMinted_825":{"entryPoint":2991,"id":825,"parameterSlots":1,"returnSlots":0},"@_safeMint_497":{"entryPoint":3259,"id":497,"parameterSlots":2,"returnSlots":0},"@_safeMint_526":{"entryPoint":5010,"id":526,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_417":{"entryPoint":4624,"id":417,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_811":{"entryPoint":4260,"id":811,"parameterSlots":3,"returnSlots":0},"@_transfer_755":{"entryPoint":3438,"id":755,"parameterSlots":3,"returnSlots":0},"@amountMinted_2573":{"entryPoint":2026,"id":2573,"parameterSlots":0,"returnSlots":0},"@approve_259":{"entryPoint":1338,"id":259,"parameterSlots":2,"returnSlots":0},"@balanceOf_120":{"entryPoint":2184,"id":120,"parameterSlots":1,"returnSlots":1},"@getApproved_277":{"entryPoint":1268,"id":277,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_312":{"entryPoint":2737,"id":312,"parameterSlots":2,"returnSlots":1},"@isContract_1108":{"entryPoint":6384,"id":1108,"parameterSlots":1,"returnSlots":1},"@log10_2355":{"entryPoint":5504,"id":2355,"parameterSlots":1,"returnSlots":1},"@mint_2612":{"entryPoint":1617,"id":2612,"parameterSlots":0,"returnSlots":0},"@name_158":{"entryPoint":1122,"id":158,"parameterSlots":0,"returnSlots":1},"@ownerOf_148":{"entryPoint":2050,"id":148,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_358":{"entryPoint":1994,"id":358,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_388":{"entryPoint":2535,"id":388,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_294":{"entryPoint":2513,"id":294,"parameterSlots":2,"returnSlots":0},"@success_2626":{"entryPoint":1973,"id":2626,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1640":{"entryPoint":2885,"id":1640,"parameterSlots":1,"returnSlots":1},"@supportsInterface_96":{"entryPoint":896,"id":96,"parameterSlots":1,"returnSlots":1},"@symbol_168":{"entryPoint":2367,"id":168,"parameterSlots":0,"returnSlots":1},"@toString_1500":{"entryPoint":4739,"id":1500,"parameterSlots":1,"returnSlots":1},"@tokenURI_207":{"entryPoint":2633,"id":207,"parameterSlots":1,"returnSlots":1},"@totalSupply_2575":{"entryPoint":1871,"id":2575,"parameterSlots":0,"returnSlots":0},"@transferFrom_339":{"entryPoint":1877,"id":339,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":7578,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":7018,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":7296,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":6506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":9750,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":7644,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":6837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7228,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":7821,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7145,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7690,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7317,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7039,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6858,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6953,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6584,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":9617,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6713,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8911,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":8579,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":9475,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":9075,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":9965,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d_to_t_string_memory_ptr_fromStack":{"entryPoint":8314,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":9221,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":9329,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":8833,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":9857,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":8687,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":8060,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":8206,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":7103,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8960,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9674,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":6599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6770,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8614,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9510,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9110,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10000,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8349,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9256,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9364,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8868,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9892,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8722,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8095,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8241,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7118,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7487,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":6419,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7514,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":9589,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":6626,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":9600,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6637,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8900,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6935,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":6572,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":6439,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6903,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":6804,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":7563,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":6654,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7932,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7438,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":8428,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":8381,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9542,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":7885,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7391,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":7381,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":7386,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":6434,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":6429,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":6696,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":8500,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":9396,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":8996,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":9924,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d":{"entryPoint":8273,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":9142,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":9288,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":8754,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":9816,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":8646,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":7981,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":8127,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":6995,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7273,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":6483,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":6814,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:26508:13","nodeType":"YulBlock","src":"0:26508:13","statements":[{"body":{"nativeSrc":"47:35:13","nodeType":"YulBlock","src":"47:35:13","statements":[{"nativeSrc":"57:19:13","nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:13","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:13","nodeType":"YulIdentifier","src":"67:5:13"},"nativeSrc":"67:9:13","nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:13","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:13","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:13","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nativeSrc":"177:28:13","nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:13","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:13","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:13","nodeType":"YulIdentifier","src":"187:6:13"},"nativeSrc":"187:12:13","nodeType":"YulFunctionCall","src":"187:12:13"},"nativeSrc":"187:12:13","nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:13","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nativeSrc":"300:28:13","nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:13","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:13","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:13","nodeType":"YulIdentifier","src":"310:6:13"},"nativeSrc":"310:12:13","nodeType":"YulFunctionCall","src":"310:12:13"},"nativeSrc":"310:12:13","nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:13","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nativeSrc":"378:105:13","nodeType":"YulBlock","src":"378:105:13","statements":[{"nativeSrc":"388:89:13","nodeType":"YulAssignment","src":"388:89:13","value":{"arguments":[{"name":"value","nativeSrc":"403:5:13","nodeType":"YulIdentifier","src":"403:5:13"},{"kind":"number","nativeSrc":"410:66:13","nodeType":"YulLiteral","src":"410:66:13","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:13","nodeType":"YulIdentifier","src":"399:3:13"},"nativeSrc":"399:78:13","nodeType":"YulFunctionCall","src":"399:78:13"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:13","nodeType":"YulIdentifier","src":"388:7:13"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:13","nodeType":"YulTypedName","src":"360:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:13","nodeType":"YulTypedName","src":"370:7:13","type":""}],"src":"334:149:13"},{"body":{"nativeSrc":"531:78:13","nodeType":"YulBlock","src":"531:78:13","statements":[{"body":{"nativeSrc":"587:16:13","nodeType":"YulBlock","src":"587:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:13","nodeType":"YulLiteral","src":"596:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:13","nodeType":"YulLiteral","src":"599:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:13","nodeType":"YulIdentifier","src":"589:6:13"},"nativeSrc":"589:12:13","nodeType":"YulFunctionCall","src":"589:12:13"},"nativeSrc":"589:12:13","nodeType":"YulExpressionStatement","src":"589:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:13","nodeType":"YulIdentifier","src":"554:5:13"},{"arguments":[{"name":"value","nativeSrc":"578:5:13","nodeType":"YulIdentifier","src":"578:5:13"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:13","nodeType":"YulIdentifier","src":"561:16:13"},"nativeSrc":"561:23:13","nodeType":"YulFunctionCall","src":"561:23:13"}],"functionName":{"name":"eq","nativeSrc":"551:2:13","nodeType":"YulIdentifier","src":"551:2:13"},"nativeSrc":"551:34:13","nodeType":"YulFunctionCall","src":"551:34:13"}],"functionName":{"name":"iszero","nativeSrc":"544:6:13","nodeType":"YulIdentifier","src":"544:6:13"},"nativeSrc":"544:42:13","nodeType":"YulFunctionCall","src":"544:42:13"},"nativeSrc":"541:62:13","nodeType":"YulIf","src":"541:62:13"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:13","nodeType":"YulTypedName","src":"524:5:13","type":""}],"src":"489:120:13"},{"body":{"nativeSrc":"666:86:13","nodeType":"YulBlock","src":"666:86:13","statements":[{"nativeSrc":"676:29:13","nodeType":"YulAssignment","src":"676:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:13","nodeType":"YulIdentifier","src":"698:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:13","nodeType":"YulIdentifier","src":"685:12:13"},"nativeSrc":"685:20:13","nodeType":"YulFunctionCall","src":"685:20:13"},"variableNames":[{"name":"value","nativeSrc":"676:5:13","nodeType":"YulIdentifier","src":"676:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:13","nodeType":"YulIdentifier","src":"740:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:13","nodeType":"YulIdentifier","src":"714:25:13"},"nativeSrc":"714:32:13","nodeType":"YulFunctionCall","src":"714:32:13"},"nativeSrc":"714:32:13","nodeType":"YulExpressionStatement","src":"714:32:13"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:13","nodeType":"YulTypedName","src":"644:6:13","type":""},{"name":"end","nativeSrc":"652:3:13","nodeType":"YulTypedName","src":"652:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:13","nodeType":"YulTypedName","src":"660:5:13","type":""}],"src":"615:137:13"},{"body":{"nativeSrc":"823:262:13","nodeType":"YulBlock","src":"823:262:13","statements":[{"body":{"nativeSrc":"869:83:13","nodeType":"YulBlock","src":"869:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:13","nodeType":"YulIdentifier","src":"871:77:13"},"nativeSrc":"871:79:13","nodeType":"YulFunctionCall","src":"871:79:13"},"nativeSrc":"871:79:13","nodeType":"YulExpressionStatement","src":"871:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:13","nodeType":"YulIdentifier","src":"844:7:13"},{"name":"headStart","nativeSrc":"853:9:13","nodeType":"YulIdentifier","src":"853:9:13"}],"functionName":{"name":"sub","nativeSrc":"840:3:13","nodeType":"YulIdentifier","src":"840:3:13"},"nativeSrc":"840:23:13","nodeType":"YulFunctionCall","src":"840:23:13"},{"kind":"number","nativeSrc":"865:2:13","nodeType":"YulLiteral","src":"865:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:13","nodeType":"YulIdentifier","src":"836:3:13"},"nativeSrc":"836:32:13","nodeType":"YulFunctionCall","src":"836:32:13"},"nativeSrc":"833:119:13","nodeType":"YulIf","src":"833:119:13"},{"nativeSrc":"962:116:13","nodeType":"YulBlock","src":"962:116:13","statements":[{"nativeSrc":"977:15:13","nodeType":"YulVariableDeclaration","src":"977:15:13","value":{"kind":"number","nativeSrc":"991:1:13","nodeType":"YulLiteral","src":"991:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:13","nodeType":"YulTypedName","src":"981:6:13","type":""}]},{"nativeSrc":"1006:62:13","nodeType":"YulAssignment","src":"1006:62:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:13","nodeType":"YulIdentifier","src":"1040:9:13"},{"name":"offset","nativeSrc":"1051:6:13","nodeType":"YulIdentifier","src":"1051:6:13"}],"functionName":{"name":"add","nativeSrc":"1036:3:13","nodeType":"YulIdentifier","src":"1036:3:13"},"nativeSrc":"1036:22:13","nodeType":"YulFunctionCall","src":"1036:22:13"},{"name":"dataEnd","nativeSrc":"1060:7:13","nodeType":"YulIdentifier","src":"1060:7:13"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:13","nodeType":"YulIdentifier","src":"1016:19:13"},"nativeSrc":"1016:52:13","nodeType":"YulFunctionCall","src":"1016:52:13"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:13","nodeType":"YulIdentifier","src":"1006:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:13","nodeType":"YulTypedName","src":"793:9:13","type":""},{"name":"dataEnd","nativeSrc":"804:7:13","nodeType":"YulTypedName","src":"804:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:13","nodeType":"YulTypedName","src":"816:6:13","type":""}],"src":"758:327:13"},{"body":{"nativeSrc":"1133:48:13","nodeType":"YulBlock","src":"1133:48:13","statements":[{"nativeSrc":"1143:32:13","nodeType":"YulAssignment","src":"1143:32:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:13","nodeType":"YulIdentifier","src":"1168:5:13"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:13","nodeType":"YulIdentifier","src":"1161:6:13"},"nativeSrc":"1161:13:13","nodeType":"YulFunctionCall","src":"1161:13:13"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:13","nodeType":"YulIdentifier","src":"1154:6:13"},"nativeSrc":"1154:21:13","nodeType":"YulFunctionCall","src":"1154:21:13"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:13","nodeType":"YulIdentifier","src":"1143:7:13"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:13","nodeType":"YulTypedName","src":"1115:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:13","nodeType":"YulTypedName","src":"1125:7:13","type":""}],"src":"1091:90:13"},{"body":{"nativeSrc":"1246:50:13","nodeType":"YulBlock","src":"1246:50:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:13","nodeType":"YulIdentifier","src":"1263:3:13"},{"arguments":[{"name":"value","nativeSrc":"1283:5:13","nodeType":"YulIdentifier","src":"1283:5:13"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:13","nodeType":"YulIdentifier","src":"1268:14:13"},"nativeSrc":"1268:21:13","nodeType":"YulFunctionCall","src":"1268:21:13"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:13","nodeType":"YulIdentifier","src":"1256:6:13"},"nativeSrc":"1256:34:13","nodeType":"YulFunctionCall","src":"1256:34:13"},"nativeSrc":"1256:34:13","nodeType":"YulExpressionStatement","src":"1256:34:13"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:13","nodeType":"YulTypedName","src":"1234:5:13","type":""},{"name":"pos","nativeSrc":"1241:3:13","nodeType":"YulTypedName","src":"1241:3:13","type":""}],"src":"1187:109:13"},{"body":{"nativeSrc":"1394:118:13","nodeType":"YulBlock","src":"1394:118:13","statements":[{"nativeSrc":"1404:26:13","nodeType":"YulAssignment","src":"1404:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:13","nodeType":"YulIdentifier","src":"1416:9:13"},{"kind":"number","nativeSrc":"1427:2:13","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:13","nodeType":"YulIdentifier","src":"1412:3:13"},"nativeSrc":"1412:18:13","nodeType":"YulFunctionCall","src":"1412:18:13"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:13","nodeType":"YulIdentifier","src":"1404:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:13","nodeType":"YulIdentifier","src":"1478:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:13","nodeType":"YulIdentifier","src":"1491:9:13"},{"kind":"number","nativeSrc":"1502:1:13","nodeType":"YulLiteral","src":"1502:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:13","nodeType":"YulIdentifier","src":"1487:3:13"},"nativeSrc":"1487:17:13","nodeType":"YulFunctionCall","src":"1487:17:13"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:13","nodeType":"YulIdentifier","src":"1440:37:13"},"nativeSrc":"1440:65:13","nodeType":"YulFunctionCall","src":"1440:65:13"},"nativeSrc":"1440:65:13","nodeType":"YulExpressionStatement","src":"1440:65:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:13","nodeType":"YulTypedName","src":"1366:9:13","type":""},{"name":"value0","nativeSrc":"1378:6:13","nodeType":"YulTypedName","src":"1378:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:13","nodeType":"YulTypedName","src":"1389:4:13","type":""}],"src":"1302:210:13"},{"body":{"nativeSrc":"1577:40:13","nodeType":"YulBlock","src":"1577:40:13","statements":[{"nativeSrc":"1588:22:13","nodeType":"YulAssignment","src":"1588:22:13","value":{"arguments":[{"name":"value","nativeSrc":"1604:5:13","nodeType":"YulIdentifier","src":"1604:5:13"}],"functionName":{"name":"mload","nativeSrc":"1598:5:13","nodeType":"YulIdentifier","src":"1598:5:13"},"nativeSrc":"1598:12:13","nodeType":"YulFunctionCall","src":"1598:12:13"},"variableNames":[{"name":"length","nativeSrc":"1588:6:13","nodeType":"YulIdentifier","src":"1588:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1518:99:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1560:5:13","nodeType":"YulTypedName","src":"1560:5:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1570:6:13","nodeType":"YulTypedName","src":"1570:6:13","type":""}],"src":"1518:99:13"},{"body":{"nativeSrc":"1719:73:13","nodeType":"YulBlock","src":"1719:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1736:3:13","nodeType":"YulIdentifier","src":"1736:3:13"},{"name":"length","nativeSrc":"1741:6:13","nodeType":"YulIdentifier","src":"1741:6:13"}],"functionName":{"name":"mstore","nativeSrc":"1729:6:13","nodeType":"YulIdentifier","src":"1729:6:13"},"nativeSrc":"1729:19:13","nodeType":"YulFunctionCall","src":"1729:19:13"},"nativeSrc":"1729:19:13","nodeType":"YulExpressionStatement","src":"1729:19:13"},{"nativeSrc":"1757:29:13","nodeType":"YulAssignment","src":"1757:29:13","value":{"arguments":[{"name":"pos","nativeSrc":"1776:3:13","nodeType":"YulIdentifier","src":"1776:3:13"},{"kind":"number","nativeSrc":"1781:4:13","nodeType":"YulLiteral","src":"1781:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1772:3:13","nodeType":"YulIdentifier","src":"1772:3:13"},"nativeSrc":"1772:14:13","nodeType":"YulFunctionCall","src":"1772:14:13"},"variableNames":[{"name":"updated_pos","nativeSrc":"1757:11:13","nodeType":"YulIdentifier","src":"1757:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1623:169:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:13","nodeType":"YulTypedName","src":"1691:3:13","type":""},{"name":"length","nativeSrc":"1696:6:13","nodeType":"YulTypedName","src":"1696:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1707:11:13","nodeType":"YulTypedName","src":"1707:11:13","type":""}],"src":"1623:169:13"},{"body":{"nativeSrc":"1860:186:13","nodeType":"YulBlock","src":"1860:186:13","statements":[{"nativeSrc":"1871:10:13","nodeType":"YulVariableDeclaration","src":"1871:10:13","value":{"kind":"number","nativeSrc":"1880:1:13","nodeType":"YulLiteral","src":"1880:1:13","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1875:1:13","nodeType":"YulTypedName","src":"1875:1:13","type":""}]},{"body":{"nativeSrc":"1940:63:13","nodeType":"YulBlock","src":"1940:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1965:3:13","nodeType":"YulIdentifier","src":"1965:3:13"},{"name":"i","nativeSrc":"1970:1:13","nodeType":"YulIdentifier","src":"1970:1:13"}],"functionName":{"name":"add","nativeSrc":"1961:3:13","nodeType":"YulIdentifier","src":"1961:3:13"},"nativeSrc":"1961:11:13","nodeType":"YulFunctionCall","src":"1961:11:13"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1984:3:13","nodeType":"YulIdentifier","src":"1984:3:13"},{"name":"i","nativeSrc":"1989:1:13","nodeType":"YulIdentifier","src":"1989:1:13"}],"functionName":{"name":"add","nativeSrc":"1980:3:13","nodeType":"YulIdentifier","src":"1980:3:13"},"nativeSrc":"1980:11:13","nodeType":"YulFunctionCall","src":"1980:11:13"}],"functionName":{"name":"mload","nativeSrc":"1974:5:13","nodeType":"YulIdentifier","src":"1974:5:13"},"nativeSrc":"1974:18:13","nodeType":"YulFunctionCall","src":"1974:18:13"}],"functionName":{"name":"mstore","nativeSrc":"1954:6:13","nodeType":"YulIdentifier","src":"1954:6:13"},"nativeSrc":"1954:39:13","nodeType":"YulFunctionCall","src":"1954:39:13"},"nativeSrc":"1954:39:13","nodeType":"YulExpressionStatement","src":"1954:39:13"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1901:1:13","nodeType":"YulIdentifier","src":"1901:1:13"},{"name":"length","nativeSrc":"1904:6:13","nodeType":"YulIdentifier","src":"1904:6:13"}],"functionName":{"name":"lt","nativeSrc":"1898:2:13","nodeType":"YulIdentifier","src":"1898:2:13"},"nativeSrc":"1898:13:13","nodeType":"YulFunctionCall","src":"1898:13:13"},"nativeSrc":"1890:113:13","nodeType":"YulForLoop","post":{"nativeSrc":"1912:19:13","nodeType":"YulBlock","src":"1912:19:13","statements":[{"nativeSrc":"1914:15:13","nodeType":"YulAssignment","src":"1914:15:13","value":{"arguments":[{"name":"i","nativeSrc":"1923:1:13","nodeType":"YulIdentifier","src":"1923:1:13"},{"kind":"number","nativeSrc":"1926:2:13","nodeType":"YulLiteral","src":"1926:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1919:3:13","nodeType":"YulIdentifier","src":"1919:3:13"},"nativeSrc":"1919:10:13","nodeType":"YulFunctionCall","src":"1919:10:13"},"variableNames":[{"name":"i","nativeSrc":"1914:1:13","nodeType":"YulIdentifier","src":"1914:1:13"}]}]},"pre":{"nativeSrc":"1894:3:13","nodeType":"YulBlock","src":"1894:3:13","statements":[]},"src":"1890:113:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2023:3:13","nodeType":"YulIdentifier","src":"2023:3:13"},{"name":"length","nativeSrc":"2028:6:13","nodeType":"YulIdentifier","src":"2028:6:13"}],"functionName":{"name":"add","nativeSrc":"2019:3:13","nodeType":"YulIdentifier","src":"2019:3:13"},"nativeSrc":"2019:16:13","nodeType":"YulFunctionCall","src":"2019:16:13"},{"kind":"number","nativeSrc":"2037:1:13","nodeType":"YulLiteral","src":"2037:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2012:6:13","nodeType":"YulIdentifier","src":"2012:6:13"},"nativeSrc":"2012:27:13","nodeType":"YulFunctionCall","src":"2012:27:13"},"nativeSrc":"2012:27:13","nodeType":"YulExpressionStatement","src":"2012:27:13"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1798:248:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1842:3:13","nodeType":"YulTypedName","src":"1842:3:13","type":""},{"name":"dst","nativeSrc":"1847:3:13","nodeType":"YulTypedName","src":"1847:3:13","type":""},{"name":"length","nativeSrc":"1852:6:13","nodeType":"YulTypedName","src":"1852:6:13","type":""}],"src":"1798:248:13"},{"body":{"nativeSrc":"2100:54:13","nodeType":"YulBlock","src":"2100:54:13","statements":[{"nativeSrc":"2110:38:13","nodeType":"YulAssignment","src":"2110:38:13","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2128:5:13","nodeType":"YulIdentifier","src":"2128:5:13"},{"kind":"number","nativeSrc":"2135:2:13","nodeType":"YulLiteral","src":"2135:2:13","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2124:3:13","nodeType":"YulIdentifier","src":"2124:3:13"},"nativeSrc":"2124:14:13","nodeType":"YulFunctionCall","src":"2124:14:13"},{"arguments":[{"kind":"number","nativeSrc":"2144:2:13","nodeType":"YulLiteral","src":"2144:2:13","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2140:3:13","nodeType":"YulIdentifier","src":"2140:3:13"},"nativeSrc":"2140:7:13","nodeType":"YulFunctionCall","src":"2140:7:13"}],"functionName":{"name":"and","nativeSrc":"2120:3:13","nodeType":"YulIdentifier","src":"2120:3:13"},"nativeSrc":"2120:28:13","nodeType":"YulFunctionCall","src":"2120:28:13"},"variableNames":[{"name":"result","nativeSrc":"2110:6:13","nodeType":"YulIdentifier","src":"2110:6:13"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"2052:102:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2083:5:13","nodeType":"YulTypedName","src":"2083:5:13","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2093:6:13","nodeType":"YulTypedName","src":"2093:6:13","type":""}],"src":"2052:102:13"},{"body":{"nativeSrc":"2252:285:13","nodeType":"YulBlock","src":"2252:285:13","statements":[{"nativeSrc":"2262:53:13","nodeType":"YulVariableDeclaration","src":"2262:53:13","value":{"arguments":[{"name":"value","nativeSrc":"2309:5:13","nodeType":"YulIdentifier","src":"2309:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"2276:32:13","nodeType":"YulIdentifier","src":"2276:32:13"},"nativeSrc":"2276:39:13","nodeType":"YulFunctionCall","src":"2276:39:13"},"variables":[{"name":"length","nativeSrc":"2266:6:13","nodeType":"YulTypedName","src":"2266:6:13","type":""}]},{"nativeSrc":"2324:78:13","nodeType":"YulAssignment","src":"2324:78:13","value":{"arguments":[{"name":"pos","nativeSrc":"2390:3:13","nodeType":"YulIdentifier","src":"2390:3:13"},{"name":"length","nativeSrc":"2395:6:13","nodeType":"YulIdentifier","src":"2395:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2331:58:13","nodeType":"YulIdentifier","src":"2331:58:13"},"nativeSrc":"2331:71:13","nodeType":"YulFunctionCall","src":"2331:71:13"},"variableNames":[{"name":"pos","nativeSrc":"2324:3:13","nodeType":"YulIdentifier","src":"2324:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2450:5:13","nodeType":"YulIdentifier","src":"2450:5:13"},{"kind":"number","nativeSrc":"2457:4:13","nodeType":"YulLiteral","src":"2457:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2446:3:13","nodeType":"YulIdentifier","src":"2446:3:13"},"nativeSrc":"2446:16:13","nodeType":"YulFunctionCall","src":"2446:16:13"},{"name":"pos","nativeSrc":"2464:3:13","nodeType":"YulIdentifier","src":"2464:3:13"},{"name":"length","nativeSrc":"2469:6:13","nodeType":"YulIdentifier","src":"2469:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2411:34:13","nodeType":"YulIdentifier","src":"2411:34:13"},"nativeSrc":"2411:65:13","nodeType":"YulFunctionCall","src":"2411:65:13"},"nativeSrc":"2411:65:13","nodeType":"YulExpressionStatement","src":"2411:65:13"},{"nativeSrc":"2485:46:13","nodeType":"YulAssignment","src":"2485:46:13","value":{"arguments":[{"name":"pos","nativeSrc":"2496:3:13","nodeType":"YulIdentifier","src":"2496:3:13"},{"arguments":[{"name":"length","nativeSrc":"2523:6:13","nodeType":"YulIdentifier","src":"2523:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2501:21:13","nodeType":"YulIdentifier","src":"2501:21:13"},"nativeSrc":"2501:29:13","nodeType":"YulFunctionCall","src":"2501:29:13"}],"functionName":{"name":"add","nativeSrc":"2492:3:13","nodeType":"YulIdentifier","src":"2492:3:13"},"nativeSrc":"2492:39:13","nodeType":"YulFunctionCall","src":"2492:39:13"},"variableNames":[{"name":"end","nativeSrc":"2485:3:13","nodeType":"YulIdentifier","src":"2485:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2160:377:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2233:5:13","nodeType":"YulTypedName","src":"2233:5:13","type":""},{"name":"pos","nativeSrc":"2240:3:13","nodeType":"YulTypedName","src":"2240:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2248:3:13","nodeType":"YulTypedName","src":"2248:3:13","type":""}],"src":"2160:377:13"},{"body":{"nativeSrc":"2661:195:13","nodeType":"YulBlock","src":"2661:195:13","statements":[{"nativeSrc":"2671:26:13","nodeType":"YulAssignment","src":"2671:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"2683:9:13","nodeType":"YulIdentifier","src":"2683:9:13"},{"kind":"number","nativeSrc":"2694:2:13","nodeType":"YulLiteral","src":"2694:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2679:3:13","nodeType":"YulIdentifier","src":"2679:3:13"},"nativeSrc":"2679:18:13","nodeType":"YulFunctionCall","src":"2679:18:13"},"variableNames":[{"name":"tail","nativeSrc":"2671:4:13","nodeType":"YulIdentifier","src":"2671:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2718:9:13","nodeType":"YulIdentifier","src":"2718:9:13"},{"kind":"number","nativeSrc":"2729:1:13","nodeType":"YulLiteral","src":"2729:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2714:3:13","nodeType":"YulIdentifier","src":"2714:3:13"},"nativeSrc":"2714:17:13","nodeType":"YulFunctionCall","src":"2714:17:13"},{"arguments":[{"name":"tail","nativeSrc":"2737:4:13","nodeType":"YulIdentifier","src":"2737:4:13"},{"name":"headStart","nativeSrc":"2743:9:13","nodeType":"YulIdentifier","src":"2743:9:13"}],"functionName":{"name":"sub","nativeSrc":"2733:3:13","nodeType":"YulIdentifier","src":"2733:3:13"},"nativeSrc":"2733:20:13","nodeType":"YulFunctionCall","src":"2733:20:13"}],"functionName":{"name":"mstore","nativeSrc":"2707:6:13","nodeType":"YulIdentifier","src":"2707:6:13"},"nativeSrc":"2707:47:13","nodeType":"YulFunctionCall","src":"2707:47:13"},"nativeSrc":"2707:47:13","nodeType":"YulExpressionStatement","src":"2707:47:13"},{"nativeSrc":"2763:86:13","nodeType":"YulAssignment","src":"2763:86:13","value":{"arguments":[{"name":"value0","nativeSrc":"2835:6:13","nodeType":"YulIdentifier","src":"2835:6:13"},{"name":"tail","nativeSrc":"2844:4:13","nodeType":"YulIdentifier","src":"2844:4:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2771:63:13","nodeType":"YulIdentifier","src":"2771:63:13"},"nativeSrc":"2771:78:13","nodeType":"YulFunctionCall","src":"2771:78:13"},"variableNames":[{"name":"tail","nativeSrc":"2763:4:13","nodeType":"YulIdentifier","src":"2763:4:13"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2543:313:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2633:9:13","nodeType":"YulTypedName","src":"2633:9:13","type":""},{"name":"value0","nativeSrc":"2645:6:13","nodeType":"YulTypedName","src":"2645:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2656:4:13","nodeType":"YulTypedName","src":"2656:4:13","type":""}],"src":"2543:313:13"},{"body":{"nativeSrc":"2907:32:13","nodeType":"YulBlock","src":"2907:32:13","statements":[{"nativeSrc":"2917:16:13","nodeType":"YulAssignment","src":"2917:16:13","value":{"name":"value","nativeSrc":"2928:5:13","nodeType":"YulIdentifier","src":"2928:5:13"},"variableNames":[{"name":"cleaned","nativeSrc":"2917:7:13","nodeType":"YulIdentifier","src":"2917:7:13"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2862:77:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2889:5:13","nodeType":"YulTypedName","src":"2889:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2899:7:13","nodeType":"YulTypedName","src":"2899:7:13","type":""}],"src":"2862:77:13"},{"body":{"nativeSrc":"2988:79:13","nodeType":"YulBlock","src":"2988:79:13","statements":[{"body":{"nativeSrc":"3045:16:13","nodeType":"YulBlock","src":"3045:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3054:1:13","nodeType":"YulLiteral","src":"3054:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"3057:1:13","nodeType":"YulLiteral","src":"3057:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3047:6:13","nodeType":"YulIdentifier","src":"3047:6:13"},"nativeSrc":"3047:12:13","nodeType":"YulFunctionCall","src":"3047:12:13"},"nativeSrc":"3047:12:13","nodeType":"YulExpressionStatement","src":"3047:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3011:5:13","nodeType":"YulIdentifier","src":"3011:5:13"},{"arguments":[{"name":"value","nativeSrc":"3036:5:13","nodeType":"YulIdentifier","src":"3036:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3018:17:13","nodeType":"YulIdentifier","src":"3018:17:13"},"nativeSrc":"3018:24:13","nodeType":"YulFunctionCall","src":"3018:24:13"}],"functionName":{"name":"eq","nativeSrc":"3008:2:13","nodeType":"YulIdentifier","src":"3008:2:13"},"nativeSrc":"3008:35:13","nodeType":"YulFunctionCall","src":"3008:35:13"}],"functionName":{"name":"iszero","nativeSrc":"3001:6:13","nodeType":"YulIdentifier","src":"3001:6:13"},"nativeSrc":"3001:43:13","nodeType":"YulFunctionCall","src":"3001:43:13"},"nativeSrc":"2998:63:13","nodeType":"YulIf","src":"2998:63:13"}]},"name":"validator_revert_t_uint256","nativeSrc":"2945:122:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2981:5:13","nodeType":"YulTypedName","src":"2981:5:13","type":""}],"src":"2945:122:13"},{"body":{"nativeSrc":"3125:87:13","nodeType":"YulBlock","src":"3125:87:13","statements":[{"nativeSrc":"3135:29:13","nodeType":"YulAssignment","src":"3135:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"3157:6:13","nodeType":"YulIdentifier","src":"3157:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"3144:12:13","nodeType":"YulIdentifier","src":"3144:12:13"},"nativeSrc":"3144:20:13","nodeType":"YulFunctionCall","src":"3144:20:13"},"variableNames":[{"name":"value","nativeSrc":"3135:5:13","nodeType":"YulIdentifier","src":"3135:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3200:5:13","nodeType":"YulIdentifier","src":"3200:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3173:26:13","nodeType":"YulIdentifier","src":"3173:26:13"},"nativeSrc":"3173:33:13","nodeType":"YulFunctionCall","src":"3173:33:13"},"nativeSrc":"3173:33:13","nodeType":"YulExpressionStatement","src":"3173:33:13"}]},"name":"abi_decode_t_uint256","nativeSrc":"3073:139:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3103:6:13","nodeType":"YulTypedName","src":"3103:6:13","type":""},{"name":"end","nativeSrc":"3111:3:13","nodeType":"YulTypedName","src":"3111:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3119:5:13","nodeType":"YulTypedName","src":"3119:5:13","type":""}],"src":"3073:139:13"},{"body":{"nativeSrc":"3284:263:13","nodeType":"YulBlock","src":"3284:263:13","statements":[{"body":{"nativeSrc":"3330:83:13","nodeType":"YulBlock","src":"3330:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3332:77:13","nodeType":"YulIdentifier","src":"3332:77:13"},"nativeSrc":"3332:79:13","nodeType":"YulFunctionCall","src":"3332:79:13"},"nativeSrc":"3332:79:13","nodeType":"YulExpressionStatement","src":"3332:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3305:7:13","nodeType":"YulIdentifier","src":"3305:7:13"},{"name":"headStart","nativeSrc":"3314:9:13","nodeType":"YulIdentifier","src":"3314:9:13"}],"functionName":{"name":"sub","nativeSrc":"3301:3:13","nodeType":"YulIdentifier","src":"3301:3:13"},"nativeSrc":"3301:23:13","nodeType":"YulFunctionCall","src":"3301:23:13"},{"kind":"number","nativeSrc":"3326:2:13","nodeType":"YulLiteral","src":"3326:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3297:3:13","nodeType":"YulIdentifier","src":"3297:3:13"},"nativeSrc":"3297:32:13","nodeType":"YulFunctionCall","src":"3297:32:13"},"nativeSrc":"3294:119:13","nodeType":"YulIf","src":"3294:119:13"},{"nativeSrc":"3423:117:13","nodeType":"YulBlock","src":"3423:117:13","statements":[{"nativeSrc":"3438:15:13","nodeType":"YulVariableDeclaration","src":"3438:15:13","value":{"kind":"number","nativeSrc":"3452:1:13","nodeType":"YulLiteral","src":"3452:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3442:6:13","nodeType":"YulTypedName","src":"3442:6:13","type":""}]},{"nativeSrc":"3467:63:13","nodeType":"YulAssignment","src":"3467:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3502:9:13","nodeType":"YulIdentifier","src":"3502:9:13"},{"name":"offset","nativeSrc":"3513:6:13","nodeType":"YulIdentifier","src":"3513:6:13"}],"functionName":{"name":"add","nativeSrc":"3498:3:13","nodeType":"YulIdentifier","src":"3498:3:13"},"nativeSrc":"3498:22:13","nodeType":"YulFunctionCall","src":"3498:22:13"},{"name":"dataEnd","nativeSrc":"3522:7:13","nodeType":"YulIdentifier","src":"3522:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3477:20:13","nodeType":"YulIdentifier","src":"3477:20:13"},"nativeSrc":"3477:53:13","nodeType":"YulFunctionCall","src":"3477:53:13"},"variableNames":[{"name":"value0","nativeSrc":"3467:6:13","nodeType":"YulIdentifier","src":"3467:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3218:329:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3254:9:13","nodeType":"YulTypedName","src":"3254:9:13","type":""},{"name":"dataEnd","nativeSrc":"3265:7:13","nodeType":"YulTypedName","src":"3265:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3277:6:13","nodeType":"YulTypedName","src":"3277:6:13","type":""}],"src":"3218:329:13"},{"body":{"nativeSrc":"3598:81:13","nodeType":"YulBlock","src":"3598:81:13","statements":[{"nativeSrc":"3608:65:13","nodeType":"YulAssignment","src":"3608:65:13","value":{"arguments":[{"name":"value","nativeSrc":"3623:5:13","nodeType":"YulIdentifier","src":"3623:5:13"},{"kind":"number","nativeSrc":"3630:42:13","nodeType":"YulLiteral","src":"3630:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3619:3:13","nodeType":"YulIdentifier","src":"3619:3:13"},"nativeSrc":"3619:54:13","nodeType":"YulFunctionCall","src":"3619:54:13"},"variableNames":[{"name":"cleaned","nativeSrc":"3608:7:13","nodeType":"YulIdentifier","src":"3608:7:13"}]}]},"name":"cleanup_t_uint160","nativeSrc":"3553:126:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:13","nodeType":"YulTypedName","src":"3580:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3590:7:13","nodeType":"YulTypedName","src":"3590:7:13","type":""}],"src":"3553:126:13"},{"body":{"nativeSrc":"3730:51:13","nodeType":"YulBlock","src":"3730:51:13","statements":[{"nativeSrc":"3740:35:13","nodeType":"YulAssignment","src":"3740:35:13","value":{"arguments":[{"name":"value","nativeSrc":"3769:5:13","nodeType":"YulIdentifier","src":"3769:5:13"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3751:17:13","nodeType":"YulIdentifier","src":"3751:17:13"},"nativeSrc":"3751:24:13","nodeType":"YulFunctionCall","src":"3751:24:13"},"variableNames":[{"name":"cleaned","nativeSrc":"3740:7:13","nodeType":"YulIdentifier","src":"3740:7:13"}]}]},"name":"cleanup_t_address","nativeSrc":"3685:96:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3712:5:13","nodeType":"YulTypedName","src":"3712:5:13","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3722:7:13","nodeType":"YulTypedName","src":"3722:7:13","type":""}],"src":"3685:96:13"},{"body":{"nativeSrc":"3852:53:13","nodeType":"YulBlock","src":"3852:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3869:3:13","nodeType":"YulIdentifier","src":"3869:3:13"},{"arguments":[{"name":"value","nativeSrc":"3892:5:13","nodeType":"YulIdentifier","src":"3892:5:13"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"3874:17:13","nodeType":"YulIdentifier","src":"3874:17:13"},"nativeSrc":"3874:24:13","nodeType":"YulFunctionCall","src":"3874:24:13"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:13","nodeType":"YulIdentifier","src":"3862:6:13"},"nativeSrc":"3862:37:13","nodeType":"YulFunctionCall","src":"3862:37:13"},"nativeSrc":"3862:37:13","nodeType":"YulExpressionStatement","src":"3862:37:13"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"3787:118:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3840:5:13","nodeType":"YulTypedName","src":"3840:5:13","type":""},{"name":"pos","nativeSrc":"3847:3:13","nodeType":"YulTypedName","src":"3847:3:13","type":""}],"src":"3787:118:13"},{"body":{"nativeSrc":"4009:124:13","nodeType":"YulBlock","src":"4009:124:13","statements":[{"nativeSrc":"4019:26:13","nodeType":"YulAssignment","src":"4019:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"4031:9:13","nodeType":"YulIdentifier","src":"4031:9:13"},{"kind":"number","nativeSrc":"4042:2:13","nodeType":"YulLiteral","src":"4042:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4027:3:13","nodeType":"YulIdentifier","src":"4027:3:13"},"nativeSrc":"4027:18:13","nodeType":"YulFunctionCall","src":"4027:18:13"},"variableNames":[{"name":"tail","nativeSrc":"4019:4:13","nodeType":"YulIdentifier","src":"4019:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4099:6:13","nodeType":"YulIdentifier","src":"4099:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"4112:9:13","nodeType":"YulIdentifier","src":"4112:9:13"},{"kind":"number","nativeSrc":"4123:1:13","nodeType":"YulLiteral","src":"4123:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4108:3:13","nodeType":"YulIdentifier","src":"4108:3:13"},"nativeSrc":"4108:17:13","nodeType":"YulFunctionCall","src":"4108:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4055:43:13","nodeType":"YulIdentifier","src":"4055:43:13"},"nativeSrc":"4055:71:13","nodeType":"YulFunctionCall","src":"4055:71:13"},"nativeSrc":"4055:71:13","nodeType":"YulExpressionStatement","src":"4055:71:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3911:222:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3981:9:13","nodeType":"YulTypedName","src":"3981:9:13","type":""},{"name":"value0","nativeSrc":"3993:6:13","nodeType":"YulTypedName","src":"3993:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4004:4:13","nodeType":"YulTypedName","src":"4004:4:13","type":""}],"src":"3911:222:13"},{"body":{"nativeSrc":"4182:79:13","nodeType":"YulBlock","src":"4182:79:13","statements":[{"body":{"nativeSrc":"4239:16:13","nodeType":"YulBlock","src":"4239:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4248:1:13","nodeType":"YulLiteral","src":"4248:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"4251:1:13","nodeType":"YulLiteral","src":"4251:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4241:6:13","nodeType":"YulIdentifier","src":"4241:6:13"},"nativeSrc":"4241:12:13","nodeType":"YulFunctionCall","src":"4241:12:13"},"nativeSrc":"4241:12:13","nodeType":"YulExpressionStatement","src":"4241:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4205:5:13","nodeType":"YulIdentifier","src":"4205:5:13"},{"arguments":[{"name":"value","nativeSrc":"4230:5:13","nodeType":"YulIdentifier","src":"4230:5:13"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4212:17:13","nodeType":"YulIdentifier","src":"4212:17:13"},"nativeSrc":"4212:24:13","nodeType":"YulFunctionCall","src":"4212:24:13"}],"functionName":{"name":"eq","nativeSrc":"4202:2:13","nodeType":"YulIdentifier","src":"4202:2:13"},"nativeSrc":"4202:35:13","nodeType":"YulFunctionCall","src":"4202:35:13"}],"functionName":{"name":"iszero","nativeSrc":"4195:6:13","nodeType":"YulIdentifier","src":"4195:6:13"},"nativeSrc":"4195:43:13","nodeType":"YulFunctionCall","src":"4195:43:13"},"nativeSrc":"4192:63:13","nodeType":"YulIf","src":"4192:63:13"}]},"name":"validator_revert_t_address","nativeSrc":"4139:122:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4175:5:13","nodeType":"YulTypedName","src":"4175:5:13","type":""}],"src":"4139:122:13"},{"body":{"nativeSrc":"4319:87:13","nodeType":"YulBlock","src":"4319:87:13","statements":[{"nativeSrc":"4329:29:13","nodeType":"YulAssignment","src":"4329:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"4351:6:13","nodeType":"YulIdentifier","src":"4351:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"4338:12:13","nodeType":"YulIdentifier","src":"4338:12:13"},"nativeSrc":"4338:20:13","nodeType":"YulFunctionCall","src":"4338:20:13"},"variableNames":[{"name":"value","nativeSrc":"4329:5:13","nodeType":"YulIdentifier","src":"4329:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4394:5:13","nodeType":"YulIdentifier","src":"4394:5:13"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4367:26:13","nodeType":"YulIdentifier","src":"4367:26:13"},"nativeSrc":"4367:33:13","nodeType":"YulFunctionCall","src":"4367:33:13"},"nativeSrc":"4367:33:13","nodeType":"YulExpressionStatement","src":"4367:33:13"}]},"name":"abi_decode_t_address","nativeSrc":"4267:139:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4297:6:13","nodeType":"YulTypedName","src":"4297:6:13","type":""},{"name":"end","nativeSrc":"4305:3:13","nodeType":"YulTypedName","src":"4305:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4313:5:13","nodeType":"YulTypedName","src":"4313:5:13","type":""}],"src":"4267:139:13"},{"body":{"nativeSrc":"4495:391:13","nodeType":"YulBlock","src":"4495:391:13","statements":[{"body":{"nativeSrc":"4541:83:13","nodeType":"YulBlock","src":"4541:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4543:77:13","nodeType":"YulIdentifier","src":"4543:77:13"},"nativeSrc":"4543:79:13","nodeType":"YulFunctionCall","src":"4543:79:13"},"nativeSrc":"4543:79:13","nodeType":"YulExpressionStatement","src":"4543:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4516:7:13","nodeType":"YulIdentifier","src":"4516:7:13"},{"name":"headStart","nativeSrc":"4525:9:13","nodeType":"YulIdentifier","src":"4525:9:13"}],"functionName":{"name":"sub","nativeSrc":"4512:3:13","nodeType":"YulIdentifier","src":"4512:3:13"},"nativeSrc":"4512:23:13","nodeType":"YulFunctionCall","src":"4512:23:13"},{"kind":"number","nativeSrc":"4537:2:13","nodeType":"YulLiteral","src":"4537:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4508:3:13","nodeType":"YulIdentifier","src":"4508:3:13"},"nativeSrc":"4508:32:13","nodeType":"YulFunctionCall","src":"4508:32:13"},"nativeSrc":"4505:119:13","nodeType":"YulIf","src":"4505:119:13"},{"nativeSrc":"4634:117:13","nodeType":"YulBlock","src":"4634:117:13","statements":[{"nativeSrc":"4649:15:13","nodeType":"YulVariableDeclaration","src":"4649:15:13","value":{"kind":"number","nativeSrc":"4663:1:13","nodeType":"YulLiteral","src":"4663:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4653:6:13","nodeType":"YulTypedName","src":"4653:6:13","type":""}]},{"nativeSrc":"4678:63:13","nodeType":"YulAssignment","src":"4678:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4713:9:13","nodeType":"YulIdentifier","src":"4713:9:13"},{"name":"offset","nativeSrc":"4724:6:13","nodeType":"YulIdentifier","src":"4724:6:13"}],"functionName":{"name":"add","nativeSrc":"4709:3:13","nodeType":"YulIdentifier","src":"4709:3:13"},"nativeSrc":"4709:22:13","nodeType":"YulFunctionCall","src":"4709:22:13"},{"name":"dataEnd","nativeSrc":"4733:7:13","nodeType":"YulIdentifier","src":"4733:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4688:20:13","nodeType":"YulIdentifier","src":"4688:20:13"},"nativeSrc":"4688:53:13","nodeType":"YulFunctionCall","src":"4688:53:13"},"variableNames":[{"name":"value0","nativeSrc":"4678:6:13","nodeType":"YulIdentifier","src":"4678:6:13"}]}]},{"nativeSrc":"4761:118:13","nodeType":"YulBlock","src":"4761:118:13","statements":[{"nativeSrc":"4776:16:13","nodeType":"YulVariableDeclaration","src":"4776:16:13","value":{"kind":"number","nativeSrc":"4790:2:13","nodeType":"YulLiteral","src":"4790:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4780:6:13","nodeType":"YulTypedName","src":"4780:6:13","type":""}]},{"nativeSrc":"4806:63:13","nodeType":"YulAssignment","src":"4806:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4841:9:13","nodeType":"YulIdentifier","src":"4841:9:13"},{"name":"offset","nativeSrc":"4852:6:13","nodeType":"YulIdentifier","src":"4852:6:13"}],"functionName":{"name":"add","nativeSrc":"4837:3:13","nodeType":"YulIdentifier","src":"4837:3:13"},"nativeSrc":"4837:22:13","nodeType":"YulFunctionCall","src":"4837:22:13"},{"name":"dataEnd","nativeSrc":"4861:7:13","nodeType":"YulIdentifier","src":"4861:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4816:20:13","nodeType":"YulIdentifier","src":"4816:20:13"},"nativeSrc":"4816:53:13","nodeType":"YulFunctionCall","src":"4816:53:13"},"variableNames":[{"name":"value1","nativeSrc":"4806:6:13","nodeType":"YulIdentifier","src":"4806:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4412:474:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4457:9:13","nodeType":"YulTypedName","src":"4457:9:13","type":""},{"name":"dataEnd","nativeSrc":"4468:7:13","nodeType":"YulTypedName","src":"4468:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4480:6:13","nodeType":"YulTypedName","src":"4480:6:13","type":""},{"name":"value1","nativeSrc":"4488:6:13","nodeType":"YulTypedName","src":"4488:6:13","type":""}],"src":"4412:474:13"},{"body":{"nativeSrc":"4957:53:13","nodeType":"YulBlock","src":"4957:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4974:3:13","nodeType":"YulIdentifier","src":"4974:3:13"},{"arguments":[{"name":"value","nativeSrc":"4997:5:13","nodeType":"YulIdentifier","src":"4997:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"4979:17:13","nodeType":"YulIdentifier","src":"4979:17:13"},"nativeSrc":"4979:24:13","nodeType":"YulFunctionCall","src":"4979:24:13"}],"functionName":{"name":"mstore","nativeSrc":"4967:6:13","nodeType":"YulIdentifier","src":"4967:6:13"},"nativeSrc":"4967:37:13","nodeType":"YulFunctionCall","src":"4967:37:13"},"nativeSrc":"4967:37:13","nodeType":"YulExpressionStatement","src":"4967:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"4892:118:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4945:5:13","nodeType":"YulTypedName","src":"4945:5:13","type":""},{"name":"pos","nativeSrc":"4952:3:13","nodeType":"YulTypedName","src":"4952:3:13","type":""}],"src":"4892:118:13"},{"body":{"nativeSrc":"5114:124:13","nodeType":"YulBlock","src":"5114:124:13","statements":[{"nativeSrc":"5124:26:13","nodeType":"YulAssignment","src":"5124:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"5136:9:13","nodeType":"YulIdentifier","src":"5136:9:13"},{"kind":"number","nativeSrc":"5147:2:13","nodeType":"YulLiteral","src":"5147:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5132:3:13","nodeType":"YulIdentifier","src":"5132:3:13"},"nativeSrc":"5132:18:13","nodeType":"YulFunctionCall","src":"5132:18:13"},"variableNames":[{"name":"tail","nativeSrc":"5124:4:13","nodeType":"YulIdentifier","src":"5124:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"5204:6:13","nodeType":"YulIdentifier","src":"5204:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"5217:9:13","nodeType":"YulIdentifier","src":"5217:9:13"},{"kind":"number","nativeSrc":"5228:1:13","nodeType":"YulLiteral","src":"5228:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5213:3:13","nodeType":"YulIdentifier","src":"5213:3:13"},"nativeSrc":"5213:17:13","nodeType":"YulFunctionCall","src":"5213:17:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"5160:43:13","nodeType":"YulIdentifier","src":"5160:43:13"},"nativeSrc":"5160:71:13","nodeType":"YulFunctionCall","src":"5160:71:13"},"nativeSrc":"5160:71:13","nodeType":"YulExpressionStatement","src":"5160:71:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5016:222:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5086:9:13","nodeType":"YulTypedName","src":"5086:9:13","type":""},{"name":"value0","nativeSrc":"5098:6:13","nodeType":"YulTypedName","src":"5098:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5109:4:13","nodeType":"YulTypedName","src":"5109:4:13","type":""}],"src":"5016:222:13"},{"body":{"nativeSrc":"5344:519:13","nodeType":"YulBlock","src":"5344:519:13","statements":[{"body":{"nativeSrc":"5390:83:13","nodeType":"YulBlock","src":"5390:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5392:77:13","nodeType":"YulIdentifier","src":"5392:77:13"},"nativeSrc":"5392:79:13","nodeType":"YulFunctionCall","src":"5392:79:13"},"nativeSrc":"5392:79:13","nodeType":"YulExpressionStatement","src":"5392:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5365:7:13","nodeType":"YulIdentifier","src":"5365:7:13"},{"name":"headStart","nativeSrc":"5374:9:13","nodeType":"YulIdentifier","src":"5374:9:13"}],"functionName":{"name":"sub","nativeSrc":"5361:3:13","nodeType":"YulIdentifier","src":"5361:3:13"},"nativeSrc":"5361:23:13","nodeType":"YulFunctionCall","src":"5361:23:13"},{"kind":"number","nativeSrc":"5386:2:13","nodeType":"YulLiteral","src":"5386:2:13","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5357:3:13","nodeType":"YulIdentifier","src":"5357:3:13"},"nativeSrc":"5357:32:13","nodeType":"YulFunctionCall","src":"5357:32:13"},"nativeSrc":"5354:119:13","nodeType":"YulIf","src":"5354:119:13"},{"nativeSrc":"5483:117:13","nodeType":"YulBlock","src":"5483:117:13","statements":[{"nativeSrc":"5498:15:13","nodeType":"YulVariableDeclaration","src":"5498:15:13","value":{"kind":"number","nativeSrc":"5512:1:13","nodeType":"YulLiteral","src":"5512:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5502:6:13","nodeType":"YulTypedName","src":"5502:6:13","type":""}]},{"nativeSrc":"5527:63:13","nodeType":"YulAssignment","src":"5527:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5562:9:13","nodeType":"YulIdentifier","src":"5562:9:13"},{"name":"offset","nativeSrc":"5573:6:13","nodeType":"YulIdentifier","src":"5573:6:13"}],"functionName":{"name":"add","nativeSrc":"5558:3:13","nodeType":"YulIdentifier","src":"5558:3:13"},"nativeSrc":"5558:22:13","nodeType":"YulFunctionCall","src":"5558:22:13"},{"name":"dataEnd","nativeSrc":"5582:7:13","nodeType":"YulIdentifier","src":"5582:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5537:20:13","nodeType":"YulIdentifier","src":"5537:20:13"},"nativeSrc":"5537:53:13","nodeType":"YulFunctionCall","src":"5537:53:13"},"variableNames":[{"name":"value0","nativeSrc":"5527:6:13","nodeType":"YulIdentifier","src":"5527:6:13"}]}]},{"nativeSrc":"5610:118:13","nodeType":"YulBlock","src":"5610:118:13","statements":[{"nativeSrc":"5625:16:13","nodeType":"YulVariableDeclaration","src":"5625:16:13","value":{"kind":"number","nativeSrc":"5639:2:13","nodeType":"YulLiteral","src":"5639:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5629:6:13","nodeType":"YulTypedName","src":"5629:6:13","type":""}]},{"nativeSrc":"5655:63:13","nodeType":"YulAssignment","src":"5655:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5690:9:13","nodeType":"YulIdentifier","src":"5690:9:13"},{"name":"offset","nativeSrc":"5701:6:13","nodeType":"YulIdentifier","src":"5701:6:13"}],"functionName":{"name":"add","nativeSrc":"5686:3:13","nodeType":"YulIdentifier","src":"5686:3:13"},"nativeSrc":"5686:22:13","nodeType":"YulFunctionCall","src":"5686:22:13"},{"name":"dataEnd","nativeSrc":"5710:7:13","nodeType":"YulIdentifier","src":"5710:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5665:20:13","nodeType":"YulIdentifier","src":"5665:20:13"},"nativeSrc":"5665:53:13","nodeType":"YulFunctionCall","src":"5665:53:13"},"variableNames":[{"name":"value1","nativeSrc":"5655:6:13","nodeType":"YulIdentifier","src":"5655:6:13"}]}]},{"nativeSrc":"5738:118:13","nodeType":"YulBlock","src":"5738:118:13","statements":[{"nativeSrc":"5753:16:13","nodeType":"YulVariableDeclaration","src":"5753:16:13","value":{"kind":"number","nativeSrc":"5767:2:13","nodeType":"YulLiteral","src":"5767:2:13","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"5757:6:13","nodeType":"YulTypedName","src":"5757:6:13","type":""}]},{"nativeSrc":"5783:63:13","nodeType":"YulAssignment","src":"5783:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5818:9:13","nodeType":"YulIdentifier","src":"5818:9:13"},{"name":"offset","nativeSrc":"5829:6:13","nodeType":"YulIdentifier","src":"5829:6:13"}],"functionName":{"name":"add","nativeSrc":"5814:3:13","nodeType":"YulIdentifier","src":"5814:3:13"},"nativeSrc":"5814:22:13","nodeType":"YulFunctionCall","src":"5814:22:13"},{"name":"dataEnd","nativeSrc":"5838:7:13","nodeType":"YulIdentifier","src":"5838:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5793:20:13","nodeType":"YulIdentifier","src":"5793:20:13"},"nativeSrc":"5793:53:13","nodeType":"YulFunctionCall","src":"5793:53:13"},"variableNames":[{"name":"value2","nativeSrc":"5783:6:13","nodeType":"YulIdentifier","src":"5783:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"5244:619:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5298:9:13","nodeType":"YulTypedName","src":"5298:9:13","type":""},{"name":"dataEnd","nativeSrc":"5309:7:13","nodeType":"YulTypedName","src":"5309:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5321:6:13","nodeType":"YulTypedName","src":"5321:6:13","type":""},{"name":"value1","nativeSrc":"5329:6:13","nodeType":"YulTypedName","src":"5329:6:13","type":""},{"name":"value2","nativeSrc":"5337:6:13","nodeType":"YulTypedName","src":"5337:6:13","type":""}],"src":"5244:619:13"},{"body":{"nativeSrc":"5935:263:13","nodeType":"YulBlock","src":"5935:263:13","statements":[{"body":{"nativeSrc":"5981:83:13","nodeType":"YulBlock","src":"5981:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5983:77:13","nodeType":"YulIdentifier","src":"5983:77:13"},"nativeSrc":"5983:79:13","nodeType":"YulFunctionCall","src":"5983:79:13"},"nativeSrc":"5983:79:13","nodeType":"YulExpressionStatement","src":"5983:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5956:7:13","nodeType":"YulIdentifier","src":"5956:7:13"},{"name":"headStart","nativeSrc":"5965:9:13","nodeType":"YulIdentifier","src":"5965:9:13"}],"functionName":{"name":"sub","nativeSrc":"5952:3:13","nodeType":"YulIdentifier","src":"5952:3:13"},"nativeSrc":"5952:23:13","nodeType":"YulFunctionCall","src":"5952:23:13"},{"kind":"number","nativeSrc":"5977:2:13","nodeType":"YulLiteral","src":"5977:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5948:3:13","nodeType":"YulIdentifier","src":"5948:3:13"},"nativeSrc":"5948:32:13","nodeType":"YulFunctionCall","src":"5948:32:13"},"nativeSrc":"5945:119:13","nodeType":"YulIf","src":"5945:119:13"},{"nativeSrc":"6074:117:13","nodeType":"YulBlock","src":"6074:117:13","statements":[{"nativeSrc":"6089:15:13","nodeType":"YulVariableDeclaration","src":"6089:15:13","value":{"kind":"number","nativeSrc":"6103:1:13","nodeType":"YulLiteral","src":"6103:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"6093:6:13","nodeType":"YulTypedName","src":"6093:6:13","type":""}]},{"nativeSrc":"6118:63:13","nodeType":"YulAssignment","src":"6118:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6153:9:13","nodeType":"YulIdentifier","src":"6153:9:13"},{"name":"offset","nativeSrc":"6164:6:13","nodeType":"YulIdentifier","src":"6164:6:13"}],"functionName":{"name":"add","nativeSrc":"6149:3:13","nodeType":"YulIdentifier","src":"6149:3:13"},"nativeSrc":"6149:22:13","nodeType":"YulFunctionCall","src":"6149:22:13"},{"name":"dataEnd","nativeSrc":"6173:7:13","nodeType":"YulIdentifier","src":"6173:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6128:20:13","nodeType":"YulIdentifier","src":"6128:20:13"},"nativeSrc":"6128:53:13","nodeType":"YulFunctionCall","src":"6128:53:13"},"variableNames":[{"name":"value0","nativeSrc":"6118:6:13","nodeType":"YulIdentifier","src":"6118:6:13"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"5869:329:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5905:9:13","nodeType":"YulTypedName","src":"5905:9:13","type":""},{"name":"dataEnd","nativeSrc":"5916:7:13","nodeType":"YulTypedName","src":"5916:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5928:6:13","nodeType":"YulTypedName","src":"5928:6:13","type":""}],"src":"5869:329:13"},{"body":{"nativeSrc":"6244:76:13","nodeType":"YulBlock","src":"6244:76:13","statements":[{"body":{"nativeSrc":"6298:16:13","nodeType":"YulBlock","src":"6298:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6307:1:13","nodeType":"YulLiteral","src":"6307:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"6310:1:13","nodeType":"YulLiteral","src":"6310:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6300:6:13","nodeType":"YulIdentifier","src":"6300:6:13"},"nativeSrc":"6300:12:13","nodeType":"YulFunctionCall","src":"6300:12:13"},"nativeSrc":"6300:12:13","nodeType":"YulExpressionStatement","src":"6300:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6267:5:13","nodeType":"YulIdentifier","src":"6267:5:13"},{"arguments":[{"name":"value","nativeSrc":"6289:5:13","nodeType":"YulIdentifier","src":"6289:5:13"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"6274:14:13","nodeType":"YulIdentifier","src":"6274:14:13"},"nativeSrc":"6274:21:13","nodeType":"YulFunctionCall","src":"6274:21:13"}],"functionName":{"name":"eq","nativeSrc":"6264:2:13","nodeType":"YulIdentifier","src":"6264:2:13"},"nativeSrc":"6264:32:13","nodeType":"YulFunctionCall","src":"6264:32:13"}],"functionName":{"name":"iszero","nativeSrc":"6257:6:13","nodeType":"YulIdentifier","src":"6257:6:13"},"nativeSrc":"6257:40:13","nodeType":"YulFunctionCall","src":"6257:40:13"},"nativeSrc":"6254:60:13","nodeType":"YulIf","src":"6254:60:13"}]},"name":"validator_revert_t_bool","nativeSrc":"6204:116:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6237:5:13","nodeType":"YulTypedName","src":"6237:5:13","type":""}],"src":"6204:116:13"},{"body":{"nativeSrc":"6375:84:13","nodeType":"YulBlock","src":"6375:84:13","statements":[{"nativeSrc":"6385:29:13","nodeType":"YulAssignment","src":"6385:29:13","value":{"arguments":[{"name":"offset","nativeSrc":"6407:6:13","nodeType":"YulIdentifier","src":"6407:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"6394:12:13","nodeType":"YulIdentifier","src":"6394:12:13"},"nativeSrc":"6394:20:13","nodeType":"YulFunctionCall","src":"6394:20:13"},"variableNames":[{"name":"value","nativeSrc":"6385:5:13","nodeType":"YulIdentifier","src":"6385:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6447:5:13","nodeType":"YulIdentifier","src":"6447:5:13"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"6423:23:13","nodeType":"YulIdentifier","src":"6423:23:13"},"nativeSrc":"6423:30:13","nodeType":"YulFunctionCall","src":"6423:30:13"},"nativeSrc":"6423:30:13","nodeType":"YulExpressionStatement","src":"6423:30:13"}]},"name":"abi_decode_t_bool","nativeSrc":"6326:133:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6353:6:13","nodeType":"YulTypedName","src":"6353:6:13","type":""},{"name":"end","nativeSrc":"6361:3:13","nodeType":"YulTypedName","src":"6361:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6369:5:13","nodeType":"YulTypedName","src":"6369:5:13","type":""}],"src":"6326:133:13"},{"body":{"nativeSrc":"6545:388:13","nodeType":"YulBlock","src":"6545:388:13","statements":[{"body":{"nativeSrc":"6591:83:13","nodeType":"YulBlock","src":"6591:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"6593:77:13","nodeType":"YulIdentifier","src":"6593:77:13"},"nativeSrc":"6593:79:13","nodeType":"YulFunctionCall","src":"6593:79:13"},"nativeSrc":"6593:79:13","nodeType":"YulExpressionStatement","src":"6593:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6566:7:13","nodeType":"YulIdentifier","src":"6566:7:13"},{"name":"headStart","nativeSrc":"6575:9:13","nodeType":"YulIdentifier","src":"6575:9:13"}],"functionName":{"name":"sub","nativeSrc":"6562:3:13","nodeType":"YulIdentifier","src":"6562:3:13"},"nativeSrc":"6562:23:13","nodeType":"YulFunctionCall","src":"6562:23:13"},{"kind":"number","nativeSrc":"6587:2:13","nodeType":"YulLiteral","src":"6587:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6558:3:13","nodeType":"YulIdentifier","src":"6558:3:13"},"nativeSrc":"6558:32:13","nodeType":"YulFunctionCall","src":"6558:32:13"},"nativeSrc":"6555:119:13","nodeType":"YulIf","src":"6555:119:13"},{"nativeSrc":"6684:117:13","nodeType":"YulBlock","src":"6684:117:13","statements":[{"nativeSrc":"6699:15:13","nodeType":"YulVariableDeclaration","src":"6699:15:13","value":{"kind":"number","nativeSrc":"6713:1:13","nodeType":"YulLiteral","src":"6713:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"6703:6:13","nodeType":"YulTypedName","src":"6703:6:13","type":""}]},{"nativeSrc":"6728:63:13","nodeType":"YulAssignment","src":"6728:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6763:9:13","nodeType":"YulIdentifier","src":"6763:9:13"},{"name":"offset","nativeSrc":"6774:6:13","nodeType":"YulIdentifier","src":"6774:6:13"}],"functionName":{"name":"add","nativeSrc":"6759:3:13","nodeType":"YulIdentifier","src":"6759:3:13"},"nativeSrc":"6759:22:13","nodeType":"YulFunctionCall","src":"6759:22:13"},{"name":"dataEnd","nativeSrc":"6783:7:13","nodeType":"YulIdentifier","src":"6783:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6738:20:13","nodeType":"YulIdentifier","src":"6738:20:13"},"nativeSrc":"6738:53:13","nodeType":"YulFunctionCall","src":"6738:53:13"},"variableNames":[{"name":"value0","nativeSrc":"6728:6:13","nodeType":"YulIdentifier","src":"6728:6:13"}]}]},{"nativeSrc":"6811:115:13","nodeType":"YulBlock","src":"6811:115:13","statements":[{"nativeSrc":"6826:16:13","nodeType":"YulVariableDeclaration","src":"6826:16:13","value":{"kind":"number","nativeSrc":"6840:2:13","nodeType":"YulLiteral","src":"6840:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"6830:6:13","nodeType":"YulTypedName","src":"6830:6:13","type":""}]},{"nativeSrc":"6856:60:13","nodeType":"YulAssignment","src":"6856:60:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6888:9:13","nodeType":"YulIdentifier","src":"6888:9:13"},{"name":"offset","nativeSrc":"6899:6:13","nodeType":"YulIdentifier","src":"6899:6:13"}],"functionName":{"name":"add","nativeSrc":"6884:3:13","nodeType":"YulIdentifier","src":"6884:3:13"},"nativeSrc":"6884:22:13","nodeType":"YulFunctionCall","src":"6884:22:13"},{"name":"dataEnd","nativeSrc":"6908:7:13","nodeType":"YulIdentifier","src":"6908:7:13"}],"functionName":{"name":"abi_decode_t_bool","nativeSrc":"6866:17:13","nodeType":"YulIdentifier","src":"6866:17:13"},"nativeSrc":"6866:50:13","nodeType":"YulFunctionCall","src":"6866:50:13"},"variableNames":[{"name":"value1","nativeSrc":"6856:6:13","nodeType":"YulIdentifier","src":"6856:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"6465:468:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6507:9:13","nodeType":"YulTypedName","src":"6507:9:13","type":""},{"name":"dataEnd","nativeSrc":"6518:7:13","nodeType":"YulTypedName","src":"6518:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6530:6:13","nodeType":"YulTypedName","src":"6530:6:13","type":""},{"name":"value1","nativeSrc":"6538:6:13","nodeType":"YulTypedName","src":"6538:6:13","type":""}],"src":"6465:468:13"},{"body":{"nativeSrc":"7028:28:13","nodeType":"YulBlock","src":"7028:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7045:1:13","nodeType":"YulLiteral","src":"7045:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7048:1:13","nodeType":"YulLiteral","src":"7048:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7038:6:13","nodeType":"YulIdentifier","src":"7038:6:13"},"nativeSrc":"7038:12:13","nodeType":"YulFunctionCall","src":"7038:12:13"},"nativeSrc":"7038:12:13","nodeType":"YulExpressionStatement","src":"7038:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"6939:117:13","nodeType":"YulFunctionDefinition","src":"6939:117:13"},{"body":{"nativeSrc":"7151:28:13","nodeType":"YulBlock","src":"7151:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7168:1:13","nodeType":"YulLiteral","src":"7168:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7171:1:13","nodeType":"YulLiteral","src":"7171:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7161:6:13","nodeType":"YulIdentifier","src":"7161:6:13"},"nativeSrc":"7161:12:13","nodeType":"YulFunctionCall","src":"7161:12:13"},"nativeSrc":"7161:12:13","nodeType":"YulExpressionStatement","src":"7161:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"7062:117:13","nodeType":"YulFunctionDefinition","src":"7062:117:13"},{"body":{"nativeSrc":"7213:152:13","nodeType":"YulBlock","src":"7213:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7230:1:13","nodeType":"YulLiteral","src":"7230:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7233:77:13","nodeType":"YulLiteral","src":"7233:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7223:6:13","nodeType":"YulIdentifier","src":"7223:6:13"},"nativeSrc":"7223:88:13","nodeType":"YulFunctionCall","src":"7223:88:13"},"nativeSrc":"7223:88:13","nodeType":"YulExpressionStatement","src":"7223:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7327:1:13","nodeType":"YulLiteral","src":"7327:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"7330:4:13","nodeType":"YulLiteral","src":"7330:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"7320:6:13","nodeType":"YulIdentifier","src":"7320:6:13"},"nativeSrc":"7320:15:13","nodeType":"YulFunctionCall","src":"7320:15:13"},"nativeSrc":"7320:15:13","nodeType":"YulExpressionStatement","src":"7320:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7351:1:13","nodeType":"YulLiteral","src":"7351:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"7354:4:13","nodeType":"YulLiteral","src":"7354:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7344:6:13","nodeType":"YulIdentifier","src":"7344:6:13"},"nativeSrc":"7344:15:13","nodeType":"YulFunctionCall","src":"7344:15:13"},"nativeSrc":"7344:15:13","nodeType":"YulExpressionStatement","src":"7344:15:13"}]},"name":"panic_error_0x41","nativeSrc":"7185:180:13","nodeType":"YulFunctionDefinition","src":"7185:180:13"},{"body":{"nativeSrc":"7414:238:13","nodeType":"YulBlock","src":"7414:238:13","statements":[{"nativeSrc":"7424:58:13","nodeType":"YulVariableDeclaration","src":"7424:58:13","value":{"arguments":[{"name":"memPtr","nativeSrc":"7446:6:13","nodeType":"YulIdentifier","src":"7446:6:13"},{"arguments":[{"name":"size","nativeSrc":"7476:4:13","nodeType":"YulIdentifier","src":"7476:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"7454:21:13","nodeType":"YulIdentifier","src":"7454:21:13"},"nativeSrc":"7454:27:13","nodeType":"YulFunctionCall","src":"7454:27:13"}],"functionName":{"name":"add","nativeSrc":"7442:3:13","nodeType":"YulIdentifier","src":"7442:3:13"},"nativeSrc":"7442:40:13","nodeType":"YulFunctionCall","src":"7442:40:13"},"variables":[{"name":"newFreePtr","nativeSrc":"7428:10:13","nodeType":"YulTypedName","src":"7428:10:13","type":""}]},{"body":{"nativeSrc":"7593:22:13","nodeType":"YulBlock","src":"7593:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7595:16:13","nodeType":"YulIdentifier","src":"7595:16:13"},"nativeSrc":"7595:18:13","nodeType":"YulFunctionCall","src":"7595:18:13"},"nativeSrc":"7595:18:13","nodeType":"YulExpressionStatement","src":"7595:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"7536:10:13","nodeType":"YulIdentifier","src":"7536:10:13"},{"kind":"number","nativeSrc":"7548:18:13","nodeType":"YulLiteral","src":"7548:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7533:2:13","nodeType":"YulIdentifier","src":"7533:2:13"},"nativeSrc":"7533:34:13","nodeType":"YulFunctionCall","src":"7533:34:13"},{"arguments":[{"name":"newFreePtr","nativeSrc":"7572:10:13","nodeType":"YulIdentifier","src":"7572:10:13"},{"name":"memPtr","nativeSrc":"7584:6:13","nodeType":"YulIdentifier","src":"7584:6:13"}],"functionName":{"name":"lt","nativeSrc":"7569:2:13","nodeType":"YulIdentifier","src":"7569:2:13"},"nativeSrc":"7569:22:13","nodeType":"YulFunctionCall","src":"7569:22:13"}],"functionName":{"name":"or","nativeSrc":"7530:2:13","nodeType":"YulIdentifier","src":"7530:2:13"},"nativeSrc":"7530:62:13","nodeType":"YulFunctionCall","src":"7530:62:13"},"nativeSrc":"7527:88:13","nodeType":"YulIf","src":"7527:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7631:2:13","nodeType":"YulLiteral","src":"7631:2:13","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"7635:10:13","nodeType":"YulIdentifier","src":"7635:10:13"}],"functionName":{"name":"mstore","nativeSrc":"7624:6:13","nodeType":"YulIdentifier","src":"7624:6:13"},"nativeSrc":"7624:22:13","nodeType":"YulFunctionCall","src":"7624:22:13"},"nativeSrc":"7624:22:13","nodeType":"YulExpressionStatement","src":"7624:22:13"}]},"name":"finalize_allocation","nativeSrc":"7371:281:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"7400:6:13","nodeType":"YulTypedName","src":"7400:6:13","type":""},{"name":"size","nativeSrc":"7408:4:13","nodeType":"YulTypedName","src":"7408:4:13","type":""}],"src":"7371:281:13"},{"body":{"nativeSrc":"7699:88:13","nodeType":"YulBlock","src":"7699:88:13","statements":[{"nativeSrc":"7709:30:13","nodeType":"YulAssignment","src":"7709:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"7719:18:13","nodeType":"YulIdentifier","src":"7719:18:13"},"nativeSrc":"7719:20:13","nodeType":"YulFunctionCall","src":"7719:20:13"},"variableNames":[{"name":"memPtr","nativeSrc":"7709:6:13","nodeType":"YulIdentifier","src":"7709:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"7768:6:13","nodeType":"YulIdentifier","src":"7768:6:13"},{"name":"size","nativeSrc":"7776:4:13","nodeType":"YulIdentifier","src":"7776:4:13"}],"functionName":{"name":"finalize_allocation","nativeSrc":"7748:19:13","nodeType":"YulIdentifier","src":"7748:19:13"},"nativeSrc":"7748:33:13","nodeType":"YulFunctionCall","src":"7748:33:13"},"nativeSrc":"7748:33:13","nodeType":"YulExpressionStatement","src":"7748:33:13"}]},"name":"allocate_memory","nativeSrc":"7658:129:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"7683:4:13","nodeType":"YulTypedName","src":"7683:4:13","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"7692:6:13","nodeType":"YulTypedName","src":"7692:6:13","type":""}],"src":"7658:129:13"},{"body":{"nativeSrc":"7859:241:13","nodeType":"YulBlock","src":"7859:241:13","statements":[{"body":{"nativeSrc":"7964:22:13","nodeType":"YulBlock","src":"7964:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7966:16:13","nodeType":"YulIdentifier","src":"7966:16:13"},"nativeSrc":"7966:18:13","nodeType":"YulFunctionCall","src":"7966:18:13"},"nativeSrc":"7966:18:13","nodeType":"YulExpressionStatement","src":"7966:18:13"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7936:6:13","nodeType":"YulIdentifier","src":"7936:6:13"},{"kind":"number","nativeSrc":"7944:18:13","nodeType":"YulLiteral","src":"7944:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7933:2:13","nodeType":"YulIdentifier","src":"7933:2:13"},"nativeSrc":"7933:30:13","nodeType":"YulFunctionCall","src":"7933:30:13"},"nativeSrc":"7930:56:13","nodeType":"YulIf","src":"7930:56:13"},{"nativeSrc":"7996:37:13","nodeType":"YulAssignment","src":"7996:37:13","value":{"arguments":[{"name":"length","nativeSrc":"8026:6:13","nodeType":"YulIdentifier","src":"8026:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8004:21:13","nodeType":"YulIdentifier","src":"8004:21:13"},"nativeSrc":"8004:29:13","nodeType":"YulFunctionCall","src":"8004:29:13"},"variableNames":[{"name":"size","nativeSrc":"7996:4:13","nodeType":"YulIdentifier","src":"7996:4:13"}]},{"nativeSrc":"8070:23:13","nodeType":"YulAssignment","src":"8070:23:13","value":{"arguments":[{"name":"size","nativeSrc":"8082:4:13","nodeType":"YulIdentifier","src":"8082:4:13"},{"kind":"number","nativeSrc":"8088:4:13","nodeType":"YulLiteral","src":"8088:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8078:3:13","nodeType":"YulIdentifier","src":"8078:3:13"},"nativeSrc":"8078:15:13","nodeType":"YulFunctionCall","src":"8078:15:13"},"variableNames":[{"name":"size","nativeSrc":"8070:4:13","nodeType":"YulIdentifier","src":"8070:4:13"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"7793:307:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"7843:6:13","nodeType":"YulTypedName","src":"7843:6:13","type":""}],"returnVariables":[{"name":"size","nativeSrc":"7854:4:13","nodeType":"YulTypedName","src":"7854:4:13","type":""}],"src":"7793:307:13"},{"body":{"nativeSrc":"8170:84:13","nodeType":"YulBlock","src":"8170:84:13","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"8194:3:13","nodeType":"YulIdentifier","src":"8194:3:13"},{"name":"src","nativeSrc":"8199:3:13","nodeType":"YulIdentifier","src":"8199:3:13"},{"name":"length","nativeSrc":"8204:6:13","nodeType":"YulIdentifier","src":"8204:6:13"}],"functionName":{"name":"calldatacopy","nativeSrc":"8181:12:13","nodeType":"YulIdentifier","src":"8181:12:13"},"nativeSrc":"8181:30:13","nodeType":"YulFunctionCall","src":"8181:30:13"},"nativeSrc":"8181:30:13","nodeType":"YulExpressionStatement","src":"8181:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"8231:3:13","nodeType":"YulIdentifier","src":"8231:3:13"},{"name":"length","nativeSrc":"8236:6:13","nodeType":"YulIdentifier","src":"8236:6:13"}],"functionName":{"name":"add","nativeSrc":"8227:3:13","nodeType":"YulIdentifier","src":"8227:3:13"},"nativeSrc":"8227:16:13","nodeType":"YulFunctionCall","src":"8227:16:13"},{"kind":"number","nativeSrc":"8245:1:13","nodeType":"YulLiteral","src":"8245:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"8220:6:13","nodeType":"YulIdentifier","src":"8220:6:13"},"nativeSrc":"8220:27:13","nodeType":"YulFunctionCall","src":"8220:27:13"},"nativeSrc":"8220:27:13","nodeType":"YulExpressionStatement","src":"8220:27:13"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"8106:148:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8152:3:13","nodeType":"YulTypedName","src":"8152:3:13","type":""},{"name":"dst","nativeSrc":"8157:3:13","nodeType":"YulTypedName","src":"8157:3:13","type":""},{"name":"length","nativeSrc":"8162:6:13","nodeType":"YulTypedName","src":"8162:6:13","type":""}],"src":"8106:148:13"},{"body":{"nativeSrc":"8343:340:13","nodeType":"YulBlock","src":"8343:340:13","statements":[{"nativeSrc":"8353:74:13","nodeType":"YulAssignment","src":"8353:74:13","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"8419:6:13","nodeType":"YulIdentifier","src":"8419:6:13"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"8378:40:13","nodeType":"YulIdentifier","src":"8378:40:13"},"nativeSrc":"8378:48:13","nodeType":"YulFunctionCall","src":"8378:48:13"}],"functionName":{"name":"allocate_memory","nativeSrc":"8362:15:13","nodeType":"YulIdentifier","src":"8362:15:13"},"nativeSrc":"8362:65:13","nodeType":"YulFunctionCall","src":"8362:65:13"},"variableNames":[{"name":"array","nativeSrc":"8353:5:13","nodeType":"YulIdentifier","src":"8353:5:13"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"8443:5:13","nodeType":"YulIdentifier","src":"8443:5:13"},{"name":"length","nativeSrc":"8450:6:13","nodeType":"YulIdentifier","src":"8450:6:13"}],"functionName":{"name":"mstore","nativeSrc":"8436:6:13","nodeType":"YulIdentifier","src":"8436:6:13"},"nativeSrc":"8436:21:13","nodeType":"YulFunctionCall","src":"8436:21:13"},"nativeSrc":"8436:21:13","nodeType":"YulExpressionStatement","src":"8436:21:13"},{"nativeSrc":"8466:27:13","nodeType":"YulVariableDeclaration","src":"8466:27:13","value":{"arguments":[{"name":"array","nativeSrc":"8481:5:13","nodeType":"YulIdentifier","src":"8481:5:13"},{"kind":"number","nativeSrc":"8488:4:13","nodeType":"YulLiteral","src":"8488:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8477:3:13","nodeType":"YulIdentifier","src":"8477:3:13"},"nativeSrc":"8477:16:13","nodeType":"YulFunctionCall","src":"8477:16:13"},"variables":[{"name":"dst","nativeSrc":"8470:3:13","nodeType":"YulTypedName","src":"8470:3:13","type":""}]},{"body":{"nativeSrc":"8531:83:13","nodeType":"YulBlock","src":"8531:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"8533:77:13","nodeType":"YulIdentifier","src":"8533:77:13"},"nativeSrc":"8533:79:13","nodeType":"YulFunctionCall","src":"8533:79:13"},"nativeSrc":"8533:79:13","nodeType":"YulExpressionStatement","src":"8533:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8512:3:13","nodeType":"YulIdentifier","src":"8512:3:13"},{"name":"length","nativeSrc":"8517:6:13","nodeType":"YulIdentifier","src":"8517:6:13"}],"functionName":{"name":"add","nativeSrc":"8508:3:13","nodeType":"YulIdentifier","src":"8508:3:13"},"nativeSrc":"8508:16:13","nodeType":"YulFunctionCall","src":"8508:16:13"},{"name":"end","nativeSrc":"8526:3:13","nodeType":"YulIdentifier","src":"8526:3:13"}],"functionName":{"name":"gt","nativeSrc":"8505:2:13","nodeType":"YulIdentifier","src":"8505:2:13"},"nativeSrc":"8505:25:13","nodeType":"YulFunctionCall","src":"8505:25:13"},"nativeSrc":"8502:112:13","nodeType":"YulIf","src":"8502:112:13"},{"expression":{"arguments":[{"name":"src","nativeSrc":"8660:3:13","nodeType":"YulIdentifier","src":"8660:3:13"},{"name":"dst","nativeSrc":"8665:3:13","nodeType":"YulIdentifier","src":"8665:3:13"},{"name":"length","nativeSrc":"8670:6:13","nodeType":"YulIdentifier","src":"8670:6:13"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"8623:36:13","nodeType":"YulIdentifier","src":"8623:36:13"},"nativeSrc":"8623:54:13","nodeType":"YulFunctionCall","src":"8623:54:13"},"nativeSrc":"8623:54:13","nodeType":"YulExpressionStatement","src":"8623:54:13"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"8260:423:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8316:3:13","nodeType":"YulTypedName","src":"8316:3:13","type":""},{"name":"length","nativeSrc":"8321:6:13","nodeType":"YulTypedName","src":"8321:6:13","type":""},{"name":"end","nativeSrc":"8329:3:13","nodeType":"YulTypedName","src":"8329:3:13","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8337:5:13","nodeType":"YulTypedName","src":"8337:5:13","type":""}],"src":"8260:423:13"},{"body":{"nativeSrc":"8763:277:13","nodeType":"YulBlock","src":"8763:277:13","statements":[{"body":{"nativeSrc":"8812:83:13","nodeType":"YulBlock","src":"8812:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"8814:77:13","nodeType":"YulIdentifier","src":"8814:77:13"},"nativeSrc":"8814:79:13","nodeType":"YulFunctionCall","src":"8814:79:13"},"nativeSrc":"8814:79:13","nodeType":"YulExpressionStatement","src":"8814:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8791:6:13","nodeType":"YulIdentifier","src":"8791:6:13"},{"kind":"number","nativeSrc":"8799:4:13","nodeType":"YulLiteral","src":"8799:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8787:3:13","nodeType":"YulIdentifier","src":"8787:3:13"},"nativeSrc":"8787:17:13","nodeType":"YulFunctionCall","src":"8787:17:13"},{"name":"end","nativeSrc":"8806:3:13","nodeType":"YulIdentifier","src":"8806:3:13"}],"functionName":{"name":"slt","nativeSrc":"8783:3:13","nodeType":"YulIdentifier","src":"8783:3:13"},"nativeSrc":"8783:27:13","nodeType":"YulFunctionCall","src":"8783:27:13"}],"functionName":{"name":"iszero","nativeSrc":"8776:6:13","nodeType":"YulIdentifier","src":"8776:6:13"},"nativeSrc":"8776:35:13","nodeType":"YulFunctionCall","src":"8776:35:13"},"nativeSrc":"8773:122:13","nodeType":"YulIf","src":"8773:122:13"},{"nativeSrc":"8904:34:13","nodeType":"YulVariableDeclaration","src":"8904:34:13","value":{"arguments":[{"name":"offset","nativeSrc":"8931:6:13","nodeType":"YulIdentifier","src":"8931:6:13"}],"functionName":{"name":"calldataload","nativeSrc":"8918:12:13","nodeType":"YulIdentifier","src":"8918:12:13"},"nativeSrc":"8918:20:13","nodeType":"YulFunctionCall","src":"8918:20:13"},"variables":[{"name":"length","nativeSrc":"8908:6:13","nodeType":"YulTypedName","src":"8908:6:13","type":""}]},{"nativeSrc":"8947:87:13","nodeType":"YulAssignment","src":"8947:87:13","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"9007:6:13","nodeType":"YulIdentifier","src":"9007:6:13"},{"kind":"number","nativeSrc":"9015:4:13","nodeType":"YulLiteral","src":"9015:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9003:3:13","nodeType":"YulIdentifier","src":"9003:3:13"},"nativeSrc":"9003:17:13","nodeType":"YulFunctionCall","src":"9003:17:13"},{"name":"length","nativeSrc":"9022:6:13","nodeType":"YulIdentifier","src":"9022:6:13"},{"name":"end","nativeSrc":"9030:3:13","nodeType":"YulIdentifier","src":"9030:3:13"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"8956:46:13","nodeType":"YulIdentifier","src":"8956:46:13"},"nativeSrc":"8956:78:13","nodeType":"YulFunctionCall","src":"8956:78:13"},"variableNames":[{"name":"array","nativeSrc":"8947:5:13","nodeType":"YulIdentifier","src":"8947:5:13"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"8702:338:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8741:6:13","nodeType":"YulTypedName","src":"8741:6:13","type":""},{"name":"end","nativeSrc":"8749:3:13","nodeType":"YulTypedName","src":"8749:3:13","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8757:5:13","nodeType":"YulTypedName","src":"8757:5:13","type":""}],"src":"8702:338:13"},{"body":{"nativeSrc":"9172:817:13","nodeType":"YulBlock","src":"9172:817:13","statements":[{"body":{"nativeSrc":"9219:83:13","nodeType":"YulBlock","src":"9219:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"9221:77:13","nodeType":"YulIdentifier","src":"9221:77:13"},"nativeSrc":"9221:79:13","nodeType":"YulFunctionCall","src":"9221:79:13"},"nativeSrc":"9221:79:13","nodeType":"YulExpressionStatement","src":"9221:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9193:7:13","nodeType":"YulIdentifier","src":"9193:7:13"},{"name":"headStart","nativeSrc":"9202:9:13","nodeType":"YulIdentifier","src":"9202:9:13"}],"functionName":{"name":"sub","nativeSrc":"9189:3:13","nodeType":"YulIdentifier","src":"9189:3:13"},"nativeSrc":"9189:23:13","nodeType":"YulFunctionCall","src":"9189:23:13"},{"kind":"number","nativeSrc":"9214:3:13","nodeType":"YulLiteral","src":"9214:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9185:3:13","nodeType":"YulIdentifier","src":"9185:3:13"},"nativeSrc":"9185:33:13","nodeType":"YulFunctionCall","src":"9185:33:13"},"nativeSrc":"9182:120:13","nodeType":"YulIf","src":"9182:120:13"},{"nativeSrc":"9312:117:13","nodeType":"YulBlock","src":"9312:117:13","statements":[{"nativeSrc":"9327:15:13","nodeType":"YulVariableDeclaration","src":"9327:15:13","value":{"kind":"number","nativeSrc":"9341:1:13","nodeType":"YulLiteral","src":"9341:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"9331:6:13","nodeType":"YulTypedName","src":"9331:6:13","type":""}]},{"nativeSrc":"9356:63:13","nodeType":"YulAssignment","src":"9356:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9391:9:13","nodeType":"YulIdentifier","src":"9391:9:13"},{"name":"offset","nativeSrc":"9402:6:13","nodeType":"YulIdentifier","src":"9402:6:13"}],"functionName":{"name":"add","nativeSrc":"9387:3:13","nodeType":"YulIdentifier","src":"9387:3:13"},"nativeSrc":"9387:22:13","nodeType":"YulFunctionCall","src":"9387:22:13"},{"name":"dataEnd","nativeSrc":"9411:7:13","nodeType":"YulIdentifier","src":"9411:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9366:20:13","nodeType":"YulIdentifier","src":"9366:20:13"},"nativeSrc":"9366:53:13","nodeType":"YulFunctionCall","src":"9366:53:13"},"variableNames":[{"name":"value0","nativeSrc":"9356:6:13","nodeType":"YulIdentifier","src":"9356:6:13"}]}]},{"nativeSrc":"9439:118:13","nodeType":"YulBlock","src":"9439:118:13","statements":[{"nativeSrc":"9454:16:13","nodeType":"YulVariableDeclaration","src":"9454:16:13","value":{"kind":"number","nativeSrc":"9468:2:13","nodeType":"YulLiteral","src":"9468:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"9458:6:13","nodeType":"YulTypedName","src":"9458:6:13","type":""}]},{"nativeSrc":"9484:63:13","nodeType":"YulAssignment","src":"9484:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9519:9:13","nodeType":"YulIdentifier","src":"9519:9:13"},{"name":"offset","nativeSrc":"9530:6:13","nodeType":"YulIdentifier","src":"9530:6:13"}],"functionName":{"name":"add","nativeSrc":"9515:3:13","nodeType":"YulIdentifier","src":"9515:3:13"},"nativeSrc":"9515:22:13","nodeType":"YulFunctionCall","src":"9515:22:13"},{"name":"dataEnd","nativeSrc":"9539:7:13","nodeType":"YulIdentifier","src":"9539:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9494:20:13","nodeType":"YulIdentifier","src":"9494:20:13"},"nativeSrc":"9494:53:13","nodeType":"YulFunctionCall","src":"9494:53:13"},"variableNames":[{"name":"value1","nativeSrc":"9484:6:13","nodeType":"YulIdentifier","src":"9484:6:13"}]}]},{"nativeSrc":"9567:118:13","nodeType":"YulBlock","src":"9567:118:13","statements":[{"nativeSrc":"9582:16:13","nodeType":"YulVariableDeclaration","src":"9582:16:13","value":{"kind":"number","nativeSrc":"9596:2:13","nodeType":"YulLiteral","src":"9596:2:13","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"9586:6:13","nodeType":"YulTypedName","src":"9586:6:13","type":""}]},{"nativeSrc":"9612:63:13","nodeType":"YulAssignment","src":"9612:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9647:9:13","nodeType":"YulIdentifier","src":"9647:9:13"},{"name":"offset","nativeSrc":"9658:6:13","nodeType":"YulIdentifier","src":"9658:6:13"}],"functionName":{"name":"add","nativeSrc":"9643:3:13","nodeType":"YulIdentifier","src":"9643:3:13"},"nativeSrc":"9643:22:13","nodeType":"YulFunctionCall","src":"9643:22:13"},{"name":"dataEnd","nativeSrc":"9667:7:13","nodeType":"YulIdentifier","src":"9667:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"9622:20:13","nodeType":"YulIdentifier","src":"9622:20:13"},"nativeSrc":"9622:53:13","nodeType":"YulFunctionCall","src":"9622:53:13"},"variableNames":[{"name":"value2","nativeSrc":"9612:6:13","nodeType":"YulIdentifier","src":"9612:6:13"}]}]},{"nativeSrc":"9695:287:13","nodeType":"YulBlock","src":"9695:287:13","statements":[{"nativeSrc":"9710:46:13","nodeType":"YulVariableDeclaration","src":"9710:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9741:9:13","nodeType":"YulIdentifier","src":"9741:9:13"},{"kind":"number","nativeSrc":"9752:2:13","nodeType":"YulLiteral","src":"9752:2:13","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9737:3:13","nodeType":"YulIdentifier","src":"9737:3:13"},"nativeSrc":"9737:18:13","nodeType":"YulFunctionCall","src":"9737:18:13"}],"functionName":{"name":"calldataload","nativeSrc":"9724:12:13","nodeType":"YulIdentifier","src":"9724:12:13"},"nativeSrc":"9724:32:13","nodeType":"YulFunctionCall","src":"9724:32:13"},"variables":[{"name":"offset","nativeSrc":"9714:6:13","nodeType":"YulTypedName","src":"9714:6:13","type":""}]},{"body":{"nativeSrc":"9803:83:13","nodeType":"YulBlock","src":"9803:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"9805:77:13","nodeType":"YulIdentifier","src":"9805:77:13"},"nativeSrc":"9805:79:13","nodeType":"YulFunctionCall","src":"9805:79:13"},"nativeSrc":"9805:79:13","nodeType":"YulExpressionStatement","src":"9805:79:13"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9775:6:13","nodeType":"YulIdentifier","src":"9775:6:13"},{"kind":"number","nativeSrc":"9783:18:13","nodeType":"YulLiteral","src":"9783:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9772:2:13","nodeType":"YulIdentifier","src":"9772:2:13"},"nativeSrc":"9772:30:13","nodeType":"YulFunctionCall","src":"9772:30:13"},"nativeSrc":"9769:117:13","nodeType":"YulIf","src":"9769:117:13"},{"nativeSrc":"9900:72:13","nodeType":"YulAssignment","src":"9900:72:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9944:9:13","nodeType":"YulIdentifier","src":"9944:9:13"},{"name":"offset","nativeSrc":"9955:6:13","nodeType":"YulIdentifier","src":"9955:6:13"}],"functionName":{"name":"add","nativeSrc":"9940:3:13","nodeType":"YulIdentifier","src":"9940:3:13"},"nativeSrc":"9940:22:13","nodeType":"YulFunctionCall","src":"9940:22:13"},{"name":"dataEnd","nativeSrc":"9964:7:13","nodeType":"YulIdentifier","src":"9964:7:13"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"9910:29:13","nodeType":"YulIdentifier","src":"9910:29:13"},"nativeSrc":"9910:62:13","nodeType":"YulFunctionCall","src":"9910:62:13"},"variableNames":[{"name":"value3","nativeSrc":"9900:6:13","nodeType":"YulIdentifier","src":"9900:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"9046:943:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9118:9:13","nodeType":"YulTypedName","src":"9118:9:13","type":""},{"name":"dataEnd","nativeSrc":"9129:7:13","nodeType":"YulTypedName","src":"9129:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9141:6:13","nodeType":"YulTypedName","src":"9141:6:13","type":""},{"name":"value1","nativeSrc":"9149:6:13","nodeType":"YulTypedName","src":"9149:6:13","type":""},{"name":"value2","nativeSrc":"9157:6:13","nodeType":"YulTypedName","src":"9157:6:13","type":""},{"name":"value3","nativeSrc":"9165:6:13","nodeType":"YulTypedName","src":"9165:6:13","type":""}],"src":"9046:943:13"},{"body":{"nativeSrc":"10078:391:13","nodeType":"YulBlock","src":"10078:391:13","statements":[{"body":{"nativeSrc":"10124:83:13","nodeType":"YulBlock","src":"10124:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"10126:77:13","nodeType":"YulIdentifier","src":"10126:77:13"},"nativeSrc":"10126:79:13","nodeType":"YulFunctionCall","src":"10126:79:13"},"nativeSrc":"10126:79:13","nodeType":"YulExpressionStatement","src":"10126:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10099:7:13","nodeType":"YulIdentifier","src":"10099:7:13"},{"name":"headStart","nativeSrc":"10108:9:13","nodeType":"YulIdentifier","src":"10108:9:13"}],"functionName":{"name":"sub","nativeSrc":"10095:3:13","nodeType":"YulIdentifier","src":"10095:3:13"},"nativeSrc":"10095:23:13","nodeType":"YulFunctionCall","src":"10095:23:13"},{"kind":"number","nativeSrc":"10120:2:13","nodeType":"YulLiteral","src":"10120:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10091:3:13","nodeType":"YulIdentifier","src":"10091:3:13"},"nativeSrc":"10091:32:13","nodeType":"YulFunctionCall","src":"10091:32:13"},"nativeSrc":"10088:119:13","nodeType":"YulIf","src":"10088:119:13"},{"nativeSrc":"10217:117:13","nodeType":"YulBlock","src":"10217:117:13","statements":[{"nativeSrc":"10232:15:13","nodeType":"YulVariableDeclaration","src":"10232:15:13","value":{"kind":"number","nativeSrc":"10246:1:13","nodeType":"YulLiteral","src":"10246:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"10236:6:13","nodeType":"YulTypedName","src":"10236:6:13","type":""}]},{"nativeSrc":"10261:63:13","nodeType":"YulAssignment","src":"10261:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10296:9:13","nodeType":"YulIdentifier","src":"10296:9:13"},{"name":"offset","nativeSrc":"10307:6:13","nodeType":"YulIdentifier","src":"10307:6:13"}],"functionName":{"name":"add","nativeSrc":"10292:3:13","nodeType":"YulIdentifier","src":"10292:3:13"},"nativeSrc":"10292:22:13","nodeType":"YulFunctionCall","src":"10292:22:13"},{"name":"dataEnd","nativeSrc":"10316:7:13","nodeType":"YulIdentifier","src":"10316:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10271:20:13","nodeType":"YulIdentifier","src":"10271:20:13"},"nativeSrc":"10271:53:13","nodeType":"YulFunctionCall","src":"10271:53:13"},"variableNames":[{"name":"value0","nativeSrc":"10261:6:13","nodeType":"YulIdentifier","src":"10261:6:13"}]}]},{"nativeSrc":"10344:118:13","nodeType":"YulBlock","src":"10344:118:13","statements":[{"nativeSrc":"10359:16:13","nodeType":"YulVariableDeclaration","src":"10359:16:13","value":{"kind":"number","nativeSrc":"10373:2:13","nodeType":"YulLiteral","src":"10373:2:13","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"10363:6:13","nodeType":"YulTypedName","src":"10363:6:13","type":""}]},{"nativeSrc":"10389:63:13","nodeType":"YulAssignment","src":"10389:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10424:9:13","nodeType":"YulIdentifier","src":"10424:9:13"},{"name":"offset","nativeSrc":"10435:6:13","nodeType":"YulIdentifier","src":"10435:6:13"}],"functionName":{"name":"add","nativeSrc":"10420:3:13","nodeType":"YulIdentifier","src":"10420:3:13"},"nativeSrc":"10420:22:13","nodeType":"YulFunctionCall","src":"10420:22:13"},{"name":"dataEnd","nativeSrc":"10444:7:13","nodeType":"YulIdentifier","src":"10444:7:13"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10399:20:13","nodeType":"YulIdentifier","src":"10399:20:13"},"nativeSrc":"10399:53:13","nodeType":"YulFunctionCall","src":"10399:53:13"},"variableNames":[{"name":"value1","nativeSrc":"10389:6:13","nodeType":"YulIdentifier","src":"10389:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"9995:474:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10040:9:13","nodeType":"YulTypedName","src":"10040:9:13","type":""},{"name":"dataEnd","nativeSrc":"10051:7:13","nodeType":"YulTypedName","src":"10051:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10063:6:13","nodeType":"YulTypedName","src":"10063:6:13","type":""},{"name":"value1","nativeSrc":"10071:6:13","nodeType":"YulTypedName","src":"10071:6:13","type":""}],"src":"9995:474:13"},{"body":{"nativeSrc":"10503:152:13","nodeType":"YulBlock","src":"10503:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10520:1:13","nodeType":"YulLiteral","src":"10520:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"10523:77:13","nodeType":"YulLiteral","src":"10523:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10513:6:13","nodeType":"YulIdentifier","src":"10513:6:13"},"nativeSrc":"10513:88:13","nodeType":"YulFunctionCall","src":"10513:88:13"},"nativeSrc":"10513:88:13","nodeType":"YulExpressionStatement","src":"10513:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10617:1:13","nodeType":"YulLiteral","src":"10617:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"10620:4:13","nodeType":"YulLiteral","src":"10620:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"10610:6:13","nodeType":"YulIdentifier","src":"10610:6:13"},"nativeSrc":"10610:15:13","nodeType":"YulFunctionCall","src":"10610:15:13"},"nativeSrc":"10610:15:13","nodeType":"YulExpressionStatement","src":"10610:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10641:1:13","nodeType":"YulLiteral","src":"10641:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"10644:4:13","nodeType":"YulLiteral","src":"10644:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10634:6:13","nodeType":"YulIdentifier","src":"10634:6:13"},"nativeSrc":"10634:15:13","nodeType":"YulFunctionCall","src":"10634:15:13"},"nativeSrc":"10634:15:13","nodeType":"YulExpressionStatement","src":"10634:15:13"}]},"name":"panic_error_0x22","nativeSrc":"10475:180:13","nodeType":"YulFunctionDefinition","src":"10475:180:13"},{"body":{"nativeSrc":"10712:269:13","nodeType":"YulBlock","src":"10712:269:13","statements":[{"nativeSrc":"10722:22:13","nodeType":"YulAssignment","src":"10722:22:13","value":{"arguments":[{"name":"data","nativeSrc":"10736:4:13","nodeType":"YulIdentifier","src":"10736:4:13"},{"kind":"number","nativeSrc":"10742:1:13","nodeType":"YulLiteral","src":"10742:1:13","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"10732:3:13","nodeType":"YulIdentifier","src":"10732:3:13"},"nativeSrc":"10732:12:13","nodeType":"YulFunctionCall","src":"10732:12:13"},"variableNames":[{"name":"length","nativeSrc":"10722:6:13","nodeType":"YulIdentifier","src":"10722:6:13"}]},{"nativeSrc":"10753:38:13","nodeType":"YulVariableDeclaration","src":"10753:38:13","value":{"arguments":[{"name":"data","nativeSrc":"10783:4:13","nodeType":"YulIdentifier","src":"10783:4:13"},{"kind":"number","nativeSrc":"10789:1:13","nodeType":"YulLiteral","src":"10789:1:13","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"10779:3:13","nodeType":"YulIdentifier","src":"10779:3:13"},"nativeSrc":"10779:12:13","nodeType":"YulFunctionCall","src":"10779:12:13"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"10757:18:13","nodeType":"YulTypedName","src":"10757:18:13","type":""}]},{"body":{"nativeSrc":"10830:51:13","nodeType":"YulBlock","src":"10830:51:13","statements":[{"nativeSrc":"10844:27:13","nodeType":"YulAssignment","src":"10844:27:13","value":{"arguments":[{"name":"length","nativeSrc":"10858:6:13","nodeType":"YulIdentifier","src":"10858:6:13"},{"kind":"number","nativeSrc":"10866:4:13","nodeType":"YulLiteral","src":"10866:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"10854:3:13","nodeType":"YulIdentifier","src":"10854:3:13"},"nativeSrc":"10854:17:13","nodeType":"YulFunctionCall","src":"10854:17:13"},"variableNames":[{"name":"length","nativeSrc":"10844:6:13","nodeType":"YulIdentifier","src":"10844:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10810:18:13","nodeType":"YulIdentifier","src":"10810:18:13"}],"functionName":{"name":"iszero","nativeSrc":"10803:6:13","nodeType":"YulIdentifier","src":"10803:6:13"},"nativeSrc":"10803:26:13","nodeType":"YulFunctionCall","src":"10803:26:13"},"nativeSrc":"10800:81:13","nodeType":"YulIf","src":"10800:81:13"},{"body":{"nativeSrc":"10933:42:13","nodeType":"YulBlock","src":"10933:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"10947:16:13","nodeType":"YulIdentifier","src":"10947:16:13"},"nativeSrc":"10947:18:13","nodeType":"YulFunctionCall","src":"10947:18:13"},"nativeSrc":"10947:18:13","nodeType":"YulExpressionStatement","src":"10947:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10897:18:13","nodeType":"YulIdentifier","src":"10897:18:13"},{"arguments":[{"name":"length","nativeSrc":"10920:6:13","nodeType":"YulIdentifier","src":"10920:6:13"},{"kind":"number","nativeSrc":"10928:2:13","nodeType":"YulLiteral","src":"10928:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"10917:2:13","nodeType":"YulIdentifier","src":"10917:2:13"},"nativeSrc":"10917:14:13","nodeType":"YulFunctionCall","src":"10917:14:13"}],"functionName":{"name":"eq","nativeSrc":"10894:2:13","nodeType":"YulIdentifier","src":"10894:2:13"},"nativeSrc":"10894:38:13","nodeType":"YulFunctionCall","src":"10894:38:13"},"nativeSrc":"10891:84:13","nodeType":"YulIf","src":"10891:84:13"}]},"name":"extract_byte_array_length","nativeSrc":"10661:320:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"10696:4:13","nodeType":"YulTypedName","src":"10696:4:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"10705:6:13","nodeType":"YulTypedName","src":"10705:6:13","type":""}],"src":"10661:320:13"},{"body":{"nativeSrc":"11093:114:13","nodeType":"YulBlock","src":"11093:114:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"11115:6:13","nodeType":"YulIdentifier","src":"11115:6:13"},{"kind":"number","nativeSrc":"11123:1:13","nodeType":"YulLiteral","src":"11123:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11111:3:13","nodeType":"YulIdentifier","src":"11111:3:13"},"nativeSrc":"11111:14:13","nodeType":"YulFunctionCall","src":"11111:14:13"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nativeSrc":"11127:34:13","nodeType":"YulLiteral","src":"11127:34:13","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nativeSrc":"11104:6:13","nodeType":"YulIdentifier","src":"11104:6:13"},"nativeSrc":"11104:58:13","nodeType":"YulFunctionCall","src":"11104:58:13"},"nativeSrc":"11104:58:13","nodeType":"YulExpressionStatement","src":"11104:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"11183:6:13","nodeType":"YulIdentifier","src":"11183:6:13"},{"kind":"number","nativeSrc":"11191:2:13","nodeType":"YulLiteral","src":"11191:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11179:3:13","nodeType":"YulIdentifier","src":"11179:3:13"},"nativeSrc":"11179:15:13","nodeType":"YulFunctionCall","src":"11179:15:13"},{"hexValue":"72","kind":"string","nativeSrc":"11196:3:13","nodeType":"YulLiteral","src":"11196:3:13","type":"","value":"r"}],"functionName":{"name":"mstore","nativeSrc":"11172:6:13","nodeType":"YulIdentifier","src":"11172:6:13"},"nativeSrc":"11172:28:13","nodeType":"YulFunctionCall","src":"11172:28:13"},"nativeSrc":"11172:28:13","nodeType":"YulExpressionStatement","src":"11172:28:13"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"10987:220:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"11085:6:13","nodeType":"YulTypedName","src":"11085:6:13","type":""}],"src":"10987:220:13"},{"body":{"nativeSrc":"11359:220:13","nodeType":"YulBlock","src":"11359:220:13","statements":[{"nativeSrc":"11369:74:13","nodeType":"YulAssignment","src":"11369:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"11435:3:13","nodeType":"YulIdentifier","src":"11435:3:13"},{"kind":"number","nativeSrc":"11440:2:13","nodeType":"YulLiteral","src":"11440:2:13","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"11376:58:13","nodeType":"YulIdentifier","src":"11376:58:13"},"nativeSrc":"11376:67:13","nodeType":"YulFunctionCall","src":"11376:67:13"},"variableNames":[{"name":"pos","nativeSrc":"11369:3:13","nodeType":"YulIdentifier","src":"11369:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"11541:3:13","nodeType":"YulIdentifier","src":"11541:3:13"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nativeSrc":"11452:88:13","nodeType":"YulIdentifier","src":"11452:88:13"},"nativeSrc":"11452:93:13","nodeType":"YulFunctionCall","src":"11452:93:13"},"nativeSrc":"11452:93:13","nodeType":"YulExpressionStatement","src":"11452:93:13"},{"nativeSrc":"11554:19:13","nodeType":"YulAssignment","src":"11554:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"11565:3:13","nodeType":"YulIdentifier","src":"11565:3:13"},{"kind":"number","nativeSrc":"11570:2:13","nodeType":"YulLiteral","src":"11570:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11561:3:13","nodeType":"YulIdentifier","src":"11561:3:13"},"nativeSrc":"11561:12:13","nodeType":"YulFunctionCall","src":"11561:12:13"},"variableNames":[{"name":"end","nativeSrc":"11554:3:13","nodeType":"YulIdentifier","src":"11554:3:13"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"11213:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"11347:3:13","nodeType":"YulTypedName","src":"11347:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"11355:3:13","nodeType":"YulTypedName","src":"11355:3:13","type":""}],"src":"11213:366:13"},{"body":{"nativeSrc":"11756:248:13","nodeType":"YulBlock","src":"11756:248:13","statements":[{"nativeSrc":"11766:26:13","nodeType":"YulAssignment","src":"11766:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"11778:9:13","nodeType":"YulIdentifier","src":"11778:9:13"},{"kind":"number","nativeSrc":"11789:2:13","nodeType":"YulLiteral","src":"11789:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11774:3:13","nodeType":"YulIdentifier","src":"11774:3:13"},"nativeSrc":"11774:18:13","nodeType":"YulFunctionCall","src":"11774:18:13"},"variableNames":[{"name":"tail","nativeSrc":"11766:4:13","nodeType":"YulIdentifier","src":"11766:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11813:9:13","nodeType":"YulIdentifier","src":"11813:9:13"},{"kind":"number","nativeSrc":"11824:1:13","nodeType":"YulLiteral","src":"11824:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11809:3:13","nodeType":"YulIdentifier","src":"11809:3:13"},"nativeSrc":"11809:17:13","nodeType":"YulFunctionCall","src":"11809:17:13"},{"arguments":[{"name":"tail","nativeSrc":"11832:4:13","nodeType":"YulIdentifier","src":"11832:4:13"},{"name":"headStart","nativeSrc":"11838:9:13","nodeType":"YulIdentifier","src":"11838:9:13"}],"functionName":{"name":"sub","nativeSrc":"11828:3:13","nodeType":"YulIdentifier","src":"11828:3:13"},"nativeSrc":"11828:20:13","nodeType":"YulFunctionCall","src":"11828:20:13"}],"functionName":{"name":"mstore","nativeSrc":"11802:6:13","nodeType":"YulIdentifier","src":"11802:6:13"},"nativeSrc":"11802:47:13","nodeType":"YulFunctionCall","src":"11802:47:13"},"nativeSrc":"11802:47:13","nodeType":"YulExpressionStatement","src":"11802:47:13"},{"nativeSrc":"11858:139:13","nodeType":"YulAssignment","src":"11858:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"11992:4:13","nodeType":"YulIdentifier","src":"11992:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nativeSrc":"11866:124:13","nodeType":"YulIdentifier","src":"11866:124:13"},"nativeSrc":"11866:131:13","nodeType":"YulFunctionCall","src":"11866:131:13"},"variableNames":[{"name":"tail","nativeSrc":"11858:4:13","nodeType":"YulIdentifier","src":"11858:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11585:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11736:9:13","nodeType":"YulTypedName","src":"11736:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11751:4:13","nodeType":"YulTypedName","src":"11751:4:13","type":""}],"src":"11585:419:13"},{"body":{"nativeSrc":"12116:142:13","nodeType":"YulBlock","src":"12116:142:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"12138:6:13","nodeType":"YulIdentifier","src":"12138:6:13"},{"kind":"number","nativeSrc":"12146:1:13","nodeType":"YulLiteral","src":"12146:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12134:3:13","nodeType":"YulIdentifier","src":"12134:3:13"},"nativeSrc":"12134:14:13","nodeType":"YulFunctionCall","src":"12134:14:13"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nativeSrc":"12150:34:13","nodeType":"YulLiteral","src":"12150:34:13","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nativeSrc":"12127:6:13","nodeType":"YulIdentifier","src":"12127:6:13"},"nativeSrc":"12127:58:13","nodeType":"YulFunctionCall","src":"12127:58:13"},"nativeSrc":"12127:58:13","nodeType":"YulExpressionStatement","src":"12127:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"12206:6:13","nodeType":"YulIdentifier","src":"12206:6:13"},{"kind":"number","nativeSrc":"12214:2:13","nodeType":"YulLiteral","src":"12214:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12202:3:13","nodeType":"YulIdentifier","src":"12202:3:13"},"nativeSrc":"12202:15:13","nodeType":"YulFunctionCall","src":"12202:15:13"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nativeSrc":"12219:31:13","nodeType":"YulLiteral","src":"12219:31:13","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nativeSrc":"12195:6:13","nodeType":"YulIdentifier","src":"12195:6:13"},"nativeSrc":"12195:56:13","nodeType":"YulFunctionCall","src":"12195:56:13"},"nativeSrc":"12195:56:13","nodeType":"YulExpressionStatement","src":"12195:56:13"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"12010:248:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"12108:6:13","nodeType":"YulTypedName","src":"12108:6:13","type":""}],"src":"12010:248:13"},{"body":{"nativeSrc":"12410:220:13","nodeType":"YulBlock","src":"12410:220:13","statements":[{"nativeSrc":"12420:74:13","nodeType":"YulAssignment","src":"12420:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"12486:3:13","nodeType":"YulIdentifier","src":"12486:3:13"},{"kind":"number","nativeSrc":"12491:2:13","nodeType":"YulLiteral","src":"12491:2:13","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"12427:58:13","nodeType":"YulIdentifier","src":"12427:58:13"},"nativeSrc":"12427:67:13","nodeType":"YulFunctionCall","src":"12427:67:13"},"variableNames":[{"name":"pos","nativeSrc":"12420:3:13","nodeType":"YulIdentifier","src":"12420:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"12592:3:13","nodeType":"YulIdentifier","src":"12592:3:13"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nativeSrc":"12503:88:13","nodeType":"YulIdentifier","src":"12503:88:13"},"nativeSrc":"12503:93:13","nodeType":"YulFunctionCall","src":"12503:93:13"},"nativeSrc":"12503:93:13","nodeType":"YulExpressionStatement","src":"12503:93:13"},{"nativeSrc":"12605:19:13","nodeType":"YulAssignment","src":"12605:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"12616:3:13","nodeType":"YulIdentifier","src":"12616:3:13"},{"kind":"number","nativeSrc":"12621:2:13","nodeType":"YulLiteral","src":"12621:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12612:3:13","nodeType":"YulIdentifier","src":"12612:3:13"},"nativeSrc":"12612:12:13","nodeType":"YulFunctionCall","src":"12612:12:13"},"variableNames":[{"name":"end","nativeSrc":"12605:3:13","nodeType":"YulIdentifier","src":"12605:3:13"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"12264:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"12398:3:13","nodeType":"YulTypedName","src":"12398:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12406:3:13","nodeType":"YulTypedName","src":"12406:3:13","type":""}],"src":"12264:366:13"},{"body":{"nativeSrc":"12807:248:13","nodeType":"YulBlock","src":"12807:248:13","statements":[{"nativeSrc":"12817:26:13","nodeType":"YulAssignment","src":"12817:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"12829:9:13","nodeType":"YulIdentifier","src":"12829:9:13"},{"kind":"number","nativeSrc":"12840:2:13","nodeType":"YulLiteral","src":"12840:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12825:3:13","nodeType":"YulIdentifier","src":"12825:3:13"},"nativeSrc":"12825:18:13","nodeType":"YulFunctionCall","src":"12825:18:13"},"variableNames":[{"name":"tail","nativeSrc":"12817:4:13","nodeType":"YulIdentifier","src":"12817:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12864:9:13","nodeType":"YulIdentifier","src":"12864:9:13"},{"kind":"number","nativeSrc":"12875:1:13","nodeType":"YulLiteral","src":"12875:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"12860:3:13","nodeType":"YulIdentifier","src":"12860:3:13"},"nativeSrc":"12860:17:13","nodeType":"YulFunctionCall","src":"12860:17:13"},{"arguments":[{"name":"tail","nativeSrc":"12883:4:13","nodeType":"YulIdentifier","src":"12883:4:13"},{"name":"headStart","nativeSrc":"12889:9:13","nodeType":"YulIdentifier","src":"12889:9:13"}],"functionName":{"name":"sub","nativeSrc":"12879:3:13","nodeType":"YulIdentifier","src":"12879:3:13"},"nativeSrc":"12879:20:13","nodeType":"YulFunctionCall","src":"12879:20:13"}],"functionName":{"name":"mstore","nativeSrc":"12853:6:13","nodeType":"YulIdentifier","src":"12853:6:13"},"nativeSrc":"12853:47:13","nodeType":"YulFunctionCall","src":"12853:47:13"},"nativeSrc":"12853:47:13","nodeType":"YulExpressionStatement","src":"12853:47:13"},{"nativeSrc":"12909:139:13","nodeType":"YulAssignment","src":"12909:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"13043:4:13","nodeType":"YulIdentifier","src":"13043:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nativeSrc":"12917:124:13","nodeType":"YulIdentifier","src":"12917:124:13"},"nativeSrc":"12917:131:13","nodeType":"YulFunctionCall","src":"12917:131:13"},"variableNames":[{"name":"tail","nativeSrc":"12909:4:13","nodeType":"YulIdentifier","src":"12909:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12636:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12787:9:13","nodeType":"YulTypedName","src":"12787:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12802:4:13","nodeType":"YulTypedName","src":"12802:4:13","type":""}],"src":"12636:419:13"},{"body":{"nativeSrc":"13167:54:13","nodeType":"YulBlock","src":"13167:54:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13189:6:13","nodeType":"YulIdentifier","src":"13189:6:13"},{"kind":"number","nativeSrc":"13197:1:13","nodeType":"YulLiteral","src":"13197:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13185:3:13","nodeType":"YulIdentifier","src":"13185:3:13"},"nativeSrc":"13185:14:13","nodeType":"YulFunctionCall","src":"13185:14:13"},{"hexValue":"6d61782033204e465473","kind":"string","nativeSrc":"13201:12:13","nodeType":"YulLiteral","src":"13201:12:13","type":"","value":"max 3 NFTs"}],"functionName":{"name":"mstore","nativeSrc":"13178:6:13","nodeType":"YulIdentifier","src":"13178:6:13"},"nativeSrc":"13178:36:13","nodeType":"YulFunctionCall","src":"13178:36:13"},"nativeSrc":"13178:36:13","nodeType":"YulExpressionStatement","src":"13178:36:13"}]},"name":"store_literal_in_memory_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d","nativeSrc":"13061:160:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"13159:6:13","nodeType":"YulTypedName","src":"13159:6:13","type":""}],"src":"13061:160:13"},{"body":{"nativeSrc":"13373:220:13","nodeType":"YulBlock","src":"13373:220:13","statements":[{"nativeSrc":"13383:74:13","nodeType":"YulAssignment","src":"13383:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"13449:3:13","nodeType":"YulIdentifier","src":"13449:3:13"},{"kind":"number","nativeSrc":"13454:2:13","nodeType":"YulLiteral","src":"13454:2:13","type":"","value":"10"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"13390:58:13","nodeType":"YulIdentifier","src":"13390:58:13"},"nativeSrc":"13390:67:13","nodeType":"YulFunctionCall","src":"13390:67:13"},"variableNames":[{"name":"pos","nativeSrc":"13383:3:13","nodeType":"YulIdentifier","src":"13383:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13555:3:13","nodeType":"YulIdentifier","src":"13555:3:13"}],"functionName":{"name":"store_literal_in_memory_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d","nativeSrc":"13466:88:13","nodeType":"YulIdentifier","src":"13466:88:13"},"nativeSrc":"13466:93:13","nodeType":"YulFunctionCall","src":"13466:93:13"},"nativeSrc":"13466:93:13","nodeType":"YulExpressionStatement","src":"13466:93:13"},{"nativeSrc":"13568:19:13","nodeType":"YulAssignment","src":"13568:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"13579:3:13","nodeType":"YulIdentifier","src":"13579:3:13"},{"kind":"number","nativeSrc":"13584:2:13","nodeType":"YulLiteral","src":"13584:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13575:3:13","nodeType":"YulIdentifier","src":"13575:3:13"},"nativeSrc":"13575:12:13","nodeType":"YulFunctionCall","src":"13575:12:13"},"variableNames":[{"name":"end","nativeSrc":"13568:3:13","nodeType":"YulIdentifier","src":"13568:3:13"}]}]},"name":"abi_encode_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d_to_t_string_memory_ptr_fromStack","nativeSrc":"13227:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13361:3:13","nodeType":"YulTypedName","src":"13361:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13369:3:13","nodeType":"YulTypedName","src":"13369:3:13","type":""}],"src":"13227:366:13"},{"body":{"nativeSrc":"13770:248:13","nodeType":"YulBlock","src":"13770:248:13","statements":[{"nativeSrc":"13780:26:13","nodeType":"YulAssignment","src":"13780:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"13792:9:13","nodeType":"YulIdentifier","src":"13792:9:13"},{"kind":"number","nativeSrc":"13803:2:13","nodeType":"YulLiteral","src":"13803:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13788:3:13","nodeType":"YulIdentifier","src":"13788:3:13"},"nativeSrc":"13788:18:13","nodeType":"YulFunctionCall","src":"13788:18:13"},"variableNames":[{"name":"tail","nativeSrc":"13780:4:13","nodeType":"YulIdentifier","src":"13780:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13827:9:13","nodeType":"YulIdentifier","src":"13827:9:13"},{"kind":"number","nativeSrc":"13838:1:13","nodeType":"YulLiteral","src":"13838:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13823:3:13","nodeType":"YulIdentifier","src":"13823:3:13"},"nativeSrc":"13823:17:13","nodeType":"YulFunctionCall","src":"13823:17:13"},{"arguments":[{"name":"tail","nativeSrc":"13846:4:13","nodeType":"YulIdentifier","src":"13846:4:13"},{"name":"headStart","nativeSrc":"13852:9:13","nodeType":"YulIdentifier","src":"13852:9:13"}],"functionName":{"name":"sub","nativeSrc":"13842:3:13","nodeType":"YulIdentifier","src":"13842:3:13"},"nativeSrc":"13842:20:13","nodeType":"YulFunctionCall","src":"13842:20:13"}],"functionName":{"name":"mstore","nativeSrc":"13816:6:13","nodeType":"YulIdentifier","src":"13816:6:13"},"nativeSrc":"13816:47:13","nodeType":"YulFunctionCall","src":"13816:47:13"},"nativeSrc":"13816:47:13","nodeType":"YulExpressionStatement","src":"13816:47:13"},{"nativeSrc":"13872:139:13","nodeType":"YulAssignment","src":"13872:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"14006:4:13","nodeType":"YulIdentifier","src":"14006:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d_to_t_string_memory_ptr_fromStack","nativeSrc":"13880:124:13","nodeType":"YulIdentifier","src":"13880:124:13"},"nativeSrc":"13880:131:13","nodeType":"YulFunctionCall","src":"13880:131:13"},"variableNames":[{"name":"tail","nativeSrc":"13872:4:13","nodeType":"YulIdentifier","src":"13872:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13599:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13750:9:13","nodeType":"YulTypedName","src":"13750:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13765:4:13","nodeType":"YulTypedName","src":"13765:4:13","type":""}],"src":"13599:419:13"},{"body":{"nativeSrc":"14052:152:13","nodeType":"YulBlock","src":"14052:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14069:1:13","nodeType":"YulLiteral","src":"14069:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"14072:77:13","nodeType":"YulLiteral","src":"14072:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"14062:6:13","nodeType":"YulIdentifier","src":"14062:6:13"},"nativeSrc":"14062:88:13","nodeType":"YulFunctionCall","src":"14062:88:13"},"nativeSrc":"14062:88:13","nodeType":"YulExpressionStatement","src":"14062:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14166:1:13","nodeType":"YulLiteral","src":"14166:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"14169:4:13","nodeType":"YulLiteral","src":"14169:4:13","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"14159:6:13","nodeType":"YulIdentifier","src":"14159:6:13"},"nativeSrc":"14159:15:13","nodeType":"YulFunctionCall","src":"14159:15:13"},"nativeSrc":"14159:15:13","nodeType":"YulExpressionStatement","src":"14159:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14190:1:13","nodeType":"YulLiteral","src":"14190:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"14193:4:13","nodeType":"YulLiteral","src":"14193:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14183:6:13","nodeType":"YulIdentifier","src":"14183:6:13"},"nativeSrc":"14183:15:13","nodeType":"YulFunctionCall","src":"14183:15:13"},"nativeSrc":"14183:15:13","nodeType":"YulExpressionStatement","src":"14183:15:13"}]},"name":"panic_error_0x11","nativeSrc":"14024:180:13","nodeType":"YulFunctionDefinition","src":"14024:180:13"},{"body":{"nativeSrc":"14253:190:13","nodeType":"YulBlock","src":"14253:190:13","statements":[{"nativeSrc":"14263:33:13","nodeType":"YulAssignment","src":"14263:33:13","value":{"arguments":[{"name":"value","nativeSrc":"14290:5:13","nodeType":"YulIdentifier","src":"14290:5:13"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"14272:17:13","nodeType":"YulIdentifier","src":"14272:17:13"},"nativeSrc":"14272:24:13","nodeType":"YulFunctionCall","src":"14272:24:13"},"variableNames":[{"name":"value","nativeSrc":"14263:5:13","nodeType":"YulIdentifier","src":"14263:5:13"}]},{"body":{"nativeSrc":"14386:22:13","nodeType":"YulBlock","src":"14386:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"14388:16:13","nodeType":"YulIdentifier","src":"14388:16:13"},"nativeSrc":"14388:18:13","nodeType":"YulFunctionCall","src":"14388:18:13"},"nativeSrc":"14388:18:13","nodeType":"YulExpressionStatement","src":"14388:18:13"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"14311:5:13","nodeType":"YulIdentifier","src":"14311:5:13"},{"kind":"number","nativeSrc":"14318:66:13","nodeType":"YulLiteral","src":"14318:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"14308:2:13","nodeType":"YulIdentifier","src":"14308:2:13"},"nativeSrc":"14308:77:13","nodeType":"YulFunctionCall","src":"14308:77:13"},"nativeSrc":"14305:103:13","nodeType":"YulIf","src":"14305:103:13"},{"nativeSrc":"14417:20:13","nodeType":"YulAssignment","src":"14417:20:13","value":{"arguments":[{"name":"value","nativeSrc":"14428:5:13","nodeType":"YulIdentifier","src":"14428:5:13"},{"kind":"number","nativeSrc":"14435:1:13","nodeType":"YulLiteral","src":"14435:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14424:3:13","nodeType":"YulIdentifier","src":"14424:3:13"},"nativeSrc":"14424:13:13","nodeType":"YulFunctionCall","src":"14424:13:13"},"variableNames":[{"name":"ret","nativeSrc":"14417:3:13","nodeType":"YulIdentifier","src":"14417:3:13"}]}]},"name":"increment_t_uint256","nativeSrc":"14210:233:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14239:5:13","nodeType":"YulTypedName","src":"14239:5:13","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"14249:3:13","nodeType":"YulTypedName","src":"14249:3:13","type":""}],"src":"14210:233:13"},{"body":{"nativeSrc":"14555:126:13","nodeType":"YulBlock","src":"14555:126:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"14577:6:13","nodeType":"YulIdentifier","src":"14577:6:13"},{"kind":"number","nativeSrc":"14585:1:13","nodeType":"YulLiteral","src":"14585:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14573:3:13","nodeType":"YulIdentifier","src":"14573:3:13"},"nativeSrc":"14573:14:13","nodeType":"YulFunctionCall","src":"14573:14:13"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nativeSrc":"14589:34:13","nodeType":"YulLiteral","src":"14589:34:13","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nativeSrc":"14566:6:13","nodeType":"YulIdentifier","src":"14566:6:13"},"nativeSrc":"14566:58:13","nodeType":"YulFunctionCall","src":"14566:58:13"},"nativeSrc":"14566:58:13","nodeType":"YulExpressionStatement","src":"14566:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"14645:6:13","nodeType":"YulIdentifier","src":"14645:6:13"},{"kind":"number","nativeSrc":"14653:2:13","nodeType":"YulLiteral","src":"14653:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14641:3:13","nodeType":"YulIdentifier","src":"14641:3:13"},"nativeSrc":"14641:15:13","nodeType":"YulFunctionCall","src":"14641:15:13"},{"hexValue":"72206f7220617070726f766564","kind":"string","nativeSrc":"14658:15:13","nodeType":"YulLiteral","src":"14658:15:13","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nativeSrc":"14634:6:13","nodeType":"YulIdentifier","src":"14634:6:13"},"nativeSrc":"14634:40:13","nodeType":"YulFunctionCall","src":"14634:40:13"},"nativeSrc":"14634:40:13","nodeType":"YulExpressionStatement","src":"14634:40:13"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"14449:232:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"14547:6:13","nodeType":"YulTypedName","src":"14547:6:13","type":""}],"src":"14449:232:13"},{"body":{"nativeSrc":"14833:220:13","nodeType":"YulBlock","src":"14833:220:13","statements":[{"nativeSrc":"14843:74:13","nodeType":"YulAssignment","src":"14843:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"14909:3:13","nodeType":"YulIdentifier","src":"14909:3:13"},{"kind":"number","nativeSrc":"14914:2:13","nodeType":"YulLiteral","src":"14914:2:13","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"14850:58:13","nodeType":"YulIdentifier","src":"14850:58:13"},"nativeSrc":"14850:67:13","nodeType":"YulFunctionCall","src":"14850:67:13"},"variableNames":[{"name":"pos","nativeSrc":"14843:3:13","nodeType":"YulIdentifier","src":"14843:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"15015:3:13","nodeType":"YulIdentifier","src":"15015:3:13"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nativeSrc":"14926:88:13","nodeType":"YulIdentifier","src":"14926:88:13"},"nativeSrc":"14926:93:13","nodeType":"YulFunctionCall","src":"14926:93:13"},"nativeSrc":"14926:93:13","nodeType":"YulExpressionStatement","src":"14926:93:13"},{"nativeSrc":"15028:19:13","nodeType":"YulAssignment","src":"15028:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"15039:3:13","nodeType":"YulIdentifier","src":"15039:3:13"},{"kind":"number","nativeSrc":"15044:2:13","nodeType":"YulLiteral","src":"15044:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15035:3:13","nodeType":"YulIdentifier","src":"15035:3:13"},"nativeSrc":"15035:12:13","nodeType":"YulFunctionCall","src":"15035:12:13"},"variableNames":[{"name":"end","nativeSrc":"15028:3:13","nodeType":"YulIdentifier","src":"15028:3:13"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"14687:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14821:3:13","nodeType":"YulTypedName","src":"14821:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14829:3:13","nodeType":"YulTypedName","src":"14829:3:13","type":""}],"src":"14687:366:13"},{"body":{"nativeSrc":"15230:248:13","nodeType":"YulBlock","src":"15230:248:13","statements":[{"nativeSrc":"15240:26:13","nodeType":"YulAssignment","src":"15240:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"15252:9:13","nodeType":"YulIdentifier","src":"15252:9:13"},{"kind":"number","nativeSrc":"15263:2:13","nodeType":"YulLiteral","src":"15263:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15248:3:13","nodeType":"YulIdentifier","src":"15248:3:13"},"nativeSrc":"15248:18:13","nodeType":"YulFunctionCall","src":"15248:18:13"},"variableNames":[{"name":"tail","nativeSrc":"15240:4:13","nodeType":"YulIdentifier","src":"15240:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15287:9:13","nodeType":"YulIdentifier","src":"15287:9:13"},{"kind":"number","nativeSrc":"15298:1:13","nodeType":"YulLiteral","src":"15298:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15283:3:13","nodeType":"YulIdentifier","src":"15283:3:13"},"nativeSrc":"15283:17:13","nodeType":"YulFunctionCall","src":"15283:17:13"},{"arguments":[{"name":"tail","nativeSrc":"15306:4:13","nodeType":"YulIdentifier","src":"15306:4:13"},{"name":"headStart","nativeSrc":"15312:9:13","nodeType":"YulIdentifier","src":"15312:9:13"}],"functionName":{"name":"sub","nativeSrc":"15302:3:13","nodeType":"YulIdentifier","src":"15302:3:13"},"nativeSrc":"15302:20:13","nodeType":"YulFunctionCall","src":"15302:20:13"}],"functionName":{"name":"mstore","nativeSrc":"15276:6:13","nodeType":"YulIdentifier","src":"15276:6:13"},"nativeSrc":"15276:47:13","nodeType":"YulFunctionCall","src":"15276:47:13"},"nativeSrc":"15276:47:13","nodeType":"YulExpressionStatement","src":"15276:47:13"},{"nativeSrc":"15332:139:13","nodeType":"YulAssignment","src":"15332:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"15466:4:13","nodeType":"YulIdentifier","src":"15466:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nativeSrc":"15340:124:13","nodeType":"YulIdentifier","src":"15340:124:13"},"nativeSrc":"15340:131:13","nodeType":"YulFunctionCall","src":"15340:131:13"},"variableNames":[{"name":"tail","nativeSrc":"15332:4:13","nodeType":"YulIdentifier","src":"15332:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15059:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15210:9:13","nodeType":"YulTypedName","src":"15210:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15225:4:13","nodeType":"YulTypedName","src":"15225:4:13","type":""}],"src":"15059:419:13"},{"body":{"nativeSrc":"15590:68:13","nodeType":"YulBlock","src":"15590:68:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"15612:6:13","nodeType":"YulIdentifier","src":"15612:6:13"},{"kind":"number","nativeSrc":"15620:1:13","nodeType":"YulLiteral","src":"15620:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15608:3:13","nodeType":"YulIdentifier","src":"15608:3:13"},"nativeSrc":"15608:14:13","nodeType":"YulFunctionCall","src":"15608:14:13"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nativeSrc":"15624:26:13","nodeType":"YulLiteral","src":"15624:26:13","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nativeSrc":"15601:6:13","nodeType":"YulIdentifier","src":"15601:6:13"},"nativeSrc":"15601:50:13","nodeType":"YulFunctionCall","src":"15601:50:13"},"nativeSrc":"15601:50:13","nodeType":"YulExpressionStatement","src":"15601:50:13"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"15484:174:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"15582:6:13","nodeType":"YulTypedName","src":"15582:6:13","type":""}],"src":"15484:174:13"},{"body":{"nativeSrc":"15810:220:13","nodeType":"YulBlock","src":"15810:220:13","statements":[{"nativeSrc":"15820:74:13","nodeType":"YulAssignment","src":"15820:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"15886:3:13","nodeType":"YulIdentifier","src":"15886:3:13"},{"kind":"number","nativeSrc":"15891:2:13","nodeType":"YulLiteral","src":"15891:2:13","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"15827:58:13","nodeType":"YulIdentifier","src":"15827:58:13"},"nativeSrc":"15827:67:13","nodeType":"YulFunctionCall","src":"15827:67:13"},"variableNames":[{"name":"pos","nativeSrc":"15820:3:13","nodeType":"YulIdentifier","src":"15820:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"15992:3:13","nodeType":"YulIdentifier","src":"15992:3:13"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nativeSrc":"15903:88:13","nodeType":"YulIdentifier","src":"15903:88:13"},"nativeSrc":"15903:93:13","nodeType":"YulFunctionCall","src":"15903:93:13"},"nativeSrc":"15903:93:13","nodeType":"YulExpressionStatement","src":"15903:93:13"},{"nativeSrc":"16005:19:13","nodeType":"YulAssignment","src":"16005:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"16016:3:13","nodeType":"YulIdentifier","src":"16016:3:13"},{"kind":"number","nativeSrc":"16021:2:13","nodeType":"YulLiteral","src":"16021:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16012:3:13","nodeType":"YulIdentifier","src":"16012:3:13"},"nativeSrc":"16012:12:13","nodeType":"YulFunctionCall","src":"16012:12:13"},"variableNames":[{"name":"end","nativeSrc":"16005:3:13","nodeType":"YulIdentifier","src":"16005:3:13"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"15664:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15798:3:13","nodeType":"YulTypedName","src":"15798:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15806:3:13","nodeType":"YulTypedName","src":"15806:3:13","type":""}],"src":"15664:366:13"},{"body":{"nativeSrc":"16207:248:13","nodeType":"YulBlock","src":"16207:248:13","statements":[{"nativeSrc":"16217:26:13","nodeType":"YulAssignment","src":"16217:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"16229:9:13","nodeType":"YulIdentifier","src":"16229:9:13"},{"kind":"number","nativeSrc":"16240:2:13","nodeType":"YulLiteral","src":"16240:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16225:3:13","nodeType":"YulIdentifier","src":"16225:3:13"},"nativeSrc":"16225:18:13","nodeType":"YulFunctionCall","src":"16225:18:13"},"variableNames":[{"name":"tail","nativeSrc":"16217:4:13","nodeType":"YulIdentifier","src":"16217:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16264:9:13","nodeType":"YulIdentifier","src":"16264:9:13"},{"kind":"number","nativeSrc":"16275:1:13","nodeType":"YulLiteral","src":"16275:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"16260:3:13","nodeType":"YulIdentifier","src":"16260:3:13"},"nativeSrc":"16260:17:13","nodeType":"YulFunctionCall","src":"16260:17:13"},{"arguments":[{"name":"tail","nativeSrc":"16283:4:13","nodeType":"YulIdentifier","src":"16283:4:13"},{"name":"headStart","nativeSrc":"16289:9:13","nodeType":"YulIdentifier","src":"16289:9:13"}],"functionName":{"name":"sub","nativeSrc":"16279:3:13","nodeType":"YulIdentifier","src":"16279:3:13"},"nativeSrc":"16279:20:13","nodeType":"YulFunctionCall","src":"16279:20:13"}],"functionName":{"name":"mstore","nativeSrc":"16253:6:13","nodeType":"YulIdentifier","src":"16253:6:13"},"nativeSrc":"16253:47:13","nodeType":"YulFunctionCall","src":"16253:47:13"},"nativeSrc":"16253:47:13","nodeType":"YulExpressionStatement","src":"16253:47:13"},{"nativeSrc":"16309:139:13","nodeType":"YulAssignment","src":"16309:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"16443:4:13","nodeType":"YulIdentifier","src":"16443:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nativeSrc":"16317:124:13","nodeType":"YulIdentifier","src":"16317:124:13"},"nativeSrc":"16317:131:13","nodeType":"YulFunctionCall","src":"16317:131:13"},"variableNames":[{"name":"tail","nativeSrc":"16309:4:13","nodeType":"YulIdentifier","src":"16309:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16036:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16187:9:13","nodeType":"YulTypedName","src":"16187:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16202:4:13","nodeType":"YulTypedName","src":"16202:4:13","type":""}],"src":"16036:419:13"},{"body":{"nativeSrc":"16567:122:13","nodeType":"YulBlock","src":"16567:122:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"16589:6:13","nodeType":"YulIdentifier","src":"16589:6:13"},{"kind":"number","nativeSrc":"16597:1:13","nodeType":"YulLiteral","src":"16597:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"16585:3:13","nodeType":"YulIdentifier","src":"16585:3:13"},"nativeSrc":"16585:14:13","nodeType":"YulFunctionCall","src":"16585:14:13"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nativeSrc":"16601:34:13","nodeType":"YulLiteral","src":"16601:34:13","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nativeSrc":"16578:6:13","nodeType":"YulIdentifier","src":"16578:6:13"},"nativeSrc":"16578:58:13","nodeType":"YulFunctionCall","src":"16578:58:13"},"nativeSrc":"16578:58:13","nodeType":"YulExpressionStatement","src":"16578:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"16657:6:13","nodeType":"YulIdentifier","src":"16657:6:13"},{"kind":"number","nativeSrc":"16665:2:13","nodeType":"YulLiteral","src":"16665:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16653:3:13","nodeType":"YulIdentifier","src":"16653:3:13"},"nativeSrc":"16653:15:13","nodeType":"YulFunctionCall","src":"16653:15:13"},{"hexValue":"6c6964206f776e6572","kind":"string","nativeSrc":"16670:11:13","nodeType":"YulLiteral","src":"16670:11:13","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nativeSrc":"16646:6:13","nodeType":"YulIdentifier","src":"16646:6:13"},"nativeSrc":"16646:36:13","nodeType":"YulFunctionCall","src":"16646:36:13"},"nativeSrc":"16646:36:13","nodeType":"YulExpressionStatement","src":"16646:36:13"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"16461:228:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"16559:6:13","nodeType":"YulTypedName","src":"16559:6:13","type":""}],"src":"16461:228:13"},{"body":{"nativeSrc":"16841:220:13","nodeType":"YulBlock","src":"16841:220:13","statements":[{"nativeSrc":"16851:74:13","nodeType":"YulAssignment","src":"16851:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"16917:3:13","nodeType":"YulIdentifier","src":"16917:3:13"},{"kind":"number","nativeSrc":"16922:2:13","nodeType":"YulLiteral","src":"16922:2:13","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"16858:58:13","nodeType":"YulIdentifier","src":"16858:58:13"},"nativeSrc":"16858:67:13","nodeType":"YulFunctionCall","src":"16858:67:13"},"variableNames":[{"name":"pos","nativeSrc":"16851:3:13","nodeType":"YulIdentifier","src":"16851:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"17023:3:13","nodeType":"YulIdentifier","src":"17023:3:13"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nativeSrc":"16934:88:13","nodeType":"YulIdentifier","src":"16934:88:13"},"nativeSrc":"16934:93:13","nodeType":"YulFunctionCall","src":"16934:93:13"},"nativeSrc":"16934:93:13","nodeType":"YulExpressionStatement","src":"16934:93:13"},{"nativeSrc":"17036:19:13","nodeType":"YulAssignment","src":"17036:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"17047:3:13","nodeType":"YulIdentifier","src":"17047:3:13"},{"kind":"number","nativeSrc":"17052:2:13","nodeType":"YulLiteral","src":"17052:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17043:3:13","nodeType":"YulIdentifier","src":"17043:3:13"},"nativeSrc":"17043:12:13","nodeType":"YulFunctionCall","src":"17043:12:13"},"variableNames":[{"name":"end","nativeSrc":"17036:3:13","nodeType":"YulIdentifier","src":"17036:3:13"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"16695:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16829:3:13","nodeType":"YulTypedName","src":"16829:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16837:3:13","nodeType":"YulTypedName","src":"16837:3:13","type":""}],"src":"16695:366:13"},{"body":{"nativeSrc":"17238:248:13","nodeType":"YulBlock","src":"17238:248:13","statements":[{"nativeSrc":"17248:26:13","nodeType":"YulAssignment","src":"17248:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"17260:9:13","nodeType":"YulIdentifier","src":"17260:9:13"},{"kind":"number","nativeSrc":"17271:2:13","nodeType":"YulLiteral","src":"17271:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17256:3:13","nodeType":"YulIdentifier","src":"17256:3:13"},"nativeSrc":"17256:18:13","nodeType":"YulFunctionCall","src":"17256:18:13"},"variableNames":[{"name":"tail","nativeSrc":"17248:4:13","nodeType":"YulIdentifier","src":"17248:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17295:9:13","nodeType":"YulIdentifier","src":"17295:9:13"},{"kind":"number","nativeSrc":"17306:1:13","nodeType":"YulLiteral","src":"17306:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17291:3:13","nodeType":"YulIdentifier","src":"17291:3:13"},"nativeSrc":"17291:17:13","nodeType":"YulFunctionCall","src":"17291:17:13"},{"arguments":[{"name":"tail","nativeSrc":"17314:4:13","nodeType":"YulIdentifier","src":"17314:4:13"},{"name":"headStart","nativeSrc":"17320:9:13","nodeType":"YulIdentifier","src":"17320:9:13"}],"functionName":{"name":"sub","nativeSrc":"17310:3:13","nodeType":"YulIdentifier","src":"17310:3:13"},"nativeSrc":"17310:20:13","nodeType":"YulFunctionCall","src":"17310:20:13"}],"functionName":{"name":"mstore","nativeSrc":"17284:6:13","nodeType":"YulIdentifier","src":"17284:6:13"},"nativeSrc":"17284:47:13","nodeType":"YulFunctionCall","src":"17284:47:13"},"nativeSrc":"17284:47:13","nodeType":"YulExpressionStatement","src":"17284:47:13"},{"nativeSrc":"17340:139:13","nodeType":"YulAssignment","src":"17340:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"17474:4:13","nodeType":"YulIdentifier","src":"17474:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nativeSrc":"17348:124:13","nodeType":"YulIdentifier","src":"17348:124:13"},"nativeSrc":"17348:131:13","nodeType":"YulFunctionCall","src":"17348:131:13"},"variableNames":[{"name":"tail","nativeSrc":"17340:4:13","nodeType":"YulIdentifier","src":"17340:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17067:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17218:9:13","nodeType":"YulTypedName","src":"17218:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17233:4:13","nodeType":"YulTypedName","src":"17233:4:13","type":""}],"src":"17067:419:13"},{"body":{"nativeSrc":"17606:34:13","nodeType":"YulBlock","src":"17606:34:13","statements":[{"nativeSrc":"17616:18:13","nodeType":"YulAssignment","src":"17616:18:13","value":{"name":"pos","nativeSrc":"17631:3:13","nodeType":"YulIdentifier","src":"17631:3:13"},"variableNames":[{"name":"updated_pos","nativeSrc":"17616:11:13","nodeType":"YulIdentifier","src":"17616:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"17492:148:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17578:3:13","nodeType":"YulTypedName","src":"17578:3:13","type":""},{"name":"length","nativeSrc":"17583:6:13","nodeType":"YulTypedName","src":"17583:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"17594:11:13","nodeType":"YulTypedName","src":"17594:11:13","type":""}],"src":"17492:148:13"},{"body":{"nativeSrc":"17756:280:13","nodeType":"YulBlock","src":"17756:280:13","statements":[{"nativeSrc":"17766:53:13","nodeType":"YulVariableDeclaration","src":"17766:53:13","value":{"arguments":[{"name":"value","nativeSrc":"17813:5:13","nodeType":"YulIdentifier","src":"17813:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"17780:32:13","nodeType":"YulIdentifier","src":"17780:32:13"},"nativeSrc":"17780:39:13","nodeType":"YulFunctionCall","src":"17780:39:13"},"variables":[{"name":"length","nativeSrc":"17770:6:13","nodeType":"YulTypedName","src":"17770:6:13","type":""}]},{"nativeSrc":"17828:96:13","nodeType":"YulAssignment","src":"17828:96:13","value":{"arguments":[{"name":"pos","nativeSrc":"17912:3:13","nodeType":"YulIdentifier","src":"17912:3:13"},{"name":"length","nativeSrc":"17917:6:13","nodeType":"YulIdentifier","src":"17917:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"17835:76:13","nodeType":"YulIdentifier","src":"17835:76:13"},"nativeSrc":"17835:89:13","nodeType":"YulFunctionCall","src":"17835:89:13"},"variableNames":[{"name":"pos","nativeSrc":"17828:3:13","nodeType":"YulIdentifier","src":"17828:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"17972:5:13","nodeType":"YulIdentifier","src":"17972:5:13"},{"kind":"number","nativeSrc":"17979:4:13","nodeType":"YulLiteral","src":"17979:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"17968:3:13","nodeType":"YulIdentifier","src":"17968:3:13"},"nativeSrc":"17968:16:13","nodeType":"YulFunctionCall","src":"17968:16:13"},{"name":"pos","nativeSrc":"17986:3:13","nodeType":"YulIdentifier","src":"17986:3:13"},{"name":"length","nativeSrc":"17991:6:13","nodeType":"YulIdentifier","src":"17991:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"17933:34:13","nodeType":"YulIdentifier","src":"17933:34:13"},"nativeSrc":"17933:65:13","nodeType":"YulFunctionCall","src":"17933:65:13"},"nativeSrc":"17933:65:13","nodeType":"YulExpressionStatement","src":"17933:65:13"},{"nativeSrc":"18007:23:13","nodeType":"YulAssignment","src":"18007:23:13","value":{"arguments":[{"name":"pos","nativeSrc":"18018:3:13","nodeType":"YulIdentifier","src":"18018:3:13"},{"name":"length","nativeSrc":"18023:6:13","nodeType":"YulIdentifier","src":"18023:6:13"}],"functionName":{"name":"add","nativeSrc":"18014:3:13","nodeType":"YulIdentifier","src":"18014:3:13"},"nativeSrc":"18014:16:13","nodeType":"YulFunctionCall","src":"18014:16:13"},"variableNames":[{"name":"end","nativeSrc":"18007:3:13","nodeType":"YulIdentifier","src":"18007:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"17646:390:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"17737:5:13","nodeType":"YulTypedName","src":"17737:5:13","type":""},{"name":"pos","nativeSrc":"17744:3:13","nodeType":"YulTypedName","src":"17744:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17752:3:13","nodeType":"YulTypedName","src":"17752:3:13","type":""}],"src":"17646:390:13"},{"body":{"nativeSrc":"18226:251:13","nodeType":"YulBlock","src":"18226:251:13","statements":[{"nativeSrc":"18237:102:13","nodeType":"YulAssignment","src":"18237:102:13","value":{"arguments":[{"name":"value0","nativeSrc":"18326:6:13","nodeType":"YulIdentifier","src":"18326:6:13"},{"name":"pos","nativeSrc":"18335:3:13","nodeType":"YulIdentifier","src":"18335:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"18244:81:13","nodeType":"YulIdentifier","src":"18244:81:13"},"nativeSrc":"18244:95:13","nodeType":"YulFunctionCall","src":"18244:95:13"},"variableNames":[{"name":"pos","nativeSrc":"18237:3:13","nodeType":"YulIdentifier","src":"18237:3:13"}]},{"nativeSrc":"18349:102:13","nodeType":"YulAssignment","src":"18349:102:13","value":{"arguments":[{"name":"value1","nativeSrc":"18438:6:13","nodeType":"YulIdentifier","src":"18438:6:13"},{"name":"pos","nativeSrc":"18447:3:13","nodeType":"YulIdentifier","src":"18447:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"18356:81:13","nodeType":"YulIdentifier","src":"18356:81:13"},"nativeSrc":"18356:95:13","nodeType":"YulFunctionCall","src":"18356:95:13"},"variableNames":[{"name":"pos","nativeSrc":"18349:3:13","nodeType":"YulIdentifier","src":"18349:3:13"}]},{"nativeSrc":"18461:10:13","nodeType":"YulAssignment","src":"18461:10:13","value":{"name":"pos","nativeSrc":"18468:3:13","nodeType":"YulIdentifier","src":"18468:3:13"},"variableNames":[{"name":"end","nativeSrc":"18461:3:13","nodeType":"YulIdentifier","src":"18461:3:13"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"18042:435:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18197:3:13","nodeType":"YulTypedName","src":"18197:3:13","type":""},{"name":"value1","nativeSrc":"18203:6:13","nodeType":"YulTypedName","src":"18203:6:13","type":""},{"name":"value0","nativeSrc":"18211:6:13","nodeType":"YulTypedName","src":"18211:6:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18222:3:13","nodeType":"YulTypedName","src":"18222:3:13","type":""}],"src":"18042:435:13"},{"body":{"nativeSrc":"18589:118:13","nodeType":"YulBlock","src":"18589:118:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18611:6:13","nodeType":"YulIdentifier","src":"18611:6:13"},{"kind":"number","nativeSrc":"18619:1:13","nodeType":"YulLiteral","src":"18619:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18607:3:13","nodeType":"YulIdentifier","src":"18607:3:13"},"nativeSrc":"18607:14:13","nodeType":"YulFunctionCall","src":"18607:14:13"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nativeSrc":"18623:34:13","nodeType":"YulLiteral","src":"18623:34:13","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nativeSrc":"18600:6:13","nodeType":"YulIdentifier","src":"18600:6:13"},"nativeSrc":"18600:58:13","nodeType":"YulFunctionCall","src":"18600:58:13"},"nativeSrc":"18600:58:13","nodeType":"YulExpressionStatement","src":"18600:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18679:6:13","nodeType":"YulIdentifier","src":"18679:6:13"},{"kind":"number","nativeSrc":"18687:2:13","nodeType":"YulLiteral","src":"18687:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18675:3:13","nodeType":"YulIdentifier","src":"18675:3:13"},"nativeSrc":"18675:15:13","nodeType":"YulFunctionCall","src":"18675:15:13"},{"hexValue":"6f776e6572","kind":"string","nativeSrc":"18692:7:13","nodeType":"YulLiteral","src":"18692:7:13","type":"","value":"owner"}],"functionName":{"name":"mstore","nativeSrc":"18668:6:13","nodeType":"YulIdentifier","src":"18668:6:13"},"nativeSrc":"18668:32:13","nodeType":"YulFunctionCall","src":"18668:32:13"},"nativeSrc":"18668:32:13","nodeType":"YulExpressionStatement","src":"18668:32:13"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"18483:224:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"18581:6:13","nodeType":"YulTypedName","src":"18581:6:13","type":""}],"src":"18483:224:13"},{"body":{"nativeSrc":"18859:220:13","nodeType":"YulBlock","src":"18859:220:13","statements":[{"nativeSrc":"18869:74:13","nodeType":"YulAssignment","src":"18869:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"18935:3:13","nodeType":"YulIdentifier","src":"18935:3:13"},{"kind":"number","nativeSrc":"18940:2:13","nodeType":"YulLiteral","src":"18940:2:13","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"18876:58:13","nodeType":"YulIdentifier","src":"18876:58:13"},"nativeSrc":"18876:67:13","nodeType":"YulFunctionCall","src":"18876:67:13"},"variableNames":[{"name":"pos","nativeSrc":"18869:3:13","nodeType":"YulIdentifier","src":"18869:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19041:3:13","nodeType":"YulIdentifier","src":"19041:3:13"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nativeSrc":"18952:88:13","nodeType":"YulIdentifier","src":"18952:88:13"},"nativeSrc":"18952:93:13","nodeType":"YulFunctionCall","src":"18952:93:13"},"nativeSrc":"18952:93:13","nodeType":"YulExpressionStatement","src":"18952:93:13"},{"nativeSrc":"19054:19:13","nodeType":"YulAssignment","src":"19054:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"19065:3:13","nodeType":"YulIdentifier","src":"19065:3:13"},{"kind":"number","nativeSrc":"19070:2:13","nodeType":"YulLiteral","src":"19070:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19061:3:13","nodeType":"YulIdentifier","src":"19061:3:13"},"nativeSrc":"19061:12:13","nodeType":"YulFunctionCall","src":"19061:12:13"},"variableNames":[{"name":"end","nativeSrc":"19054:3:13","nodeType":"YulIdentifier","src":"19054:3:13"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"18713:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18847:3:13","nodeType":"YulTypedName","src":"18847:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18855:3:13","nodeType":"YulTypedName","src":"18855:3:13","type":""}],"src":"18713:366:13"},{"body":{"nativeSrc":"19256:248:13","nodeType":"YulBlock","src":"19256:248:13","statements":[{"nativeSrc":"19266:26:13","nodeType":"YulAssignment","src":"19266:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"19278:9:13","nodeType":"YulIdentifier","src":"19278:9:13"},{"kind":"number","nativeSrc":"19289:2:13","nodeType":"YulLiteral","src":"19289:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19274:3:13","nodeType":"YulIdentifier","src":"19274:3:13"},"nativeSrc":"19274:18:13","nodeType":"YulFunctionCall","src":"19274:18:13"},"variableNames":[{"name":"tail","nativeSrc":"19266:4:13","nodeType":"YulIdentifier","src":"19266:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19313:9:13","nodeType":"YulIdentifier","src":"19313:9:13"},{"kind":"number","nativeSrc":"19324:1:13","nodeType":"YulLiteral","src":"19324:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19309:3:13","nodeType":"YulIdentifier","src":"19309:3:13"},"nativeSrc":"19309:17:13","nodeType":"YulFunctionCall","src":"19309:17:13"},{"arguments":[{"name":"tail","nativeSrc":"19332:4:13","nodeType":"YulIdentifier","src":"19332:4:13"},{"name":"headStart","nativeSrc":"19338:9:13","nodeType":"YulIdentifier","src":"19338:9:13"}],"functionName":{"name":"sub","nativeSrc":"19328:3:13","nodeType":"YulIdentifier","src":"19328:3:13"},"nativeSrc":"19328:20:13","nodeType":"YulFunctionCall","src":"19328:20:13"}],"functionName":{"name":"mstore","nativeSrc":"19302:6:13","nodeType":"YulIdentifier","src":"19302:6:13"},"nativeSrc":"19302:47:13","nodeType":"YulFunctionCall","src":"19302:47:13"},"nativeSrc":"19302:47:13","nodeType":"YulExpressionStatement","src":"19302:47:13"},{"nativeSrc":"19358:139:13","nodeType":"YulAssignment","src":"19358:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"19492:4:13","nodeType":"YulIdentifier","src":"19492:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nativeSrc":"19366:124:13","nodeType":"YulIdentifier","src":"19366:124:13"},"nativeSrc":"19366:131:13","nodeType":"YulFunctionCall","src":"19366:131:13"},"variableNames":[{"name":"tail","nativeSrc":"19358:4:13","nodeType":"YulIdentifier","src":"19358:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19085:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19236:9:13","nodeType":"YulTypedName","src":"19236:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19251:4:13","nodeType":"YulTypedName","src":"19251:4:13","type":""}],"src":"19085:419:13"},{"body":{"nativeSrc":"19616:117:13","nodeType":"YulBlock","src":"19616:117:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"19638:6:13","nodeType":"YulIdentifier","src":"19638:6:13"},{"kind":"number","nativeSrc":"19646:1:13","nodeType":"YulLiteral","src":"19646:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19634:3:13","nodeType":"YulIdentifier","src":"19634:3:13"},"nativeSrc":"19634:14:13","nodeType":"YulFunctionCall","src":"19634:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nativeSrc":"19650:34:13","nodeType":"YulLiteral","src":"19650:34:13","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nativeSrc":"19627:6:13","nodeType":"YulIdentifier","src":"19627:6:13"},"nativeSrc":"19627:58:13","nodeType":"YulFunctionCall","src":"19627:58:13"},"nativeSrc":"19627:58:13","nodeType":"YulExpressionStatement","src":"19627:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"19706:6:13","nodeType":"YulIdentifier","src":"19706:6:13"},{"kind":"number","nativeSrc":"19714:2:13","nodeType":"YulLiteral","src":"19714:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19702:3:13","nodeType":"YulIdentifier","src":"19702:3:13"},"nativeSrc":"19702:15:13","nodeType":"YulFunctionCall","src":"19702:15:13"},{"hexValue":"72657373","kind":"string","nativeSrc":"19719:6:13","nodeType":"YulLiteral","src":"19719:6:13","type":"","value":"ress"}],"functionName":{"name":"mstore","nativeSrc":"19695:6:13","nodeType":"YulIdentifier","src":"19695:6:13"},"nativeSrc":"19695:31:13","nodeType":"YulFunctionCall","src":"19695:31:13"},"nativeSrc":"19695:31:13","nodeType":"YulExpressionStatement","src":"19695:31:13"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"19510:223:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"19608:6:13","nodeType":"YulTypedName","src":"19608:6:13","type":""}],"src":"19510:223:13"},{"body":{"nativeSrc":"19885:220:13","nodeType":"YulBlock","src":"19885:220:13","statements":[{"nativeSrc":"19895:74:13","nodeType":"YulAssignment","src":"19895:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"19961:3:13","nodeType":"YulIdentifier","src":"19961:3:13"},{"kind":"number","nativeSrc":"19966:2:13","nodeType":"YulLiteral","src":"19966:2:13","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"19902:58:13","nodeType":"YulIdentifier","src":"19902:58:13"},"nativeSrc":"19902:67:13","nodeType":"YulFunctionCall","src":"19902:67:13"},"variableNames":[{"name":"pos","nativeSrc":"19895:3:13","nodeType":"YulIdentifier","src":"19895:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"20067:3:13","nodeType":"YulIdentifier","src":"20067:3:13"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nativeSrc":"19978:88:13","nodeType":"YulIdentifier","src":"19978:88:13"},"nativeSrc":"19978:93:13","nodeType":"YulFunctionCall","src":"19978:93:13"},"nativeSrc":"19978:93:13","nodeType":"YulExpressionStatement","src":"19978:93:13"},{"nativeSrc":"20080:19:13","nodeType":"YulAssignment","src":"20080:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"20091:3:13","nodeType":"YulIdentifier","src":"20091:3:13"},{"kind":"number","nativeSrc":"20096:2:13","nodeType":"YulLiteral","src":"20096:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20087:3:13","nodeType":"YulIdentifier","src":"20087:3:13"},"nativeSrc":"20087:12:13","nodeType":"YulFunctionCall","src":"20087:12:13"},"variableNames":[{"name":"end","nativeSrc":"20080:3:13","nodeType":"YulIdentifier","src":"20080:3:13"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"19739:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19873:3:13","nodeType":"YulTypedName","src":"19873:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19881:3:13","nodeType":"YulTypedName","src":"19881:3:13","type":""}],"src":"19739:366:13"},{"body":{"nativeSrc":"20282:248:13","nodeType":"YulBlock","src":"20282:248:13","statements":[{"nativeSrc":"20292:26:13","nodeType":"YulAssignment","src":"20292:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"20304:9:13","nodeType":"YulIdentifier","src":"20304:9:13"},{"kind":"number","nativeSrc":"20315:2:13","nodeType":"YulLiteral","src":"20315:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20300:3:13","nodeType":"YulIdentifier","src":"20300:3:13"},"nativeSrc":"20300:18:13","nodeType":"YulFunctionCall","src":"20300:18:13"},"variableNames":[{"name":"tail","nativeSrc":"20292:4:13","nodeType":"YulIdentifier","src":"20292:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20339:9:13","nodeType":"YulIdentifier","src":"20339:9:13"},{"kind":"number","nativeSrc":"20350:1:13","nodeType":"YulLiteral","src":"20350:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20335:3:13","nodeType":"YulIdentifier","src":"20335:3:13"},"nativeSrc":"20335:17:13","nodeType":"YulFunctionCall","src":"20335:17:13"},{"arguments":[{"name":"tail","nativeSrc":"20358:4:13","nodeType":"YulIdentifier","src":"20358:4:13"},{"name":"headStart","nativeSrc":"20364:9:13","nodeType":"YulIdentifier","src":"20364:9:13"}],"functionName":{"name":"sub","nativeSrc":"20354:3:13","nodeType":"YulIdentifier","src":"20354:3:13"},"nativeSrc":"20354:20:13","nodeType":"YulFunctionCall","src":"20354:20:13"}],"functionName":{"name":"mstore","nativeSrc":"20328:6:13","nodeType":"YulIdentifier","src":"20328:6:13"},"nativeSrc":"20328:47:13","nodeType":"YulFunctionCall","src":"20328:47:13"},"nativeSrc":"20328:47:13","nodeType":"YulExpressionStatement","src":"20328:47:13"},{"nativeSrc":"20384:139:13","nodeType":"YulAssignment","src":"20384:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"20518:4:13","nodeType":"YulIdentifier","src":"20518:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nativeSrc":"20392:124:13","nodeType":"YulIdentifier","src":"20392:124:13"},"nativeSrc":"20392:131:13","nodeType":"YulFunctionCall","src":"20392:131:13"},"variableNames":[{"name":"tail","nativeSrc":"20384:4:13","nodeType":"YulIdentifier","src":"20384:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20111:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20262:9:13","nodeType":"YulTypedName","src":"20262:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20277:4:13","nodeType":"YulTypedName","src":"20277:4:13","type":""}],"src":"20111:419:13"},{"body":{"nativeSrc":"20642:69:13","nodeType":"YulBlock","src":"20642:69:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"20664:6:13","nodeType":"YulIdentifier","src":"20664:6:13"},{"kind":"number","nativeSrc":"20672:1:13","nodeType":"YulLiteral","src":"20672:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20660:3:13","nodeType":"YulIdentifier","src":"20660:3:13"},"nativeSrc":"20660:14:13","nodeType":"YulFunctionCall","src":"20660:14:13"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nativeSrc":"20676:27:13","nodeType":"YulLiteral","src":"20676:27:13","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nativeSrc":"20653:6:13","nodeType":"YulIdentifier","src":"20653:6:13"},"nativeSrc":"20653:51:13","nodeType":"YulFunctionCall","src":"20653:51:13"},"nativeSrc":"20653:51:13","nodeType":"YulExpressionStatement","src":"20653:51:13"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"20536:175:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"20634:6:13","nodeType":"YulTypedName","src":"20634:6:13","type":""}],"src":"20536:175:13"},{"body":{"nativeSrc":"20863:220:13","nodeType":"YulBlock","src":"20863:220:13","statements":[{"nativeSrc":"20873:74:13","nodeType":"YulAssignment","src":"20873:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"20939:3:13","nodeType":"YulIdentifier","src":"20939:3:13"},{"kind":"number","nativeSrc":"20944:2:13","nodeType":"YulLiteral","src":"20944:2:13","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"20880:58:13","nodeType":"YulIdentifier","src":"20880:58:13"},"nativeSrc":"20880:67:13","nodeType":"YulFunctionCall","src":"20880:67:13"},"variableNames":[{"name":"pos","nativeSrc":"20873:3:13","nodeType":"YulIdentifier","src":"20873:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"21045:3:13","nodeType":"YulIdentifier","src":"21045:3:13"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nativeSrc":"20956:88:13","nodeType":"YulIdentifier","src":"20956:88:13"},"nativeSrc":"20956:93:13","nodeType":"YulFunctionCall","src":"20956:93:13"},"nativeSrc":"20956:93:13","nodeType":"YulExpressionStatement","src":"20956:93:13"},{"nativeSrc":"21058:19:13","nodeType":"YulAssignment","src":"21058:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"21069:3:13","nodeType":"YulIdentifier","src":"21069:3:13"},{"kind":"number","nativeSrc":"21074:2:13","nodeType":"YulLiteral","src":"21074:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21065:3:13","nodeType":"YulIdentifier","src":"21065:3:13"},"nativeSrc":"21065:12:13","nodeType":"YulFunctionCall","src":"21065:12:13"},"variableNames":[{"name":"end","nativeSrc":"21058:3:13","nodeType":"YulIdentifier","src":"21058:3:13"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"20717:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20851:3:13","nodeType":"YulTypedName","src":"20851:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20859:3:13","nodeType":"YulTypedName","src":"20859:3:13","type":""}],"src":"20717:366:13"},{"body":{"nativeSrc":"21260:248:13","nodeType":"YulBlock","src":"21260:248:13","statements":[{"nativeSrc":"21270:26:13","nodeType":"YulAssignment","src":"21270:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"21282:9:13","nodeType":"YulIdentifier","src":"21282:9:13"},{"kind":"number","nativeSrc":"21293:2:13","nodeType":"YulLiteral","src":"21293:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21278:3:13","nodeType":"YulIdentifier","src":"21278:3:13"},"nativeSrc":"21278:18:13","nodeType":"YulFunctionCall","src":"21278:18:13"},"variableNames":[{"name":"tail","nativeSrc":"21270:4:13","nodeType":"YulIdentifier","src":"21270:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21317:9:13","nodeType":"YulIdentifier","src":"21317:9:13"},{"kind":"number","nativeSrc":"21328:1:13","nodeType":"YulLiteral","src":"21328:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"21313:3:13","nodeType":"YulIdentifier","src":"21313:3:13"},"nativeSrc":"21313:17:13","nodeType":"YulFunctionCall","src":"21313:17:13"},{"arguments":[{"name":"tail","nativeSrc":"21336:4:13","nodeType":"YulIdentifier","src":"21336:4:13"},{"name":"headStart","nativeSrc":"21342:9:13","nodeType":"YulIdentifier","src":"21342:9:13"}],"functionName":{"name":"sub","nativeSrc":"21332:3:13","nodeType":"YulIdentifier","src":"21332:3:13"},"nativeSrc":"21332:20:13","nodeType":"YulFunctionCall","src":"21332:20:13"}],"functionName":{"name":"mstore","nativeSrc":"21306:6:13","nodeType":"YulIdentifier","src":"21306:6:13"},"nativeSrc":"21306:47:13","nodeType":"YulFunctionCall","src":"21306:47:13"},"nativeSrc":"21306:47:13","nodeType":"YulExpressionStatement","src":"21306:47:13"},{"nativeSrc":"21362:139:13","nodeType":"YulAssignment","src":"21362:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"21496:4:13","nodeType":"YulIdentifier","src":"21496:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nativeSrc":"21370:124:13","nodeType":"YulIdentifier","src":"21370:124:13"},"nativeSrc":"21370:131:13","nodeType":"YulFunctionCall","src":"21370:131:13"},"variableNames":[{"name":"tail","nativeSrc":"21362:4:13","nodeType":"YulIdentifier","src":"21362:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21089:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21240:9:13","nodeType":"YulTypedName","src":"21240:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21255:4:13","nodeType":"YulTypedName","src":"21255:4:13","type":""}],"src":"21089:419:13"},{"body":{"nativeSrc":"21620:131:13","nodeType":"YulBlock","src":"21620:131:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"21642:6:13","nodeType":"YulIdentifier","src":"21642:6:13"},{"kind":"number","nativeSrc":"21650:1:13","nodeType":"YulLiteral","src":"21650:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"21638:3:13","nodeType":"YulIdentifier","src":"21638:3:13"},"nativeSrc":"21638:14:13","nodeType":"YulFunctionCall","src":"21638:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nativeSrc":"21654:34:13","nodeType":"YulLiteral","src":"21654:34:13","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nativeSrc":"21631:6:13","nodeType":"YulIdentifier","src":"21631:6:13"},"nativeSrc":"21631:58:13","nodeType":"YulFunctionCall","src":"21631:58:13"},"nativeSrc":"21631:58:13","nodeType":"YulExpressionStatement","src":"21631:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"21710:6:13","nodeType":"YulIdentifier","src":"21710:6:13"},{"kind":"number","nativeSrc":"21718:2:13","nodeType":"YulLiteral","src":"21718:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21706:3:13","nodeType":"YulIdentifier","src":"21706:3:13"},"nativeSrc":"21706:15:13","nodeType":"YulFunctionCall","src":"21706:15:13"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nativeSrc":"21723:20:13","nodeType":"YulLiteral","src":"21723:20:13","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nativeSrc":"21699:6:13","nodeType":"YulIdentifier","src":"21699:6:13"},"nativeSrc":"21699:45:13","nodeType":"YulFunctionCall","src":"21699:45:13"},"nativeSrc":"21699:45:13","nodeType":"YulExpressionStatement","src":"21699:45:13"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"21514:237:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"21612:6:13","nodeType":"YulTypedName","src":"21612:6:13","type":""}],"src":"21514:237:13"},{"body":{"nativeSrc":"21903:220:13","nodeType":"YulBlock","src":"21903:220:13","statements":[{"nativeSrc":"21913:74:13","nodeType":"YulAssignment","src":"21913:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"21979:3:13","nodeType":"YulIdentifier","src":"21979:3:13"},{"kind":"number","nativeSrc":"21984:2:13","nodeType":"YulLiteral","src":"21984:2:13","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"21920:58:13","nodeType":"YulIdentifier","src":"21920:58:13"},"nativeSrc":"21920:67:13","nodeType":"YulFunctionCall","src":"21920:67:13"},"variableNames":[{"name":"pos","nativeSrc":"21913:3:13","nodeType":"YulIdentifier","src":"21913:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"22085:3:13","nodeType":"YulIdentifier","src":"22085:3:13"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nativeSrc":"21996:88:13","nodeType":"YulIdentifier","src":"21996:88:13"},"nativeSrc":"21996:93:13","nodeType":"YulFunctionCall","src":"21996:93:13"},"nativeSrc":"21996:93:13","nodeType":"YulExpressionStatement","src":"21996:93:13"},{"nativeSrc":"22098:19:13","nodeType":"YulAssignment","src":"22098:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"22109:3:13","nodeType":"YulIdentifier","src":"22109:3:13"},{"kind":"number","nativeSrc":"22114:2:13","nodeType":"YulLiteral","src":"22114:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22105:3:13","nodeType":"YulIdentifier","src":"22105:3:13"},"nativeSrc":"22105:12:13","nodeType":"YulFunctionCall","src":"22105:12:13"},"variableNames":[{"name":"end","nativeSrc":"22098:3:13","nodeType":"YulIdentifier","src":"22098:3:13"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"21757:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21891:3:13","nodeType":"YulTypedName","src":"21891:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21899:3:13","nodeType":"YulTypedName","src":"21899:3:13","type":""}],"src":"21757:366:13"},{"body":{"nativeSrc":"22300:248:13","nodeType":"YulBlock","src":"22300:248:13","statements":[{"nativeSrc":"22310:26:13","nodeType":"YulAssignment","src":"22310:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"22322:9:13","nodeType":"YulIdentifier","src":"22322:9:13"},{"kind":"number","nativeSrc":"22333:2:13","nodeType":"YulLiteral","src":"22333:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22318:3:13","nodeType":"YulIdentifier","src":"22318:3:13"},"nativeSrc":"22318:18:13","nodeType":"YulFunctionCall","src":"22318:18:13"},"variableNames":[{"name":"tail","nativeSrc":"22310:4:13","nodeType":"YulIdentifier","src":"22310:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22357:9:13","nodeType":"YulIdentifier","src":"22357:9:13"},{"kind":"number","nativeSrc":"22368:1:13","nodeType":"YulLiteral","src":"22368:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22353:3:13","nodeType":"YulIdentifier","src":"22353:3:13"},"nativeSrc":"22353:17:13","nodeType":"YulFunctionCall","src":"22353:17:13"},{"arguments":[{"name":"tail","nativeSrc":"22376:4:13","nodeType":"YulIdentifier","src":"22376:4:13"},{"name":"headStart","nativeSrc":"22382:9:13","nodeType":"YulIdentifier","src":"22382:9:13"}],"functionName":{"name":"sub","nativeSrc":"22372:3:13","nodeType":"YulIdentifier","src":"22372:3:13"},"nativeSrc":"22372:20:13","nodeType":"YulFunctionCall","src":"22372:20:13"}],"functionName":{"name":"mstore","nativeSrc":"22346:6:13","nodeType":"YulIdentifier","src":"22346:6:13"},"nativeSrc":"22346:47:13","nodeType":"YulFunctionCall","src":"22346:47:13"},"nativeSrc":"22346:47:13","nodeType":"YulExpressionStatement","src":"22346:47:13"},{"nativeSrc":"22402:139:13","nodeType":"YulAssignment","src":"22402:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"22536:4:13","nodeType":"YulIdentifier","src":"22536:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nativeSrc":"22410:124:13","nodeType":"YulIdentifier","src":"22410:124:13"},"nativeSrc":"22410:131:13","nodeType":"YulFunctionCall","src":"22410:131:13"},"variableNames":[{"name":"tail","nativeSrc":"22402:4:13","nodeType":"YulIdentifier","src":"22402:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"22129:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22280:9:13","nodeType":"YulTypedName","src":"22280:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22295:4:13","nodeType":"YulTypedName","src":"22295:4:13","type":""}],"src":"22129:419:13"},{"body":{"nativeSrc":"22582:152:13","nodeType":"YulBlock","src":"22582:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"22599:1:13","nodeType":"YulLiteral","src":"22599:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"22602:77:13","nodeType":"YulLiteral","src":"22602:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"22592:6:13","nodeType":"YulIdentifier","src":"22592:6:13"},"nativeSrc":"22592:88:13","nodeType":"YulFunctionCall","src":"22592:88:13"},"nativeSrc":"22592:88:13","nodeType":"YulExpressionStatement","src":"22592:88:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22696:1:13","nodeType":"YulLiteral","src":"22696:1:13","type":"","value":"4"},{"kind":"number","nativeSrc":"22699:4:13","nodeType":"YulLiteral","src":"22699:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"22689:6:13","nodeType":"YulIdentifier","src":"22689:6:13"},"nativeSrc":"22689:15:13","nodeType":"YulFunctionCall","src":"22689:15:13"},"nativeSrc":"22689:15:13","nodeType":"YulExpressionStatement","src":"22689:15:13"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22720:1:13","nodeType":"YulLiteral","src":"22720:1:13","type":"","value":"0"},{"kind":"number","nativeSrc":"22723:4:13","nodeType":"YulLiteral","src":"22723:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"22713:6:13","nodeType":"YulIdentifier","src":"22713:6:13"},"nativeSrc":"22713:15:13","nodeType":"YulFunctionCall","src":"22713:15:13"},"nativeSrc":"22713:15:13","nodeType":"YulExpressionStatement","src":"22713:15:13"}]},"name":"panic_error_0x12","nativeSrc":"22554:180:13","nodeType":"YulFunctionDefinition","src":"22554:180:13"},{"body":{"nativeSrc":"22798:40:13","nodeType":"YulBlock","src":"22798:40:13","statements":[{"nativeSrc":"22809:22:13","nodeType":"YulAssignment","src":"22809:22:13","value":{"arguments":[{"name":"value","nativeSrc":"22825:5:13","nodeType":"YulIdentifier","src":"22825:5:13"}],"functionName":{"name":"mload","nativeSrc":"22819:5:13","nodeType":"YulIdentifier","src":"22819:5:13"},"nativeSrc":"22819:12:13","nodeType":"YulFunctionCall","src":"22819:12:13"},"variableNames":[{"name":"length","nativeSrc":"22809:6:13","nodeType":"YulIdentifier","src":"22809:6:13"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"22740:98:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"22781:5:13","nodeType":"YulTypedName","src":"22781:5:13","type":""}],"returnVariables":[{"name":"length","nativeSrc":"22791:6:13","nodeType":"YulTypedName","src":"22791:6:13","type":""}],"src":"22740:98:13"},{"body":{"nativeSrc":"22939:73:13","nodeType":"YulBlock","src":"22939:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"22956:3:13","nodeType":"YulIdentifier","src":"22956:3:13"},{"name":"length","nativeSrc":"22961:6:13","nodeType":"YulIdentifier","src":"22961:6:13"}],"functionName":{"name":"mstore","nativeSrc":"22949:6:13","nodeType":"YulIdentifier","src":"22949:6:13"},"nativeSrc":"22949:19:13","nodeType":"YulFunctionCall","src":"22949:19:13"},"nativeSrc":"22949:19:13","nodeType":"YulExpressionStatement","src":"22949:19:13"},{"nativeSrc":"22977:29:13","nodeType":"YulAssignment","src":"22977:29:13","value":{"arguments":[{"name":"pos","nativeSrc":"22996:3:13","nodeType":"YulIdentifier","src":"22996:3:13"},{"kind":"number","nativeSrc":"23001:4:13","nodeType":"YulLiteral","src":"23001:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"22992:3:13","nodeType":"YulIdentifier","src":"22992:3:13"},"nativeSrc":"22992:14:13","nodeType":"YulFunctionCall","src":"22992:14:13"},"variableNames":[{"name":"updated_pos","nativeSrc":"22977:11:13","nodeType":"YulIdentifier","src":"22977:11:13"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"22844:168:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"22911:3:13","nodeType":"YulTypedName","src":"22911:3:13","type":""},{"name":"length","nativeSrc":"22916:6:13","nodeType":"YulTypedName","src":"22916:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"22927:11:13","nodeType":"YulTypedName","src":"22927:11:13","type":""}],"src":"22844:168:13"},{"body":{"nativeSrc":"23108:283:13","nodeType":"YulBlock","src":"23108:283:13","statements":[{"nativeSrc":"23118:52:13","nodeType":"YulVariableDeclaration","src":"23118:52:13","value":{"arguments":[{"name":"value","nativeSrc":"23164:5:13","nodeType":"YulIdentifier","src":"23164:5:13"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"23132:31:13","nodeType":"YulIdentifier","src":"23132:31:13"},"nativeSrc":"23132:38:13","nodeType":"YulFunctionCall","src":"23132:38:13"},"variables":[{"name":"length","nativeSrc":"23122:6:13","nodeType":"YulTypedName","src":"23122:6:13","type":""}]},{"nativeSrc":"23179:77:13","nodeType":"YulAssignment","src":"23179:77:13","value":{"arguments":[{"name":"pos","nativeSrc":"23244:3:13","nodeType":"YulIdentifier","src":"23244:3:13"},{"name":"length","nativeSrc":"23249:6:13","nodeType":"YulIdentifier","src":"23249:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"23186:57:13","nodeType":"YulIdentifier","src":"23186:57:13"},"nativeSrc":"23186:70:13","nodeType":"YulFunctionCall","src":"23186:70:13"},"variableNames":[{"name":"pos","nativeSrc":"23179:3:13","nodeType":"YulIdentifier","src":"23179:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"23304:5:13","nodeType":"YulIdentifier","src":"23304:5:13"},{"kind":"number","nativeSrc":"23311:4:13","nodeType":"YulLiteral","src":"23311:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23300:3:13","nodeType":"YulIdentifier","src":"23300:3:13"},"nativeSrc":"23300:16:13","nodeType":"YulFunctionCall","src":"23300:16:13"},{"name":"pos","nativeSrc":"23318:3:13","nodeType":"YulIdentifier","src":"23318:3:13"},{"name":"length","nativeSrc":"23323:6:13","nodeType":"YulIdentifier","src":"23323:6:13"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"23265:34:13","nodeType":"YulIdentifier","src":"23265:34:13"},"nativeSrc":"23265:65:13","nodeType":"YulFunctionCall","src":"23265:65:13"},"nativeSrc":"23265:65:13","nodeType":"YulExpressionStatement","src":"23265:65:13"},{"nativeSrc":"23339:46:13","nodeType":"YulAssignment","src":"23339:46:13","value":{"arguments":[{"name":"pos","nativeSrc":"23350:3:13","nodeType":"YulIdentifier","src":"23350:3:13"},{"arguments":[{"name":"length","nativeSrc":"23377:6:13","nodeType":"YulIdentifier","src":"23377:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"23355:21:13","nodeType":"YulIdentifier","src":"23355:21:13"},"nativeSrc":"23355:29:13","nodeType":"YulFunctionCall","src":"23355:29:13"}],"functionName":{"name":"add","nativeSrc":"23346:3:13","nodeType":"YulIdentifier","src":"23346:3:13"},"nativeSrc":"23346:39:13","nodeType":"YulFunctionCall","src":"23346:39:13"},"variableNames":[{"name":"end","nativeSrc":"23339:3:13","nodeType":"YulIdentifier","src":"23339:3:13"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"23018:373:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"23089:5:13","nodeType":"YulTypedName","src":"23089:5:13","type":""},{"name":"pos","nativeSrc":"23096:3:13","nodeType":"YulTypedName","src":"23096:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"23104:3:13","nodeType":"YulTypedName","src":"23104:3:13","type":""}],"src":"23018:373:13"},{"body":{"nativeSrc":"23597:440:13","nodeType":"YulBlock","src":"23597:440:13","statements":[{"nativeSrc":"23607:27:13","nodeType":"YulAssignment","src":"23607:27:13","value":{"arguments":[{"name":"headStart","nativeSrc":"23619:9:13","nodeType":"YulIdentifier","src":"23619:9:13"},{"kind":"number","nativeSrc":"23630:3:13","nodeType":"YulLiteral","src":"23630:3:13","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"23615:3:13","nodeType":"YulIdentifier","src":"23615:3:13"},"nativeSrc":"23615:19:13","nodeType":"YulFunctionCall","src":"23615:19:13"},"variableNames":[{"name":"tail","nativeSrc":"23607:4:13","nodeType":"YulIdentifier","src":"23607:4:13"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"23688:6:13","nodeType":"YulIdentifier","src":"23688:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"23701:9:13","nodeType":"YulIdentifier","src":"23701:9:13"},{"kind":"number","nativeSrc":"23712:1:13","nodeType":"YulLiteral","src":"23712:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"23697:3:13","nodeType":"YulIdentifier","src":"23697:3:13"},"nativeSrc":"23697:17:13","nodeType":"YulFunctionCall","src":"23697:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"23644:43:13","nodeType":"YulIdentifier","src":"23644:43:13"},"nativeSrc":"23644:71:13","nodeType":"YulFunctionCall","src":"23644:71:13"},"nativeSrc":"23644:71:13","nodeType":"YulExpressionStatement","src":"23644:71:13"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"23769:6:13","nodeType":"YulIdentifier","src":"23769:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"23782:9:13","nodeType":"YulIdentifier","src":"23782:9:13"},{"kind":"number","nativeSrc":"23793:2:13","nodeType":"YulLiteral","src":"23793:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23778:3:13","nodeType":"YulIdentifier","src":"23778:3:13"},"nativeSrc":"23778:18:13","nodeType":"YulFunctionCall","src":"23778:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"23725:43:13","nodeType":"YulIdentifier","src":"23725:43:13"},"nativeSrc":"23725:72:13","nodeType":"YulFunctionCall","src":"23725:72:13"},"nativeSrc":"23725:72:13","nodeType":"YulExpressionStatement","src":"23725:72:13"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"23851:6:13","nodeType":"YulIdentifier","src":"23851:6:13"},{"arguments":[{"name":"headStart","nativeSrc":"23864:9:13","nodeType":"YulIdentifier","src":"23864:9:13"},{"kind":"number","nativeSrc":"23875:2:13","nodeType":"YulLiteral","src":"23875:2:13","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23860:3:13","nodeType":"YulIdentifier","src":"23860:3:13"},"nativeSrc":"23860:18:13","nodeType":"YulFunctionCall","src":"23860:18:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"23807:43:13","nodeType":"YulIdentifier","src":"23807:43:13"},"nativeSrc":"23807:72:13","nodeType":"YulFunctionCall","src":"23807:72:13"},"nativeSrc":"23807:72:13","nodeType":"YulExpressionStatement","src":"23807:72:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23900:9:13","nodeType":"YulIdentifier","src":"23900:9:13"},{"kind":"number","nativeSrc":"23911:2:13","nodeType":"YulLiteral","src":"23911:2:13","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"23896:3:13","nodeType":"YulIdentifier","src":"23896:3:13"},"nativeSrc":"23896:18:13","nodeType":"YulFunctionCall","src":"23896:18:13"},{"arguments":[{"name":"tail","nativeSrc":"23920:4:13","nodeType":"YulIdentifier","src":"23920:4:13"},{"name":"headStart","nativeSrc":"23926:9:13","nodeType":"YulIdentifier","src":"23926:9:13"}],"functionName":{"name":"sub","nativeSrc":"23916:3:13","nodeType":"YulIdentifier","src":"23916:3:13"},"nativeSrc":"23916:20:13","nodeType":"YulFunctionCall","src":"23916:20:13"}],"functionName":{"name":"mstore","nativeSrc":"23889:6:13","nodeType":"YulIdentifier","src":"23889:6:13"},"nativeSrc":"23889:48:13","nodeType":"YulFunctionCall","src":"23889:48:13"},"nativeSrc":"23889:48:13","nodeType":"YulExpressionStatement","src":"23889:48:13"},{"nativeSrc":"23946:84:13","nodeType":"YulAssignment","src":"23946:84:13","value":{"arguments":[{"name":"value3","nativeSrc":"24016:6:13","nodeType":"YulIdentifier","src":"24016:6:13"},{"name":"tail","nativeSrc":"24025:4:13","nodeType":"YulIdentifier","src":"24025:4:13"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"23954:61:13","nodeType":"YulIdentifier","src":"23954:61:13"},"nativeSrc":"23954:76:13","nodeType":"YulFunctionCall","src":"23954:76:13"},"variableNames":[{"name":"tail","nativeSrc":"23946:4:13","nodeType":"YulIdentifier","src":"23946:4:13"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"23397:640:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23545:9:13","nodeType":"YulTypedName","src":"23545:9:13","type":""},{"name":"value3","nativeSrc":"23557:6:13","nodeType":"YulTypedName","src":"23557:6:13","type":""},{"name":"value2","nativeSrc":"23565:6:13","nodeType":"YulTypedName","src":"23565:6:13","type":""},{"name":"value1","nativeSrc":"23573:6:13","nodeType":"YulTypedName","src":"23573:6:13","type":""},{"name":"value0","nativeSrc":"23581:6:13","nodeType":"YulTypedName","src":"23581:6:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23592:4:13","nodeType":"YulTypedName","src":"23592:4:13","type":""}],"src":"23397:640:13"},{"body":{"nativeSrc":"24105:79:13","nodeType":"YulBlock","src":"24105:79:13","statements":[{"nativeSrc":"24115:22:13","nodeType":"YulAssignment","src":"24115:22:13","value":{"arguments":[{"name":"offset","nativeSrc":"24130:6:13","nodeType":"YulIdentifier","src":"24130:6:13"}],"functionName":{"name":"mload","nativeSrc":"24124:5:13","nodeType":"YulIdentifier","src":"24124:5:13"},"nativeSrc":"24124:13:13","nodeType":"YulFunctionCall","src":"24124:13:13"},"variableNames":[{"name":"value","nativeSrc":"24115:5:13","nodeType":"YulIdentifier","src":"24115:5:13"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"24172:5:13","nodeType":"YulIdentifier","src":"24172:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"24146:25:13","nodeType":"YulIdentifier","src":"24146:25:13"},"nativeSrc":"24146:32:13","nodeType":"YulFunctionCall","src":"24146:32:13"},"nativeSrc":"24146:32:13","nodeType":"YulExpressionStatement","src":"24146:32:13"}]},"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"24043:141:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"24083:6:13","nodeType":"YulTypedName","src":"24083:6:13","type":""},{"name":"end","nativeSrc":"24091:3:13","nodeType":"YulTypedName","src":"24091:3:13","type":""}],"returnVariables":[{"name":"value","nativeSrc":"24099:5:13","nodeType":"YulTypedName","src":"24099:5:13","type":""}],"src":"24043:141:13"},{"body":{"nativeSrc":"24266:273:13","nodeType":"YulBlock","src":"24266:273:13","statements":[{"body":{"nativeSrc":"24312:83:13","nodeType":"YulBlock","src":"24312:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"24314:77:13","nodeType":"YulIdentifier","src":"24314:77:13"},"nativeSrc":"24314:79:13","nodeType":"YulFunctionCall","src":"24314:79:13"},"nativeSrc":"24314:79:13","nodeType":"YulExpressionStatement","src":"24314:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"24287:7:13","nodeType":"YulIdentifier","src":"24287:7:13"},{"name":"headStart","nativeSrc":"24296:9:13","nodeType":"YulIdentifier","src":"24296:9:13"}],"functionName":{"name":"sub","nativeSrc":"24283:3:13","nodeType":"YulIdentifier","src":"24283:3:13"},"nativeSrc":"24283:23:13","nodeType":"YulFunctionCall","src":"24283:23:13"},{"kind":"number","nativeSrc":"24308:2:13","nodeType":"YulLiteral","src":"24308:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"24279:3:13","nodeType":"YulIdentifier","src":"24279:3:13"},"nativeSrc":"24279:32:13","nodeType":"YulFunctionCall","src":"24279:32:13"},"nativeSrc":"24276:119:13","nodeType":"YulIf","src":"24276:119:13"},{"nativeSrc":"24405:127:13","nodeType":"YulBlock","src":"24405:127:13","statements":[{"nativeSrc":"24420:15:13","nodeType":"YulVariableDeclaration","src":"24420:15:13","value":{"kind":"number","nativeSrc":"24434:1:13","nodeType":"YulLiteral","src":"24434:1:13","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"24424:6:13","nodeType":"YulTypedName","src":"24424:6:13","type":""}]},{"nativeSrc":"24449:73:13","nodeType":"YulAssignment","src":"24449:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24494:9:13","nodeType":"YulIdentifier","src":"24494:9:13"},{"name":"offset","nativeSrc":"24505:6:13","nodeType":"YulIdentifier","src":"24505:6:13"}],"functionName":{"name":"add","nativeSrc":"24490:3:13","nodeType":"YulIdentifier","src":"24490:3:13"},"nativeSrc":"24490:22:13","nodeType":"YulFunctionCall","src":"24490:22:13"},{"name":"dataEnd","nativeSrc":"24514:7:13","nodeType":"YulIdentifier","src":"24514:7:13"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"24459:30:13","nodeType":"YulIdentifier","src":"24459:30:13"},"nativeSrc":"24459:63:13","nodeType":"YulFunctionCall","src":"24459:63:13"},"variableNames":[{"name":"value0","nativeSrc":"24449:6:13","nodeType":"YulIdentifier","src":"24449:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"24190:349:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24236:9:13","nodeType":"YulTypedName","src":"24236:9:13","type":""},{"name":"dataEnd","nativeSrc":"24247:7:13","nodeType":"YulTypedName","src":"24247:7:13","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"24259:6:13","nodeType":"YulTypedName","src":"24259:6:13","type":""}],"src":"24190:349:13"},{"body":{"nativeSrc":"24651:76:13","nodeType":"YulBlock","src":"24651:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"24673:6:13","nodeType":"YulIdentifier","src":"24673:6:13"},{"kind":"number","nativeSrc":"24681:1:13","nodeType":"YulLiteral","src":"24681:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"24669:3:13","nodeType":"YulIdentifier","src":"24669:3:13"},"nativeSrc":"24669:14:13","nodeType":"YulFunctionCall","src":"24669:14:13"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nativeSrc":"24685:34:13","nodeType":"YulLiteral","src":"24685:34:13","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nativeSrc":"24662:6:13","nodeType":"YulIdentifier","src":"24662:6:13"},"nativeSrc":"24662:58:13","nodeType":"YulFunctionCall","src":"24662:58:13"},"nativeSrc":"24662:58:13","nodeType":"YulExpressionStatement","src":"24662:58:13"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nativeSrc":"24545:182:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"24643:6:13","nodeType":"YulTypedName","src":"24643:6:13","type":""}],"src":"24545:182:13"},{"body":{"nativeSrc":"24879:220:13","nodeType":"YulBlock","src":"24879:220:13","statements":[{"nativeSrc":"24889:74:13","nodeType":"YulAssignment","src":"24889:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"24955:3:13","nodeType":"YulIdentifier","src":"24955:3:13"},{"kind":"number","nativeSrc":"24960:2:13","nodeType":"YulLiteral","src":"24960:2:13","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"24896:58:13","nodeType":"YulIdentifier","src":"24896:58:13"},"nativeSrc":"24896:67:13","nodeType":"YulFunctionCall","src":"24896:67:13"},"variableNames":[{"name":"pos","nativeSrc":"24889:3:13","nodeType":"YulIdentifier","src":"24889:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"25061:3:13","nodeType":"YulIdentifier","src":"25061:3:13"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nativeSrc":"24972:88:13","nodeType":"YulIdentifier","src":"24972:88:13"},"nativeSrc":"24972:93:13","nodeType":"YulFunctionCall","src":"24972:93:13"},"nativeSrc":"24972:93:13","nodeType":"YulExpressionStatement","src":"24972:93:13"},{"nativeSrc":"25074:19:13","nodeType":"YulAssignment","src":"25074:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"25085:3:13","nodeType":"YulIdentifier","src":"25085:3:13"},{"kind":"number","nativeSrc":"25090:2:13","nodeType":"YulLiteral","src":"25090:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25081:3:13","nodeType":"YulIdentifier","src":"25081:3:13"},"nativeSrc":"25081:12:13","nodeType":"YulFunctionCall","src":"25081:12:13"},"variableNames":[{"name":"end","nativeSrc":"25074:3:13","nodeType":"YulIdentifier","src":"25074:3:13"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nativeSrc":"24733:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"24867:3:13","nodeType":"YulTypedName","src":"24867:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"24875:3:13","nodeType":"YulTypedName","src":"24875:3:13","type":""}],"src":"24733:366:13"},{"body":{"nativeSrc":"25276:248:13","nodeType":"YulBlock","src":"25276:248:13","statements":[{"nativeSrc":"25286:26:13","nodeType":"YulAssignment","src":"25286:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"25298:9:13","nodeType":"YulIdentifier","src":"25298:9:13"},{"kind":"number","nativeSrc":"25309:2:13","nodeType":"YulLiteral","src":"25309:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25294:3:13","nodeType":"YulIdentifier","src":"25294:3:13"},"nativeSrc":"25294:18:13","nodeType":"YulFunctionCall","src":"25294:18:13"},"variableNames":[{"name":"tail","nativeSrc":"25286:4:13","nodeType":"YulIdentifier","src":"25286:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25333:9:13","nodeType":"YulIdentifier","src":"25333:9:13"},{"kind":"number","nativeSrc":"25344:1:13","nodeType":"YulLiteral","src":"25344:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"25329:3:13","nodeType":"YulIdentifier","src":"25329:3:13"},"nativeSrc":"25329:17:13","nodeType":"YulFunctionCall","src":"25329:17:13"},{"arguments":[{"name":"tail","nativeSrc":"25352:4:13","nodeType":"YulIdentifier","src":"25352:4:13"},{"name":"headStart","nativeSrc":"25358:9:13","nodeType":"YulIdentifier","src":"25358:9:13"}],"functionName":{"name":"sub","nativeSrc":"25348:3:13","nodeType":"YulIdentifier","src":"25348:3:13"},"nativeSrc":"25348:20:13","nodeType":"YulFunctionCall","src":"25348:20:13"}],"functionName":{"name":"mstore","nativeSrc":"25322:6:13","nodeType":"YulIdentifier","src":"25322:6:13"},"nativeSrc":"25322:47:13","nodeType":"YulFunctionCall","src":"25322:47:13"},"nativeSrc":"25322:47:13","nodeType":"YulExpressionStatement","src":"25322:47:13"},{"nativeSrc":"25378:139:13","nodeType":"YulAssignment","src":"25378:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"25512:4:13","nodeType":"YulIdentifier","src":"25512:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nativeSrc":"25386:124:13","nodeType":"YulIdentifier","src":"25386:124:13"},"nativeSrc":"25386:131:13","nodeType":"YulFunctionCall","src":"25386:131:13"},"variableNames":[{"name":"tail","nativeSrc":"25378:4:13","nodeType":"YulIdentifier","src":"25378:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25105:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25256:9:13","nodeType":"YulTypedName","src":"25256:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25271:4:13","nodeType":"YulTypedName","src":"25271:4:13","type":""}],"src":"25105:419:13"},{"body":{"nativeSrc":"25636:72:13","nodeType":"YulBlock","src":"25636:72:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"25658:6:13","nodeType":"YulIdentifier","src":"25658:6:13"},{"kind":"number","nativeSrc":"25666:1:13","nodeType":"YulLiteral","src":"25666:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"25654:3:13","nodeType":"YulIdentifier","src":"25654:3:13"},"nativeSrc":"25654:14:13","nodeType":"YulFunctionCall","src":"25654:14:13"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nativeSrc":"25670:30:13","nodeType":"YulLiteral","src":"25670:30:13","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nativeSrc":"25647:6:13","nodeType":"YulIdentifier","src":"25647:6:13"},"nativeSrc":"25647:54:13","nodeType":"YulFunctionCall","src":"25647:54:13"},"nativeSrc":"25647:54:13","nodeType":"YulExpressionStatement","src":"25647:54:13"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nativeSrc":"25530:178:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"25628:6:13","nodeType":"YulTypedName","src":"25628:6:13","type":""}],"src":"25530:178:13"},{"body":{"nativeSrc":"25860:220:13","nodeType":"YulBlock","src":"25860:220:13","statements":[{"nativeSrc":"25870:74:13","nodeType":"YulAssignment","src":"25870:74:13","value":{"arguments":[{"name":"pos","nativeSrc":"25936:3:13","nodeType":"YulIdentifier","src":"25936:3:13"},{"kind":"number","nativeSrc":"25941:2:13","nodeType":"YulLiteral","src":"25941:2:13","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"25877:58:13","nodeType":"YulIdentifier","src":"25877:58:13"},"nativeSrc":"25877:67:13","nodeType":"YulFunctionCall","src":"25877:67:13"},"variableNames":[{"name":"pos","nativeSrc":"25870:3:13","nodeType":"YulIdentifier","src":"25870:3:13"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"26042:3:13","nodeType":"YulIdentifier","src":"26042:3:13"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nativeSrc":"25953:88:13","nodeType":"YulIdentifier","src":"25953:88:13"},"nativeSrc":"25953:93:13","nodeType":"YulFunctionCall","src":"25953:93:13"},"nativeSrc":"25953:93:13","nodeType":"YulExpressionStatement","src":"25953:93:13"},{"nativeSrc":"26055:19:13","nodeType":"YulAssignment","src":"26055:19:13","value":{"arguments":[{"name":"pos","nativeSrc":"26066:3:13","nodeType":"YulIdentifier","src":"26066:3:13"},{"kind":"number","nativeSrc":"26071:2:13","nodeType":"YulLiteral","src":"26071:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26062:3:13","nodeType":"YulIdentifier","src":"26062:3:13"},"nativeSrc":"26062:12:13","nodeType":"YulFunctionCall","src":"26062:12:13"},"variableNames":[{"name":"end","nativeSrc":"26055:3:13","nodeType":"YulIdentifier","src":"26055:3:13"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nativeSrc":"25714:366:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"25848:3:13","nodeType":"YulTypedName","src":"25848:3:13","type":""}],"returnVariables":[{"name":"end","nativeSrc":"25856:3:13","nodeType":"YulTypedName","src":"25856:3:13","type":""}],"src":"25714:366:13"},{"body":{"nativeSrc":"26257:248:13","nodeType":"YulBlock","src":"26257:248:13","statements":[{"nativeSrc":"26267:26:13","nodeType":"YulAssignment","src":"26267:26:13","value":{"arguments":[{"name":"headStart","nativeSrc":"26279:9:13","nodeType":"YulIdentifier","src":"26279:9:13"},{"kind":"number","nativeSrc":"26290:2:13","nodeType":"YulLiteral","src":"26290:2:13","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26275:3:13","nodeType":"YulIdentifier","src":"26275:3:13"},"nativeSrc":"26275:18:13","nodeType":"YulFunctionCall","src":"26275:18:13"},"variableNames":[{"name":"tail","nativeSrc":"26267:4:13","nodeType":"YulIdentifier","src":"26267:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26314:9:13","nodeType":"YulIdentifier","src":"26314:9:13"},{"kind":"number","nativeSrc":"26325:1:13","nodeType":"YulLiteral","src":"26325:1:13","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"26310:3:13","nodeType":"YulIdentifier","src":"26310:3:13"},"nativeSrc":"26310:17:13","nodeType":"YulFunctionCall","src":"26310:17:13"},{"arguments":[{"name":"tail","nativeSrc":"26333:4:13","nodeType":"YulIdentifier","src":"26333:4:13"},{"name":"headStart","nativeSrc":"26339:9:13","nodeType":"YulIdentifier","src":"26339:9:13"}],"functionName":{"name":"sub","nativeSrc":"26329:3:13","nodeType":"YulIdentifier","src":"26329:3:13"},"nativeSrc":"26329:20:13","nodeType":"YulFunctionCall","src":"26329:20:13"}],"functionName":{"name":"mstore","nativeSrc":"26303:6:13","nodeType":"YulIdentifier","src":"26303:6:13"},"nativeSrc":"26303:47:13","nodeType":"YulFunctionCall","src":"26303:47:13"},"nativeSrc":"26303:47:13","nodeType":"YulExpressionStatement","src":"26303:47:13"},{"nativeSrc":"26359:139:13","nodeType":"YulAssignment","src":"26359:139:13","value":{"arguments":[{"name":"tail","nativeSrc":"26493:4:13","nodeType":"YulIdentifier","src":"26493:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nativeSrc":"26367:124:13","nodeType":"YulIdentifier","src":"26367:124:13"},"nativeSrc":"26367:131:13","nodeType":"YulFunctionCall","src":"26367:131:13"},"variableNames":[{"name":"tail","nativeSrc":"26359:4:13","nodeType":"YulIdentifier","src":"26359:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"26086:419:13","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26237:9:13","nodeType":"YulTypedName","src":"26237:9:13","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26252:4:13","nodeType":"YulTypedName","src":"26252:4:13","type":""}],"src":"26086:419:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d(memPtr) {\n\n        mstore(add(memPtr, 0), \"max 3 NFTs\")\n\n    }\n\n    function abi_encode_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 10)\n        store_literal_in_memory_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_405007a540d864c1e9987f80da557d13960e587053445908df6af5bf22bf261d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061010b5760003560e01c806342842e0e116100a257806395d89b411161007157806395d89b41146102ca578063a22cb465146102e8578063b88d4fde14610304578063c87b56dd14610320578063e985e9c5146103505761010b565b806342842e0e1461021e578063438a67e71461023a5780636352211e1461026a57806370a082311461029a5761010b565b80631249c58b116100de5780631249c58b146101aa57806318160ddd146101b457806323b872dd146101d257806326e4baae146101ee5761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a6004803603810190610125919061197f565b610380565b60405161013791906119c7565b60405180910390f35b610148610462565b6040516101559190611a72565b60405180910390f35b61017860048036038101906101739190611aca565b6104f4565b6040516101859190611b38565b60405180910390f35b6101a860048036038101906101a39190611b7f565b61053a565b005b6101b2610651565b005b6101bc61074f565b6040516101c99190611bce565b60405180910390f35b6101ec60048036038101906101e79190611be9565b610755565b005b61020860048036038101906102039190611c3c565b6107b5565b60405161021591906119c7565b60405180910390f35b61023860048036038101906102339190611be9565b6107ca565b005b610254600480360381019061024f9190611c3c565b6107ea565b6040516102619190611bce565b60405180910390f35b610284600480360381019061027f9190611aca565b610802565b6040516102919190611b38565b60405180910390f35b6102b460048036038101906102af9190611c3c565b610888565b6040516102c19190611bce565b60405180910390f35b6102d261093f565b6040516102df9190611a72565b60405180910390f35b61030260048036038101906102fd9190611c95565b6109d1565b005b61031e60048036038101906103199190611e0a565b6109e7565b005b61033a60048036038101906103359190611aca565b610a49565b6040516103479190611a72565b60405180910390f35b61036a60048036038101906103659190611e8d565b610ab1565b60405161037791906119c7565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045b575061045a82610b45565b5b9050919050565b60606000805461047190611efc565b80601f016020809104026020016040519081016040528092919081815260200182805461049d90611efc565b80156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b5050505050905090565b60006104ff82610baf565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061054582610802565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90611f9f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105d4610bfa565b73ffffffffffffffffffffffffffffffffffffffff1614806106035750610602816105fd610bfa565b610ab1565b5b610642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063990612031565b60405180910390fd5b61064c8383610c02565b505050565b6003600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156106d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cb9061209d565b60405180910390fd5b600760008154809291906106e7906120ec565b91905055506106f833600754610cbb565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610748906120ec565b9190505550565b60075481565b610766610760610bfa565b82610cd9565b6107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c906121a6565b60405180910390fd5b6107b0838383610d6e565b505050565b600060056107c283610888565b149050919050565b6107e5838383604051806020016040528060008152506109e7565b505050565b60066020528060005260406000206000915090505481565b60008061080e83611067565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690612212565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef906122a4565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461094e90611efc565b80601f016020809104026020016040519081016040528092919081815260200182805461097a90611efc565b80156109c75780601f1061099c576101008083540402835291602001916109c7565b820191906000526020600020905b8154815290600101906020018083116109aa57829003601f168201915b5050505050905090565b6109e36109dc610bfa565b83836110a4565b5050565b6109f86109f2610bfa565b83610cd9565b610a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2e906121a6565b60405180910390fd5b610a4384848484611210565b50505050565b6060610a5482610baf565b6000610a5e61126c565b90506000815111610a7e5760405180602001604052806000815250610aa9565b80610a8884611283565b604051602001610a99929190612300565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bb881611351565b610bf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bee90612212565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610c7583610802565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610cd5828260405180602001604052806000815250611392565b5050565b600080610ce583610802565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d275750610d268185610ab1565b5b80610d6557508373ffffffffffffffffffffffffffffffffffffffff16610d4d846104f4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d8e82610802565b73ffffffffffffffffffffffffffffffffffffffff1614610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb90612396565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90612428565b60405180910390fd5b610e6083838360016113ed565b8273ffffffffffffffffffffffffffffffffffffffff16610e8082610802565b73ffffffffffffffffffffffffffffffffffffffff1614610ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecd90612396565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461106283838360016113f3565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110990612494565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161120391906119c7565b60405180910390a3505050565b61121b848484610d6e565b611227848484846113f9565b611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125d90612526565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161129284611580565b01905060008167ffffffffffffffff8111156112b1576112b0611cdf565b5b6040519080825280601f01601f1916602001820160405280156112e35781602001600182028036833780820191505090505b509050600082602001820190505b600115611346578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161133a57611339612546565b5b049450600085036112f1575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661137383611067565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61139c83836116d3565b6113a960008484846113f9565b6113e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113df90612526565b60405180910390fd5b505050565b50505050565b50505050565b600061141a8473ffffffffffffffffffffffffffffffffffffffff166118f0565b15611573578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611443610bfa565b8786866040518563ffffffff1660e01b815260040161146594939291906125ca565b6020604051808303816000875af19250505080156114a157506040513d601f19601f8201168201806040525081019061149e919061262b565b60015b611523573d80600081146114d1576040519150601f19603f3d011682016040523d82523d6000602084013e6114d6565b606091505b50600081510361151b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151290612526565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611578565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106115de577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816115d4576115d3612546565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061161b576d04ee2d6d415b85acef8100000000838161161157611610612546565b5b0492506020810190505b662386f26fc10000831061164a57662386f26fc1000083816116405761163f612546565b5b0492506010810190505b6305f5e1008310611673576305f5e100838161166957611668612546565b5b0492506008810190505b612710831061169857612710838161168e5761168d612546565b5b0492506004810190505b606483106116bb57606483816116b1576116b0612546565b5b0492506002810190505b600a83106116ca576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611742576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611739906126a4565b60405180910390fd5b61174b81611351565b1561178b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178290612710565b60405180910390fd5b6117996000838360016113ed565b6117a281611351565b156117e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d990612710565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46118ec6000838360016113f3565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61195c81611927565b811461196757600080fd5b50565b60008135905061197981611953565b92915050565b6000602082840312156119955761199461191d565b5b60006119a38482850161196a565b91505092915050565b60008115159050919050565b6119c1816119ac565b82525050565b60006020820190506119dc60008301846119b8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a1c578082015181840152602081019050611a01565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a44826119e2565b611a4e81856119ed565b9350611a5e8185602086016119fe565b611a6781611a28565b840191505092915050565b60006020820190508181036000830152611a8c8184611a39565b905092915050565b6000819050919050565b611aa781611a94565b8114611ab257600080fd5b50565b600081359050611ac481611a9e565b92915050565b600060208284031215611ae057611adf61191d565b5b6000611aee84828501611ab5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2282611af7565b9050919050565b611b3281611b17565b82525050565b6000602082019050611b4d6000830184611b29565b92915050565b611b5c81611b17565b8114611b6757600080fd5b50565b600081359050611b7981611b53565b92915050565b60008060408385031215611b9657611b9561191d565b5b6000611ba485828601611b6a565b9250506020611bb585828601611ab5565b9150509250929050565b611bc881611a94565b82525050565b6000602082019050611be36000830184611bbf565b92915050565b600080600060608486031215611c0257611c0161191d565b5b6000611c1086828701611b6a565b9350506020611c2186828701611b6a565b9250506040611c3286828701611ab5565b9150509250925092565b600060208284031215611c5257611c5161191d565b5b6000611c6084828501611b6a565b91505092915050565b611c72816119ac565b8114611c7d57600080fd5b50565b600081359050611c8f81611c69565b92915050565b60008060408385031215611cac57611cab61191d565b5b6000611cba85828601611b6a565b9250506020611ccb85828601611c80565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d1782611a28565b810181811067ffffffffffffffff82111715611d3657611d35611cdf565b5b80604052505050565b6000611d49611913565b9050611d558282611d0e565b919050565b600067ffffffffffffffff821115611d7557611d74611cdf565b5b611d7e82611a28565b9050602081019050919050565b82818337600083830152505050565b6000611dad611da884611d5a565b611d3f565b905082815260208101848484011115611dc957611dc8611cda565b5b611dd4848285611d8b565b509392505050565b600082601f830112611df157611df0611cd5565b5b8135611e01848260208601611d9a565b91505092915050565b60008060008060808587031215611e2457611e2361191d565b5b6000611e3287828801611b6a565b9450506020611e4387828801611b6a565b9350506040611e5487828801611ab5565b925050606085013567ffffffffffffffff811115611e7557611e74611922565b5b611e8187828801611ddc565b91505092959194509250565b60008060408385031215611ea457611ea361191d565b5b6000611eb285828601611b6a565b9250506020611ec385828601611b6a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f1457607f821691505b602082108103611f2757611f26611ecd565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611f896021836119ed565b9150611f9482611f2d565b604082019050919050565b60006020820190508181036000830152611fb881611f7c565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061201b603d836119ed565b915061202682611fbf565b604082019050919050565b6000602082019050818103600083015261204a8161200e565b9050919050565b7f6d61782033204e46547300000000000000000000000000000000000000000000600082015250565b6000612087600a836119ed565b915061209282612051565b602082019050919050565b600060208201905081810360008301526120b68161207a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120f782611a94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612129576121286120bd565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612190602d836119ed565b915061219b82612134565b604082019050919050565b600060208201905081810360008301526121bf81612183565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006121fc6018836119ed565b9150612207826121c6565b602082019050919050565b6000602082019050818103600083015261222b816121ef565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061228e6029836119ed565b915061229982612232565b604082019050919050565b600060208201905081810360008301526122bd81612281565b9050919050565b600081905092915050565b60006122da826119e2565b6122e481856122c4565b93506122f48185602086016119fe565b80840191505092915050565b600061230c82856122cf565b915061231882846122cf565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006123806025836119ed565b915061238b82612324565b604082019050919050565b600060208201905081810360008301526123af81612373565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006124126024836119ed565b915061241d826123b6565b604082019050919050565b6000602082019050818103600083015261244181612405565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061247e6019836119ed565b915061248982612448565b602082019050919050565b600060208201905081810360008301526124ad81612471565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006125106032836119ed565b915061251b826124b4565b604082019050919050565b6000602082019050818103600083015261253f81612503565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061259c82612575565b6125a68185612580565b93506125b68185602086016119fe565b6125bf81611a28565b840191505092915050565b60006080820190506125df6000830187611b29565b6125ec6020830186611b29565b6125f96040830185611bbf565b818103606083015261260b8184612591565b905095945050505050565b60008151905061262581611953565b92915050565b6000602082840312156126415761264061191d565b5b600061264f84828501612616565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061268e6020836119ed565b915061269982612658565b602082019050919050565b600060208201905081810360008301526126bd81612681565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006126fa601c836119ed565b9150612705826126c4565b602082019050919050565b60006020820190508181036000830152612729816126ed565b905091905056fea2646970667358221220e12193281bedb2a0e3b2907d249ab48377817abbb9a4bcdfde9e2eb9de8be3e664736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42842E0E GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x350 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x438A67E7 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x29A JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1249C58B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x26E4BAAE EQ PUSH2 0x1EE JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x380 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH2 0x462 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x1B7F JUMP JUMPDEST PUSH2 0x53A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x651 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BC PUSH2 0x74F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x755 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x208 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH2 0x7B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x215 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x238 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x233 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x7CA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x254 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24F SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH2 0x7EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x261 SWAP2 SWAP1 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x284 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27F SWAP2 SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x802 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D2 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x302 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FD SWAP2 SWAP1 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x9D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x365 SWAP2 SWAP1 PUSH2 0x1E8D JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x44B JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x45B JUMPI POP PUSH2 0x45A DUP3 PUSH2 0xB45 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x471 SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x49D SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4BF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4EA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4CD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FF DUP3 PUSH2 0xBAF JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x545 DUP3 PUSH2 0x802 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AC SWAP1 PUSH2 0x1F9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5D4 PUSH2 0xBFA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x603 JUMPI POP PUSH2 0x602 DUP2 PUSH2 0x5FD PUSH2 0xBFA JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST JUMPDEST PUSH2 0x642 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x639 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x64C DUP4 DUP4 PUSH2 0xC02 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6CB SWAP1 PUSH2 0x209D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x6E7 SWAP1 PUSH2 0x20EC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x6F8 CALLER PUSH1 0x7 SLOAD PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x748 SWAP1 PUSH2 0x20EC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x766 PUSH2 0x760 PUSH2 0xBFA JUMP JUMPDEST DUP3 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x7A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C SWAP1 PUSH2 0x21A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7B0 DUP4 DUP4 DUP4 PUSH2 0xD6E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH2 0x7C2 DUP4 PUSH2 0x888 JUMP JUMPDEST EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E5 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x80E DUP4 PUSH2 0x1067 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x876 SWAP1 PUSH2 0x2212 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8EF SWAP1 PUSH2 0x22A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x94E SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x97A SWAP1 PUSH2 0x1EFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x99C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9E3 PUSH2 0x9DC PUSH2 0xBFA JUMP JUMPDEST DUP4 DUP4 PUSH2 0x10A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9F8 PUSH2 0x9F2 PUSH2 0xBFA JUMP JUMPDEST DUP4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0xA37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2E SWAP1 PUSH2 0x21A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA43 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1210 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA54 DUP3 PUSH2 0xBAF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5E PUSH2 0x126C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAA9 JUMP JUMPDEST DUP1 PUSH2 0xA88 DUP5 PUSH2 0x1283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA99 SWAP3 SWAP2 SWAP1 PUSH2 0x2300 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB8 DUP2 PUSH2 0x1351 JUMP JUMPDEST PUSH2 0xBF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBEE SWAP1 PUSH2 0x2212 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC75 DUP4 PUSH2 0x802 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xCD5 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1392 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCE5 DUP4 PUSH2 0x802 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xD27 JUMPI POP PUSH2 0xD26 DUP2 DUP6 PUSH2 0xAB1 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xD65 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD4D DUP5 PUSH2 0x4F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD8E DUP3 PUSH2 0x802 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDDB SWAP1 PUSH2 0x2396 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE4A SWAP1 PUSH2 0x2428 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE60 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13ED JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE80 DUP3 PUSH2 0x802 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xED6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xECD SWAP1 PUSH2 0x2396 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1062 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1112 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1109 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1203 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x121B DUP5 DUP5 DUP5 PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x1227 DUP5 DUP5 DUP5 DUP5 PUSH2 0x13F9 JUMP JUMPDEST PUSH2 0x1266 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x125D SWAP1 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1292 DUP5 PUSH2 0x1580 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12B1 JUMPI PUSH2 0x12B0 PUSH2 0x1CDF JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12E3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1346 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x133A JUMPI PUSH2 0x1339 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x12F1 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1373 DUP4 PUSH2 0x1067 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x139C DUP4 DUP4 PUSH2 0x16D3 JUMP JUMPDEST PUSH2 0x13A9 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x13F9 JUMP JUMPDEST PUSH2 0x13E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13DF SWAP1 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x141A DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18F0 JUMP JUMPDEST ISZERO PUSH2 0x1573 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1443 PUSH2 0xBFA JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1465 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14A1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x149E SWAP2 SWAP1 PUSH2 0x262B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1523 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14D1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14D6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x151B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1512 SWAP1 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x15DE JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x15D4 JUMPI PUSH2 0x15D3 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x161B JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1611 JUMPI PUSH2 0x1610 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x164A JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1640 JUMPI PUSH2 0x163F PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1673 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1669 JUMPI PUSH2 0x1668 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1698 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x168E JUMPI PUSH2 0x168D PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x16BB JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x16B1 JUMPI PUSH2 0x16B0 PUSH2 0x2546 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x16CA JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1742 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1739 SWAP1 PUSH2 0x26A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x174B DUP2 PUSH2 0x1351 JUMP JUMPDEST ISZERO PUSH2 0x178B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1782 SWAP1 PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1799 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13ED JUMP JUMPDEST PUSH2 0x17A2 DUP2 PUSH2 0x1351 JUMP JUMPDEST ISZERO PUSH2 0x17E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D9 SWAP1 PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x18EC PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x13F3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x195C DUP2 PUSH2 0x1927 JUMP JUMPDEST DUP2 EQ PUSH2 0x1967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1979 DUP2 PUSH2 0x1953 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1995 JUMPI PUSH2 0x1994 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A3 DUP5 DUP3 DUP6 ADD PUSH2 0x196A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19C1 DUP2 PUSH2 0x19AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x19DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A1C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 DUP3 PUSH2 0x19E2 JUMP JUMPDEST PUSH2 0x1A4E DUP2 DUP6 PUSH2 0x19ED JUMP JUMPDEST SWAP4 POP PUSH2 0x1A5E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19FE JUMP JUMPDEST PUSH2 0x1A67 DUP2 PUSH2 0x1A28 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A8C DUP2 DUP5 PUSH2 0x1A39 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA7 DUP2 PUSH2 0x1A94 JUMP JUMPDEST DUP2 EQ PUSH2 0x1AB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AC4 DUP2 PUSH2 0x1A9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AE0 JUMPI PUSH2 0x1ADF PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AEE DUP5 DUP3 DUP6 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B22 DUP3 PUSH2 0x1AF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B32 DUP2 PUSH2 0x1B17 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B4D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1B29 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B5C DUP2 PUSH2 0x1B17 JUMP JUMPDEST DUP2 EQ PUSH2 0x1B67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B79 DUP2 PUSH2 0x1B53 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B96 JUMPI PUSH2 0x1B95 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA4 DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1BB5 DUP6 DUP3 DUP7 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC8 DUP2 PUSH2 0x1A94 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BE3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BBF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C02 JUMPI PUSH2 0x1C01 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C10 DUP7 DUP3 DUP8 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C21 DUP7 DUP3 DUP8 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C32 DUP7 DUP3 DUP8 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C52 JUMPI PUSH2 0x1C51 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C60 DUP5 DUP3 DUP6 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C72 DUP2 PUSH2 0x19AC JUMP JUMPDEST DUP2 EQ PUSH2 0x1C7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C8F DUP2 PUSH2 0x1C69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CAC JUMPI PUSH2 0x1CAB PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CBA DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1CCB DUP6 DUP3 DUP7 ADD PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1D17 DUP3 PUSH2 0x1A28 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1D36 JUMPI PUSH2 0x1D35 PUSH2 0x1CDF JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D49 PUSH2 0x1913 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D55 DUP3 DUP3 PUSH2 0x1D0E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D75 JUMPI PUSH2 0x1D74 PUSH2 0x1CDF JUMP JUMPDEST JUMPDEST PUSH2 0x1D7E DUP3 PUSH2 0x1A28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAD PUSH2 0x1DA8 DUP5 PUSH2 0x1D5A JUMP JUMPDEST PUSH2 0x1D3F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1DC9 JUMPI PUSH2 0x1DC8 PUSH2 0x1CDA JUMP JUMPDEST JUMPDEST PUSH2 0x1DD4 DUP5 DUP3 DUP6 PUSH2 0x1D8B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DF1 JUMPI PUSH2 0x1DF0 PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E01 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D9A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E24 JUMPI PUSH2 0x1E23 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E32 DUP8 DUP3 DUP9 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1E43 DUP8 DUP3 DUP9 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1E54 DUP8 DUP3 DUP9 ADD PUSH2 0x1AB5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E74 PUSH2 0x1922 JUMP JUMPDEST JUMPDEST PUSH2 0x1E81 DUP8 DUP3 DUP9 ADD PUSH2 0x1DDC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EA4 JUMPI PUSH2 0x1EA3 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1EB2 DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1EC3 DUP6 DUP3 DUP7 ADD PUSH2 0x1B6A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1F14 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F27 JUMPI PUSH2 0x1F26 PUSH2 0x1ECD JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F89 PUSH1 0x21 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x1F94 DUP3 PUSH2 0x1F2D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FB8 DUP2 PUSH2 0x1F7C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x201B PUSH1 0x3D DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2026 DUP3 PUSH2 0x1FBF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204A DUP2 PUSH2 0x200E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6D61782033204E46547300000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2087 PUSH1 0xA DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2092 DUP3 PUSH2 0x2051 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20B6 DUP2 PUSH2 0x207A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x20F7 DUP3 PUSH2 0x1A94 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2129 JUMPI PUSH2 0x2128 PUSH2 0x20BD JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2190 PUSH1 0x2D DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x219B DUP3 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21BF DUP2 PUSH2 0x2183 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21FC PUSH1 0x18 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2207 DUP3 PUSH2 0x21C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x222B DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x228E PUSH1 0x29 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2299 DUP3 PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22BD DUP2 PUSH2 0x2281 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22DA DUP3 PUSH2 0x19E2 JUMP JUMPDEST PUSH2 0x22E4 DUP2 DUP6 PUSH2 0x22C4 JUMP JUMPDEST SWAP4 POP PUSH2 0x22F4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19FE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230C DUP3 DUP6 PUSH2 0x22CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2318 DUP3 DUP5 PUSH2 0x22CF JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2380 PUSH1 0x25 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x238B DUP3 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23AF DUP2 PUSH2 0x2373 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2412 PUSH1 0x24 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x241D DUP3 PUSH2 0x23B6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2441 DUP2 PUSH2 0x2405 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x247E PUSH1 0x19 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2489 DUP3 PUSH2 0x2448 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24AD DUP2 PUSH2 0x2471 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2510 PUSH1 0x32 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x251B DUP3 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x253F DUP2 PUSH2 0x2503 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x259C DUP3 PUSH2 0x2575 JUMP JUMPDEST PUSH2 0x25A6 DUP2 DUP6 PUSH2 0x2580 JUMP JUMPDEST SWAP4 POP PUSH2 0x25B6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19FE JUMP JUMPDEST PUSH2 0x25BF DUP2 PUSH2 0x1A28 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x25DF PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1B29 JUMP JUMPDEST PUSH2 0x25EC PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1B29 JUMP JUMPDEST PUSH2 0x25F9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BBF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x260B DUP2 DUP5 PUSH2 0x2591 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2625 DUP2 PUSH2 0x1953 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2641 JUMPI PUSH2 0x2640 PUSH2 0x191D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x264F DUP5 DUP3 DUP6 ADD PUSH2 0x2616 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x268E PUSH1 0x20 DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2699 DUP3 PUSH2 0x2658 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26BD DUP2 PUSH2 0x2681 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26FA PUSH1 0x1C DUP4 PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP PUSH2 0x2705 DUP3 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2729 DUP2 PUSH2 0x26ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0x21 SWAP4 0x28 SHL 0xED 0xB2 LOG0 0xE3 0xB2 SWAP1 PUSH30 0x249AB48377817ABBB9A4BCDFDE9E2EB9DE8BE3E664736F6C634300081B00 CALLER ","sourceMap":"172:519:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;372:197:12;;;:::i;:::-;;291:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4612:326:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;575:114:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5004:179:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;238:47:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;372:197:12:-;443:1;415:12;:24;428:10;415:24;;;;;;;;;;;;;;;;:29;;407:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;469:11;;:13;;;;;;;;;:::i;:::-;;;;;;492:34;502:10;514:11;;492:9;:34::i;:::-;536:12;:24;549:10;536:24;;;;;;;;;;;;;;;;:26;;;;;;;;;:::i;:::-;;;;;;372:197::o;291:26::-;;;;:::o;4612:326:1:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;575:114:12:-;634:4;681:1;657:20;667:9;657;:20::i;:::-;:25;650:32;;575:114;;;:::o;5004:179:1:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;238:47:12:-;;;;;;;;;;;;;;;;;:::o;2190:219:1:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:8:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;8131:108::-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;:::-;8131:108;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:7:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:1:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;8460:309::-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8460:309;;;:::o;15698:154::-;;;;;:::o;16558:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:10:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;9091:920:1:-;9184:1;9170:16;;:2;:16;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;1175:320:5:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:248::-;1880:1;1890:113;1904:6;1901:1;1898:13;1890:113;;;1989:1;1984:3;1980:11;1974:18;1970:1;1965:3;1961:11;1954:39;1926:2;1923:1;1919:10;1914:15;;1890:113;;;2037:1;2028:6;2023:3;2019:16;2012:27;1860:186;1798:248;;;:::o;2052:102::-;2093:6;2144:2;2140:7;2135:2;2128:5;2124:14;2120:28;2110:38;;2052:102;;;:::o;2160:377::-;2248:3;2276:39;2309:5;2276:39;:::i;:::-;2331:71;2395:6;2390:3;2331:71;:::i;:::-;2324:78;;2411:65;2469:6;2464:3;2457:4;2450:5;2446:16;2411:65;:::i;:::-;2501:29;2523:6;2501:29;:::i;:::-;2496:3;2492:39;2485:46;;2252:285;2160:377;;;;:::o;2543:313::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2743:9;2737:4;2733:20;2729:1;2718:9;2714:17;2707:47;2771:78;2844:4;2835:6;2771:78;:::i;:::-;2763:86;;2543:313;;;;:::o;2862:77::-;2899:7;2928:5;2917:16;;2862:77;;;:::o;2945:122::-;3018:24;3036:5;3018:24;:::i;:::-;3011:5;3008:35;2998:63;;3057:1;3054;3047:12;2998:63;2945:122;:::o;3073:139::-;3119:5;3157:6;3144:20;3135:29;;3173:33;3200:5;3173:33;:::i;:::-;3073:139;;;;:::o;3218:329::-;3277:6;3326:2;3314:9;3305:7;3301:23;3297:32;3294:119;;;3332:79;;:::i;:::-;3294:119;3452:1;3477:53;3522:7;3513:6;3502:9;3498:22;3477:53;:::i;:::-;3467:63;;3423:117;3218:329;;;;:::o;3553:126::-;3590:7;3630:42;3623:5;3619:54;3608:65;;3553:126;;;:::o;3685:96::-;3722:7;3751:24;3769:5;3751:24;:::i;:::-;3740:35;;3685:96;;;:::o;3787:118::-;3874:24;3892:5;3874:24;:::i;:::-;3869:3;3862:37;3787:118;;:::o;3911:222::-;4004:4;4042:2;4031:9;4027:18;4019:26;;4055:71;4123:1;4112:9;4108:17;4099:6;4055:71;:::i;:::-;3911:222;;;;:::o;4139:122::-;4212:24;4230:5;4212:24;:::i;:::-;4205:5;4202:35;4192:63;;4251:1;4248;4241:12;4192:63;4139:122;:::o;4267:139::-;4313:5;4351:6;4338:20;4329:29;;4367:33;4394:5;4367:33;:::i;:::-;4267:139;;;;:::o;4412:474::-;4480:6;4488;4537:2;4525:9;4516:7;4512:23;4508:32;4505:119;;;4543:79;;:::i;:::-;4505:119;4663:1;4688:53;4733:7;4724:6;4713:9;4709:22;4688:53;:::i;:::-;4678:63;;4634:117;4790:2;4816:53;4861:7;4852:6;4841:9;4837:22;4816:53;:::i;:::-;4806:63;;4761:118;4412:474;;;;;:::o;4892:118::-;4979:24;4997:5;4979:24;:::i;:::-;4974:3;4967:37;4892:118;;:::o;5016:222::-;5109:4;5147:2;5136:9;5132:18;5124:26;;5160:71;5228:1;5217:9;5213:17;5204:6;5160:71;:::i;:::-;5016:222;;;;:::o;5244:619::-;5321:6;5329;5337;5386:2;5374:9;5365:7;5361:23;5357:32;5354:119;;;5392:79;;:::i;:::-;5354:119;5512:1;5537:53;5582:7;5573:6;5562:9;5558:22;5537:53;:::i;:::-;5527:63;;5483:117;5639:2;5665:53;5710:7;5701:6;5690:9;5686:22;5665:53;:::i;:::-;5655:63;;5610:118;5767:2;5793:53;5838:7;5829:6;5818:9;5814:22;5793:53;:::i;:::-;5783:63;;5738:118;5244:619;;;;;:::o;5869:329::-;5928:6;5977:2;5965:9;5956:7;5952:23;5948:32;5945:119;;;5983:79;;:::i;:::-;5945:119;6103:1;6128:53;6173:7;6164:6;6153:9;6149:22;6128:53;:::i;:::-;6118:63;;6074:117;5869:329;;;;:::o;6204:116::-;6274:21;6289:5;6274:21;:::i;:::-;6267:5;6264:32;6254:60;;6310:1;6307;6300:12;6254:60;6204:116;:::o;6326:133::-;6369:5;6407:6;6394:20;6385:29;;6423:30;6447:5;6423:30;:::i;:::-;6326:133;;;;:::o;6465:468::-;6530:6;6538;6587:2;6575:9;6566:7;6562:23;6558:32;6555:119;;;6593:79;;:::i;:::-;6555:119;6713:1;6738:53;6783:7;6774:6;6763:9;6759:22;6738:53;:::i;:::-;6728:63;;6684:117;6840:2;6866:50;6908:7;6899:6;6888:9;6884:22;6866:50;:::i;:::-;6856:60;;6811:115;6465:468;;;;;:::o;6939:117::-;7048:1;7045;7038:12;7062:117;7171:1;7168;7161:12;7185:180;7233:77;7230:1;7223:88;7330:4;7327:1;7320:15;7354:4;7351:1;7344:15;7371:281;7454:27;7476:4;7454:27;:::i;:::-;7446:6;7442:40;7584:6;7572:10;7569:22;7548:18;7536:10;7533:34;7530:62;7527:88;;;7595:18;;:::i;:::-;7527:88;7635:10;7631:2;7624:22;7414:238;7371:281;;:::o;7658:129::-;7692:6;7719:20;;:::i;:::-;7709:30;;7748:33;7776:4;7768:6;7748:33;:::i;:::-;7658:129;;;:::o;7793:307::-;7854:4;7944:18;7936:6;7933:30;7930:56;;;7966:18;;:::i;:::-;7930:56;8004:29;8026:6;8004:29;:::i;:::-;7996:37;;8088:4;8082;8078:15;8070:23;;7793:307;;;:::o;8106:148::-;8204:6;8199:3;8194;8181:30;8245:1;8236:6;8231:3;8227:16;8220:27;8106:148;;;:::o;8260:423::-;8337:5;8362:65;8378:48;8419:6;8378:48;:::i;:::-;8362:65;:::i;:::-;8353:74;;8450:6;8443:5;8436:21;8488:4;8481:5;8477:16;8526:3;8517:6;8512:3;8508:16;8505:25;8502:112;;;8533:79;;:::i;:::-;8502:112;8623:54;8670:6;8665:3;8660;8623:54;:::i;:::-;8343:340;8260:423;;;;;:::o;8702:338::-;8757:5;8806:3;8799:4;8791:6;8787:17;8783:27;8773:122;;8814:79;;:::i;:::-;8773:122;8931:6;8918:20;8956:78;9030:3;9022:6;9015:4;9007:6;9003:17;8956:78;:::i;:::-;8947:87;;8763:277;8702:338;;;;:::o;9046:943::-;9141:6;9149;9157;9165;9214:3;9202:9;9193:7;9189:23;9185:33;9182:120;;;9221:79;;:::i;:::-;9182:120;9341:1;9366:53;9411:7;9402:6;9391:9;9387:22;9366:53;:::i;:::-;9356:63;;9312:117;9468:2;9494:53;9539:7;9530:6;9519:9;9515:22;9494:53;:::i;:::-;9484:63;;9439:118;9596:2;9622:53;9667:7;9658:6;9647:9;9643:22;9622:53;:::i;:::-;9612:63;;9567:118;9752:2;9741:9;9737:18;9724:32;9783:18;9775:6;9772:30;9769:117;;;9805:79;;:::i;:::-;9769:117;9910:62;9964:7;9955:6;9944:9;9940:22;9910:62;:::i;:::-;9900:72;;9695:287;9046:943;;;;;;;:::o;9995:474::-;10063:6;10071;10120:2;10108:9;10099:7;10095:23;10091:32;10088:119;;;10126:79;;:::i;:::-;10088:119;10246:1;10271:53;10316:7;10307:6;10296:9;10292:22;10271:53;:::i;:::-;10261:63;;10217:117;10373:2;10399:53;10444:7;10435:6;10424:9;10420:22;10399:53;:::i;:::-;10389:63;;10344:118;9995:474;;;;;:::o;10475:180::-;10523:77;10520:1;10513:88;10620:4;10617:1;10610:15;10644:4;10641:1;10634:15;10661:320;10705:6;10742:1;10736:4;10732:12;10722:22;;10789:1;10783:4;10779:12;10810:18;10800:81;;10866:4;10858:6;10854:17;10844:27;;10800:81;10928:2;10920:6;10917:14;10897:18;10894:38;10891:84;;10947:18;;:::i;:::-;10891:84;10712:269;10661:320;;;:::o;10987:220::-;11127:34;11123:1;11115:6;11111:14;11104:58;11196:3;11191:2;11183:6;11179:15;11172:28;10987:220;:::o;11213:366::-;11355:3;11376:67;11440:2;11435:3;11376:67;:::i;:::-;11369:74;;11452:93;11541:3;11452:93;:::i;:::-;11570:2;11565:3;11561:12;11554:19;;11213:366;;;:::o;11585:419::-;11751:4;11789:2;11778:9;11774:18;11766:26;;11838:9;11832:4;11828:20;11824:1;11813:9;11809:17;11802:47;11866:131;11992:4;11866:131;:::i;:::-;11858:139;;11585:419;;;:::o;12010:248::-;12150:34;12146:1;12138:6;12134:14;12127:58;12219:31;12214:2;12206:6;12202:15;12195:56;12010:248;:::o;12264:366::-;12406:3;12427:67;12491:2;12486:3;12427:67;:::i;:::-;12420:74;;12503:93;12592:3;12503:93;:::i;:::-;12621:2;12616:3;12612:12;12605:19;;12264:366;;;:::o;12636:419::-;12802:4;12840:2;12829:9;12825:18;12817:26;;12889:9;12883:4;12879:20;12875:1;12864:9;12860:17;12853:47;12917:131;13043:4;12917:131;:::i;:::-;12909:139;;12636:419;;;:::o;13061:160::-;13201:12;13197:1;13189:6;13185:14;13178:36;13061:160;:::o;13227:366::-;13369:3;13390:67;13454:2;13449:3;13390:67;:::i;:::-;13383:74;;13466:93;13555:3;13466:93;:::i;:::-;13584:2;13579:3;13575:12;13568:19;;13227:366;;;:::o;13599:419::-;13765:4;13803:2;13792:9;13788:18;13780:26;;13852:9;13846:4;13842:20;13838:1;13827:9;13823:17;13816:47;13880:131;14006:4;13880:131;:::i;:::-;13872:139;;13599:419;;;:::o;14024:180::-;14072:77;14069:1;14062:88;14169:4;14166:1;14159:15;14193:4;14190:1;14183:15;14210:233;14249:3;14272:24;14290:5;14272:24;:::i;:::-;14263:33;;14318:66;14311:5;14308:77;14305:103;;14388:18;;:::i;:::-;14305:103;14435:1;14428:5;14424:13;14417:20;;14210:233;;;:::o;14449:232::-;14589:34;14585:1;14577:6;14573:14;14566:58;14658:15;14653:2;14645:6;14641:15;14634:40;14449:232;:::o;14687:366::-;14829:3;14850:67;14914:2;14909:3;14850:67;:::i;:::-;14843:74;;14926:93;15015:3;14926:93;:::i;:::-;15044:2;15039:3;15035:12;15028:19;;14687:366;;;:::o;15059:419::-;15225:4;15263:2;15252:9;15248:18;15240:26;;15312:9;15306:4;15302:20;15298:1;15287:9;15283:17;15276:47;15340:131;15466:4;15340:131;:::i;:::-;15332:139;;15059:419;;;:::o;15484:174::-;15624:26;15620:1;15612:6;15608:14;15601:50;15484:174;:::o;15664:366::-;15806:3;15827:67;15891:2;15886:3;15827:67;:::i;:::-;15820:74;;15903:93;15992:3;15903:93;:::i;:::-;16021:2;16016:3;16012:12;16005:19;;15664:366;;;:::o;16036:419::-;16202:4;16240:2;16229:9;16225:18;16217:26;;16289:9;16283:4;16279:20;16275:1;16264:9;16260:17;16253:47;16317:131;16443:4;16317:131;:::i;:::-;16309:139;;16036:419;;;:::o;16461:228::-;16601:34;16597:1;16589:6;16585:14;16578:58;16670:11;16665:2;16657:6;16653:15;16646:36;16461:228;:::o;16695:366::-;16837:3;16858:67;16922:2;16917:3;16858:67;:::i;:::-;16851:74;;16934:93;17023:3;16934:93;:::i;:::-;17052:2;17047:3;17043:12;17036:19;;16695:366;;;:::o;17067:419::-;17233:4;17271:2;17260:9;17256:18;17248:26;;17320:9;17314:4;17310:20;17306:1;17295:9;17291:17;17284:47;17348:131;17474:4;17348:131;:::i;:::-;17340:139;;17067:419;;;:::o;17492:148::-;17594:11;17631:3;17616:18;;17492:148;;;;:::o;17646:390::-;17752:3;17780:39;17813:5;17780:39;:::i;:::-;17835:89;17917:6;17912:3;17835:89;:::i;:::-;17828:96;;17933:65;17991:6;17986:3;17979:4;17972:5;17968:16;17933:65;:::i;:::-;18023:6;18018:3;18014:16;18007:23;;17756:280;17646:390;;;;:::o;18042:435::-;18222:3;18244:95;18335:3;18326:6;18244:95;:::i;:::-;18237:102;;18356:95;18447:3;18438:6;18356:95;:::i;:::-;18349:102;;18468:3;18461:10;;18042:435;;;;;:::o;18483:224::-;18623:34;18619:1;18611:6;18607:14;18600:58;18692:7;18687:2;18679:6;18675:15;18668:32;18483:224;:::o;18713:366::-;18855:3;18876:67;18940:2;18935:3;18876:67;:::i;:::-;18869:74;;18952:93;19041:3;18952:93;:::i;:::-;19070:2;19065:3;19061:12;19054:19;;18713:366;;;:::o;19085:419::-;19251:4;19289:2;19278:9;19274:18;19266:26;;19338:9;19332:4;19328:20;19324:1;19313:9;19309:17;19302:47;19366:131;19492:4;19366:131;:::i;:::-;19358:139;;19085:419;;;:::o;19510:223::-;19650:34;19646:1;19638:6;19634:14;19627:58;19719:6;19714:2;19706:6;19702:15;19695:31;19510:223;:::o;19739:366::-;19881:3;19902:67;19966:2;19961:3;19902:67;:::i;:::-;19895:74;;19978:93;20067:3;19978:93;:::i;:::-;20096:2;20091:3;20087:12;20080:19;;19739:366;;;:::o;20111:419::-;20277:4;20315:2;20304:9;20300:18;20292:26;;20364:9;20358:4;20354:20;20350:1;20339:9;20335:17;20328:47;20392:131;20518:4;20392:131;:::i;:::-;20384:139;;20111:419;;;:::o;20536:175::-;20676:27;20672:1;20664:6;20660:14;20653:51;20536:175;:::o;20717:366::-;20859:3;20880:67;20944:2;20939:3;20880:67;:::i;:::-;20873:74;;20956:93;21045:3;20956:93;:::i;:::-;21074:2;21069:3;21065:12;21058:19;;20717:366;;;:::o;21089:419::-;21255:4;21293:2;21282:9;21278:18;21270:26;;21342:9;21336:4;21332:20;21328:1;21317:9;21313:17;21306:47;21370:131;21496:4;21370:131;:::i;:::-;21362:139;;21089:419;;;:::o;21514:237::-;21654:34;21650:1;21642:6;21638:14;21631:58;21723:20;21718:2;21710:6;21706:15;21699:45;21514:237;:::o;21757:366::-;21899:3;21920:67;21984:2;21979:3;21920:67;:::i;:::-;21913:74;;21996:93;22085:3;21996:93;:::i;:::-;22114:2;22109:3;22105:12;22098:19;;21757:366;;;:::o;22129:419::-;22295:4;22333:2;22322:9;22318:18;22310:26;;22382:9;22376:4;22372:20;22368:1;22357:9;22353:17;22346:47;22410:131;22536:4;22410:131;:::i;:::-;22402:139;;22129:419;;;:::o;22554:180::-;22602:77;22599:1;22592:88;22699:4;22696:1;22689:15;22723:4;22720:1;22713:15;22740:98;22791:6;22825:5;22819:12;22809:22;;22740:98;;;:::o;22844:168::-;22927:11;22961:6;22956:3;22949:19;23001:4;22996:3;22992:14;22977:29;;22844:168;;;;:::o;23018:373::-;23104:3;23132:38;23164:5;23132:38;:::i;:::-;23186:70;23249:6;23244:3;23186:70;:::i;:::-;23179:77;;23265:65;23323:6;23318:3;23311:4;23304:5;23300:16;23265:65;:::i;:::-;23355:29;23377:6;23355:29;:::i;:::-;23350:3;23346:39;23339:46;;23108:283;23018:373;;;;:::o;23397:640::-;23592:4;23630:3;23619:9;23615:19;23607:27;;23644:71;23712:1;23701:9;23697:17;23688:6;23644:71;:::i;:::-;23725:72;23793:2;23782:9;23778:18;23769:6;23725:72;:::i;:::-;23807;23875:2;23864:9;23860:18;23851:6;23807:72;:::i;:::-;23926:9;23920:4;23916:20;23911:2;23900:9;23896:18;23889:48;23954:76;24025:4;24016:6;23954:76;:::i;:::-;23946:84;;23397:640;;;;;;;:::o;24043:141::-;24099:5;24130:6;24124:13;24115:22;;24146:32;24172:5;24146:32;:::i;:::-;24043:141;;;;:::o;24190:349::-;24259:6;24308:2;24296:9;24287:7;24283:23;24279:32;24276:119;;;24314:79;;:::i;:::-;24276:119;24434:1;24459:63;24514:7;24505:6;24494:9;24490:22;24459:63;:::i;:::-;24449:73;;24405:127;24190:349;;;;:::o;24545:182::-;24685:34;24681:1;24673:6;24669:14;24662:58;24545:182;:::o;24733:366::-;24875:3;24896:67;24960:2;24955:3;24896:67;:::i;:::-;24889:74;;24972:93;25061:3;24972:93;:::i;:::-;25090:2;25085:3;25081:12;25074:19;;24733:366;;;:::o;25105:419::-;25271:4;25309:2;25298:9;25294:18;25286:26;;25358:9;25352:4;25348:20;25344:1;25333:9;25329:17;25322:47;25386:131;25512:4;25386:131;:::i;:::-;25378:139;;25105:419;;;:::o;25530:178::-;25670:30;25666:1;25658:6;25654:14;25647:54;25530:178;:::o;25714:366::-;25856:3;25877:67;25941:2;25936:3;25877:67;:::i;:::-;25870:74;;25953:93;26042:3;25953:93;:::i;:::-;26071:2;26066:3;26062:12;26055:19;;25714:366;;;:::o;26086:419::-;26252:4;26290:2;26279:9;26275:18;26267:26;;26339:9;26333:4;26329:20;26325:1;26314:9;26310:17;26303:47;26367:131;26493:4;26367:131;:::i;:::-;26359:139;;26086:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2017200","executionCost":"infinite","totalCost":"infinite"},"external":{"amountMinted(address)":"2859","approve(address,uint256)":"infinite","balanceOf(address)":"2965","getApproved(uint256)":"5300","isApprovedForAll(address,address)":"infinite","mint()":"infinite","name()":"infinite","ownerOf(uint256)":"3066","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","success(address)":"3020","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenURI(uint256)":"3481","totalSupply()":"2474","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"amountMinted(address)":"438a67e7","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","mint()":"1249c58b","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","success(address)":"26e4baae","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attacker\",\"type\":\"address\"}],\"name\":\"success\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/riddles/Overmint1.sol\":\"Overmint1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/riddles/Overmint1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.27;\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract Overmint1 is ERC721 {\\n    using Address for address;\\n    mapping(address => uint256) public amountMinted;\\n    uint256 public totalSupply;\\n\\n    constructor() ERC721(\\\"Overmint1\\\", \\\"AT\\\") {}\\n\\n    function mint() external {\\n        require(amountMinted[msg.sender] <= 3, \\\"max 3 NFTs\\\");\\n        totalSupply++;\\n        _safeMint(msg.sender, totalSupply);\\n        amountMinted[msg.sender]++;\\n    }\\n\\n    function success(address _attacker) external view returns (bool) {\\n        return balanceOf(_attacker) == 5;\\n    }\\n}\\n\",\"keccak256\":\"0xd8d51110ab9e788ab892f0609d6de6bb9b0fed0641e891f5222f2ae006f12f9d\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":28,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":30,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":34,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":38,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":42,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":48,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2573,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"amountMinted","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2575,"contract":"contracts/riddles/Overmint1.sol:Overmint1","label":"totalSupply","offset":0,"slot":"7","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}